#!/usr/bin/env ruby

##
## minimal options parser
##
module Opts
  require "ostruct"
  FLAG_PREFIX    = "--"
  
  def self.parse_command(h, c)
    h[c.to_sym] = true
  end

  def self.parse_flag(h, f)
    (name, val) = f[2..-1].split("=")
    if val.nil?
      h[name.to_sym] = true
    else
      val = val.split(",")

      h[name.to_sym] = val.size == 1 ? val.first : val
    end
  end

  def self.parse(args = ARGV)    
    config = OpenStruct.new  

    if args.size > 0
      config = OpenStruct.new(**args.reduce(Hash.new) do |h, v|
        if v.start_with?(FLAG_PREFIX)
          parse_flag(h, v)
        else
          parse_command(h, v)
        end
        h
      end)
    end
    
    config
  end

  @@cached = nil
  def self.cached
    @@cached ||= self.parse
  end

  def self.method_missing(method, *args)
    cached.send(method, *args)
  end
end

module Syntax
  LICH_EXT  = %w(.rb .lic)
  SYNTAX_OK = "Syntax OK\n"

  def self.pending_files(range:)
    %x{git diff --name-only #{range}}
      .split(" ")
      .select {|file| 
        file.start_with?("scripts/") && LICH_EXT.include?(File.extname(file))
      }
  end

  def self.verify_file(file)
    left_col = file.rjust(30)
    puts "#{left_col}"
    ok = %x{ruby -c #{File.join(Dir.pwd, file)}} 
    exit(1) unless ok.eql?(SYNTAX_OK)
    puts ok.rjust(60)
  end
end

range = Opts.range || ENV.fetch("TRAVIS_COMMIT_RANGE")
puts "verifying commit range %s" % range
Syntax.pending_files(range: range)
      .each {|f| File.exist?(f) && Syntax.verify_file(f) }

