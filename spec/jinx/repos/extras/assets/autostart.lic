#quiet
=begin

  Automatically starts scripts when Lich starts.

  ;autostart help

        author: Tillmen (tillmen@lichproject.org)
  contributors: Athias, Doug
          game: any
          tags: core
       version: 0.52
      required: Lich >= 4.6.58

  changelog:
    0.52 (2021-01-04):
      Fix to only run ;repository download-updates if in autostart list instead of forced.
    0.51 (2020-09-09):
      Added LostRanger gtk_version method to detect GTK version
      Forcing unset-lich-updatable to prevent overwriting GTK3-enabled Lich only if GTK3 detected
      Exclude narost / alias from update list if GTK3 detected
      The above are only intended to be used in the GTK3 distro.
    0.5 (2020-07-05):
      Forced infomon and repository update to run at start
      Prevented duplicate runs of infomon
      Fixed bug with repository update not running
      Made go2 and narost defaults
      Formatting changes
    0.4 (2015-07-12):
      start infomon before other scripts
    0.3 (2014-11-23):
      add default settings on first run
    0.2 (2014-11-10):
      auto add infomon to global autostart list

=end

def gtk_version
    begin
        return 'not installed' unless Object.const_defined?(:Gtk)
        return 'unknown' unless Gtk.const_defined?(:Version)
        return Gtk::Version::STRING
    rescue
        return 'error'
    end
end

if Settings['scripts'].nil?
  Settings['scripts'] = Array.new
  Settings['scripts'].push(:name => 'lnet', :args => [])
  Settings['scripts'].push(:name => 'go2', :args => [])
  Settings['scripts'].push(:name => 'narost', :args => []) if gtk_version < "3"
  Settings['scripts'].push(:name => 'alias', :args => []) if gtk_version < "3"
end

if script.vars.empty?
  # Wait after login then unset lich updatable before any other action (GTK3 option only)
  start_script 'repository', ['unset-lich-updatable'] if gtk_version > "3"
  sleep 2.5
  did_something = false
  run_info = false
  run_repo = false
  for script_list in [ Settings['scripts'], CharSettings['scripts'] ]
    if script_list.class == Array
      if run_info == false
        # Run infomon
        start_script 'infomon'
        run_info = true
        sleep 2.5
      end
      if run_repo == false 
        # Run repository
        if script_list.find { |script| script[:name] == "repository"}
          start_script 'repository', ['download-updates']
          wait_while {running? 'repository'}
        end
        run_repo = true
      end
      # Loop through list
      for script_info in script_list
        if script_info[:name] == 'infomon' || script_info[:name] == 'repository'
          next
        else
          Script.start(script_info[:name], :args => script_info[:args])
        end
        did_something = true
      end
    end
  end
  unless did_something
    echo 'nothing to do'
  end
elsif (script.vars[1] =~ /^add$/i) and script.vars[2] and (script.vars[3] or script.vars[2] !~ /^\-\-global$/i)
  if script.vars[2] =~ /^\-\-global$/i
    script_list = Settings['scripts']
    script_list = Array.new unless script_list.class == Array
    if not Script.exists?(script.vars[3])
      respond "\n--- #{script.vars[3]} does not appear to be a valid script\n\n"
    elsif script_list.any? { |s| s[:name] == script.vars[3].downcase }
      respond "\n--- #{script.vars[3]} is already set to start at login for all characters\n\n"
    else
      script_list.push(:name => script.vars[3].downcase, :args => script.vars[4..-1])
      Settings['scripts'] = script_list
      respond "\n--- #{script.vars[3]} will now start at login for all characters\n\n"
    end
  else
    script_list = CharSettings['scripts']
    script_list = Array.new unless script_list.class == Array
    if not Script.exists?(script.vars[2])
      respond "\n--- #{script.vars[2]} does not appear to be a valid script\n\n"
    elsif script_list.any? { |s| s[:name] == script.vars[2].downcase }
      respond "\n--- #{script.vars[2]} is already set to start at login for #{Char.name}\n\n"
    else
      script_list.push(:name =>script.vars[2].downcase, :args => script.vars[3..-1])
      CharSettings['scripts'] = script_list
      respond "\n--- #{script.vars[2]} will now start at login for #{Char.name}\n\n"
    end
  end
elsif script.vars[1] =~ /^rem(?:ove)?$|^del(?:ete)?$/ and script.vars[2] and (script.vars[3] or script.vars[2] !~ /^\-\-global$/i)
  if script.vars[2] =~ /^\-\-global$/i
    script_list = Settings['scripts']
    if (script_list.class == Array) and (script_info = script_list.find { |s| s[:name] == script.vars[3].downcase })
      script_list.delete(script_info)
      Settings['scripts'] = script_list
      respond "\n--- #{script.vars[3]} was removed from the global autostart list\n\n"
    else
      respond "\n--- #{script.vars[3]} was not found in the global autostart list\n\n"
    end
  else
    script_list = CharSettings['scripts']
    if (script_list.class == Array) and (script_info = script_list.find { |s| s[:name] == script.vars[2].downcase })
      script_list.delete(script_info)
      CharSettings['scripts'] = script_list
      respond "\n--- #{script.vars[2]} was removed from #{XMLData.name}'s autostart list\n\n"
    else
      respond "\n--- #{script.vars[2]} was not found in #{XMLData.name}'s autostart list\n\n"
    end
  end
elsif script.vars[1] =~ /^list$/i
  script_list = Settings['scripts']
  output = "\n--- Global autostart scripts: "
  if (script_list.class == Array) and not script_list.empty?
    output.concat script_list.collect { |script_info| if script_info[:args].empty?; script_info[:name]; else; "#{script_info[:name]} (args: #{script_info[:args].join(' ')})"; end }.join(', ')
    output.concat "\n\n"
  else
    output.concat "(none)\n\n"
  end
  script_list = CharSettings['scripts']
  output.concat "--- #{XMLData.name}'s autostart scripts: "
  if (script_list.class == Array) and not script_list.empty?
    output.concat script_list.collect { |script_info| if script_info[:args].empty?; script_info[:name]; else; "#{script_info[:name]} (args: #{script_info[:args].join(' ')})"; end }.join(', ')
    output.concat "\n\n"
  else
    output.concat "(none)\n\n"
  end
  respond output
else
  output = "\n"
  output.concat "Usage:\n"
  output.concat "\n"
  output.concat "     #{$clean_lich_char}autostart add <script name> <args>\n"
  output.concat "     #{$clean_lich_char}autostart add --global <script name> <args>\n"
  output.concat "\n"
  output.concat "     #{$clean_lich_char}autostart remove <script name>\n"
  output.concat "     #{$clean_lich_char}autostart remove --global <script name>\n"
  output.concat "\n"
  output.concat "     #{$clean_lich_char}autostart list\n"
  output.concat "\n"
  respond output
end
