=begin
  Buff_tracker.lic

  Wrayth window that tells you if you are missing buffs.
  You choose what spells you care about. It tells you which ones you are missing.

        author: Nisugi
          game: Gemstone
  contributors: Nisugi, Maodan
          tags: hunting, combat, buff tracking, buff, wrayth
       version: 1.1
      required: Wrayth

  ;buff                     Start tracking your selected buffs.
  ;buff watch               Start tracking your selected buffs.
  ;buff add <buff>          Add a buff to track. Accepts spell number or name.
  ;buff remove <buff>       Remove a buff from tracking. Accepts spell number or name.
  ;buff list                List buffs you are currently tracking.
  ;buff quickload           Adds all of your currently worn (+ known) spells to the list.

  Change Log:
  v1.1 (2023-09-21)
    - Converted to interactable
    - Added quickload command
    - Updated list output
    - Prevent duplicate adding
    - Updated sort algorithm
  v1.0 (2023-09-16)
    - Initial Release
=end

module MBuffs # MissingBuffs
  UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"

  HOOK_CMD_RX = /^(?:<c>)?;(?:#{Script.current.name}|buff)(?:\s(.*))?$/i

  CMD_QUEUE = Queue.new
  
  UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
    if command =~ HOOK_CMD_RX
      CMD_QUEUE.push($1)
      nil
    else
      command
    end
  end)

  before_dying {
    UpstreamHook.remove(UPSTREAM_HOOK_ID)
    @@thread.kill if @@thread.alive?
    CharSettings['my_buffs'] = @my_buffs
    puts("<closeDialog id='MBuffs'/>")
  }

  CharSettings['my_buffs'] = Array.new if CharSettings['my_buffs'].nil?
  @my_buffs = CharSettings['my_buffs']

  def self.add_buff(var)
    @my_buffs << var unless @my_buffs.include?(var)
  end

  def self.remove_buff(var)
    @my_buffs.delete(var)
  end

  def self.my_buffs
    _respond("    You have chosen to monitor:")
    puts('<output class="mono"/>')
    @my_buffs.sort_by{|b| Spell[b].num}.each { |b|
      _respond("%8s  %s" % [Spell[b].num,  Spell[b].name])
    }
    puts('<output class=""/>')
  end

  def self.watch
    _respond("Monitoring your chosen spells.")
    puts("<closeDialog id='MBuffs'/><openDialog type='dynamic' id='MBuffs' title='Missing Buffs' target='MBuffs' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='MBuffs'></dialogData></openDialog>")
    @@thread = Thread.new {
      loop {
        missing_buffs = @my_buffs - Spell.active.map{|s| s.name}

        if missing_buffs.length > 0
          output = "<dialogData id='MBuffs' clear='t'>"
          missing_buffs.sort.each { |s| output += "<label id= '#{Spell[s].num}' value='#{s}' justify='3' left='0' height='1' width='187'/>" }
          output += "</dialogData>"
        else
          output = "<dialogData id='MBuffs' clear='t'><label id= 'none' value='No Missing Buffs' justify='3' left='0' center width='187'/></dialogData>"
        end
        puts(output)
        sleep(1)
      }
    }
  end

  def self.command(args)
    action, arg = args.split(' ')
    action = action.downcase

    unless action
      self.watch
    else
      if action == 'help'
        _respond('<output class="mono"/>')
        [
          ['',              'Start tracking your selected buffs.'],
          ['watch',         'Start tracking your selected buffs.'],
          ['add <buff>',    'Add a buff to track. Accepts spell number or name.'],
          ['remove <buff>', 'Remove a buff from tracking. Accepts spell number or name.'],
          ['list',          'List buffs you are currently tracking.'],
          ['quickload',     'Adds all of your currently worn (+ known) spells to the list.'],
        ].each{|cmd_pair|
          _respond(
            ("%8s %-15s %s" % ([';buff'] + cmd_pair))
              .gsub('<', '&lt;')
              .gsub('>', '&gt;')
            )
        }
        _respond('<output class=""/>')
        exit
      elsif action == 'add'
        if Spell[arg].num.nil?
          _respond("#{arg} is not a valid buff or spell. Please try again.")
        else
          self.add_buff(Spell[arg].name)
          _respond("#{Spell[arg].name} added.")
        end
      elsif action =~ /rem(?:ove)?/
        if Spell[arg].num.nil?
          _respond("#{arg} is not a valid buff or spell. Please try again.")
        else
          self.remove_buff(Spell[arg].name)
          _respond("#{Spell[arg].name} removed.")
        end
      elsif action == 'list'
        self.my_buffs
      elsif action == 'quickload'
        Spell.active.filter{|s| s.known?}.each{|s| self.add_buff(Spell[s].name)}
      else
        self.watch
      end
    end
  end

  def self.processQueue
    unless CMD_QUEUE.empty?
      command = CMD_QUEUE.pop
      return if command.nil?
      MBuffs.command(command)
    end
  end

  CMD_QUEUE.push(Script.current.vars[0] || 'watch')

  loop {
    self.processQueue
    sleep(0.1)
  }
end
