=begin
  EO fork of gemhoarder. A script to hoard gems!
  Features:
    - fills jars from your gemsack.
    - takes empty jars from your chest
    - puts full jars in your wardrobe
    - partially filled jars go in the bin
    - raid function
    - manually set gem amounts
    - multi-locker edition, premium/plat only, checks if you have gems in other lockers
    - alphbetical list(alpha)
    - search function (egemhoarder search "green thingy")

  Todo:
    - non-Premium lockers do not work
    - script will seem to lose track of items and need to be restarted

        author: elanthia-online
  contributors: Caithris, Falicor
          game: gs
          tags: gems, hoarding, locker, jars
       version: 1.0.1

  Version Control:
  Major_change.feature_addition.bugfix
  v1.0.1 (2024-04-04)
    - update various help text
  v1.0.0 (2024-04-03)
    - initial release
    - fork of gemhoarder2 with Ruby 3.x compatibility
=end

silence_me

unless Script.current.vars[1]
  Script.current.vars[1] = "none"
end

if Script.current.vars[1] =~ /raid/
  unless Script.current.vars[2]
    output = "Please specify a gem raid or use \"all\" to select all.\n"
    output.concat "Usage:\n"
    output.concat "        ;egemhoarder raid <gem|all> [amount]\n"
    respond output
    exit
  end
  unless Script.current.vars[3]
    output = "defaulting to 1 gem to raid.\n"
    respond output
    Script.current.vars[3] = 1
  end
end
if Script.current.vars[1] =~ /help/
  output = "Usage: ;egemhoarder [help|newlocker|list|alpha|search|forget]\n"
  output.concat "   help:                      prints out this list.\n"
  output.concat "   newlocker:                 add a new locker to your list.\n"
  output.concat "   list:                      list all gems currently in jars.\n"
  output.concat "   alpha:                     list all gems currently in jars in alphabetical order.\n"
  output.concat "   search <string>:           list all gems currently in jars that match a search string.\n"
  output.concat "   forget:                    forget the gem contents in all your lockers.\n"
  output.concat "   raid <gem> <amount>:       raid <gem> where gem can be \"all\" for the specified amount.\n"
  output.concat "   set <gem> <amount> <full>: set the selected gem to the specified amount.\n"
  output.concat " \n"
  output.concat "   set example: ;egemhoarder \"golden beryl gems\" 15 false\n"
  output.concat "   another  set example: ;egemhoarder \"fire opals\" 0 false Solhaven\n"
  output.concat " \n"
  output.concat "   to delete a jar, please use an amount of 0\n"
  output.concat "   to move a jar to another locker, please first delete the jar, and then use the set command with an amount, or run this script at your new locker location.\n"

  respond output

elsif Script.current.vars[1] =~ /list/
  output = "                                gem count  full  location\n"
  output.concat "                                --- -----  ----  ------------\n"
  for jar in CharSettings[:jars].sort { |a, b| b[:count] <=> a[:count] }
    if jar[:full].to_s =~ /full/
      jar[:full] = full
    end
    if jar[:full].to_s =~ /false/
      jar[:full] = false
    end
    output.concat "#{jar[:gem].rjust(35)} #{jar[:count].to_s.rjust(2)} #{jar[:full].to_s.rjust(8)}   #{jar[:location].to_s.ljust(30)}\n"
  end
  respond output
elsif Script.current.vars[1] =~ /alpha/

  output = "                                gem count  full  location\n"
  output.concat "                                --- -----  ----  ------------\n"
  for jar in CharSettings[:jars].sort { |a, b| a[:gem] <=> b[:gem] }
    if jar[:full].to_s =~ /full/
      jar[:full] = full
    end
    if jar[:full].to_s =~ /false/
      jar[:full] = false
    end
    output.concat "#{jar[:gem].rjust(35)} #{jar[:count].to_s.rjust(2)} #{jar[:full].to_s.rjust(8)}   #{jar[:location].to_s.ljust(30)}\n"
  end
  respond output
elsif Script.current.vars[1] =~ /search/
  output = "                                gem count  full  location\n"
  output.concat "                                --- -----  ----  ------------\n"
  for jar in CharSettings[:jars].sort { |a, b| a[:gem] <=> b[:gem] }
    if jar[:gem] =~ /#{Script.current.vars[2]}/ then
      output.concat "#{jar[:gem].rjust(35)} #{jar[:count].to_s.rjust(2)} #{jar[:full].to_s.rjust(8)}   #{jar[:location].to_s.ljust(30)}\n"
    end
  end
  respond output

elsif Script.current.vars[1] =~ /set/
  unless Script.current.vars[2]
    output = "Please specify which gem to modify.\n"
    respond output
    exit
  end
  unless Script.current.vars[3]
    output = "jar amount not specified, defaulting to removal.\n"
    respond output
    Script.current.vars[3] = 0
  end
  unless Script.current.vars[4]
    output = "jar full true/false not specified, defaulting to false.\n"
    respond output
    Script.current.vars[4] = false
  end
  if Script.current.vars[4] =~ /false/ then
    Script.current.vars[4] = false
  elsif Script.current.vars[4] =~ /true/ then
    Script.current.vars[4] = true
  end

  unless Script.current.vars[5]
    fput "location"
    Script.current.vars[5] = matchfind "current location is ? or somewhere close to it."
    output = "setting location to #{Script.current.vars[5]}.\n"
    respond output
  end

  gem = Script.current.vars[2]
  count = Script.current.vars[3].to_i
  full = Script.current.vars[4]
  location = Script.current.vars[5]
  jar_hash = CharSettings[:jars].find { |j| j[:gem] == gem }
  unless jar_hash
    jar_hash = CharSettings[:jars].find { |j| j[:gem] == gem + "s" }
  end

  if count > 0
    output = "#{gem}, #{count}, #{full}, #{location} have been added.\n"
    respond output
    CharSettings[:jars].delete_if { |j| j[:gem] == gem }
    CharSettings[:jars].push(h = { :gem => gem, :count => count, :full => full, :location => location })
  else
    output = "Removing #{gem} from the list.\n"
    respond output
    CharSettings[:jars].delete_if { |j| j[:gem] == gem }
  end

  exit

elsif Script.current.vars[1] =~ /forget/
  CharSettings[:jars] = nil
  CharSettings[:known_lockers] = nil
  output = "Locker contents forgotten.\n"
  respond output
  exit
else

  if UserVars.gemsack.nil? or UserVars.gemsack.empty?
    echo 'error: gemsack is not set. (;vars set gemsack=<container name>)'
    exit
  end
  if UserVars.lootsack.nil? or UserVars.lootsack.empty?
    echo 'error: lootsack is not set. (;vars set lootsack=<container name>)'
    exit
  end
  unless (gemsack = (GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.gemsack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.gemsack).sub(' ', ' .*')}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.gemsack).sub(' ', ' .*')}/i }))
    echo 'error: failed to find your gemsack'
    exit
  end
  unless (lootsack = (GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack.strip)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.lootsack).sub(' ', ' .*')}/i }))
    echo 'error: failed to find your lootsack'
    exit
  end
  close_gemsack = false
  close_lootsack = false

  open_result = dothistimeout "open ##{gemsack.id}", 5, /^You open|^You carefully|^You unfasten|^That is already open\.$/
  if open_result =~ /^You open|^You carefully|^You unfasten/
    close_gemsack = true
  else
    dothistimeout "look in ##{gemsack.id}", 5, /In .*? you see/
    if gemsack.contents.nil?
      echo 'error: failed to find gemsack contents'
      exit
    end
  end

  open_result = dothistimeout "open ##{lootsack.id}", 5, /^You open|^You carefully|^You unfasten|^That is already open\.$/
  if open_result =~ /^You open|^You carefully|^You unfasten/
    close_lootsack = true
  else
    dothistimeout "look in ##{lootsack.id}", 5, /In .*? you see/
    if lootsack.contents.nil?
      echo 'error: failed to find lootsack contents'
      exit
    end
  end
  empty_hands
  dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
  if CharSettings[:jars].nil? || Script.current.vars[1] =~ /newlocker/
    fput "open locker"
    jars = ["jar", "beaker", "bottle"]
    jars.each { |jar_type|
      echo "Moving all #{jar_type}s from your wardrobe into your chest"
      output = "You put"
      while output =~ /You put/ do
        dothistimeout "get #{jar_type} from wardrobe", 3, /^You remove|Get what/
        output = dothistimeout "put my #{jar_type} in chest", 3, /^You put|I could not find/
      end
    }
    jars.each { |jar_type|
      output = "You put"
      echo "Moving all #{jar_type}s from your bin into your chest"
      while output =~ /You put/ do
        dothistimeout "get #{jar_type} from bin", 3, /^You remove|Get what/
        output = dothistimeout "put my #{jar_type} in chest", 3, /^You put|I could not find/
      end
    }
  end

  dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
  status_tags
  open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(?:locker|bin)"/
  status_tags

  if open_result =~ /exist="(\d+)" noun="(locker|chest)"/
    fput "location"
    location = matchfind "current location is ? or somewhere close to it."
    locker_id = $1
    locker_contents = GameObj.containers[locker_id]
    unless locker_contents
      dothistimeout "look in ##{locker_id}", 3, /^In the/
      locker_contents = GameObj.containers[locker_id]
    end
    if locker_contents
      if CharSettings[:jars].nil?

        CharSettings[:jars] = Array.new
        CharSettings[:empty_jar_count] = 0
        Script.current.vars[1] = "newlocker"
        broken = true
        while broken == true do
          broken = false
          dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
          status_tags
          open_result = dothistimeout 'open locker', 5, /exist="(\d+)" noun="chest"/
          locker_id = $1
          status_tags
          if open_result =~ /exist="(\d+)" noun="(locker|chest)"/
            locker_id = $1
          end
          locker_contents = GameObj.containers[locker_id]
          unless locker_contents
            dothistimeout "look in ##{locker_id}", 3, /^In the/
            locker_contents = GameObj.containers[locker_id]
          end
          locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|bottle|beaker)$/ }.each { |jar_type|
            unless jar_type.after_name.nil?
              look_result = dothistimeout "look in ##{jar_type.id} from ##{locker_id}", 3, /^Inside .*? you see [0-9]+ portion|I could not find what you were referring to/
              if look_result =~ /I could not find what you were referring to/ then
                broken = true
                break
              end
              if look_result =~ /^Inside .*? you see ([0-9]+) portion/
                count = $1.to_i
                gem = jar_type.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
                full = look_result.include?('It is full')
                if full
                  output = dothistimeout "get ##{jar_type.id} from ##{locker_id}", 3, /You remove|Get what/
                  if output =~ /Get what/
                    broken = true
                    break
                  end
                  fput "put ##{jar_type.id} in wardrobe"
                else
                  output = dothistimeout "get ##{jar_type.id} from ##{locker_id}", 3, /You remove|Get what/
                  if output =~ /Get what/
                    broken = true
                    break
                  end
                  fput "put ##{jar_type.id} in bin"
                end
                CharSettings[:jars].push(h = { :gem => gem, :count => count, :full => full, :location => location })
              end
            end
          }
        end
        CharSettings[:known_lockers] = Array.new
        CharSettings[:known_lockers].push(location)
      elsif Script.current.vars[1] =~ /newlocker/
        broken = true
        while broken == true do
          broken = false
          dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
          status_tags
          open_result = dothistimeout 'open locker', 5, /exist="(\d+)" noun="chest"/
          if open_result =~ /exist="(\d+)" noun="(locker|chest)"/
            locker_id = $1
          end
          status_tags
          locker_contents = GameObj.containers[locker_id]
          unless locker_contents
            dothistimeout "look in ##{locker_id}", 3, /^In the/
            locker_contents = GameObj.containers[locker_id]
          end

          locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|bottle|beaker)$/ }.each { |jar_type|
            unless jar_type.after_name.nil?
              look_result = dothistimeout "look in ##{jar_type.id} from ##{locker_id}", 3, /^Inside .*? you see [0-9]+ portion|I could not find what you were referring to/
              if look_result =~ /I could not find what you were referring to/ then
                broken = true
                break
              end
              if look_result =~ /^Inside .*? you see ([0-9]+) portion/
                count = $1.to_i
                gem = jar_type.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
                full = look_result.include?('It is full')
                if full
                  fput "get ##{jar_type.id} from ##{locker_id}"
                  fput "put ##{jar_type.id} in wardrobe"
                else
                  fput "get ##{jar_type.id} from ##{locker_id}"
                  fput "put ##{jar_type.id} in bin"
                end
                CharSettings[:jars].push(h = { :gem => gem, :count => count, :full => full, :location => location })
              end
            end
          }
        end
        CharSettings[:known_lockers].push(location)
      end

      unless CharSettings[:known_lockers].include?(location)
        output = "WARNING! This locker doesn't appear to have been recorded!\nIf you really want to store gems to this locker prior to recording, ;send continue.\nTo record this locker, kill egemhoarder and rerun with the newlocker option.\n"
        respond output
        waitfor "continue"
      end

      not_suitable = Array.new

      #####
      # RAID GOING HERE
      ####
      if Script.current.vars[1] =~ /raid/
        count = Script.current.vars[3].to_i
        gem_bin = Array.new
        gem_wardrobe = Array.new
        fput "location"
        preserve = 0
        location = matchfind "current location is ? or somewhere close to it."

        CharSettings[:jars].each { |gem_hash|
          if gem_hash[:full].to_s =~ /full/
            gem_hash[:full] = full
          end
          if gem_hash[:full].to_s =~ /false/
            gem_hash[:full] = false
          end
          if gem_hash[:location] == location

            if Script.current.vars[2] == "all"
              preserve = 1
              if gem_hash[:full]
                gem_wardrobe.push(gem_hash[:gem])
              elsif gem_hash[:count].to_i >= count.to_i
                gem_bin.push(gem_hash[:gem])
              end
            else
              if gem_hash[:gem] == Script.current.vars[2]
                if gem_hash[:full]
                  echo "pushing to gem_wardrobe"
                  gem_wardrobe.push(gem_hash[:gem])
                elsif gem_hash[:count].to_i >= count.to_i
                  echo "pushing to gem_bin"
                  gem_bin.push(gem_hash[:gem])
                end
              elsif gem_hash[:gem] == Script.current.vars[2] + 's'
                if gem_hash[:full]
                  gem_wardrobe.push(gem_hash[:gem])
                elsif gem_hash[:count].to_i >= count.to_i
                  gem_bin.push(gem_hash[:gem])
                end
              elsif gem_hash[:gem] == Script.current.vars[2] + 'es'
                if gem_hash[:full]
                  gem_wardrobe.push(gem_hash[:gem])
                elsif gem_hash[:count].to_i >= count.to_i
                  gem_bin.push(gem_hash[:gem])
                end
              end

            end
          end
        }
        gem_wardrobe.each { |gem_item|
          echo gem_item
          gem_item.gsub!(/large |medium |small |tiny |some /, '')
          dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
          status_tags
          open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(wardrobe)"|already open/
          status_tags
          if open_result =~ /exist="(\d+)" noun="(wardrobe)"/
            locker_id = $1
            locker_contents = GameObj.containers[locker_id]

            dothistimeout "look in ##{locker_id}", 3, /^In the/
            locker_contents = GameObj.containers[locker_id]
            if locker_contents
              if CharSettings[:jars].any? { |char_jar| (char_jar[:gem] =~ /^#{gem_item.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/) and (char_jar[:count].to_i >= count.to_i) }

                if (jar = locker_contents.find { |locker_jar| locker_jar.after_name.gsub(/containing |large |medium |small |tiny |some /, '') =~ /^#{gem_item.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ })
                  jar_hash = CharSettings[:jars].find { |j| j[:gem] == jar.after_name.sub(/^containing |large |medium |small |tiny |some /, '') }
                  jar_result = dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove|Get what?/
                  if jar_result =~ /^You remove/ then
                    count.times {
                      dothistimeout "shake ##{jar.id}", 3, /^You .*shake/
                      if GameObj.right_hand.id != jar.id
                        obj = GameObj.right_hand
                      elsif GameObj.left_hand.id != jar.id
                        obj = GameObj.left_hand
                      end
                      dothistimeout "put ##{obj.id} in ##{gemsack.id}", 3, /^You put/
                      jar_hash[:count] = jar_hash[:count] - 1
                      jar_hash[:full] = false
                    }
                    if jar_hash[:count] < 1
                      CharSettings[:jars].delete(jar_hash)
                      CharSettings[:empty] = CharSettings[:empty] + 1
                      dothistimeout "put ##{jar.id} in chest", 3, /^You (?:put|place)/
                    end
                    dothistimeout "put ##{jar.id} in bin", 3, /^You (?:put|place)/

                    # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
                    true
                  else
                    echo "Sorry. Locker has refreshed. Please re-start ;egemhoarder raid."
                    exit false
                  end
                else
                  # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
                  false
                end
              else
                # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
                false
              end
            else
              # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
              echo 'error: failed to find locker contents'
              false
            end

          else
            dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
            echo 'error: failed to find locker'
            false

          end
        }

        gem_bin.each { |gem_item|
          gem_item.gsub!(/large |medium |small |tiny |some /, '')
          # ###raid bin
          dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
          status_tags
          open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(?:locker|bin)"/
          status_tags

          if open_result =~ /exist="(\d+)" noun="(locker|bin)"/
            locker_id = $1
            locker_contents = GameObj.containers[locker_id]

            unless locker_contents
              dothistimeout "look in ##{locker_id}", 3, /^In the/
              locker_contents = GameObj.containers[locker_id]
            end

            if locker_contents
              if CharSettings[:jars].any? { |char_jar| (char_jar[:gem] =~ /^#{gem_item.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/) and (char_jar[:count] >= count.to_i + preserve.to_i) }
                if (jar = locker_contents.find { |locker_jar| locker_jar.after_name.gsub(/containing |large |medium |small |tiny |some /, '') =~ /^#{gem_item.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ })
                  jar_hash = CharSettings[:jars].find { |char_jar| char_jar[:gem] == jar.after_name.sub(/^containing |large |medium |small |tiny |some /, '') }

                  jar_result = dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove|Get what?/
                  if jar_result =~ /^You remove/ then
                    count.to_i.times {
                      dothistimeout "shake ##{jar.id}", 3, /^You .*shake/
                      if GameObj.right_hand.id != jar.id
                        obj = GameObj.right_hand
                      elsif GameObj.left_hand.id != jar.id
                        obj = GameObj.left_hand
                      end
                      dothistimeout "put ##{obj.id} in ##{gemsack.id}", 3, /^You put/
                      jar_hash[:count] = jar_hash[:count] - 1
                      jar_hash[:full] = false
                    }
                    if jar_hash[:count] < 1
                      CharSettings[:jars].delete(jar_hash)
                      CharSettings[:empty] = CharSettings[:empty] + 1
                      dothistimeout "put ##{jar.id} in chest", 3, /^You (?:put|place)/
                    end
                    dothistimeout "put ##{jar.id} in bin", 3, /^You (?:put|place)/

                    # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
                    true
                  else
                    echo "Sorry. Locker has refreshed. Please restart ;egemhoarder raid"
                    exit
                  end
                else
                  # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
                  false
                end
              else
                # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
                false
              end
            else
              # dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
              echo 'error: failed to find locker contents'
              false
            end
          else
            dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
            echo 'error: failed to find locker'
            false

          end
        }

        dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/

      end

      ########### end new section

      unless (Script.current.vars[1] =~ /newlocker/ or Script.current.vars[1] =~ /raid/)

        dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
        status_tags
        open_result = dothistimeout 'open locker', 5, /exist="(\d+)" noun="bin"/
        if open_result =~ /exist="(\d+)" noun="(locker|bin)"/
          locker_id = $1
        end
        status_tags
        locker_contents = GameObj.containers[locker_id]
        unless locker_contents
          dothistimeout "look in ##{locker_id}", 3, /^In the/
          locker_contents = GameObj.containers[locker_id]
        end

        for jar in locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|beaker|bottle)$/ }
          if jar.after_name =~ /^containing /
            gem_list = gemsack.contents.find_all { |obj| (jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').sub(/x\b/, 'xe?').gsub(/\b\s/, 's? ')}s?$/) }
            gem_list.delete_if { |obj| not_suitable.include?(obj.id) }
            jar_hash = CharSettings[:jars].find { |j| j[:gem] == jar.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') }
            unless gem_list.empty?
              dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove/
              for gem in gem_list
                result = dothistimeout "_drag ##{gem.id} ##{jar.id}", 3, /^You add|is full|does not appear to be a suitable container for/

                if result =~ /^You add .* filling it/
                  jar_hash[:count] = jar_hash[:count] + 1
                  jar_hash[:full] = true
                  fput "put ##{jar.id} in wardrobe"
                elsif result =~ /^You add/
                  jar_hash[:count] = jar_hash[:count] + 1
                elsif result =~ /is full/
                  jar_hash[:full] = true
                  fput "put ##{jar.id} in wardrobe"
                  dothistimeout "put ##{gem.id} in ##{gemsack.id}", 3, /^You put/
                  break
                elsif result =~ /does not appear to be a suitable container for/
                  dothistimeout "put ##{gem.id} in ##{lootsack.id}", 3, /^You put/
                  not_suitable.push(gem.id)
                else
                  dothistimeout "put ##{gem.id} in ##{gemsack.id}", 3, /^You put/
                end

              end
              if checkright
                dothistimeout "put ##{jar.id} in ##{locker_id}", 3, /^You (?:put|place)/
              end
            end
          else
            fput "get ##{jar.id} in ##{locker_id}"
            fput "put ##{jar.id} in chest"
          end
        end

      end

      dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
      status_tags
      open_result = dothistimeout 'open locker', 5, /exist=".*?" noun="(?:locker|chest)"/
      status_tags
      if open_result =~ /exist="(\d+)" noun="(locker|chest)"/
        locker_id = $1
        locker_contents = GameObj.containers[locker_id]
        unless locker_contents
          dothistimeout "look in ##{locker_id}", 3, /^In the/
          locker_contents = GameObj.containers[locker_id]
        end
        if locker_contents

          not_suitable = Array.new
          gem_hoard = Array.new
          for jar in CharSettings[:jars]
            if (!jar[:full] || jar[:location] != location)
              gem_hoard.push(jar[:gem])
            end
          end
          other_locker = Array.new
          squelch = Array.new
          unless Script.current.vars[1] =~ /newlocker/ or Script.current.vars[1] =~ /raid/
            for jar in locker_contents.find_all { |obj| obj.noun =~ /^(?:jar|beaker|bottle)$/ }
              gem_count = Hash.new
              gemsack.contents.each { |obj|
                if (obj.type =~ /gem/) and (obj.name !~ /oblivion quartz$|doomstone|urglaes fang/) and not gem_hoard.any? { |op| op.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ } and not locker_contents.any? { |o| o.after_name.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ and not not_suitable.include?(obj.id) }
                  gem_count[obj.name.gsub(/large |medium |small |tiny |some /, '')] = gem_count[obj.name.gsub(/large |medium |small |tiny |some /, '')].to_i + 1
                elsif gem_hoard.any? { |op| op.gsub(/^containing |large |medium |small |tiny |some /, '') =~ /^#{obj.name.gsub(/large |medium |small |tiny |some /, '').sub(/y\b/, '(?:y|ie)').sub(/z\b/, 'ze?').gsub(/\b\s/, 's? ')}s?$/ }
                  other_locker.push(obj.name.gsub(/^containing |large |medium |small |tiny |some /, ''))
                end
              }

              next if gem_count.empty?
              gem_name = nil
              gem_num = 0
              gem_count.each_pair { |name, num|
                if num > gem_num
                  gem_name = name
                  gem_num = num
                end
              }
              if not squelch.include?(gem_name)
                dothistimeout "get ##{jar.id} from ##{locker_id}", 3, /^You remove/
              end
              jar_hash = nil

              gemsack.contents.each { |obj|
                if obj.name.gsub(/large |medium |small |tiny |some /, '') == gem_name and not squelch.include?(gem_name)
                  result = dothistimeout "_drag ##{obj.id} ##{jar.id}", 3, /filling it|^You (?:add|put)|is full|does not appear to be a suitable container for|Not all drag and drop possibilities will/
                  if result =~ /^You add .* filling it/
                    jar_hash[:count] = jar_hash[:count] + 1
                    jar_hash[:full] = true
                    dothistimeout "put ##{jar.id} in wardrobe", 3, /^You put/
                    break
                  elsif result =~ /^You put/
                    dothistimeout "put ##{jar.id} in ##{lootsack.id}", 3, /^You put/
                    saveobjname = obj.name.gsub(/large |medium |small |tiny |some /, '');
                    gem = lootsack.contents.find { |lootsack_obj| lootsack_obj.id == jar.id }.after_name.gsub(/^containing |large |medium |small |tiny |some /, '')
                    dothistimeout "get ##{jar.id}", 3, /^You remove/
                    if gem_hoard.include?(gem)
                      fput "shake ##{jar.id}"
                      fput "put ##{jar.id} in chest"
                      fput "put left in ##{gemsack.id}"
                      unless other_locker.include?(gem)
                        squelch.push(saveobjname)
                        other_locker.push(gem)
                      end
                      break
                    else
                      jar_hash = { :gem => gem, :count => 1, :full => false, :location => location }
                      CharSettings[:jars].push(jar_hash)
                    end
                  elsif result =~ /is full/
                    dothistimeout "put ##{obj.id} in ##{gemsack.id}", 3, /^You put/
                    jar_hash[:full] = true
                    dothistimeout "put ##{jar.id} in wardrobe", 3, /^You put/
                    break
                  elsif result =~ /^You add/
                    jar_hash[:count] = jar_hash[:count] + 1
                  elsif result =~ /does not appear to be a suitable container for/
                    not_suitable.push(obj.id)
                    fput "put ##{obj.id} in ##{lootsack.id}"
                  elsif result =~ /Not all drag and drop possibilities will/
                    fput "put ##{obj.id} in ##{gemsack.id}"
                    fput "put ##{jar.id} in wardrobe"
                  end
                end
              }
              if checkright
                dothistimeout "put ##{jar.id} in bin", 3, /^You (?:put|place)/
              end

          end

          end
        end
        dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
        fill_hands
      else
        dothistimeout "close locker", 1, /^You close|That is already closed|^You hear the faint\.$/
        echo 'error: failed to find locker contents'
      end
    else
      dothistimeout "close locker", 1, /^You close|^That is already closed|^You hear the faint\.$/
      echo 'error: failed to find locker'
    end

  end

  if Script.current.vars[1] =~ /newlocker/
    output = "New locker has been checked, sorted, and saved. Please re-run the script without arguments to deposit gems.\n"
    output.concat "Please make sure to run \";egemhoarder newlocker\" at any other locker you are storing gems in before depositing here!\n"
    respond output
  end

  unless other_locker.empty?
    output = "Gems not lockered due to being already in another locker:\n"
    output.concat "                                gem count  full  location\n"
    output.concat "                                --- -----  ----  --------\n"

    other_locker.each { |other_gem|
      jar_hash = CharSettings[:jars].find { |j| j[:gem] == other_gem }
      unless jar_hash
        jar_hash = CharSettings[:jars].find { |j| j[:gem] == other_gem + "s" }
      end
      unless jar_hash[:full]
        output.concat "#{jar_hash[:gem].rjust(35)} #{jar_hash[:count].to_s.rjust(2)} #{jar_hash[:full].to_s.rjust(8)}  #{jar_hash[:location].to_s.ljust(30)}\n"
      end
    }
    respond output
  end

end
if close_gemsack
  fput "close ##{gemsack.id}"
end
if close_lootsack
  fput "close ##{lootsack.id}"
end
fill_hands
