=begin

  Shattered Heal and Spellup script

   authors: Tykus, Athias
      game: Gemstone
      tags: shattered, healing
   version: 0.2
  requried: Lich >= 4.6.54

  changelog:
    0.2 (22-01-25):
      Updated for GTK3
    0.1 (20-03-03):
      Initial creation of script based on previously created community script

=end

# Verify this is running in shattered
unless XMLData.game =~ /^GSF/
  output = "\n"
  output.concat "shat_heal_spellup.lic is intended to be used in Gemstone IV: Shattered\n"
  output.concat "\n"
  output.concat "Please come and join us in Shattered if you would like to know more!\n"
  output.concat "\n"
  respond output
  exit
end

settings = CharSettings.to_hash

@professions  = Hash.new
@wanted     = Array.new
@plist      = Hash.new
dialogs_setting = nil
profession    = nil
pname     = nil

gtk2_Active = (Gtk::Version::STRING.chr == '2')
gtk3_Active = (Gtk::Version::STRING.chr == '3')

if script.vars[1] =~ /^setup$|^options$/i
  window = window_action = nil
  Gtk.queue {
    gtk_checks = Hash.new

  saveButton = Gtk::Button.new("_Save and Close") if gtk2_Active
    saveButton = Gtk::Button.new(:label => "_Save and Close") if gtk3_Active

    window = Gtk::Window.new(:toplevel)
    window.set_title  "GSF Heal and Spellup"
    window.keep_above = true
    window.border_width = 60

  vbox = Gtk::VBox.new(false, 0) if gtk2_Active
    vbox = Gtk::Box.new(:vertical, 0) if gtk3_Active

    prof_bard = Gtk::CheckButton.new("Bard")
    prof_bard.set_alignment(0.5,0.0) if gtk2_Active
    prof_bard.active = settings["Bard"]
    gtk_checks["Bard"] = prof_bard

    prof_cleric = Gtk::CheckButton.new("Cleric")
    prof_cleric.active = settings['Cleric']
    gtk_checks['Cleric'] = prof_cleric

    prof_empath = Gtk::CheckButton.new("Empath")
    prof_empath.active = settings['Empath']
    gtk_checks['Empath'] = prof_empath

    prof_monk = Gtk::CheckButton.new("Monk")
    prof_monk.active = settings['Monk']
    gtk_checks['Monk'] = prof_monk

    prof_paladin = Gtk::CheckButton.new("Paladin")
    prof_paladin.active = settings['Paladin']
    gtk_checks['Paladin'] = prof_paladin

    prof_ranger = Gtk::CheckButton.new("Ranger")
    prof_ranger.active = settings['Ranger']
    gtk_checks['Ranger'] = prof_ranger

    prof_rogue = Gtk::CheckButton.new("Rogue")
    prof_rogue.active = settings['Rogue']
    gtk_checks['Rogue'] = prof_rogue

    prof_sorcerer = Gtk::CheckButton.new("Sorcerer")
    prof_sorcerer.active = settings['Sorcerer']
    gtk_checks['Sorcerer'] = prof_sorcerer

    prof_warrior = Gtk::CheckButton.new("Warrior")
    prof_warrior.active = settings['Warrior']
    gtk_checks['Warrior'] = prof_warrior

    prof_wizard = Gtk::CheckButton.new("Wizard")
    prof_wizard.active = settings['Wizard']
    gtk_checks['Wizard'] = prof_wizard

#    tooltips = Gtk::Tooltips.new
    prof_bard.set_tooltip_text("Min Elem / Bard").has_tooltip = true
    prof_cleric.set_tooltip_text("Min Spirit / Major Spirit / Cleric").has_tooltip = true
    prof_empath.set_tooltip_text("Min Spirit / Maj Spirit / Empath").has_tooltip = true
    prof_monk.set_tooltip_text("Min Spirit / Min Mental ").has_tooltip = true
    prof_paladin.set_tooltip_text("Min Spirit / Paladin ").has_tooltip = true
    prof_ranger.set_tooltip_text("Min Spirit / Ranger").has_tooltip = true
    prof_rogue.set_tooltip_text("Min Spirit / Min Elem ").has_tooltip = true
    prof_sorcerer.set_tooltip_text("Min Elem / Min Spirit / Sorcerer ").has_tooltip = true
    prof_warrior.set_tooltip_text("Min Spirit / Min Elem ").has_tooltip = true
    prof_wizard.set_tooltip_text("Min Elem / Maj Elem / Wizard ").has_tooltip = true

    vbox.pack_start(prof_bard, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_cleric, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_empath, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_monk, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_paladin, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_ranger, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_rogue, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_sorcerer, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_warrior, :expand => false, :fill => true, :padding => 0)
    vbox.pack_start(prof_wizard, :expand => false, :fill => true, :padding => 0)

    vbox.pack_start(saveButton, :expand => false, :fill => true, :padding => 0)

    window.add(vbox)
    saveButton.signal_connect('clicked'){
      Gtk.queue {
        gtk_checks.each_pair {
          |number,check| settings[number] = check.active?
        }
        window_action = :save
      }
    }
    window.signal_connect('delete_event') {window_action = :cancel}
    window.show_all
    window.resizable = false
  }
  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
  undo_before_dying
  Gtk.queue { window.destroy }
  Script.self.kill
elsif script.vars[1] =~ /help|info/
  respond "--------------","Try ;heal_spellup setup","Click the boxes with the professions you want to nudge","--------------"
elsif script.vars[1] =~ /clear/
  settings.clear
  echo "All settings cleared."
  exit
end

squelch_dialogs_off = proc {
  hook_name = 'squelch-dialogs-off'
  hook_proc = proc { |s|
    if s =~ /<prompt/
      DownstreamHook.remove(hook_name)
      nil
    elsif s =~ /You have disabled viewing of most special panels and dialogs/
      DownstreamHook.remove(hook_name)
      # dialogs turned off
      dialogs_setting="off"
      nil
    else
      s
    end
  }

  DownstreamHook.add(hook_name, hook_proc)
  silence_me unless undo_silence = silence_me
  put 'flags dialogs off'
  silence_me if undo_silence
}

squelched_profile = proc {
  return if pname==nil
  started = false
  hook_name = 'squelch-profile'
  hook_proc = proc { |s|
    if started
      if s =~ /<prompt/
        DownstreamHook.remove(hook_name)
        (profession = "Hidden") unless (profession)
      elsif s =~ /Profession: (\w+).*/
        profession = $1
      end
      nil
    elsif s =~ /PERSONAL INFORMATION/
      started = true
      nil
    elsif s =~ /Player .* not found.  Need help?/
      DownstreamHook.remove(hook_name)
      profession = "Gone"
      nil
    else
      s
    end
  }
  DownstreamHook.add(hook_name, hook_proc)
  silence_me unless undo_silence = silence_me
  put 'profile ' + pname
  silence_me if undo_silence
}

def get_healed
  # Round 1
  20.times {
    if XMLData.injuries.any? { |a,h| h['wound'] > 0 } and ( checkpcs.include?('Tyrean') || checkpcs.include?('Bruiser') || checkpcs.include?('Wreck') )
      sleep 0.5
    else
      break
    end
  }
  # Leave and come back
  if XMLData.injuries.any? { |a,h| h['wound'] > 0 } and ( checkpcs.include?('Tyrean') || checkpcs.include?('Bruiser') || checkpcs.include?('Wreck') )
    multifput "out", "go rift"
    sleep 0.5
  end
  # Round 2
  20.times {
    if XMLData.injuries.any? { |a,h| h['wound'] > 0 } and ( checkpcs.include?('Tyrean') || checkpcs.include?('Bruiser') || checkpcs.include?('Wreck') )
      sleep 0.5
    else
      break
    end
  }
  # Healers are borked, fix yourself
  if XMLData.injuries.any?
    Script.run('useherbs')
    wait_while {running? 'useherbs'}
    sleep 0.5
  end
end

def get_spells(person)
  success = nil
  nudge_result = dothistimeout("nudge #{person}", 2, /not found.  Need help?|What were you referring to|You elbow /)
  if nudge_result =~ /You elbow /
    success = matchtimeout 4, "sending spell info"
    if success != false
      sleep 5
    end
  elsif nudge_result =~ /not found.  Need help?|What were you referring to/
    success = false
    sleep 0.1
  end
  return success
end

def cycle_casters
  @wanted.compact!
  @wanted.each do |x|
    circle = x.to_s
    if @plist[circle]
        index = 0
        target = @plist[circle]
        while get_spells(target[index]) == false && target.size > index + 1
          index += 1
        end
    end
  end
  sleep(15)
end

squelch_dialogs_off.call
GameObj.pcs.each { |p|
    pname = p.to_s
    squelched_profile.call
    wait_until {profession}
    next if profession == "Gone"
    if @plist[profession]
      @plist[profession]=@plist[profession].push(pname)
    else
      @plist[profession] = []
      @plist[profession]=@plist[profession].push(pname)
    end
    profession=nil
}

settings.each_pair { |prof,active|
  if active
    @wanted.push(prof.to_s)
  end
}

# Run Main Function
get_healed
cycle_casters
