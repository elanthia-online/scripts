=begin
    Automatic Festival Games Script
    Works for any games at EG Caligos Isle
    See help for additional assistance in configuration.

    SYNTAX:
         ;tgames            - Runs mini-games
         ;tgames help       - Gives help information on setting up various settings
         ;tgames stats      - Shows cool stats about your mini-game use
         ;tgames highlights - Shows known T5 game win messaging for easy highlights!
	
    Will attempt to pause on T5s or unknown messaging.
    Does NOT attempt to autosell, that is on you to do.
    Will sort prizes based on tier chosen via settings.
    Works with a bucket or without configured via settings.

    For additional setup/help info please see the ;tgames help

       todo: unsure
     author: Tysong (horibu on PC)
       name: tgames
       tags: games, eg, ebon gate, ebon
    version: 1.8

	changelog:
		1.8 (2018-10-10)
			Bank teller messaging updates and fixed small timing issue
        1.7 (2018-10-10)
            Added last two missing T5 messaging
        1.6 (2018-10-10)
            Added functionality to reset stats on a new year
        1.5 (2018-10-09)
            Added chance% to each tier in ;tgames stats
        1.4 (2018-10-09)
            Fix logic for keep/sell containers being flopped
        1.3 (2018-10-09)
            Fixed a bank regex match that was missing
        1.2 (2018-10-08)
            Fixed typo in Fish Pits generic msg
        1.1 (2018-10-08)
            Updated to force you to set your keep & sell containers
        1.0 (2018-10-08)
            Initial release

=end
=begin
=end

squelch_script_running = false

EG_Games = {
	"Dank Tidepools" => {
		:rooms => [26531, 27557, 27559, 27558],
		:trashcan => "hole",
		:mechanic => "crevasse",
		:generic_msg => "You move into position and stick your hand into the dank confines, unable to feel anything within for several seconds.  Something slimy touches the back of your hand, and you quickly snatch at it, your fingers sinking into the sand!  Slowly, ",
		:tier1 => "you pull a rough barnacle-laced rock out of the crevasse",
		:tier2 => "you pull a periwinkle hermit crab out of the crevasse",
		:tier3 => "you pull a spindled silvery-grey nautilus shell out of the crevasse",
		:tier4 => "you pull a needle-nosed grey ghostfish out of the crevasse",
		:tier5 => "you pull a mucus-coated bright green baby eel out of the crevasse"
	},
	"Balloon-n-Darts" => {
		:rooms => [27560, 27561, 27562, 27563],
		:trashcan => "crag",
		:mechanic => "dart",
		:generic_msg => "Almost indifferently, a lanky human boy hands you a bamboo dart and gestures at the colorful gaming board.  You carefully aim and throw the dart, which pops a balloon before imbedding itself into the board.  Sauntering over, the boy pulls the dart free, a card decorated with",
		:tier1 => " a goofy joker sticking out of the point",
		:tier2 => " a red-suited knave sticking out of the point",
		:tier3 => " a black-dressed queen sticking out of the point",
		:tier4 => " a red-suited king sticking out of the point",
		:tier5 => " the ace of spades sticking out of the point"
	},
	"Fish Pits" => {
		:rooms => [26591, 27573, 27572, 27571],
		:trashcan => "hole",
		:mechanic => "pit",
		:generic_msg => "A scrawny half-krolvin lad takes your coins, and you lean forward, plunging both hands into the cold salt water as you feel around.  Something slimy passes between your hands, and you clamp down hard, pulling out a ",
		:tier1 => "fleshy pink sea pig",
		:tier2 => "light coral coffinfish",
		:tier3 => "transparent barreleye fish",
		:tier4 => "fleshy pink blobfish",
		:tier5 => "white-finned pinkish grey hagfish"

	},
	"Water Cannons" => {
		:rooms => [27574, 27577, 27575, 27576],
		:trashcan => "crag",
		:mechanic => "cannon",
		:generic_msg => "Taking aim, you press the trigger on the a small water cannon as you aim at the mouth of the eel balloon, which ",
		:tier1 => "fills about a quarter of the way to full with water",
		:tier2 => "fills about a third of the way to full with water",
		:tier3 => "fills halfway to full with water",
		:tier4 => "almost completely fills with water",
		:tier5 => "fills completely and then explodes with water"
	},
	"Eel Beds" => {
		:rooms => [26593, 27565, 27564, 27566],
		:trashcan => "hole",
		:mechanic => "bucket",
		:generic_msg => "You quickly try to grab the eel before it hits the bucket and manage to get ",
		:tier1 => "nothing more than a handful of slime",
		:tier2 => "a pinched grip upon its dorsal fin",
		:tier3 => "a slippery grip on its tail",
		:tier4 => "both hands around its middle",
		:tier5 => "a firm grip with both hands around its head"
	},
	"Whacky Eels" => {
		:rooms => [27567, 27569, 27568, 27570],
		:trashcan => "crag",
		:mechanic => "stick",
		:generic_msg => "Yanking the food away, he yells at you, \"Whack them\!\"  ",
		:tier1 => "You quickly swing the stick around and manage to hit a pair of eels",
		:tier2 => "You quickly swing the stick around and manage to hit four eels",
		:tier3 => "You quickly swing the stick around and manage to hit six eels",
		:tier4 => "You quickly swing the stick around and manage to hit eight eels",
		:tier5 => "You quickly swing the stick around and manage to hit all of the eels"
	}
}

UserVars.tgames ||= {}
UserVars.tgames[:silvers]			= 25000 			if UserVars.tgames[:silvers].nil?
UserVars.tgames[:keep_tier]			= 3					if UserVars.tgames[:keep_tier].nil?
UserVars.tgames[:keep_container] 	= nil				if UserVars.tgames[:keep_container].nil?
UserVars.tgames[:sell_container]	= nil				if UserVars.tgames[:sell_container].nil?
UserVars.tgames[:pause_runs]		= true				if UserVars.tgames[:pause_runs].nil?
UserVars.tgames[:rummage_bucket]    = true				if UserVars.tgames[:rummage_bucket].nil?
UserVars.tgames[:squelch_script]    = true				if UserVars.tgames[:squelch_script].nil?
UserVars.tgames[:familiar_debug]	= false				if UserVars.tgames[:familiar_debug].nil?
UserVars.tgames[:debug_my_script]	= false				if UserVars.tgames[:debug_my_script].nil?
UserVars.tgames[:total_seashells]	= 0					if UserVars.tgames[:total_seashells].nil?
UserVars.tgames[:total_games]		= 0					if UserVars.tgames[:total_games].nil?
UserVars.tgames[:total_tier1]		= 0					if UserVars.tgames[:total_tier1].nil?
UserVars.tgames[:total_tier1s]		= 0					if UserVars.tgames[:total_tier1s].nil?
UserVars.tgames[:total_tier2]		= 0					if UserVars.tgames[:total_tier2].nil?
UserVars.tgames[:total_tier2s]		= 0					if UserVars.tgames[:total_tier2s].nil?
UserVars.tgames[:total_tier3]		= 0					if UserVars.tgames[:total_tier3].nil?
UserVars.tgames[:total_tier3s]		= 0					if UserVars.tgames[:total_tier3s].nil?
UserVars.tgames[:total_tier4]		= 0					if UserVars.tgames[:total_tier4].nil?
UserVars.tgames[:total_tier4s]		= 0					if UserVars.tgames[:total_tier4s].nil?
UserVars.tgames[:total_tier5]		= 0					if UserVars.tgames[:total_tier5].nil?
UserVars.tgames[:total_tier5s]		= 0					if UserVars.tgames[:total_tier5s].nil?
UserVars.tgames[:year]			 	= Date.today.year	if UserVars.tgames[:year].nil?

if UserVars.tgames[:year] != Date.today.year
	respond "
	It appears to be your first time running this for a new year.
	Time to reset the stats to track anew.
	Please find your previous stats below.
	
	====;tgames #{UserVars.tgames[:year]} Stats====
	#{UserVars.tgames[:total_games].to_s.ljust(6)} - Total Mini-Games Played
	#{UserVars.tgames[:total_seashells].to_s.ljust(6)} - Total Seashells Found Playing
	#{((UserVars.tgames[:total_games] * 1000) / UserVars.tgames[:total_seashells]).to_s.ljust(6)} - Avg Cost Silver Per Seashell
	
	Tier - Outcomes - Shells Found - Avg - Chance
	1    - #{UserVars.tgames[:total_tier1].to_s.rjust(8)} - #{UserVars.tgames[:total_tier1s].to_s.rjust(12)} - #{'0'.rjust(2)}  - #{(UserVars.tgames[:total_tier1].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	2    - #{UserVars.tgames[:total_tier2].to_s.rjust(8)} - #{UserVars.tgames[:total_tier2s].to_s.rjust(12)} - #{(UserVars.tgames[:total_tier2s] / UserVars.tgames[:total_tier2]).to_s.rjust(2)}  - #{(UserVars.tgames[:total_tier2].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	3    - #{UserVars.tgames[:total_tier3].to_s.rjust(8)} - #{UserVars.tgames[:total_tier3s].to_s.rjust(12)} - #{(UserVars.tgames[:total_tier3s] / UserVars.tgames[:total_tier3]).to_s.rjust(2)}  - #{(UserVars.tgames[:total_tier3].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	4    - #{UserVars.tgames[:total_tier4].to_s.rjust(8)} - #{UserVars.tgames[:total_tier4s].to_s.rjust(12)} - #{(UserVars.tgames[:total_tier4s] / UserVars.tgames[:total_tier4]).to_s.rjust(2)}  - #{(UserVars.tgames[:total_tier4].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	5    - #{UserVars.tgames[:total_tier5].to_s.rjust(8)} - #{UserVars.tgames[:total_tier5s].to_s.rjust(12)} - #{'0'.rjust(2)}  - #{(UserVars.tgames[:total_tier5].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	
	;unpuase tgames
	to continue with resetting stats to 0 and continue running.
	"
	pause_script
	
	UserVars.tgames[:total_games]		= 0
	UserVars.tgames[:total_seashells]	= 0
	UserVars.tgames[:total_tier1]		= 0
	UserVars.tgames[:total_tier2]		= 0
	UserVars.tgames[:total_tier3]		= 0
	UserVars.tgames[:total_tier4]		= 0
	UserVars.tgames[:total_tier5]		= 0
	UserVars.tgames[:total_tier1s]		= 0
	UserVars.tgames[:total_tier2s]		= 0
	UserVars.tgames[:total_tier3s]		= 0
	UserVars.tgames[:total_tier4s]		= 0
	UserVars.tgames[:total_tier5s]		= 0
	UserVars.tgames[:year]				= Date.today.year
end

if variable[1].downcase =~ /help|setup/i
	respond "\n    SYNTAX - ;tgames
    Start script while at an Ebon Gate mini-games room.
	
    Will attempt to pause on T5s or unknown messaging.
	    
    Does NOT automatically sell, as I'm not taking on that responsibility of choosing for you.
    So you will have to empty your containers via selling/lockering stuff away.
	
         ;tgames            - Runs mini-games
         ;tgames help       - Gives this help information you're reading now
         ;tgames stats      - Shows cool stats about your mini-game use
         ;tgames highlights - Shows known T5 game win messaging for easy highlights!

    Automatically squelches other people via optional tsquelch script. (Default = true)
    ;e echo UserVars.tgames[:squelch_script] = false

    Pause when out of silver before heading to bank? (Default = true)
    ;e echo UserVars.tgames[:pause_runs] = false

    Amount of silvers to withdraw on bank runs. (Default = 25000)
    ;e echo UserVars.tgames[:silvers] = 25000

    The tier at which you wish to stash items found in KEEEP container set below. (Default = 3)
    ;e echo UserVars.tgames[:keep_tier] = 3

    Set these for what containers you wish to put your items in based on variable above.
    ;e echo UserVars.tgames[:keep_container] = \"cloak\"
    ;e echo UserVars.tgames[:sell_container] = \"backpack\"

    Whether to use a seashell bucket or not. (Default = true)
    ;e echo UserVars.tgames[:rummage_bucket] = false

    Send statistics to Familiar Window. (Default = false)
    ;e echo UserVars.tgames[:familiar_debug] = true
	"
	exit	
elsif variable[1].downcase =~ /stats|statistics/i
	respond "\n
	#{UserVars.tgames[:total_games].to_s.ljust(6)} - Total Mini-Games Played
	#{UserVars.tgames[:total_seashells].to_s.ljust(6)} - Total Seashells Found Playing
	#{((UserVars.tgames[:total_games] * 1000) / UserVars.tgames[:total_seashells]).to_s.ljust(6)} - Avg Cost Silver Per Seashell
	
	Tier - Outcomes - Shells Found - Avg - Chance
	1    - #{UserVars.tgames[:total_tier1].to_s.rjust(8)} - #{UserVars.tgames[:total_tier1s].to_s.rjust(12)} - #{'0'.rjust(2)}  - #{(UserVars.tgames[:total_tier1].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	2    - #{UserVars.tgames[:total_tier2].to_s.rjust(8)} - #{UserVars.tgames[:total_tier2s].to_s.rjust(12)} - #{(UserVars.tgames[:total_tier2s] / UserVars.tgames[:total_tier2]).to_s.rjust(2)}  - #{(UserVars.tgames[:total_tier2].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	3    - #{UserVars.tgames[:total_tier3].to_s.rjust(8)} - #{UserVars.tgames[:total_tier3s].to_s.rjust(12)} - #{(UserVars.tgames[:total_tier3s] / UserVars.tgames[:total_tier3]).to_s.rjust(2)}  - #{(UserVars.tgames[:total_tier3].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	4    - #{UserVars.tgames[:total_tier4].to_s.rjust(8)} - #{UserVars.tgames[:total_tier4s].to_s.rjust(12)} - #{(UserVars.tgames[:total_tier4s] / UserVars.tgames[:total_tier4]).to_s.rjust(2)}  - #{(UserVars.tgames[:total_tier4].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	5    - #{UserVars.tgames[:total_tier5].to_s.rjust(8)} - #{UserVars.tgames[:total_tier5s].to_s.rjust(12)} - #{'0'.rjust(2)}  - #{(UserVars.tgames[:total_tier5].fdiv(UserVars.tgames[:total_games])*100).round(1).to_s.rjust(4)}%
	
	"
	exit
elsif variable[1].downcase =~ /highlights/i
	respond "\n
	Tier 5 Win Messaging for your highlight pleasure:

Eel Beds
You quickly try to grab the eel before it hits the bucket and manage to get a firm grip with both hands around its head

Water Cannons
Taking aim, you press the trigger on the a small water cannon as you aim at the mouth of the eel balloon, which fills completely and then explodes with water

Fish Pits
A scrawny half-krolvin lad takes your coins, and you lean forward, plunging both hands into the cold salt water as you feel around. Something slimy passes between your hands, and you clamp down hard, pulling out a white-finned pinkish grey hagfish

Dank Tidepools
You move into position and stick your hand into the dank confines, unable to feel anything within for several seconds.  Something slimy touches the back of your hand, and you quickly snatch at it, your fingers sinking into the sand!  Slowly, you pull a mucus-coated bright green baby eel out of the crevasse

Balloon-n-Darts
Almost indifferently, a lanky human boy hands you a bamboo dart and gestures at the colorful gaming board. You carefully aim and throw the dart, which pops a balloon before imbedding itself into the board. Sauntering over, the boy pulls the dart free, a card decorated with the ace of spades sticking out of the point

Whacky Eels
Yanking the food away, he yells at you, \"Whack them!\"  You quickly swing the stick around and manage to hit all of the eels
	
	"
	exit
elsif UserVars.tgames[:keep_container].nil? || UserVars.tgames[:sell_container].nil?
	respond "\n
You need to set your keep & sell container
;e echo UserVars.tgames[:keep_container] = \"cloak\"
;e echo UserVars.tgames[:sell_container] = \"backpack\"

For more info type ;tgames help
	
	"
	exit
end

before_dying { 
	if !squelch_script_running
		kill_script ("tsquelch") if Script.running?("tsquelch") 
	end
}

if UserVars.tgames[:squelch_script] && !Script.exists?("tsquelch.lic")
	respond "    You need to have ;TSQUELCH downloaded to squelch.

    Either disable squelching variable as shown below, or ;repo download tsquelch
    ;e echo UserVars.tgames[:squelch_script] = FALSE"
	exit
elsif UserVars.tgames[:squelch_script]
	squelch_script_running = true if Script.running?("tsquelch")
	if !squelch_script_running
		Script.start("tsquelch")
	end
end

def lootcheck(tier, game_location)
	if $frontend == 'stormfront' || $frontend == 'profanity'
		fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
		fam_window_end   = "<popStream/>\r\n"
	else
		fam_window_begin = "\034GSe\r\n"
		fam_window_end   = "\034GSf\r\n"
	end
	
	found_seashells		= 0
	found_items 		= []
	UserVars.tgames[:total_games] += 1
	UserVars.tgames[:total_tier1] += 1 if tier == 1
	UserVars.tgames[:total_tier2] += 1 if tier == 2
	UserVars.tgames[:total_tier3] += 1 if tier == 3
	UserVars.tgames[:total_tier4] += 1 if tier == 4
	UserVars.tgames[:total_tier5] += 1 if tier == 5
	echo "1" if UserVars.tgames[:debug_my_script]
	sleep 1
	echo "2" if UserVars.tgames[:debug_my_script]
	waitrt?
	echo "3" if UserVars.tgames[:debug_my_script]
	sleep 0.2 until (checkleft || checkright) if tier > 1
	waitrt?
	echo "4" if UserVars.tgames[:debug_my_script]
		
	if (GameObj.right_hand.noun || GameObj.left_hand.noun) =~ /seashell/
		if UserVars.tgames[:rummage_bucket]
			echo "5" if UserVars.tgames[:debug_my_script]
			result = dothistimeout "rummage my bucket", 5, Regexp.union(
				/You rummage through your inventory, looking for seashells.  You find (.*) new (?:seashells|seashell) and tuck your findings into your seashell bucket, bringing the total to|You rummage through your inventory, looking for seashells.  You find (.*) seashells and tuck your findings into your seashell bucket/
			)
			echo "6" if UserVars.tgames[:debug_my_script]
			if result =~ /You rummage through your inventory, looking for seashells.  You find (.*) new (?:seashells|seashell) and tuck your findings into your seashell bucket, bringing the total to/
				found_seashells = $1.to_i
			elsif result =~ /You rummage through your inventory, looking for seashells.  You find (.*) seashells and tuck your findings into your seashell bucket/
				found_seashells = $1.to_i
			else
				respond "You're not wearing a bucket, yet you have it set to use one, ;tgames help"
				exit
			end
		else
			result = dothistimeout "look my seashell", 5, Regexp.union(
				/It is worth (.*) seashells/
			)
			if result =~ /It is worth (.*) seashells./
				found_seashells = $1.to_i
				fput "redeem my seashell"
				pause 0.25
			else
				respond "Something went wrong with seashell putting away, tell Tysong"
			end
			exit if (GameObj.right_hand.noun || GameObj.left_hand.noun) =~ /seashell/
		end
	end
	
	UserVars.tgames[:total_seashells] += found_seashells
	UserVars.tgames[:total_tier1s] += found_seashells 		if tier == 1
	UserVars.tgames[:total_tier2s] += found_seashells 		if tier == 2
	UserVars.tgames[:total_tier3s] += found_seashells 		if tier == 3
	UserVars.tgames[:total_tier4s] += found_seashells 		if tier == 4
	UserVars.tgames[:total_tier5s] += found_seashells 		if tier == 5
	
	found_items.push(GameObj.left_hand)  if !GameObj.left_hand.noun.nil?
	found_items.push(GameObj.right_hand) if !GameObj.right_hand.noun.nil?
	
	found_items.each { |item|
		fput "put ##{item.id} in my #{UserVars.tgames[:sell_container]}" if tier <  UserVars.tgames[:keep_tier]
		fput "put ##{item.id} in my #{UserVars.tgames[:keep_container]}" if tier >= UserVars.tgames[:keep_tier]
	} if tier != 5

	_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{game_location} - #{UserVars.tgames[:total_games]} - T#{tier} - #{found_seashells}/#{UserVars.tgames[:total_seashells]} - #{found_items.map{|item| item.name}.reject(&:empty?).join(', ')}\r\n#{fam_window_end}") if UserVars.tgames[:familiar_debug]
	
	sleep 0.2 if (!GameObj.left_hand.noun.nil? || !GameObj.right_hand.noun.nil?) && tier != 5
	sleep 0.2 if (!GameObj.left_hand.noun.nil? || !GameObj.right_hand.noun.nil?) && tier != 5
	sleep 0.2 if (!GameObj.left_hand.noun.nil? || !GameObj.right_hand.noun.nil?) && tier != 5
	sleep 0.2 if (!GameObj.left_hand.noun.nil? || !GameObj.right_hand.noun.nil?) && tier != 5
	sleep 0.2 if (!GameObj.left_hand.noun.nil? || !GameObj.right_hand.noun.nil?) && tier != 5
	
	if (!GameObj.left_hand.noun.nil? || !GameObj.right_hand.noun.nil?) && tier != 5
		respond "One of your containers is full! Go sell!"
		exit
	end
end

def bank_coins
	respond "Out of Coins"
	if UserVars.tgames[:pause_runs]
		respond "\n
		PAUSING SCRIPT - OUT OF COINS!
		PAUSING SCRIPT - OUT OF COINS!
		PAUSING SCRIPT - OUT OF COINS!
		;unpause tgames
		TO CONTINUE TO GET #{UserVars.tgames[:silvers]} COINS.
		Can also set following to not pause in future
		;e echo UserVars.tgames[:pause_runs] = false
		
		"
		pause_script
	end
	current_room = Room.current.id
	Script.run("go2", "bank")
	sleep 0.5
	fput "deposit all"
	result = dothistimeout "withdraw #{UserVars.tgames[:silvers]} silver", 5, Regexp.union(
		/The teller (?:scribbles|carefully records) the (?:transaction|transaction,)/,
		/You don't have that much in your account/
	)
	if result =~ /You don't have that much in your account/
		respond "You're out of funds! Time to find more!"
		exit
	elsif result =~ /The teller (?:scribbles|carefully records) the (?:transaction|transaction,)/
		respond "Restocked, let's go back to playing games!"
		Script.run("go2", "#{current_room}")
		sleep 0.5
	else
		respond "Something went wrong on bank routine, tell Tysong"
		exit
	end
end

loop {
	current_game = EG_Games.detect{|key, value| value[:rooms].include? Room.current.id }
	if current_game.empty? || current_game.nil?
		_respond "Not at a game, you should probably start this in a games room."
		_respond "Convenient clickable ;go2 options for various games below."
		_respond "Please remember to relaunch ;tgames once at a mini-games location"
		_respond ""
		_respond ';go2 <d cmd=";go2 26531">26531</d> - Dank Tidepools'
		_respond ';go2 <d cmd=";go2 27560">27560</d> - Balloon-n-Darts'
		_respond ';go2 <d cmd=";go2 26591">26591</d> - Fish Pits'
		_respond ';go2 <d cmd=";go2 27574">27574</d> - Water Cannons'
		_respond ';go2 <d cmd=";go2 26593">26593</d> - Eel Beds'
		_respond ';go2 <d cmd=";go2 27567">27567</d> - Whacky Eels'
		_respond ""
		exit
	end
	waitrt?
	result = dothistimeout "get #{current_game[1][:mechanic]}", 5, Regexp.union(
		/Not having the coins with you, you back away from the/,
		/You need at least one hand free to play this game/,
		/You do not have enough silver to play this game/,
		/Your games pass has expired, you'll need to buy a new one to play games here\./,
		/#{current_game[1][:generic_msg]}#{current_game[1][:tier1]}/,
		/#{current_game[1][:generic_msg]}#{current_game[1][:tier2]}/,
		/#{current_game[1][:generic_msg]}#{current_game[1][:tier3]}/,
		/#{current_game[1][:generic_msg]}#{current_game[1][:tier4]}/,
		/#{current_game[1][:generic_msg]}#{current_game[1][:tier5]}/,
	)
	if result =~ /Not having the coins with you, you back away from the|You do not have enough silver to play this game/
		bank_coins
	elsif result =~ /You need at least one hand free to play this game/
		respond "empty your hands!"
		exit
	elsif result =~ /Your games pass has expired, you'll need to buy a new one to play games here\./
		respond "Your game pass expired, time to buy a new one!"
		respond "Go buy a new one to continue!"
		exit
	elsif result =~ /#{current_game[1][:generic_msg]}#{current_game[1][:tier1]}/
		lootcheck(1, current_game[0])
	elsif result =~ /#{current_game[1][:generic_msg]}#{current_game[1][:tier2]}/
		lootcheck(2, current_game[0])
	elsif result =~ /#{current_game[1][:generic_msg]}#{current_game[1][:tier3]}/
		lootcheck(3, current_game[0])
	elsif result =~ /#{current_game[1][:generic_msg]}#{current_game[1][:tier4]}/
		lootcheck(4, current_game[0])
	elsif result =~ /#{current_game[1][:generic_msg]}#{current_game[1][:tier5]}/
		respond "T5 - WOHOO!"
		lootcheck(5, current_game[0])
		pause_script
	else
		respond "Not really sure, maybe new T5/jackpot"
		respond "Inform Tysong what the game line was"
		pause_script
	end
	
}
