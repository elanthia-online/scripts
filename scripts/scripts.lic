=begin
  Tiny wrapper around Lich's script directory that provides CLI-like utils

  commands:
    
    List all installed Lich scripts in sorted alphabetically:
      ;scripts ls
      ;scripts dir ... windows sucks
      ;scripts list

    Remove scripts
      ;scripts rm <script>
      ;scripts del <script> ... windows sucks
      ;scripts remove <script>

    Read a script
      ;scripts cat <script>
      ;scripts type <script> ... windows sucks
      ;scripts read <script>
    
    Search for a script by name
      ;scripts search <pattern>
    
    Search the contents of scripts
      ;scripts grep <pattern>
  
  Required: Lich > 5.0.0
  Author: Ondreian
  Tags:meta, scripts
  
  version: 1.0.1
  
  1.0.1 - Update for Ruby v3 compatibility
  
=end

class LocalScripts
  GLOB = "/**.lic"

  def self.path(patt)
    if patt.class == String && patt !~ /(.lic|.rb)$/
      patt = patt + ".lic"
    end

    if patt.class == String && patt[0] != "/"
      patt = "/" + patt
    end

    SCRIPT_DIR + patt
  end

  def self.list
    Dir[path GLOB].map { |file| File.basename(file) }
  end

  def self.absolute_list
    Dir[path GLOB]
  end

  def self.rm(script)
    File.delete path script
  end

  def self.exists?(script)
    File.exist? path script
  end

  def self.cat(script)
    File.read path script
  end
end

args = script.vars[1..-1]

args[0] = args[0].downcase

if args.empty? || ["ls", "dir", "list"].include?(args.first)
  respond LocalScripts.list.sort.join("\n")
  exit
end

if ["cat", "type", "read"].include?(args.first)
  # invalid arguments
  if args.size != 2
    respond "   <<ERROR>>"
    respond "   you must pass a script name to read"
    respond "   example:"
    respond "            ;scripts cat go2"
    exit
  end

  unless LocalScripts.exists?(args.last)
    respond "<< script : #{args.last} not found! >>"
    exit
  end
  respond "<< script : #{args.last} >>\n\n"
  respond LocalScripts.cat(args.last)
  respond "\n\n<< EOF >>"
  exit
end

if ["search"].include?(args.first)
  if args.size != 2
    respond "   <<ERROR>>"
    respond "   you must pass a pattern to search filenames for"
    respond "   example:"
    respond "            ;scripts search gem"
    exit
  end
  pattern = /#{args[1]}/
  respond LocalScripts.list.select { |file_name| file_name =~ pattern }.sort.join("\n")
  exit
end

if ["grep"].include?(args.first)
  if args.size != 2
    respond "
      << ERROR>>
      you must pass a pattern to search file contents for
      example:
              ;scripts grep go2
    "
    exit
  end

  pattern = %r{#{args[1..-1].join(" ")}}x

  LocalScripts.absolute_list.each do |file_name|
    line_num = 1
    File.open(file_name).each_line do |line|
      if line.match(pattern)
        left_col = "#{File.basename(file_name)}:#{line_num}".rjust(15)
        respond %{#{left_col}: #{line.strip}}
      end
      line_num = line_num + 1
    end
  end
  exit
end

if ["rm", "remove", "del"].include?(args.first)
  # invalid arguments
  if args.size != 2
    respond "   <<ERROR>>"
    respond "   you must pass a script name to remove"
    respond "   example:"
    respond "            ;scripts rm go2"
    exit
  end

  unless LocalScripts.exists?(args.last)
    respond "<< script : #{args.last} not found! >>"
    exit
  end

  respond "<< removing script : #{args.last} in 5 seconds.\n;k scripts to abort"
  sleep 5
  LocalScripts.rm args.last
  respond "success >> #{args.last} deleted..."
  exit
end

respond "
  scripts@0.0.1

  ;scripts ls                  show all of the scripts in your scripts dir
  ;scripts search <pattern>    find all scripts by their name that match the pattern
  ;scripts grep   <pattern>    search lines in a script that match a particular pattern
  ;scripts rm     <script>     remove a script from your scripts dir
  ;scripts cat    <script>     print the contents of a script out to read

"
