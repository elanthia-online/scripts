=begin
  crits.lic - very short prototype / example script to demonstrate potential usage of the CritRanks module.

             author: elanthia-online
               game: Gemstone
               tags: combat, information, demonstration
           required: Lich > 5.11.0
            version: 0.1.0 experimental / demonstration

  0.1.0 (2025-07-09)
    - initial concept release
    - intended to demonstrate methods to get crit information from the CritRanks module in Lich
=end

# load it if you ain't got it.
require File.join(LIB_DIR, 'gemstone', 'critranks.rb') unless defined?(CritRanks) && CritRanks.respond_to?(:parse)

# actions from briefcombat.lic to start us off stripped down a bit to match player, not everyone.
actions = ['gesture at',
           'gesture\.',
           'channel at',
           '(?:hurl|fire|swing|thrust) an? [\w \-\']+ at',
           'swing an? [\w \-\']+ at',
           'thrust(?: with)? a [\w \-\']+ at',
           'continue to sing a disruptive song',
           'draw an intricately glowing pattern in the air before',
           '(?:skillfully begin to)? weave another verse into (?:.*) harmony',
           'voice carries the power of thunder as (?:.*) call out an angry incantation in an unknown language',
           '(?:.*) directing the sound of (?:.*) voice at',
           'punch(?: with)? an? [\w \-\']+ at',
           '(?:make a precise )?attempt to (?:punch|jab|grapple|kick)',
           '(?:take aim and )?(?:fire|swing|hurl) an? [\w \-\']+ at']

combat_regex = /(#{actions.join('|')})/

# this be a classic game script - XML should not be required.  If this script were to track multiple targets
# then XML may become a requirement (for the npc.id).  But for now, let's set up to grab simple server output.

save_want_downstream = Script.current.want_downstream
save_want_downstream_xml = Script.current.want_downstream_xml
Script.current.want_downstream = true
Script.current.want_downstream_xml = false

# resolve_crit_ranks presently prints five of thirteen (5 /13) keys for prototype - hopefully most impactful
# Everything is based on a stun for the prototype.  In the wild - a change in position may be a better signal.
# Specifically, in this demo / prototype script, noncorp undead crits do not show because no stun results.
# However, if critter is dead, just say so - no need to share crit info.
# TODO: need a better way than GameObj.target.status, etc for dead
# TODO: If this heads to a production script we should:
#       Break crit resolver and message builder into two parts for easier maintenance
#       Refine the reporting (str concats) to provide appropriate spacing on multi-crit returns
#       Add XML elements to track multiple creature crits to specific npcs

def resolve_crit_rank(results)
  combat_results = results
  str = ''
  crit_results = {}
  not_crit_stunned = true
  combat_results.each do |combat_line|
    # break if GameObj.target.status == 'dead' # for prototype, skip gathering crit if critter dead

    crit_response = CritRanks.parse(combat_line)
    unless crit_response.empty?
      crit_response.each_value do |v|
        crit_results = v
      end
    end
    # TODO: Ugh. . . need a better way before production release of script
    # TODO: Need to weave in which creatures are not affected, even if the result says they should have been
    if (crit_results[:stunned]).positive? or crit_results[:fatal]
      if crit_results[:stunned] < 999 # or crit_results[:fatal]
        str << "\n" unless str.empty? #        " unless str.empty? # for multi crit results (multiple targets, flare crits, etc.)
        str << crit_results[:type] unless crit_results[:type].nil?
        str << ' Rank: ' unless crit_results[:type].nil?
        str << crit_results[:rank].to_s
        str << ' | ' unless crit_results[:rank].nil?
        str << crit_results[:location].gsub('_', ' ') unless crit_results[:location].nil?
        str << ' --> ' unless crit_results[:location].nil?
        str << crit_results[:position] unless crit_results[:position].nil?
        unless crit_results[:position].nil?
          str << ' and ' unless crit_results[:stunned] == 0
          str << ' and ' if crit_results[:fatal]
        end
        str << 'stunned ' << crit_results[:stunned].to_s << ' rounds. ' if crit_results[:stunned].positive?
        str << "#{monsterbold_start} dead!#{monsterbold_end} " if crit_results[:fatal]
        not_crit_stunned = false
      elsif crit_results[:stunned] == 999 && not_crit_stunned
        str << monsterbold_start << crit_results[:type] unless crit_results[:type].nil? # testing missing crits
        str << ' | ' unless crit_results[:type].nil?
        str << crit_results[:location] unless crit_results[:location].nil?
        str << ' --> ' unless crit_results[:location].nil?
        str << 'stunned, but who knows for how long? . . .' << monsterbold_end
      end
      pp crit_results if $debug && !crit_results.empty?
      crit_results = {}
    end
  end
  # if GameObj.target.status == 'dead' # need to figure if we need to test Infomon::XMLParser::Pattern::NpcDeathMessage
  #  str << monsterbold_start << ' DEAD! ' << monsterbold_end << ' '
  # end

  str
end

# main
loop do
  matchwait(combat_regex)
  combat_results = []
  line = get
  combat_results.push(line)
  until line =~ /Roundtime|exhausts itself/i
    line = get
    combat_results.push(line)
    break if line =~ /\.\.\.and cause (\d+) points? of damage!/i
  end
  test = resolve_crit_rank(combat_results)
  # Lich::Messaging.mono(test) unless test.empty?
  unless test.empty?
    _respond; _respond test; _respond
  end
end
# just because rubocop whines if we don't set them back (useless variable assignment)
Script.current.want_downstream = save_want_downstream
Script.current.want_downstream_xml = save_want_downstream_xml
