require 'redis'
require 'json'
require 'ostruct'
require 'securerandom'

class Cluster
  ##
  ## contextual logging
  ##
  module Log  
    def self.out(msg, label: :debug)
      #return unless Opts.debug
      if msg.is_a?(Exception)
        msg = %{
          #{msg.message}
          #{msg.backtrace.join("\n")}
        }
      end

      _respond Preset.as(:debug, 
        _view(msg, label))
    end

    def self._view(msg, label)
      label = [Script.current.name, label].flatten.compact.join(".")
      safe = msg.inspect
      safe = safe.gsub("<", "(").gsub(">", ")") if safe.include?("<") and safe.include?(">")
      "[#{label}] #{safe}"
    end

    def self.pp(msg, label = :debug)
      respond _view(msg, label)
    end

    def self.dump(*args)
      pp(*args)
    end
  end
  ##
  ## minimal options parser
  ##
  module Opts
    FLAG_PREFIX    = "--"
    
    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])        
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end
end

class Cluster
  ##
  ## contextual logging
  ##
  module Log  
    def self.out(msg, label: :debug)
      #return unless Opts.debug
      if msg.is_a?(Exception)
        msg = %{
          #{msg.message}
          #{msg.backtrace.join("\n")}
        }
      end

      _respond Preset.as(:debug, 
        _view(msg, label))
    end

    def self._view(msg, label)
      label = [Script.current.name, label].flatten.compact.join(".")
      safe = msg.inspect
      safe = safe.gsub("<", "(").gsub(">", ")") if safe.include?("<") and safe.include?(">")
      "[#{label}] #{safe}"
    end

    def self.pp(msg, label = :debug)
      respond _view(msg, label)
    end

    def self.dump(*args)
      pp *args
    end
  end
  ##
  ## minimal options parser
  ##
  module Opts
    FLAG_PREFIX    = "--"
    
    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])        
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end
end

class Cluster
  PERSONAL_GS_EVENTS = [%[gs], Char.name.downcase, %[*]].join(".")
  PUBLIC_GS_EVENTS   = [%[gs], %[pub], %[*]].join(".")
  NOOP               = -> channel, message {}
  UNSUPPORTED_METHOD = -> channel, message { return {error: "#{channel} is not implemented on #{Char.name}"} }
  TTL                = 5

  attr_reader :cb_map, :pending_requests, 
              :connected, :last_publish,
              :keep_alive, :event_loop,
              :pub, :sub

  def initialize()
    @cb_map           ||= {}
    @pending_requests ||= {}
    @connected        ||= {}
    @last_publish     ||= 0
    _connect()
    _link()
    _keepalive()
  end

  def _connect_local()
    #Log.out("...connecting to local redis instance...")
    @pub = Redis.new()
    @sub = Redis.new()
  end

  def _connect_remote(url)
    #Log.out("...connecting to remote redis instance at\n\n\t#{url}\n")
    @pub = Redis.new(url: url)
    @sub = Redis.new(url: url)
  end

  def _connect()
    if url = Opts.url
      _connect_remote(url.split("=").last)
    else
      _connect_local()
    end
  end

  def connected
    @connected.keys.select do |name| alive?(name) end
  end

  def alive?(name)
    # 30s intervals
    # 5s safety window for network latency
    (@connected.fetch(name.capitalize, 0) - Time.now.to_i).to_i.abs < 60
  end

  def make_channel_name(*parts)
    [%(gs), *[parts].flatten].compact.map(&:to_s).map(&:downcase).join(".")
  end

  def publish(*args)
    @last_publish = Time.now
    @pub.publish(*args)
  end
  
  def emit(channel, **payload)
    channel = make_channel_name(Char.name, channel)
    #Log.out([channel, payload], label: %i[msg out])
    publish(channel,
      payload.merge({from: Char.name}).to_json())
  end

  def broadcast(channel, **payload)
    channel = make_channel_name(%[pub], channel)
    #Log.out([channel, payload], label: %i[msg broadcast])
    publish(channel,
      payload.merge({from: Char.name}).to_json())
  end

  def cast(person, channel: nil, **payload)
    channel = make_channel_name(person, channel)
    #Log.out([channel, **payload], label: %i[cast to])
    publish(channel, 
      payload.merge({from: Char.name}).to_json())
  end

  def request(person, **payload)
    req_id = SecureRandom.hex(10)
    cast(person,  
      **payload.merge({ 
        uuid:    req_id,
        channel: [payload.fetch(:channel), %(request)]
      }))
    ttl = Time.now + payload.fetch(:timeout, TTL)
    @pending_requests[req_id] = ttl
    
    wait_while do pending_requests[req_id].is_a?(Time) and Time.now < ttl end
    resp = pending_requests[req_id]
    pending_requests.delete(req_id)
    # request timed out
    return TimeoutError.new("request to #{person} failed in #{TTL}s") if resp.is_a?(Time)
    # remote or local error happened during response/request cycle
    return Exception.new(resp.fetch(:error)) if resp.fetch(:error, false)
    # it's a real boy!
    return OpenStruct.new(resp)
  end

  def async_request(*args)
    Thread.new do request(*args) end
  end

  def map(people, **payload)
    people.map do |name| Thread.new do request(name, **payload) end end
      .map(&:value)
  end

  def _route_incoming(channel, message)
    begin
      kind_of_channel = channel.split(".").last.to_sym
      incoming = JSON.parse(message, symbolize_names: true)
      return if incoming.fetch(:from).eql?(Char.name)
      Log.out(incoming, label: %i[incoming] + channel.split(".")) if Script.current.vars.include?("--debug") and defined?(Log)
      # keep alive for connected clients
      _touch(channel, incoming)
      return _handle_response(channel, incoming) if incoming[:uuid] and kind_of_channel.eql?(:response)
      return _handle_request(channel, incoming)  if incoming[:uuid] and kind_of_channel.eql?(:request)
      _handle_leave(channel, incoming) if kind_of_channel.eql?(:leave)
      return _handle_cast(channel, incoming)
    rescue Exception => err
      Log.out(err, label: %i[dispatch error] + channel.split(".")) and defined?(Log)
    end
  end

  def _touch(_, incoming)
    from = incoming.fetch(:from, false)
    @connected[from] = Time.now if from
  end

  def _handle_leave(_, incoming)
    from = incoming.fetch(:from, false)
    @connected.delete(from) if from
  end
  
  def _handle_cast(channel, incoming)
    begin
      #Log.out([channel, incoming], label: %i[in cast])
      _callback = @cb_map.fetch(channel, NOOP).call(channel, 
        OpenStruct.new(incoming))
    rescue Exception => err
      Log.out(err, label: %i[dispatch error] + channel.split(".")) and defined?(Log)
    end
  end

  def _handle_request(channel, incoming)
    begin 
      #Log.out([channel, incoming], label: %i[in request])
      callback = @cb_map.fetch(channel, UNSUPPORTED_METHOD)
      response = callback.call(channel, 
        OpenStruct.new(incoming))
      _dispatch_response_object(incoming, response)
    rescue Exception => err
      #Log.out(err, label: %i[local request error] + channel.split("."))
      _dispatch_response_object(incoming, {error: err.message})
    end
  end

  def _handle_response(channel, incoming)
    begin 
      #Log.out([channel, incoming], label: %i[in response])
      resp_id  = incoming.fetch(:uuid)
      pending  = @pending_requests.fetch(resp_id, false)
      @pending_requests[resp_id] = incoming if pending
    rescue Exception => err
      #Log.out(err, label: %i[local response error] + channel.split("."))
      @pending_requests[resp_id] = err.message
    end
  end

  def _dispatch_response_object(incoming, response)
    from = incoming.fetch(:from, false) or fail "Request[`from` was missing]"
    cast(from, 
      **response.merge({
          channel: [incoming.fetch(:uuid), %(response)],
          uuid:    incoming.fetch(:uuid),
          from:    Char.name,
        }))
  end

  def on_broadcast(channel, &block)
    fail "no block given to Cluster#on_broadcast" unless block_given?
    @cb_map[%(gs.pub.#{channel.to_s}).downcase] = block
    self
  end

  def on_cast(channel, &block)
    fail "no block given to Cluster#on_cast" unless block_given?
    @cb_map[%(gs.#{Char.name}.#{channel.to_s}).downcase] = block
    self
  end

  def on_request(channel, &block)
    fail "no block given to Cluster#on_request" unless block_given?
    @cb_map[%(gs.#{Char.name}.#{channel.to_s}.request).downcase] = block
    self
  end

  def _link()
    @event_loop = Thread.new do 
      begin
        @sub.psubscribe(PERSONAL_GS_EVENTS, PUBLIC_GS_EVENTS) do |on|
          on.psubscribe do |channel| Log.out(channel, label: %i[subscribed]) end
          on.pmessage do |pattern, channel, message| _route_incoming(channel, message) end
        end
      rescue Redis::BaseConnectionError => error
        Log.out(error, label: %i[err conn]) and defined?(Log)
        sleep 1
        retry
      end
    end
  end

  def _keepalive()
    @keepalive = Thread.new do 
      loop do 
        broadcast(:ping)
        sleep 35
      end
    end
  end

  def destroy()
    Log.out("cleaning up", label: %i[destroy]) and defined?(Log)
    broadcast(:leave)
    [@event_loop, @keepalive].map(&:kill).each(&:join)
  end

  def self.of()
    cluster = Cluster.new()
    before_dying do cluster.destroy() end
    cluster.on_request(:api) do |_, req| {methods: cluster.cb_map.keys} end
    cluster.on_broadcast(:announce) do |_, req| cluster.cast(req.from, channel: :ack) end
    cluster.broadcast(:announce)
    return cluster
  end
  
  def self.cluster()
    @cluster
  end

  def self.up?
    not @cluster.nil?
  end

  def self.method_missing(method, *args, &block)
    Cluster.init()
    fail Exception, "Cluster.init() must be called before performing singleton Cluster actions" unless up?
    @cluster.send(method, *args, &block)
  end

  def self.parse(str)
    JSON.parse(str, symbolize_names: true)
  end

  @cluster = nil
  def self.init()
    return @cluster if up?
    @cluster = Cluster.of()
    @cluster
  end

  Cluster.init()
end

class Cluster
  class Registry
    attr_reader :namespace
    def initialize(namespace = Char.name)
      @namespace = namespace
    end

    def _key(str)
      [@namespace, str].map(&:downcase).map(&:to_s).join(".")
    end
    
    def put(key, val)
      Cluster.pub.set(_key(key), val.to_json)
    end

    def get(key)
      Cluster.parse(
        Cluster.pub.get(
          _key(key)))
    end
  end

  def self.registry(namespace = nil)
    Registry.new(namespace)
  end
end


load("scripts/cluster_callbacks.rb") if Script.exists?("cluster_callbacks.rb")
# keepalive
loop do sleep(1) end 