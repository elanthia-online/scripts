#quiet
=begin

	edit variables shared by all scripts

	;vars help

   original author: Tillmen (tillmen@lichproject.org)
   maintained by: Elanthia-Online
   game: Gemstone
   tags: core
   required: Lich > 5.0.1
   version: 1.0

	changelog:
		1.0 (2021-12-09) 
			Baselined GTK3 variant for consistency 
		0.9 (2021-03-01): 
			Updated menu elements to support GTK3 in Lich5
		0.8 (2020-03-20:
			updated to support GTK3
		0.7 (2015-04-26):
			prompt to save in GUI when new vars are added
		0.6 (2015-02-01):
			add default text to new var textboxes
		0.5 (2015-02-01):
			sort vars alphabetically in gui
		0.4 (2015-02-01):
			add gui
		0.3 (2015-01-06):
			fix bug when updating a setting
		0.2 (2014-12-17):
			don't use Vars.send

=end

if (script.vars[1] == 'set') and (script.vars[0] =~ /^set\s+([^\s]+)\s*=\s*(.+)/)
	name = $1
	value = $2.strip
	if Vars[name].nil?
		Vars[name] = value
		respond "\n--- variable \"#{name}\" set to: \"#{value}\"\n\n"
	else
		old_value = Vars[name]
		Vars[name] = value
		respond "\n--- variable #{name} changed to: #{value} (was #{old_value})\n\n"
	end
elsif (script.vars[1] =~ /^del(ete)?$|^rem(?:ove)?$/) and script.vars[2]
	if Vars[script.vars[2]].nil?
		respond "\n--- variable #{script.vars[2]} does not exist\n\n"
	else
		Vars[script.vars[2]] = nil
		respond "\n--- variable #{script.vars[2]} was deleted\n\n"
	end
elsif script.vars[1] == 'list'
	if Vars.list.empty?
		respond "\n--- no variables are set\n\n"
	else
		output = "\n--- #{XMLData.name}'s variables:\n\n"
		max_name = 0; Vars.list.keys.each { |k| max_name = [max_name,k.length].max }
		Vars.list.each { |name,value|
			output.concat "   #{name.rjust(max_name)}:  #{value}\n"
		}
		output.concat "\n"
		respond output
	end
elsif defined?(Gtk) and (script.vars[1] == 'setup')
	window = nil
	done = false
	Gtk.queue {
		vars = Vars.list.to_a.sort { |a,b| a[0].to_s <=> b[0].to_s }
		textboxes = Array.new
		table = Gtk::Table.new((vars.length + 1), 3)
		vars.each_index { |i|
			label = Gtk::Label.new(vars[i][0].to_s)
			box = Gtk::Box.new(:horizontal)
			box.pack_end(label, :expand => false, :fill => false, :padding => 0)
			table.attach(box, 0, 1, i, (i + 1), Gtk::AttachOptions::FILL, Gtk::AttachOptions::FILL, 3, 3)
			textbox = Gtk::Entry.new
			if vars[i][1].class == String
				textbox.text = vars[i][1]
			else
				textbox.text = "#{vars[i][1].class}: #{vars[i][1].inspect}"
				textbox.editable = false
			end
			table.attach(textbox, 1, 2, i, (i + 1), (Gtk::AttachOptions::EXPAND|Gtk::AttachOptions::FILL), Gtk::AttachOptions::FILL, 3, 3)
			textboxes[i] = textbox
			delete_button = Gtk::Button.new(:label => "Delete Entry")
			table.attach(delete_button, 2, 3, i, (i + 1), Gtk::AttachOptions::SHRINK, Gtk::AttachOptions::FILL, 3, 3)
			delete_button.signal_connect('clicked') {
				report_errors {
					label.sensitive = false
					textbox.sensitive = false
					delete_button.sensitive = false
					textboxes[i] = nil
				}
			}
		}
		new_vars = Array.new
		sw = nil
		add_new_row = proc {
			i = new_vars.length
			table.n_rows = table.n_rows + 1
			label = Gtk::Entry.new
			label.text = "(new var name)"
			table.attach(label, 0, 1, (table.n_rows - 1), table.n_rows, Gtk::AttachOptions::FILL, Gtk::AttachOptions::FILL, 3, 3)
			textbox = Gtk::Entry.new
			textbox.text = "(new var value)"
			textbox.sensitive = false
			table.attach(textbox, 1, 2, (table.n_rows - 1), table.n_rows, (Gtk::AttachOptions::EXPAND|Gtk::AttachOptions::FILL), Gtk::AttachOptions::FILL, 3, 3)
			new_vars[i] = [ label, textbox ]
			delete_button = Gtk::Button.new(:label => "Delete Entry")
			delete_button.sensitive = false
			table.attach(delete_button, 2, 3, (table.n_rows - 1), table.n_rows, Gtk::AttachOptions::SHRINK, Gtk::AttachOptions::FILL, 3, 3)
			label.show
			textbox.show
			delete_button.show
			label.signal_connect('focus-in-event') {
				report_errors {
					if label.text == "(new var name)"
						label.text = ''
					end
					unless textbox.sensitive?
						textbox.sensitive = true
						delete_button.sensitive = true
						add_new_row.call
						Thread.new {
							sleep 0.05
							inc = (sw.vadjustment.upper - sw.vadjustment.value - sw.vadjustment.page_size) / 10.0
							10.times { sw.vadjustment.value = sw.vadjustment.value + inc; sleep 0.02 }
							sw.vadjustment.value = (sw.vadjustment.upper - sw.vadjustment.page_size)
						}
					end
				}
			}
			textbox.signal_connect('focus-in-event') {
				report_errors {
					if textbox.text == "(new var value)"
						textbox.text = ''
					end
				}
			}
			delete_button.signal_connect('clicked') {
				report_errors {
					label.sensitive = false
					textbox.sensitive = false
					delete_button.sensitive = false
					new_vars[i][1] = nil
				}
			}
		}
		add_new_row.call
		vp = Gtk::Viewport.new(nil, nil)
		vp.add(table)
		sw = Gtk::ScrolledWindow.new
		sw.set_policy(:automatic, :always)
		sw.add(vp)
		window = Gtk::Window.new
		window.title = "Lich - #{Char.name}'s Vars"
		window.set_icon(@default_icon)
		window.add(sw)
		window.signal_connect('delete_event') {
			report_errors {
				modified = new_vars.any? { |v| (v[1] != nil) and v[1].sensitive? }
				unless modified
					vars.each_index { |i| if textboxes[i].nil? or ((vars[i][1].class == String) and (vars[i][1] != textboxes[i].text)); modified = true; break; end }
				end
				if modified
					dialog = Gtk::MessageDialog.new(:parent=> nil, :flags => 
						   :modal, :type => :question, :buttons => :yes_no, :message => "Save changes?")
					dialog.title = "Lich - #{Char.name}'s Vars"
					dialog.set_icon(@default_icon)
					response = nil
					response = dialog.run
					dialog.destroy
					if response == Gtk::ResponseType::YES
						vars.each_index { |i|
							if textboxes[i].nil?
								Vars[vars[i][0]] = nil
							elsif (vars[i][1].class == String) and (vars[i][1] != textboxes[i].text)
								Vars[vars[i][0]] = textboxes[i].text
							end
						}
						new_vars.each { |var|
							if (var[1] != nil) and var[1].sensitive?
								if var[0].text.empty?
									echo "warning: ignoring new variable with no name"
								elsif Vars.list.keys.include?(var[0].text)
									echo "warning: new variable #{var[0].text} already exists; ignoring"
								else
									Vars[var[0].text] = var[1].text
								end
							end
						}
					end
				end
				done = true
			}
		}
		window.set_default_size((Gdk::Screen.default.width/2), (Gdk::Screen.default.height/3))
		window.set_window_position(:center)
		window.show_all
	}
	begin
		wait_until { done }
	ensure
		Gtk.queue { window.destroy }
	end
else
	output = "\n"
	output.concat "   #{$clean_lich_char}#{script.name} setup              open a window to edit variables\n" if defined?(Gtk)
	output.concat "   #{$clean_lich_char}#{script.name} set NAME=VALUE     add or change a variable\n"
	output.concat "   #{$clean_lich_char}#{script.name} delete NAME        delete a variable\n"
	output.concat "   #{$clean_lich_char}#{script.name} list               show current variables\n"
	output.concat "\n"
	respond output
end
