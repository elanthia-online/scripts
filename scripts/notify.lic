=begin
  version: 1.3.1

  Shows system notifications when:
    * someone messages you on lnet
    * someone whispers to you
    * someone speaks to you
    * something generally bad happens to your character

  supported:
    Linux (lib-notify)
    OSX   (display)

  contributions:
    Dalem - OSX info

  documentation:
    ;notify                      turn on the notify watcher
    ;notify sounds               list all sounds that notify can find on your system
    ;notify sounds <substring>   list all sounds that match a substring
    ;notify set-sound <sound>    set the sound to play when
    ;notify mute                 turns off sound

  usage:
    # example how to add your own hooks
    unless Module.const_get("Notify").is_a?(Module)
      start_script "notify"
    end
    # we must set a sound for this script
    # because it is in a different thread
    Notify::Sounds.set "zelda/email"

    Notify.notify(to: "Ondreian", from: "taters", body: "i'm important", type: Script.current.name)

  notes:
    * to be able to use Notify from another script it must be ;trusted
      otherwise it be available the Main (global) context
    * will no longer ping you about stuns while doing Dark Chamber reps

  changelog:
    2-15-2017 add danger notifications for low health and stun
    2-17-2017 add pattern matching to ;notify sounds command
    2-18-2017 add spinners to notifications
    2-26-2025 fix for Lich 5.11+, rubocop code

  Required: Lich 4.3.12, lib-notify
  Author: Ondreian
  Tags: util

=end
require "ostruct"
require "socket"
require "json"

class ::String
  def is_i?
    !!(self =~ /\A[-+]?[0-9]+\z/)
  end
end

class ::MatchData
  def to_struct
    OpenStruct.new to_hash
  end

  def to_hash
    Hash[self.names.zip(self.captures.map(&:strip).map do |capture|
      if capture.is_i? then capture.to_i else capture end
    end)]
  end
end

class ::Hash
  def to_struct
    OpenStruct.new self
  end
end

module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def OS.mac?
    (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def OS.unix?
    !OS.windows?
  end

  def OS.linux?
    OS.unix? and not OS.mac?
  end

  def OS.which?(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
      exts.each { |ext|
        exe = File.join(path, "#{cmd}#{ext}")
        return exe if File.executable?(exe) && !File.directory?(exe)
      }
    end
    return nil
  end
end

module Notify
  ##
  ## contextual logging
  ##
  module Log
    def self.bold(msg)
      _respond "<pushBold/>#{msg}<popBold/>"
    end

    def self.out(msg, label: :debug)
      return if !Script.current.vars.include?("--debug") && !msg.is_a?(Exception)
      if msg.is_a?(Exception)
        msg = %{
          #{msg.message}
          #{msg.backtrace.join("\n")}
        }
      end

      bold _view(msg, label)
    end

    def self._view(msg, label)
      %{[#{Script.current.name}.#{label}] #{msg}}
    end

    def self.pp(msg, label = :debug)
      respond _view(msg.inspect, label)
    end

    def self.dump(*args)
      pp(*args)
    end
  end

  class Sounds
    SOUNDS_DIR = if OS.linux?
                   ["/usr/share/sounds/"]
                 elsif OS.mac?
                   [File.expand_path("~/Library/Sounds/"), "/System/Library/Sounds/"]
                 else
                   []
                 end

    BIN = if OS.linux?
            "paplay"
          elsif OS.mac?
            "afplay"
          else
            nil
          end

    def self.to_a
      SOUNDS_DIR.map do |dir|
        Dir[dir + "**/*"]
      end.flatten
         .select do |path|
        path =~ /\.([a-z0-9A-Z]+)$/
      end
    end

    def self.match(name)
      to_a.select do |file| file =~ /#{name}/i end
    end

    def self.[](name)
      to_a.find do |file| file =~ /#{name}/i end
    end

    def self.current
      Settings[:sound]
    end

    def self.full_sound_path
      self[current]
    end

    def self.set(sound)
      Settings[:sound] = sound
      Settings.save
    end

    def self.play(sound = full_sound_path)
      %x{#{BIN} #{self[sound]}} if OS.which?(BIN) && sound
    end
  end

  class Cooldown
    attr_accessor :max_size

    ##
    ## only allow notifications from
    ## a particular source to happen
    ## as most every 5 seconds
    ##
    ## TODO : make this configurable?
    ##
    def self.ttl()
      Time.now + 5
    end

    def initialize(max_size = 4)
      @data = {}
      @max_size = max_size
    end

    def put(key, value)
      @data.store key, { cycles: 0, ttl: Cooldown.ttl(), value: value }
      age_keys
      prune
    end

    def has_key?(key)
      !read(key).nil?
    end

    def read(key)
      prune
      if (value = @data[key])
        touch(key)
        age_keys
      end
      value
    end

    def touch(key)
      @data[key][:cycles] = 0
    end

    def age_keys
      @data.each { |k, _v| @data[k][:cycles] += 1 }
    end

    def prune
      max     = 0
      stale   = []
      now     = Time.now
      @data.each do |k, v|
        ## if this key is no longer on cooldown
        ## flush it from the hybrid LRU Cache
        if now > v[:ttl]
          Log.out("pruning #{k} >> :ttl", label: :cooldown)
          @data.delete(k)
        ## if it's a new max cycle
        ## clear the previously scheduled keys
        ## and schedule it for removal
        elsif v[:cycles] > max
          stale.clear
          stale << k
        ## if it matches the current max cycles
        ## also add it to the schedule
        elsif v[:cycles].eql?(max)
          stale << k
        end
      end
      ## skip stale prunes if the cache is still small
      return unless @data.size > @max_size
      stale.each do |k|
        Log.out("pruning #{k} >> :cycles", label: :cooldown)
        @data.delete(k)
      end
    end
  end

  class Server
    PORT = 3434
    HOST = "localhost"

    @@self = nil

    def self.exists?
      begin
        Timeout::timeout(1) do
          begin
            s = TCPSocket.new(HOST, PORT)
            s.close
            return true
          rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
            return false
          end
        end
      rescue Timeout::Error
        # silence is golden
      end
      return false
    end

    def self.local?
      !@@self.nil?
    end

    def self.close()
      Log.out(">> closing", label: :server)
      @@self.close()
      @@self = nil
    end

    def self.self()
      @@self
    end

    def self.link()
      return [Sink.link()] if Server.exists?
      @@self = Server.new
      return [Sink.link(), @@self]
    end

    attr_reader :bridge, :consumer, :acceptor, :clients, :inbox

    def initialize()
      @bridge  = TCPServer.open(HOST, PORT)
      @clients = []
      @inbox   = Queue.new
      Log.out("creating notify background server at #{HOST}:#{PORT}", label: :server)
      consume()
      accept_clients()
    end

    def close()
      @bridge.close()
    end

    def consume()
      @consumer = Thread.new do
        loop do
          until @inbox.empty?
            begin
              packet, client = @inbox.shift
              kind, message = packet
              case kind.to_sym
              when :ping
                pong(client)
              else
                schedule_notification(kind, message)
              end
            rescue => exception
              Log.out(exception, label: :error)
            end
          end
          sleep 0.1
        end
      end
    end

    def accept_clients()
      @acceptor = Thread.new do
        loop do
          Thread.fork(bridge.accept) do |client|
            clients << client
            while (message = client.gets)
              begin
                Log.out(message, label: :server_incoming)
                @inbox << [JSON.parse(message), client]
                sleep 0.1
              rescue => exception
                Log.out(exception, label: :error)
              end
            end
            clients.delete(client)
          end
        end
      end
    end

    def schedule_notification(char, message)
      begin
        message = Notify.fmt_message(char, message)
        if Notify.should_notify_about?(message)
          Notify.notify(message)
          COOLDOWN.put(message.from, 1)
        else
          Log.out("skipping from #{message.from}", label: :server)
        end
      rescue => exception
        Log.out(exception, label: :error)
      end
    end

    def pong(client)
      client << ["pong", 1].to_json + "\n"
    end
  end

  class Sink
    @@socket    = nil
    @@reader    = nil
    @@ping      = nil
    @@keepalive = Time.now

    def self.link()
      @@socket = TCPSocket.open(Server::HOST, Server::PORT)
      @@reader = Sink.read()
      @@ping   = Sink.ping()
      self
    end

    def self.read()
      Thread.new do
        while (from_server = @@socket.gets)
          begin
            Log.out(JSON.parse(from_server))
            Sink.consume(*JSON.parse(from_server))
          rescue => exception
            Log.out(exception, label: :error)
          end
          break if Sink.closed?
        end
      end
    end

    def self.consume(kind, message)
      case kind.to_sym
      when :pong
        @@keepalive = Time.now
      else
        Log.out(message, label: kind.to_sym)
      end
    end

    def self.close()
      Log.out(">> closing", label: :sink)
      @@socket.close
      self
    end

    def self.cast(message)
      return if @@socket.nil? or @@socket.closed?
      begin
        @@socket << [Char.name, message].to_json + "\n"
      rescue
        # reconnect
      end
      self
    end

    def self.ping()
      Thread.new do
        loop do
          @@socket << ["ping"].to_json + "\n"
          sleep(5)
        end
      end
    end

    def self.closed?
      @@keepalive < Time.now - 11 || @@socket.closed?
    end
  end

  HELP = <<-HELP
    ;notify@1.0.0

    ;notify                      turn on the notify watcher
    ;notify sounds               list all sounds that notify can find on your system
    ;notify set-sound <sound>    set the sound to play when
    ;notify play <sound>         play a sound one time without changing any settings
    ;notify mute                 turns off sound
  HELP

  PRIVATE_MESSAGE = /^\[Private\]\-GSIV:(?<from>.*?): "(?<body>.*?)"/
  GM_SEND         = /^SEND\[(?<from>\w+)\]\s+(?<body>.*?)$/
  OOC_WHISPER     = /^\(OOC\) (?<from>.*?)'s player whispers(?: to the group)?, "(?<body>.*?)"$/
  IC_WHISPER      = /^(?<from>.*?) whispers(?: to the group)?, "(?<body>.*?)"$/
  SPEECH          = /^Speaking (?:.*?|)to you, (?<from>.*?) (?:.*?), "(?<body>.*?)"$/
  SPINNER         = /^(.*?) comes to a stop pointing directly at you!$/
  LEVELED_UP      = /^You are now level (?<level>\d+)!$/
  SHOP_SALE       = /^Your (?<item>.*?) just sold for (?<silvers>.*?) silvers from/
  RAFFLE          = /^You\ssense\syou\shave\sjust\swon\sa\sraffle/

  MESSAGE_PATTERN = Regexp.union(PRIVATE_MESSAGE, GM_SEND, IC_WHISPER, OOC_WHISPER, SPEECH, SPINNER, LEVELED_UP)
  APP_NAME        = "gemstone"
  ICON            = "mail-send-receive"
  TIMEOUT         = 30 # seconds
  COOLDOWN        = Cooldown.new
  TRAINING_AREAS  = [16994]

  NOTIFY = if OS.linux?
             "notify-send"
           elsif OS.mac?
             "osascript"
           else
             nil
           end
  ##
  ## system messages on Linux are of a fixed interval
  ## you cannot easily configure this
  ##
  def self.show(message)
    message = message.to_struct if message.is_a?(Hash)
    title = [message.from, message.to || Char.name].join(" => ")
    if OS.linux?
      %x{#{NOTIFY} "#{title} [#{message.type}]" "#{message.body}" --icon=#{ICON} --app-name=#{APP_NAME}}
    elsif OS.mac?
      %x{#{NOTIFY} -e 'display notification "#{message.body}" with title "#{title} #{message.type}"'}
    else
      # silence is golden
    end
  end

  def self.notify(incoming)
    incoming = incoming.to_struct if incoming.is_a?(Hash)
    Notify.show(incoming)
    Sounds.play Sounds.current
  end

  def self.duration=(milliseconds)
    Settings[:duration] = milliseconds
    Settings.save
  end

  def self.duration
    Settings[:duration] ||= 3000
  end

  def self.ignore(*chars)
    Settings[:ignored] = ignored + chars
    Settings.save
  end

  def self.unignore(*chars)
    Settings[:ignored] = ignored - chars
    Settings.save
  end

  def self.ignored
    Settings[:ignored] ||= []
  end

  def self.play(sound)
    Sounds.play sound
  end

  def self.with_sound(this_sound, &block)
    previous_sound = Notify::Sounds.current
    Notify::Sounds.set this_sound
    block.call
    Notify::Sounds.set previous_sound
  end

  def self.watch()
    Notify::Server.link()
    Notify.fork()

    before_dying do
      @@background.join.kill
      Sink.close()
      Notify::Server.close() if Notify::Server.local?
    end

    while (line = get)
      if line =~ MESSAGE_PATTERN
        if Sink.closed?
          Log.out("restarting tcp sink service", label: :sink)
          Notify::Server.link()
        end
        Sink.cast(line)
      end
    end
  end

  IGNORED_BODIES = /^Clearcheck\.|^Clear:|^Coinme$/

  def self.should_notify_about?(incoming)
    not should_skip_message?(incoming)
  end

  def self.should_skip_message?(incoming)
    ignored.include?(incoming.from) ||
      incoming.body =~ IGNORED_BODIES ||
      COOLDOWN.has_key?(incoming.from)
  end

  def self.fork()
    @@background = Thread.new {
      ttl = nil
      loop {
        sleep 0.15
        ttl = nil if ttl < Time.new - TIMEOUT
        next unless ttl.nil?
        if (message = should_inform_user?)
          ttl = Time.now
          notify(
            from: "notify",
            type: "danger",
            body: message,
          )
        end
      }
    }
  end

  PLAYER_MESSAGES = %w(lnet speech whisper)

  def self.fmt_message(char, line)
    if (incoming = line.match(PRIVATE_MESSAGE).to_struct)
      incoming[:type] = "lnet"
    elsif (incoming = line.match(GM_SEND).to_struct)
      incoming[:type] = "gm"
    elsif (incoming = line.match(SPEECH).to_struct)
      incoming[:type] = "speech"
    elsif (incoming = line.match(OOC_WHISPER).to_struct)
      incoming[:type] = "whisper"
    elsif line =~ SPINNER
      incoming = OpenStruct.new(
        from: :merchant,
        type: :spinner,
        body: "#{char} has been spun for a service"
      )
    elsif line =~ RAFFLE
      incoming = OpenStruct.new(
        from: :raffle,
        type: :win,
        body: "#{char} won a raffle"
      )
    elsif (data = line.match(LEVELED_UP).to_struct)
      incoming = OpenStruct.new(
        from: :game,
        type: :level_up,
        body: "#{char} is now level #{data.level}"
      )
    elsif line.match(SHOP_SALE).to_struct
      incoming = OpenStruct.new(
        from: :shop,
        type: :sale,
        body: line,
      )
    else
      incoming = line.match(IC_WHISPER).to_struct
      incoming[:type] = "whisper:ic"
    end

    incoming[:to] = char
    return incoming
  end

  def self.should_inform_user?
    if stunned? && !TRAINING_AREAS.include?(Room.current.id)
      "#{Char.name} has been stunned!"
    elsif percenthealth < 90
      "#{Char.name}'s health is at #{percenthealth}%"
    else
      false
    end
  end
end

if Script.current.vars.first == "help"
  respond Notify::HELP
  exit
end

if Script.current.vars.include?("sounds")

  sounds = Notify::Sounds.match(Script.current.vars.last || "/").map do |file|
    file.split("/")[-2..-1].join("/")
  end
  respond sounds.sort.join("\n")
  exit
end

if Script.current.vars.include?("play")
  respond Notify::Sounds[Script.current.vars.last]
  Notify::Sounds.play Notify::Sounds[Script.current.vars.last]
  exit
end

if Script.current.vars.include?("mute")
  Notify::Sounds.set nil
  respond "[notify] muted"
  exit
end

if Script.current.vars[1] == "ignore"
  Notify.ignore(*Script.current.vars[2..-1].map(&:capitalize))
  respond "ignored : " + Notify.ignored.join(", ")
  exit
end

if Script.current.vars[1] == "unignore"
  Notify.unignore(*Script.current.vars[2..-1].map(&:capitalize))
  respond "ignored : " + Notify.ignored.join(", ")
  exit
end

unless OS.which?(Notify::NOTIFY)
  raise StandardError.new "expected #{Notify::NOTIFY} exectuable (notify-send) not found in $PATH"
end

if Script.current.vars.include?("set-sound")
  Notify::Sounds.set Script.current.vars.last
  if Notify::Sounds.full_sound_path
    respond "[notify] playing -> #{Notify::Sounds.full_sound_path}"
    Notify::Sounds.play Notify::Sounds[Notify::Sounds.full_sound_path]
  else
    respond "[notify] muted"
  end
  exit
end

unless Script.current.vars.first.eql?("--debug") or Script.current.vars.empty?
  # unhandled argument
  respond Notify::HELP
  exit
end

Notify.watch()
