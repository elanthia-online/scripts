=begin
    Familiar Upkeep Script
    A simple script to keep your familiar alive and active.
    Waits for the link to weaken and then refreshes 920.
    Currently set to refresh when at 15 minutes.
    https://github.com/elanthia-online/scripts/

    SYNTAX - ;familiar

             --allowmove=<OFF/ON>
             Disables move on fizzle/interference

             --refreshtimer=#
             Sets refresh timer (defaults to 15)

       todo: none
     author: Tysong (horibu on PC)
       name: familiar
       tags: familiar, 920, wizard
    version: 1.45

    changelog:
        1.45 (2024-05-06)
            Add support for ewaggle
            Change checkmana to Char.mana call
        1.44 (2023-06-05)
            Fix for Lich 5.7.0 infomon update
            rubocop cleanup
        1.43 (2022-03-09)
            change to use Effects
        1.42 (2018-10-07)
            fixed bug in checkmana being 5 instead of 20
        1.41 (2018-10-05)
            fixed bug in logic of --allowmove being backwards
        1.4 (2018-08-20)
            Added additional interference detection
            Added option to not move away from room on fizzle/interfence, pauses script
            Added option to set refresh timer (defaults to 15)

    special thanks:
       Original author Annelie and tweaks by sele
=end

no_pause_all
no_kill_all
hide_me
UserVars.familiar ||= {}
UserVars.familiar[:allow_move]	= true	if UserVars.familiar[:allow_move].nil?
UserVars.familiar[:refresh_timer]	= 15.0		if UserVars.familiar[:refresh_timer].nil?

if variable[1] && variable[1].downcase == "help"
  echo "This script will automatically refresh your familiar once you are under 15mins."
  echo "Start script by doing ;familiar"
  echo ""
  echo "Optional arguments:"
  echo "   ;familiar --allowmove=off"
  echo "    disables moving to node on fizzle/interference"
  echo "    defaults to ON"
  echo ""
  echo "   ;familiar --refreshtimer=#"
  echo "    sets time to refresh 920 too in minutes"
  echo "    defaults to 15 mins"
  exit
end

if variable[0].downcase =~ /--allowmove=(yes|no)/
  if $1 == 'yes'
    UserVars.familiar[:allow_move] = true
  else
    UserVars.familiar[:allow_move] = false
  end
end
if variable[0].downcase =~ /--refreshtimer=([0-9]{1,3})/
  UserVars.familiar[:refresh_timer] = $1.to_i
end

loop {
  wait_while { Effects::Spells.time_left(920) >= UserVars.familiar[:refresh_timer] }
  Script.pause("waggle") if Script.running?("waggle")
  Script.pause("ewaggle") if Script.running?("ewaggle")
  wait_until { Char.mana >= 20 }
  waitcastrt?
  waitrt?
  cast_result = Spell[920].cast
  if cast_result =~ /fizzle|interfere/
    if !UserVars.familiar[:allow_move]
      echo "ALERT ALERT ALERT"
      echo "ALERT ALERT ALERT"
      echo ""
      echo "You failed to cast 920 here"
      echo "Pausing ;familiar"
      echo ""
      echo "Unpause to move away to closest node to refresh 920"
      echo ""
      echo "ALERT ALERT ALERT"
      echo "ALERT ALERT ALERT"
      pause_script
    end
    current_room = Room.current.id
    echo "Moving to a node to re-fresh familiar in 10 seconds"
    echo "Please ;k familiar before 10 seconds if you wish to stay"
    sleep 10
    Script.run("go2", "node")
    waitrt?
    waitcastrt?
    Spell[920].cast
    sleep 2
    Script.run("go2", "#{current_room}")
  else
    sleep 4
    if Effects::Spells.time_left(920) < UserVars.familiar[:refresh_timer]
      if Script.running?("infomon")
        kill_script("infomon")
      end
      Script.start("infomon") unless defined?(Infomon)
    end
  end
  Script.unpause("waggle") if Script.running?("waggle")
  Script.unpause("ewaggle") if Script.running?("ewaggle")
}
