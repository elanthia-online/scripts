=begin
  A universal resource script to calculate various RESOURCE and bonus needs.
  Suitable for the following professions: Wizard, Sorcerer, Bard, Monk,
                                          Warrior, Cleric, Ranger, and Rogue

  SYNTAX - ;resource <OPTION>

  OPTION Selections Include:
    BONUS <PROFESSION> - Show's profession success bonus formula
    ALL                - Show's all known bonuses from previous BONUS checks
    CHART <PROFESSION> - Prints off cost chart for each increase
      If no profession given, will use current character profession
      Professions supported: wizard, sorcerer, bard, monk, cleric, warrior, ranger, rogue

    CALC [starting bonus] [ending bonus] [silver rate per essence]
      Tells you the cost for enchanting an item from starting bonus to ending bonus

    ITEM [NOUN] - Will attempt to RECALL NOUN and show current chance of success
      Professions supported: wizard, sorcerer, cleric
    CHANCE <DIFFICULTY> <TYPE> <BONUS> - Will calculate the chance to succeed
      Supports Enchant(E1-E50), Ensorcell(T1-T5), Sanctify(S1-S6), Tattooing(M1-M5), Resistance(R1-R25), Arts(A1-A25)

    CHANCE - Description Of Test CASTs And Chance To Succeed
    ROLLS  - Numeric Values For Roll Descriptions
    MATS   - Material Difficulty Modifiers

        todo: none
      author: elanthia-online
contributors: Tysong, FFNG, Xanlin, Rinualdo, Maodan
        name: resource
        game: gemstone
        tags: resource, tears, 330, santify, grit, essence, enchant, enchanting, 925, recall, loresinging, bard, lkp, unlocking, murderverse, murder, juice, necrojuice, ensorcell, ensorcelling, 735, mystic tattoo, tattoo, mystic, grit, wps, devotion, jesus juice, sanctify, 330, permabless, 620, ranger, druid fluid, grace
    requires: Lich > 5.4.0
     version: 1.8.9

  changelog:
    1.8.9 (2023-03-18)
      Rubocop ruby code cleanup
    1.8.8 (2023-02-02)
      Fix to include outside? bonus for ranger resistance to saved bonuses
    1.8.7 (2023-02-02)
      Added outside? check to ranger resistance bonus

=end
=begin
    1.8.6 (2022-11-03)
      Adjust enchanting calc silver rates to $3.50/$4.00 from $4/$5
    1.8.5 (2022-11-03)
      Fix for monsterbold show_bonuses table
    1.8.4 (2022-11-03)
      Added suffused/weekly/total to "all" output
    1.8.3 (2022-11-01)
      Typo fixes
    1.8.2 (2022-11-01)
      Fix for updated GRIT formula changes
    1.8.1 (2022-06-30)
      Slight fix to rogue service formula
    1.8.0 (2022-06-29)
      Add rogue service
    1.7.0 (2022-04-29)
      Add explicit grit numbers for hybrid weapons
    1.6.1 (2022-04-08)
      Fix to save monk/warrior bonus titles to file
    1.6.0 (2022-04-08)
      Added saving of character bonuses to DATA_DIR
      Added ;resource all (shows all saved bonuses)
    1.5.2 (2022-03-30)
      Fix bug in enchant chance difficulty syntax
    1.5.1 (2022-03-15)
      Fix for XML captures
    1.5.0 (2022-03-15)
      Updated to use Lich::Util.quiet_command_xml to squelch SKILLS/INFO output
      Preliminary work to do automated item difficulty calculations/success
    1.4.0 (2022-02-08)
      Added druid fluid (rangers)
    1.3.1 (2021-12-17)
      Clarified header and added more tags
    1.3.0 (2021-09-07)
      Grit
    1.2.0 (2021-06-23)
      Proposed bonus for clerics 330
    1.1.0 (2020-12-30)
      Monk bonus math fix
    1.0.0 (2020-12-29)
      Initial release
=end

silence_me

LICH_GEM_REQUIRES = '5.5.0'

if Gem::Version.new(LICH_VERSION) < Gem::Version.new(LICH_GEM_REQUIRES)
  if $frontend == 'stormfront' || $frontend == 'profanity'
    _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "Script:#{script.name} now requires a newer version of Lich(#{LICH_GEM_REQUIRES}+) to run." + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "Please update to a newer version." + "\<\/preset\>"
    _respond ""
    _respond "\<preset id=\"thought\"\>" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION)}" + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation" + "\<\/preset\>"
    _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
  else
    _respond "##" + "########################################"
    _respond ">" + "Script:#{script.name} now requires a newer version of Lich(#{LICH_GEM_REQUIRES}+) to run."
    _respond ">" + "Please update to a newer version."
    _respond ">" + ""
    _respond ">" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION)}"
    _respond ">" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation"
    _respond "##" + "########################################"
  end
  exit
end

require 'yaml'
require 'terminal-table'

class Resource
  COST_ESSENCE = ["0", "312", "625", "937", "1250", "1562", "1875", "2187", "2500", "2812", "3125", "3437", "3750", "4062", "4375", "4687", "5000", "5312", "5625", "5937", "6250", "6562", "6875", "7187", "7500", "15000", "22500", "30000", "37500", "45000", "52500", "60000", "67500", "75000", "82500", "90000", "97500", "105000", "112500", "120000", "127500", "135000", "142500", "150000", "157500", "165000", "172500", "180000", "187500", "195000"]
  COST_OTHER = ["50000", "75000", "100000", "125000", "150000"]
  DIFFICULTY_ESSENCE = ["0", "0", "0", "0", "1", "1", "2", "4", "5", "7", "9", "11", "13", "16", "18", "21", "25", "28", "32", "36", "40", "44", "49", "53", "58", "64", "69", "75", "81", "87", "93", "100", "106", "113", "121", "128", "136", "144", "152", "160", "169", "177", "186", "196", "205", "215", "225", "235", "245", "256"]
  DIFFICULTY_OTHER = ["50", "100", "150", "200", "250"]
  WEEKLY_RESOURCE = 50000.0
  MAX_RESOURCE = 250000.0

  SILVER_COST_LOW  = 3.5
  SILVER_COST_HIGH = 4

  DEBUG_ME = false

  PAD = 91

  PRIVATE_WORKSHOP = ["Tysong"]

  # Array of Material Modifiers [12, 4, 4, 4, 4, 4]
  MAT_LIST = [
    ["Adamantine  ", "-150", "-150", "-150", "N/A ", "N/A "],
    ["Alexandrite ", "-500", "0   ", "N/A ", "N/A ", "N/A "],
    ["Black-alloy ", "0   ", "-50 ", "0   ", "N/A ", "N/A "],
    ["Bone        ", "-250", "+10 ", "-250", "N/A ", "N/A "],
    ["Bronze      ", "-50 ", "N/A ", "-50 ", "N/A ", "N/A "],
    ["Carmiln     ", "N/A ", "N/A ", "N/A ", "+10 ", "+10 "],
    ["Cloth       ", "N/A ", "N/A ", "0   ", "N/A ", "N/A "],
    ["Copper      ", "-50 ", "N/A ", "-50 ", "N/A ", "N/A "],
    ["Coraesine   ", "-200", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Deringo     ", "N/A ", "-20 ", "N/A ", "-20 ", "-20 "],
    ["Drakar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
    ["Drake       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Eahnor      ", "+15 ", "+15 ", "+15 ", "N/A ", "N/A "],
    ["Eonake      ", "-60 ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Faenor      ", "+15 ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Faewood     ", "N/A ", "+10 ", "N/A ", "N/A ", "0   "],
    ["Feras       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Fireleaf    ", "N/A ", "+15 ", "N/A ", "N/A ", "+15 "],
    ["Ghezyte     ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
    ["Glaes       ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
    ["Glass       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Glowbark    ", "N/A ", "-10 ", "N/A ", "-10 ", "-10 "],
    ["Golvern     ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
    ["Gornar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
    ["Hoarbeam    ", "N/A ", "+5  ", "N/A ", "+5  ", "+5  "],
    ["Illthorn    ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
    ["Imflass     ", "-30 ", "-30 ", "-30 ", "N/A ", "N/A "],
    ["Invar       ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
    ["Ipantor     ", "N/A ", "N/A ", "N/A ", "-40 ", "N/A "],
    ["Iron        ", "-30 ", "-30 ", "-30 ", "N/A ", "N/A "],
    ["Ironwood    ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
    ["Kakore      ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
    ["Kelyn       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Krodera     ", "-999", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Kroderine   ", "-999", "-999", "-999", "N/A ", "N/A "],
    ["Leather     ", "N/A ", "N/A ", "-10 ", "N/A ", "N/A "],
    ["Lor         ", "N/A ", "N/A ", "N/A ", "N/A ", "-25 "],
    ["Mein        ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
    ["Mesille     ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
    ["Mithglin    ", "+15 ", "+15 ", "+15 ", "N/A ", "N/A "],
    ["Mithril     ", "+20 ", "+20 ", "+20 ", "N/A ", "N/A "],
    ["Modwir      ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Mossbark    ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
    ["Obsidian    ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Ora         ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
    ["Ora, Black  ", "-75 ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Ora, White  ", "-40 ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Orase       ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
    ["Razern      ", "-20 ", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Rhimar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
    ["Rolaren     ", "-40 ", "-40 ", "-40 ", "N/A ", "N/A "],
    ["Rowan       ", "N/A ", "N/A ", "N/A ", "N/A ", "+20 "],
    ["Ruby        ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Ruic        ", "N/A ", "N/A ", "N/A ", "-60 ", "N/A "],
    ["Sephwir     ", "N/A ", "N/A ", "N/A ", "-25 ", "N/A "],
    ["Steel       ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
    ["Stone       ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Surita-     ", "N/A ", "N/A ", "N/A ", "N/A ", "-100"],
    ["Surita+     ", "N/A ", "N/A ", "N/A ", "N/A ", "-200"],
    ["Urglaes     ", "-999", "-999", "-999", "N/A ", "N/A "],
    ["Urnon       ", "-999", "N/A ", "N/A ", "N/A ", "N/A "],
    ["Vaalorn     ", "+10 ", "+10 ", "+10 ", "N/A ", "N/A "],
    ["Veil-iron   ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
    ["Villswood   ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
    ["Vultite     ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
    ["White-alloy ", "N/A ", "0   ", "0   ", "N/A ", "N/A "],
    ["Witchwood   ", "N/A ", "N/A ", "N/A ", "N/A ", "-75 "],
    ["Wood        ", "-100", "-10 ", "-100", "-10 ", "-10 "],
    ["Wyrwood     ", "N/A ", "N/A ", "N/A ", "-60 ", "N/A "],
    ["Yew         ", "N/A ", "N/A ", "N/A ", "-20 ", "N/A "],
    ["Zelnorn     ", "-250", "-250", "-250", "N/A ", "N/A "],
    ["Zorchar     ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
    ["Metal       ", "-500", "-500", "-500", "N/A ", "N/A "]
  ]

  # Arrays of Roll Results and Descriptions [33, 82]-Needed [40, 6]-Roll
  R_NEED = [
    ["97% (Will only fail on a fumble.)", "You can only fail if you are horribly unlucky.                                    "],
    ["90%-96% Chance                   ", "You should be able to enchant it easily enough, barring bad luck.                 "],
    ["75%-89% Chance                   ", "The odds are on your side to successfully complete the enchantment.               "],
    ["55%-74% Chance                   ", "You are more likely than not to succeed on your cast, but you will need some luck."],
    ["35%-54% Chance                   ", "This enchantment will be difficult, but possible.                                 "],
    ["15%-34% Chance                   ", "This enchantment will be very difficult.                                          "],
    ["2%-14% Chance                    ", "That this enchantment will be nearly impossible.                                  "],
    ["1% Chance (Roll 100)             ", "You will likely need a miracle to complete this enchantment.                      "],
    ["Only rolling over 100 has a shot.", "This enchantment is completely beyond your abilities.                             "]
  ]

  R_RESULT = [
    ["You make an outstanding attempt!        ", "90+   "],
    ["You make an excellent attempt!          ", "80+   "],
    ["You make a good attempt!                ", "70+   "],
    ["You make a decent attempt.              ", "60+   "],
    ["You make an okay attempt.               ", "50+   "],
    ["You make a passable attempt.            ", "40+   "],
    ["You make a questionable attempt.        ", "30+   "],
    ["You make a poor attempt!                ", "20+   "],
    ["You make a very poor attempt!           ", "10+   "],
    ["You make a horribly poor attempt!       ", "2+    "],
    ["You make an astoundingly inept attempt! ", "1     "],
    ["Something doesn't seem right...         ", "Fumble"]
  ]

  def self.load_bonuses()
    dir = "#{$data_dir}resource"
    filename = "#{dir}/bonuses.yaml"
    if File.exist?("#{filename}")
      return YAML.load_file("#{filename}")
    else
      return nil
    end
  end

  def self.save_bonuses(bonus)
    Dir.mkdir("#{$data_dir}resource") unless File.exist?("#{$data_dir}resource")
    dir = "#{$data_dir}resource"
    filename = "#{dir}/bonuses.yaml"
    all_bonuses = Resource.load_bonuses
    all_bonuses = {} if all_bonuses.nil?
    weekly_resource = nil
    total_resource = nil
    suffused = nil

    res = Lich::Util.quiet_command_xml("resource", /^Health: /)
    res.each { |line|
      line = line.gsub('<pushBold/>', '').gsub('<popBold/>', '')
      if line =~ /([\d,]+)\/50,000 \(Weekly\)\s+([\d,]+)\/200,000 \(Total\)$/
        weekly_resource = $1
        total_resource = $2
      elsif line =~ /Suffused.+: ([\d,]+)$/
        suffused = $1
      end
    }

    return if ((all_bonuses["#{XMLData.game}:#{Char.name}"][:bonus] == bonus) &&
      (all_bonuses["#{XMLData.game}:#{Char.name}"][:prof] == Char.prof) &&
      (all_bonuses["#{XMLData.game}:#{Char.name}"][:weekly] == weekly_resource) &&
      (all_bonuses["#{XMLData.game}:#{Char.name}"][:total] == total_resource) &&
      (all_bonuses["#{XMLData.game}:#{Char.name}"][:suffused] == suffused)
              )

    if Char.prof == "Warrior"
      all_bonuses["#{XMLData.game}:#{Char.name}"] = {
        :game     => XMLData.game,
        :name     => Char.name,
        :prof     => Char.prof,
        :bonus    => {
          "Armor"  => bonus[0],
          "Weapon" => bonus[1],
        },
        :weekly   => weekly_resource,
        :total    => total_resource,
        :suffused => suffused
      }
    elsif Char.prof == "Rogue"
      all_bonuses["#{XMLData.game}:#{Char.name}"] = {
        :game     => XMLData.game,
        :name     => Char.name,
        :prof     => Char.prof,
        :bonus    => {
          "Sidestep"       => bonus[0],
          "Keen Eye"       => bonus[1],
          "Escape Artist"  => bonus[2],
          "Swift Recovery" => bonus[3],
          "Poisoncraft"    => bonus[4],
        },
        :weekly   => weekly_resource,
        :total    => total_resource,
        :suffused => suffused
      }
    elsif Char.prof == "Monk"
      all_bonuses["#{XMLData.game}:#{Char.name}"] = {
        :game     => XMLData.game,
        :name     => Char.name,
        :prof     => Char.prof,
        :bonus    => {
          "Self"  => bonus[0],
          "Other" => bonus[1],
        },
        :weekly   => weekly_resource,
        :total    => total_resource,
        :suffused => suffused
      }
    else
      all_bonuses["#{XMLData.game}:#{Char.name}"] = {
        :game     => XMLData.game,
        :name     => Char.name,
        :prof     => Char.prof,
        :bonus    => bonus,
        :weekly   => weekly_resource,
        :total    => total_resource,
        :suffused => suffused
      }
    end
    File.write(filename, all_bonuses.to_yaml)
  end

  def self.show_bonuses
    all_bonuses = Resource.load_bonuses
    unless all_bonuses.nil?
      all_bonuses = all_bonuses.sort

      headers = %i[Game Character Profession Bonus Suffused Weekly Total]
      table_rows = []

      all_bonuses.each { |character|
        game = character[1][:game]
        name = character[1][:name]
        prof = character[1][:prof]
        bonus = character[1][:bonus]
        weekly = character[1][:weekly]
        total = character[1][:total]
        suffused = character[1][:suffused]

        if prof =~ /^(?:Warrior|Monk|Rogue)$/
          bonus.each { |title, bonusValue|
            table_rows.push([game, name, prof, "#{bonusValue} #{title}", suffused, weekly, total])
          }
        else
          table_rows.push([game, name, prof, bonus, suffused, weekly, total])
        end
      }

      table = Terminal::Table.new(
        headings: headers,
        rows: table_rows
      )
      table = table.to_s
      if table =~ /\n\|([\w\s\|]+)\|\n/
        header = $1
        headerbold = Lich::Messaging.monsterbold(header)
        table = table.gsub(header, headerbold)
      end
      row_lines = /\| \w+ \| [\w\s]+ \| [\w\s]+\| [\d\s,]+ \| [\d\s,]+ \| [\d\s,]+ \| ([\d\s,]+) \|/
      totals = table.scan(row_lines).flatten
      totals.each { |total|
        if (!total.nil? && total.to_s.gsub(',', '').to_i >= 150000)
          total_bold = Lich::Messaging.monsterbold(total)
          table = table.gsub(total, total_bold)
        end
      }
      _respond "<output class=\"mono\"/>\n" + table + "\n<output class=\"\"/>"

    else
      echo "No characters currently found."
    end
  end

  def self.rowout(msg_arr, mbold = false, delimiter = 12)
    out = '| '
    msg_arr.each { |m|
      out += "%-#{delimiter}.#{delimiter}s | " % m
    }
    if mbold == true
      _respond "#{monsterbold_start}#{out}#{monsterbold_end}"
    else
      _respond out
    end
  end

  def self.number_commas(number)
    return number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
  end

  def self.silver_to_dollar(silvers, dollar_per)
    return '%.2f' % ((silvers / 1000000 * dollar_per).to_f.round(2))
  end

  def self.calc_rate_row(rate, running_total_ess)
    silver_cost = rate.to_f * running_total_ess.to_f
    row_label = "#{rate} silver"
    orig_rate = rate * 3.125
    silver_cost_comma = number_commas(silver_cost)
    output = [
      row_label,
      "#{orig_rate} silver",
      silver_cost_comma,
      silver_to_dollar(silver_cost, SILVER_COST_LOW),
      silver_to_dollar(silver_cost, SILVER_COST_HIGH)
    ]
    return output
  end

  def self.materials
    respond "|--------------------------------------------------------------|"
    respond "|                    Material Difficulty Modifiers             |"
    respond "|--------------------------------------------------------------|"
    respond "|   Material   | Weapons | Shields | Armor | Bows | Runestaves |"
    respond "|--------------------------------------------------------------|"
    MAT_LIST.each { |mat, weap, shie, arm, bow, rune|
      respond "| #{mat} |  #{weap}   |  #{shie}   | #{arm}  | #{bow} |    #{rune}    |"
    }
    respond "|--------------------------------------------------------------|"
  end

  def self.chance(item_difficulty, type, bonus)
    if !item_difficulty.nil? && (!bonus.nil? || Char.prof =~ /^Wizard|Sorcerer|Monk|Cleric|Ranger|Rogue$/)
      unless type =~ /^(e(?:50|[1-4][0-9]|[0-9])|t(?:[1-5])|m(?:[1-5])|s(?:[1-6])|r(?:2[0-5]|1[0-9]|[1-9])|a(?:2[0-5]|1[0-9]|[1-9]))$/i
        respond "Need to provide an item difficulty and bonus type too use advanced chance option."
        respond "  ;resource chance <ItemDifficulty> <BonusType> <SkillBonus>"
        respond ""
        respond "  Types:"
        respond "    Enchant     - E1 to E50"
        respond "    Ensorcell   - T1 to T5"
        respond "    Sanctify    - S1 to S6"
        respond "    Tattooing   - M1 to M5"
        respond "    Resistance  - R1 to R25"
        respond "    Covert Arts - A1 to A25"
        respond ""
        respond "  Will attempt to be smart if no SkillBonus given."
        return
      end
      item_difficulty = item_difficulty.to_i
      bonus = bonus.nil? ? Resource.bonus(false) : bonus.to_i
      case type
      when /^e(50|[1-4][0-9]|[0-9])/i
        penalty = (((($1.to_f - 1) / 3)**2) - ((($1.to_f - 2) / 3)**2)).truncate
      when /^t([1-5])/i
        penalty = 50
      when /m([1-5])/i
        penalty = 100 * $1.to_i
      when /s([1-6])/i
        penalty = (($1.to_i == 6) ? 50 : 20)
      when /r(2[0-5]|1[0-9]|[1-9])/i
        penalty = $1.to_i
        item_difficulty = 0
        case penalty
        when 1..5
          penalty = penalty * 100
        when 6..10
          penalty = (penalty - 5) * 100 + 150 * 1
        when 11..15
          penalty = (penalty - 10) * 100 + 150 * 2
        when 16..20
          penalty = (penalty - 15) * 100 + 150 * 3
        when 21..25
          penalty = (penalty - 20) * 100 + 150 * 4
        end
      when /a(2[0-5]|1[0-9]|[1-9])/i
        penalty = $1.to_i
        item_difficulty = 0
        case penalty
        when 1..5
          penalty = penalty * 100
        when 6..10
          penalty = (penalty - 5) * 100 + 150 * 1
        when 11..15
          penalty = (penalty - 10) * 100 + 150 * 2
        when 16..20
          penalty = (penalty - 15) * 100 + 150 * 3
        when 21..25
          penalty = (penalty - 20) * 100 + 150 * 4
        end
      end

      new_difficulty = item_difficulty + penalty

      respond "Chance to Succeed"
      respond "----------------------------------------"
      respond "  #{item_difficulty.to_s.rjust(4)} - Item Difficulty"
      respond "+ #{penalty.to_s.rjust(4)} - #{type.upcase}"
      respond "========================================"
      respond "  #{new_difficulty.to_s.rjust(4)} - Total Difficulty"
      respond "  #{bonus.to_s.rjust(4)} - Current Skill Bonus"
      respond "========================================"
      Resource.show_odds(new_difficulty, bonus)

    else
      respond "|-------------------------------------------------------------------------------------------------------------------------|"
      respond "|                                  Description Of Test CASTs And Chance To Succeed                                        |"
      respond "|-------------------------------------------------------------------------------------------------------------------------|"
      respond "| Chance To Get A Successful CHANNEL |                       Messaging On Test CAST                                       |"
      respond "|-------------------------------------------------------------------------------------------------------------------------|"
      R_NEED.each { |rchan, rmes|
        respond "| #{rchan}  | #{rmes} |"
      }
      respond "|-------------------------------------------------------------------------------------------------------------------------|"
    end
  end

  def self.rolls
    respond "|-------------------------------------------------------|"
    respond "|          Numeric Values For Roll Descriptions         |"
    respond "|-------------------------------------------------------|"
    respond "|          Roll Result Description         | Roll Value |"
    respond "|-------------------------------------------------------|"
    R_RESULT.each { |rdesc, rval|
      respond "| #{rdesc} |    #{rval}  |"
    }
    respond "|-------------------------------------------------------|"
  end

  def self.do_calc
    starting_bonus = variable[2].to_i
    if variable[3] and variable[3].to_i <= 50
      ending_bonus = variable[3].to_i
    elsif not variable[3] or variable[3].to_i > 50
      ending_bonus = 50
    end
    if variable[4]
      tears_rate = variable[4].to_i
    end
    if ending_bonus <= starting_bonus
      _respond "Ending bonus must be greater than starting bonus"
      _respond ";resource calc [starting bonus] [ending bonus]"
      return
    end

    _respond "Calculating essence needed to take an item from #{starting_bonus} to #{ending_bonus}"
    _respond ""

    headers = ['Current', 'New', 'Cost (ess)', 'Cost (wks)', 'Total (ess)', 'Total (wks)']
    table_rows = []

    current_bonus = starting_bonus
    running_total_ess = 0
    while current_bonus < ending_bonus
      if current_bonus < 0
        step_cost = 0
      else
        step_cost = COST_ESSENCE[current_bonus].to_i
      end
      running_total_ess += step_cost
      response_array = [
        current_bonus,
        current_bonus + 1,
        step_cost,
        (step_cost / WEEKLY_RESOURCE).round(2),
        running_total_ess,
        (running_total_ess / WEEKLY_RESOURCE).round(2)
      ]
      table_rows.push(response_array)
      current_bonus += 1
    end
    table = Terminal::Table.new(
      headings: headers,
      rows: table_rows
    )
    table = table.to_s
    if table =~ /\n\|([\w\d\s\|\$\/\(\)]+)\|\n/
      header = $1
      headerbold = Lich::Messaging.monsterbold(header)
      table = table.gsub(header, headerbold)
    end
    _respond "<output class=\"mono\"/>\n" + table + "\n<output class=\"\"/>"
    respond ""

    headers = ["Cost per Essence", "Old Cost per Ess", "Total Cost", "$#{SILVER_COST_LOW}/1m Silver", "$#{SILVER_COST_HIGH}/1m Silver"]
    table_rows = []

    if variable[4]
      table_rows.push(calc_rate_row(tears_rate, running_total_ess))
    else
      (4..10).to_a.each { |rate_multi|
        rate = 16 * rate_multi
        table_rows.push(calc_rate_row(rate, running_total_ess))
      }
    end
    table = Terminal::Table.new(
      headings: headers,
      rows: table_rows
    )
    table = table.to_s
    if table =~ /\n\|([\w\d\s\|\$\/\(\)\.]+)\|\n/
      header = $1
      headerbold = Lich::Messaging.monsterbold(header)
      table = table.gsub(header, headerbold)
    end
    _respond "<output class=\"mono\"/>\n" + table + "\n<output class=\"\"/>"
  end

  def self.chart
    respond "Resource needed per tier profession services"
    respond ""
    if (Char.prof == "Wizard" && variable[2].nil?) || variable[2] =~ /^wiz/i
      COST_ESSENCE.each_index { |resource|
        respond "+#{resource.to_s.rjust(2, " ")} -> +#{(resource + 1).to_s.rjust(2, " ")} - #{number_commas(COST_ESSENCE[resource]).rjust(7, " ")} Essence"
      }
    elsif (Char.prof == "Sorcerer" && variable[2].nil?) || variable[2] =~ /^sorc/i
      headers = ['Step', 'Resource Cost', 'Difficulty Increase']
      table_rows = []

      COST_OTHER.each_index { |resource|
        table_rows.push(["T#{resource} -> T#{(resource + 1)}", "#{number_commas(COST_OTHER[resource])} Necrotic Energy", "#{number_commas(DIFFICULTY_OTHER[resource])}"])
      }

      table = Terminal::Table.new(
        headings: headers,
        rows: table_rows
      )
      table = table.to_s
      if table =~ /\n\|([\w\d\s\|\$\/\(\)]+)\|\n/
        header = $1
        headerbold = Lich::Messaging.monsterbold(header)
        table = table.gsub(header, headerbold)
      end
      _respond "<output class=\"mono\"/>\n" + table + "\n<output class=\"\"/>"
    elsif (Char.prof == "Bard" && variable[2].nil?) || variable[2] =~ /^bard/i
      COST_OTHER.each_index { |resource|
        respond "LKP#{(resource + 1).to_s.rjust(1, " ")} - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Lore Knowledge"
      }
    elsif (Char.prof == "Monk" && variable[2].nil?) || variable[2] =~ /^monk/i
      COST_OTHER.each_index { |resource|
        respond "T#{(resource + 1).to_s.rjust(1, " ")} Tattoo - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Motes of Tranquility"
      }
      respond ""
      respond "Tattoos come with 100 max charges and are fully charged upon applying or upgrading to next tier."
      respond "To recharge a tattoo, it costs 1,000 Motes of Tranquility per charge being filled."
    elsif (Char.prof == "Cleric" && variable[2].nil?) || variable[2] =~ /^cleric/i
      COST_OTHER.each_index { |resource|
        respond "T#{(resource + 1).to_s.rjust(1, " ")} Sanctify - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Devotion"
      }
      respond "Add Perm Holy Water Flares to T5".to_s.rjust(1, " ") + " Sanctify - #{number_commas(200000).rjust(7, " ")} Devotion"
    elsif (Char.prof == "Warrior" && variable[2].nil?) || variable[2] =~ /^warrior/i
      respond "25,000 Grit per service on weapons and armor"
      respond ""
      respond "10,000 Grit per service on armor accessories"
    elsif (Char.prof == "Ranger" && variable[2].nil?) || variable[2] =~ /^ranger/i
      COST_OTHER.each_index { |resource|
        respond "T#{(resource + 1).to_s.rjust(1, " ")} Resist - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Nature's Grace"
      }
      respond "The costs are the same for each new type of resist added"
      respond ""
      respond "Updating the imbedible mana storage to your current lore bonus threshold: 25,000 Nature's Grace"
    elsif (Char.prof == "Rogue" && variable[2].nil?) || variable[2] =~ /^rogue/i
      COST_OTHER.each_index { |resource|
        respond "T#{(resource + 1).to_s.rjust(1, " ")} Covert Art - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Guile"
      }
      respond "The costs are the same for each new type of covert arts added"
      respond ""
    else
      respond "You're not a class with a currently supported resource calculation. Please use the following to show an appropriate table:"
      respond "   ;resource chart <PROFESSION>"
      respond "   Professions supported: wizard, sorcerer, bard, monk, cleric, warrior, ranger, rogue"
    end
    respond ""
  end

  def self.bonus(show_chart = true, profession = nil)
    level = 0
    arcanesymbols = magicitemuse = physicalfitness = firstaid = 0
    dodging = perception = combatmaneuvers = ambush = pickpocketing = 0
    gldranks = 0
    elementalmanacontrol = spiritmanacontrol = mentalmanacontrol = 0
    mentalloretelepathy = mentalloretelepathybonus = mentalloretransformation = mentalloretransformationbonus = 0
    spiritloreblessingsbonus = spiritloreblessings = survival = harnesspower = 0
    bardranks = sorcererranks = wizardranks = clericranks = rangerranks = minormentalranks = minorspiritranks = 0
    strength = constitution = dexterity = agility = discipline = 0
    aura = logic = intuition = wisdom = influence = intuition = 0
    armoruse = shielduse = 0
    edgedweapons = bluntweapons = twohandedweapons = rangedweapons = thrownweapons = polearmweapons = brawling = 0

    if Char.prof !~ /^(?:Wizard|Sorcerer|Bard|Monk|Cleric|Warrior|Ranger|Rogue)$/ && variable[2].nil?
      respond "You're not a class with a currently supported resource calculation. Please use the following to show an appropriate table:"
      respond "   ;resource chart <PROFESSION>"
      respond "   Professions supported: wizard, sorcerer, bard, monk, cleric, warrior, ranger, rogue"
      return
    end

    gritSkills = Hash.new

    res = Lich::Util.quiet_command_xml("skills full", /your current skill bonuses and ranks/, /Further information can be found in the/, 8)
    res.each { |line|
      line = line.gsub('<pushBold/>', '').gsub('<popBold/>', '')
      if line =~ /Arcane Symbols.*?(\d+)$/
        arcanesymbols = $1.to_i
      elsif line =~ /Magic Item Use.*?(\d+)$/
        magicitemuse = $1.to_i
      elsif line =~ /Physical Fitness.*?(\d+)$/
        physicalfitness = $1.to_i
      elsif line =~ /First Aid.*?(\d+)$/
        firstaid = $1.to_i
      elsif line =~ /Ambush.*?(\d+)$/
        ambush = $1.to_i
      elsif line =~ /Pickpocketing.*?(\d+)$/
        pickpocketing = $1.to_i
      elsif line =~ /Mental Lore - Telepathy.*?(\d+)\s+(\d+)$/
        mentalloretelepathybonus = $1.to_i
        mentalloretelepathy = $2.to_i
      elsif line =~ /Mental Lore - Transformation.*?(\d+)\s+(\d+)$/
        mentalloretransformationbonus = $1.to_i
        mentalloretransformation = $2.to_i
      elsif line =~ /Elemental Mana Control.*?(\d+)$/
        elementalmanacontrol = $1.to_i
      elsif line =~ /Spirit Mana Control.*?(\d+)$/
        spiritmanacontrol = $1.to_i
      elsif line =~ /Mental Mana Control.*?(\d+)$/
        mentalmanacontrol = $1.to_i
      elsif line =~ /Wizard.*?(\d+)$/
        wizardranks = $1.to_i
      elsif line =~ /Sorcerer.*?(\d+)$/
        sorcererranks = $1.to_i
      elsif line =~ /Cleric.*?(\d+)$/
        clericranks = $1.to_i
      elsif line =~ /Minor Mental.*?(\d+)$/
        minormentalranks = $1.to_i
      elsif line =~ /Minor Spiritual.*?(\d+)$/
        minorspiritranks = $1.to_i
      elsif line =~ /Bard.*?(\d+)$/
        bardranks = $1.to_i
      elsif line =~ /Ranger.*?(\d+)$/
        rangerranks = $1.to_i
      elsif line =~ /Armor Use.*?(\d+)$/
        armoruse = $1.to_i
      elsif line =~ /Shield Use.*?(\d+)$/
        shielduse = $1.to_i
      elsif line =~ /Edged Weapons.*?(\d+)$/
        edgedweapons = $1.to_i
        gritSkills["Edged Weapons"] = edgedweapons
      elsif line =~ /Blunt Weapons.*?(\d+)$/
        bluntweapons = $1.to_i
        gritSkills["Blunt Weapons"] = bluntweapons
      elsif line =~ /Two-Handed Weapons.*?(\d+)$/
        twohandedweapons = $1.to_i
        gritSkills["Two-Handed Weapons"] = twohandedweapons
      elsif line =~ /Ranged Weapons.*?(\d+)$/
        rangedweapons = $1.to_i
        gritSkills["Ranged Weapons"] = rangedweapons
      elsif line =~ /Thrown Weapons.*?(\d+)$/
        thrownweapons = $1.to_i
        gritSkills["Thrown Weapons"] = thrownweapons
      elsif line =~ /Polearm Weapons.*?(\d+)$/
        polearmweapons = $1.to_i
        gritSkills["Polearm Weapons"] = polearmweapons
      elsif line =~ /Brawling.*?(\d+)$/
        brawling = $1.to_i
        gritSkills["Brawling Weapons"] = brawling
      elsif line =~ /Survival.*?(\d+)$/
        survival = $1.to_i
      elsif line =~ /Spiritual Lore - Blessings.*?(\d+)\s+(\d+)$/
        spiritloreblessingsbonus = $1.to_i
        spiritloreblessings = $2.to_i
      elsif line =~ /Harness Power.*?(\d+)\s+(\d+)$/
        # harnesspowerbonus = $1.to_i
        harnesspower = $2.to_i
      elsif line =~ /Dodging.*?(\d+)$/
        dodging = $1.to_i
      elsif line =~ /Perception.*?(\d+)$/
        perception = $1.to_i
      elsif line =~ /Combat Maneuvers.*?(\d+)$/
        combatmaneuvers = $1.to_i
      end
    }

    res = Lich::Util.quiet_command_xml("info", /^Name: /)
    res.each { |line|
      line = line.gsub('<pushBold/>', '').gsub('<popBold/>', '')
      if line =~ /Level:\s+(\d+)$/
        level = $1.to_i
      elsif line =~ /Strength.*?\((\-*\d+)\)$/
        strength = $1.to_i
      elsif line =~ /Constitution.*?\((\-*\d+)\)$/
        constitution = $1.to_i
      elsif line =~ /Dexterity.*?\((\-*\d+)\)$/
        dexterity = $1.to_i
      elsif line =~ /Agility.*?\((\-*\d+)\)$/
        agility = $1.to_i
      elsif line =~ /Discipline.*?\((\-*\d+)\)$/
        discipline = $1.to_i
      elsif line =~ /Aura.*?\((\-*\d+)\)$/
        aura = $1.to_i
      elsif line =~ /Logic.*?\((\-*\d+)\)$/
        logic = $1.to_i
      elsif line =~ /Intuition.*?\((\-*\d+)\)$/
        intuition = $1.to_i
      elsif line =~ /Wisdom.*?\((\-*\d+)\)$/
        wisdom = $1.to_i
      elsif line =~ /Influence.*?\((\-*\d+)\)$/
        influence = $1.to_i
      end
    }

    if (Char.prof == "Rogue" && profession.nil?) || profession =~ /^rogue/i
      res = Lich::Util.quiet_command_xml("gld", /<output class="mono"\/>/, /<output class=""\/>/)
      res.each { |line|
        if line =~ /You currently have (\d+) ranks? out of a possible \d+ for your training\./
          gldranks = $1.to_i
        end
      }
    end

    if DEBUG_ME
      echo "Arcane Symbols: #{arcanesymbols}"
      echo "Magic Item Use: #{magicitemuse}"
      echo "Physical Fitness: #{physicalfitness}"
      echo "First Aid: #{firstaid}"
      echo "EMC: #{elementalmanacontrol}"
      echo "SMC: #{spiritmanacontrol}"
      echo "MMC: #{mentalmanacontrol}"
      echo "ML:Telepathy: #{mentalloretelepathy}"
      echo "ML:Transformation: #{mentalloretransformation}"
      echo "SL:Blessings: #{spiritloreblessings}"
      echo "Harness Power: #{harnesspower}"
      echo "Survival: #{survival}"
      echo "Bard Ranks: #{bardranks}"
      echo "Cleric Ranks: #{clericranks}"
      echo "Ranger Ranks: #{rangerranks}"
      echo "Sorcerer Ranks: #{sorcererranks}"
      echo "Wizard Ranks: #{wizardranks}"
      echo "Minor Mental: #{minormentalranks}"
      echo "Minor Spiritual: #{minorspiritranks}"
      echo "Level: #{level}"
      echo "Strength: #{strength}"
      echo "Constitution: #{constitution}"
      echo "Dexterity: #{dexterity}"
      echo "Agility: #{agility}"
      echo "Discipline: #{discipline}"
      echo "Aura: #{aura}"
      echo "Logic: #{logic}"
      echo "Intuition: #{intuition}"
      echo "Wisdom: #{wisdom}"
      echo "Influence: #{influence}"
      echo gritSkills
    end

    if (Char.prof == "Wizard" && profession.nil?) || profession =~ /^wiz/i
      if show_chart
        respond "Enchanting Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(logic).to_s.rjust(3)} : LOG Bonus"
        respond "+ #{(intuition).to_s.rjust(3)} : INT Bonus"
        respond "+ #{((magicitemuse / 10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
        respond "+ #{((arcanesymbols / 10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
        respond "+ #{((elementalmanacontrol / 2).truncate).to_s.rjust(3)} : trunc(EMC ranks/2)"
        respond "+ #{((wizardranks > (level + 1) ? (level + 1) * 2 + (wizardranks - (level + 1)) : wizardranks * 2)).to_s.rjust(3)} : Wizard Spells"
        respond "+  25 : Familiar Bonus"
        respond "+  #{PRIVATE_WORKSHOP.include?(Char.name) ? 75 : 50} : Workshop Bonus"
        respond "==========================="
        respond "Total of #{level + logic + intuition + (magicitemuse / 10).truncate + (arcanesymbols / 10).truncate + (elementalmanacontrol / 2).truncate + (wizardranks > (level + 1) ? (level + 1) * 2 + (wizardranks - (level + 1)) : wizardranks * 2) + 25 + (PRIVATE_WORKSHOP.include?(Char.name) ? 75 : 50)}"
      end
      bonus = (level + logic + intuition + (magicitemuse / 10).truncate + (arcanesymbols / 10).truncate + (elementalmanacontrol / 2).truncate + (wizardranks > (level + 1) ? (level + 1) * 2 + (wizardranks - (level + 1)) : wizardranks * 2) + 25 + (PRIVATE_WORKSHOP.include?(Char.name) ? 75 : 50))
      Resource.save_bonuses(bonus) if Char.prof == "Wizard"
      return bonus
    elsif (Char.prof == "Sorcerer" && profession.nil?) || profession =~ /^sorc/i
      if show_chart
        respond "Ensorcelling Success Formula"
        respond "---------------------------"
        respond "  #{level.to_s.rjust(3)} : Level"
        respond "+ #{wisdom.to_s.rjust(3)} : WIS Bonus"
        respond "+ #{intuition.to_s.rjust(3)} : INT Bonus"
        respond "+ #{((magicitemuse / 10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
        respond "+ #{((arcanesymbols / 10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
        respond "+ #{((elementalmanacontrol >= spiritmanacontrol) ? (elementalmanacontrol / 2).truncate : (elementalmanacontrol / 4).truncate).to_s.rjust(3)} : trunc(EMC ranks/#{(elementalmanacontrol >= spiritmanacontrol) ? "2" : "4"})"
        respond "+ #{((spiritmanacontrol > elementalmanacontrol) ? (spiritmanacontrol / 2).truncate : (spiritmanacontrol / 4).truncate).to_s.rjust(3)} : trunc(SMC ranks/#{(spiritmanacontrol > elementalmanacontrol) ? "2" : "4"})"
        respond "+ #{((sorcererranks > (level + 1) ? (level + 1) * 2 + (sorcererranks - (level + 1)) : sorcererranks * 2)).to_s.rjust(3)} : Sorcerer Spells"
        respond "+  20 : Workshop Bonus"
        respond "==========================="
        respond "Total of #{level + wisdom + intuition + (magicitemuse / 10).truncate + (arcanesymbols / 10).truncate + ((elementalmanacontrol >= spiritmanacontrol) ? (elementalmanacontrol / 2).truncate : (elementalmanacontrol / 4).truncate) + ((spiritmanacontrol > elementalmanacontrol) ? (spiritmanacontrol / 2).truncate : (spiritmanacontrol / 4).truncate) + (sorcererranks > (level + 1) ? (level + 1) * 2 + (sorcererranks - (level + 1)) : sorcererranks * 2) + 20}"
      end
      bonus = (level + wisdom + intuition + (magicitemuse / 10).truncate + (arcanesymbols / 10).truncate + ((elementalmanacontrol >= spiritmanacontrol) ? (elementalmanacontrol / 2).truncate : (elementalmanacontrol / 4).truncate) + ((spiritmanacontrol > elementalmanacontrol) ? (spiritmanacontrol / 2).truncate : (spiritmanacontrol / 4).truncate) + (sorcererranks > (level + 1) ? (level + 1) * 2 + (sorcererranks - (level + 1)) : sorcererranks * 2) + 20)
      Resource.save_bonuses(bonus) if Char.prof == "Sorcerer"
      return bonus
    elsif (Char.prof == "Bard" && profession.nil?) || profession =~ /^bard/i
      if show_chart
        respond "Total RECALL Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(aura).to_s.rjust(3)} : AUR Bonus"
        respond "+ #{(influence).to_s.rjust(3)} : INF Bonus"
        respond "+ #{((magicitemuse / 2).truncate).to_s.rjust(3)} : trunc(MIU ranks/2)"
        respond "+ #{((elementalmanacontrol / 2).truncate).to_s.rjust(3)} : trunc(EMC ranks/2)"
        respond "+ #{((mentalmanacontrol / 2).truncate).to_s.rjust(3)} : trunc(MMC ranks/2)"
        respond "+ #{(mentalloretelepathy).to_s.rjust(3)} : Telepathy Ranks"
        respond "+ #{((bardranks > level) ? (level * 2) + (bardranks - level) : bardranks * 2).to_s.rjust(3)} : Bard Spells (to level *2)+(over level)"
        respond "==========================="
        respond "Total of #{level + (aura) + (influence) + (magicitemuse / 2).truncate + (elementalmanacontrol / 2).truncate + (mentalmanacontrol / 2).truncate + (mentalloretelepathy) + ((bardranks > level) ? (level * 2) + (bardranks - level) : bardranks * 2).truncate}"
      end
      bonus = (level + (aura) + (influence) + (magicitemuse / 2).truncate + (elementalmanacontrol / 2).truncate + (mentalmanacontrol / 2).truncate + (mentalloretelepathy) + ((bardranks > level) ? (level * 2) + (bardranks - level) : bardranks * 2).truncate)
      Resource.save_bonuses(bonus) if Char.prof == "Bard"
      return bonus
    elsif (Char.prof == "Cleric" && profession.nil?) || profession =~ /^cleric/i
      if show_chart
        respond "Sanctify Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(wisdom).to_s.rjust(3)} : WIS Bonus"
        respond "+ #{(influence).to_s.rjust(3)} : INF Bonus"
        respond "+ #{((magicitemuse / 10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
        respond "+ #{((arcanesymbols / 10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
        respond "+ #{((spiritmanacontrol / 2).truncate).to_s.rjust(3)} : trunc(SMC ranks/2)"
        respond "+ #{((clericranks > (level + 1) ? (level + 1) * 2 + (clericranks - (level + 1)) : clericranks * 2)).to_s.rjust(3)} : Cleric Spells"
        respond "+  20 : Shrine Bonus (10 if aligned to pantheon but not your specific deity)"
        respond "==========================="
        respond "Total of #{level + wisdom + influence + (magicitemuse / 10).truncate + (arcanesymbols / 10).truncate + (spiritmanacontrol / 2).truncate + (clericranks > (level + 1) ? (level + 1) * 2 + (clericranks - (level + 1)) : clericranks * 2) + 20}"
      end
      bonus = (level + wisdom + influence + (magicitemuse / 10).truncate + (arcanesymbols / 10).truncate + (spiritmanacontrol / 2).truncate + (clericranks > (level + 1) ? (level + 1) * 2 + (clericranks - (level + 1)) : clericranks * 2) + 20)
      Resource.save_bonuses(bonus) if Char.prof == "Cleric"
      return bonus
    elsif (Char.prof == "Warrior" && profession.nil?) || profession =~ /^warrior/i
      if show_chart
        respond "Grit (WPS) Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(strength).to_s.rjust(3)} : STR Bonus"
        respond "+ #{(discipline).to_s.rjust(3)} : DIS Bonus"
        respond "+ #{(physicalfitness / 10).to_s.rjust(3)} : Physical Fitness"
        respond "+  20 : Workshop Bonus"
        respond "+ Weapon Bonus:"
        weaponRanks = gritSkills.sort_by { |_k, v| v }.pop(3).reverse
        respond "  #{((weaponRanks[0][1] > (level + 1) ? (level + 1) * 2 + (weaponRanks[0][1] - (level + 1)) : weaponRanks[0][1] * 2)).to_s.rjust(3)} : Primary Skill   : #{weaponRanks[0][0]}"
        respond "  #{((weaponRanks[1][1] / 2)).to_s.rjust(3)} : Secondary Skill : #{weaponRanks[1][0]}"
        respond "  #{((weaponRanks[2][1] / 2)).to_s.rjust(3)} : Tertiary Skill  : #{weaponRanks[2][0]}"
        respond "+ Armor Bonus:"
        respond "  #{((armoruse > (level + 1) ? (level + 1) * 2 + (armoruse - (level + 1)) : armoruse * 2)).to_s.rjust(3)} : Primary Skill   : Armor Use"
        respond "  #{(shielduse / 3).to_s.rjust(3)} : Secondary Skill : Shield Use"
        respond "==========================="
      end
      gritCommonBase = level + strength + discipline + (physicalfitness / 10) + 20
      weaponRanks = gritSkills.sort_by { |_k, v| v }.pop(3).reverse
      grit_bonuses = [(gritCommonBase + ((armoruse > (level + 1) ? (level + 1) * 2 + (armoruse - (level + 1)) : armoruse * 2)) + (shielduse / 3))]
      grit_bonuses.push(gritCommonBase + ((weaponRanks[0][1] > (level + 1) ? (level + 1) * 2 + (weaponRanks[0][1] - (level + 1)) : weaponRanks[0][1] * 2)) + ((weaponRanks[1][1] + weaponRanks[2][1]) / 2))
      respond "  #{gritCommonBase + ((weaponRanks[0][1] > (level + 1) ? (level + 1) * 2 + (weaponRanks[0][1] - (level + 1)) : weaponRanks[0][1] * 2)) + ((weaponRanks[1][1] + weaponRanks[2][1]) / 2)} : Weapon" if show_chart
      respond "  #{gritCommonBase + ((armoruse > (level + 1) ? (level + 1) * 2 + (armoruse - (level + 1)) : armoruse * 2)) + (shielduse / 3)} : Armor" if show_chart
      respond "" if show_chart
      Resource.save_bonuses(grit_bonuses) if Char.prof == "Warrior"
      return grit_bonuses
    elsif (Char.prof == "Monk" && profession.nil?) || profession =~ /^monk/i
      if show_chart
        respond "Tattoo Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(dexterity * 2).to_s.rjust(3)} : DEX Bonus * 2"
        respond "+ #{(discipline * 2).to_s.rjust(3)} : DIS Bonus * 2"
        respond "+ #{((physicalfitness * (0.75)).truncate).to_s.rjust(3)} : trunc(PF ranks*(3/4))"
        respond "+ #{(((firstaid / 2)).truncate).to_s.rjust(3)} : trunc(FA ranks/2)"
        respond "+ #{((minormentalranks + minorspiritranks) * 2).to_s.rjust(3)} : Spell Ranks * 2"
        respond "+ #{((arcanesymbols)).to_s.rjust(3)} : AS ranks"
        respond "+ #{((mentalmanacontrol)).to_s.rjust(3)} : MMC ranks"
        respond "+ #{((spiritmanacontrol)).to_s.rjust(3)} : SMC ranks"
        respond "+ #{((mentalloretransformationbonus)).to_s.rjust(3)} : ML:Transformation Bonus - Self Tattoo"
        respond "+ #{((mentalloretelepathybonus)).to_s.rjust(3)} : ML:Telepathy Bonus - Other Tattoo"
        respond "==========================="
        respond "Self-Tattoo Total of #{level + (dexterity * 2) + (discipline * 2) + (physicalfitness * (0.75)).truncate + (firstaid / 2).truncate + ((minormentalranks + minorspiritranks) * 2) + arcanesymbols + mentalmanacontrol + spiritmanacontrol + mentalloretransformationbonus}"
        respond "Other-Tattoo Total of #{level + (dexterity * 2) + (discipline * 2) + (physicalfitness * (0.75)).truncate + (firstaid / 2).truncate + ((minormentalranks + minorspiritranks) * 2) + arcanesymbols + mentalmanacontrol + spiritmanacontrol + mentalloretelepathybonus}"
      end
      bonus = [
        (level + (dexterity * 2) + (discipline * 2) + (physicalfitness * (0.75)).truncate + (firstaid / 2).truncate + ((minormentalranks + minorspiritranks) * 2) + arcanesymbols + mentalmanacontrol + spiritmanacontrol + mentalloretransformationbonus),
        (level + (dexterity * 2) + (discipline * 2) + (physicalfitness * (0.75)).truncate + (firstaid / 2).truncate + ((minormentalranks + minorspiritranks) * 2) + arcanesymbols + mentalmanacontrol + spiritmanacontrol + mentalloretelepathybonus)
      ]
      Resource.save_bonuses(bonus) if Char.prof == "Monk"
      return bonus
    elsif (Char.prof == "Ranger" && profession.nil?) || profession =~ /^ranger/i
      if show_chart
        respond "Resist Nature Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(wisdom * 2).to_s.rjust(3)} : WIS Bonus * 2"
        respond "+ #{(intuition * 2).to_s.rjust(3)} : INT Bonus * 2"
        respond "+ #{((survival * 0.75).truncate).to_s.rjust(3)} : trunc(Survival ranks * 0.75)"
        respond "+ #{(magicitemuse).to_s.rjust(3)} : MIU ranks"
        respond "+ #{(harnesspower).to_s.rjust(3)} : Harness Power ranks"
        respond "+ #{(spiritmanacontrol).truncate.to_s.rjust(3)} : SMC ranks"
        respond "+ #{(spiritloreblessings).truncate.to_s.rjust(3)} : SL:Blessings ranks"
        respond "+ #{(rangerranks * 1.5).truncate.to_s.rjust(3)} : trunc(Ranger Spells * 1.5)"
        respond "+ #{(outside? ? 20 : 0).to_s.rjust(3)} : #{outside? ? 'outdoors' : 'indoors'}"
        respond "==========================="
        respond "Total of #{level + (wisdom * 2) + (intuition * 2) + (survival * 0.75).truncate + magicitemuse + harnesspower + spiritmanacontrol + spiritloreblessings + (rangerranks * 1.5).truncate + (outside? ? 20 : 0)}"
      end
      bonus = [(level + (wisdom * 2) + (intuition * 2) + (survival * 0.75).truncate + magicitemuse + harnesspower + spiritmanacontrol + spiritloreblessings + (rangerranks * 1.5).truncate) + (outside? ? 20 : 0)]
      Resource.save_bonuses(bonus) if Char.prof == "Ranger"
      return bonus
    elsif (Char.prof == "Rogue" && profession.nil?) || profession =~ /^rogue/i
      if show_chart
        respond "Covert Arts Success Formula"
        respond "---------------------------"
        respond "  #{(level).to_s.rjust(3)} : Level"
        respond "+ #{(discipline * 2).to_s.rjust(3)} : DIS Bonus * 2"
        respond "+ #{(gldranks).to_s.rjust(3)} : Guild Ranks"
        respond "+ #{(ambush).to_s.rjust(3)} : Ambush Ranks"
        respond "+ #{(pickpocketing * 0.5).truncate.to_s.rjust(3)} : Pickpocketing ranks / 2"
        respond "  Sidestep"
        respond "+ #{(influence * 2).to_s.rjust(3)} : INF Bonus * 2"
        respond "+ #{(dodging).to_s.rjust(3)} : Dodging Ranks"
        respond "  Keen Eye"
        respond "+ #{(intuition * 2).to_s.rjust(3)} : INT Bonus * 2"
        respond "+ #{(perception).to_s.rjust(3)} : Perception Ranks"
        respond "  Escape Artist"
        respond "+ #{(agility * 2).to_s.rjust(3)} : AGI Bonus * 2"
        respond "+ #{(combatmaneuvers).to_s.rjust(3)} : Combat Maneuvers Ranks"
        respond "  Swift Recovery"
        respond "+ #{(constitution * 2).to_s.rjust(3)} : CON Bonus * 2"
        respond "+ #{(physicalfitness).to_s.rjust(3)} : Physical Fitness Ranks"
        respond "  Poisoncraft"
        respond "+ #{(dexterity * 2).to_s.rjust(3)} : DEX Bonus * 2"
        respond "+ #{(survival).to_s.rjust(3)} : Survival Ranks"
        respond "==========================="
        respond "  #{(level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (influence * 2) + dodging).truncate.to_s.rjust(4)} : Sidestep Total"
        respond "  #{(level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (intuition * 2) + perception).truncate.to_s.rjust(4)} : Keen Eye Total"
        respond "  #{(level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (agility * 2) + combatmaneuvers).truncate.to_s.rjust(4)} : Escape Artist Total"
        respond "  #{(level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (constitution * 2) + physicalfitness).truncate.to_s.rjust(4)} : Swift Recovery Total"
        respond "  #{(level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (dexterity * 2) + survival).truncate.to_s.rjust(4)} : Poisoncraft Total"
      end
      bonus = [
        (level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (influence * 2) + dodging).truncate,
        (level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (intuition * 2) + perception).truncate,
        (level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (agility * 2) + combatmaneuvers).truncate,
        (level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (constitution * 2) + physicalfitness).truncate,
        (level + (discipline * 2) + gldranks + ambush + (pickpocketing * 0.5).truncate + (dexterity * 2) + survival).truncate
      ]
      Resource.save_bonuses(bonus) if Char.prof == "Rogue"
      return bonus
    end
  end

  def self.show_odds(new_difficulty, skill_bonus)
    if new_difficulty + 101 <= skill_bonus
      respond "  You got this with 100% certainty! (except fumbles)"
    elsif (new_difficulty + 100 - skill_bonus < 100) && (new_difficulty + 100 - skill_bonus >= 0)
      respond "  #{((skill_bonus - new_difficulty)).to_s.rjust(3)}% Chance or #{(new_difficulty + 100 - skill_bonus) + 1}+ endroll"
    else # no chance without potions/suffusion
      respond "Suffusion or +Potions Needed"
      respond " 100% - Need #{new_difficulty + 101 - skill_bonus} Additional Bonus"
    end
  end

  def self.item(recall_item = nil)
    if Char.prof !~ /^(?:Wizard|Sorcerer|Cleric)$/
      respond "You're not a class with a currently supported auto-item chance calculation. Please use the following to show an appropriate table:"
      respond "   Professions supported: wizard, sorcerer, cleric"
      return
    end

    return if recall_item.nil?

    res = Lich::Util.quiet_command_xml("recall #{recall_item}", /^As you recall \w+'s song, you feel a faint resonating vibration|^You are unable to recall the|^Usage:/)
    if res.any? { |line| line =~ /^You are unable to recall the|^Usage:/ }
      respond "Item (#{recall_item}) not unlocked. Please permanently or temporarily unlock item to use this feature."
      return
    end
    line = res.find { |l| l =~ />(.*)<\/a> in your hand, and you learn something about it/ }
    if line =~ />(.*)<\/a> in your hand, and you learn something about it/
      recall_item = $1.to_s
    end
    item_bonus = 0.0
    item_ensorcell = 0
    item_sanctify = 0
    item_difficulty = 0
    # new_difficulty = 0
    skill_bonus = Resource.bonus(false)

    res.each { |l|
      if l =~ /It imparts a bonus of \+(\d+) more than usual\./
        item_bonus = $1.to_f
      elsif l =~ /It has been ensorcelled (\d) time/
        item_ensorcell = $1.to_i
      elsif l =~ /\((\d+) difficulty\) for an adventurer to modify\./
        item_difficulty = $1.to_i
      elsif l =~ /It has been sanctified (\d) times\.(  It has permanent Holy Fire flares\.)?/
        if $2
          item_sanctify = 6
        else
          item_sanctify = $1.to_i
        end
      end
    }

    case Char.prof
    when "Wizard"
      if item_bonus == 50
        respond "Item (#{recall_item}) already at max enchant"
      else
        penalty = ((((item_bonus - 1) / 3)**2) - (((item_bonus - 2) / 3)**2)).truncate
        new_difficulty = (item_difficulty + penalty).truncate
        respond "Item (#{recall_item}) Enchant Chance"
        respond "----------------------------------------"
        respond "  #{item_difficulty.to_s.rjust(4)} - Item Difficulty"
        respond "+ #{penalty.to_s.rjust(4)} - +#{item_bonus.to_i} -> +#{item_bonus.to_i + 1}"
        respond "========================================"
        respond "  #{new_difficulty.to_s.rjust(4)} - Total Difficulty"
        respond "  #{skill_bonus.to_s.rjust(4)} - Current Skill Bonus"
        respond "========================================"
        Resource.show_odds(new_difficulty, skill_bonus)
      end
    when "Sorcerer"
      if item_ensorcell == 5
        respond "Item (#{recall_item}) already at max ensorcell"
      else
        penalty = 50
        new_difficulty = (item_difficulty + penalty)
        respond "Item (#{recall_item}) Ensorcell Chance"
        respond "----------------------------------------"
        respond "  #{item_difficulty.to_s.rjust(4)} - Item Difficulty"
        respond "+   #{penalty} - T#{item_ensorcell} -> T#{item_ensorcell + 1}"
        respond "========================================"
        respond "  #{new_difficulty.to_s.rjust(4)} - Total Difficulty"
        respond "  #{skill_bonus.to_s.rjust(4)} - Current Skill Bonus"
        respond "========================================"
        Resource.show_odds(new_difficulty, skill_bonus)
      end
    when "Cleric"
      if item_sanctify == 6
        respond "Item (#{recall_item}) already at max sanctify"
      else
        penalty = ((item_sanctify == 5) ? 50 : 20)
        new_difficulty = (item_difficulty + penalty)
        respond "Item (#{recall_item}) Sanctify Chance"
        respond "---------------------------------------"
        respond "  #{item_difficulty.to_s.rjust(4)} - Item Difficulty"
        respond "+   #{penalty} - S#{item_sanctify} -> S#{item_sanctify + 1}"
        respond "======================================="
        respond "  #{new_difficulty.to_s.rjust(4)} - Total Difficulty"
        respond "  #{skill_bonus.to_s.rjust(4)} - Current Skill Bonus"
        respond "======================================="
        Resource.show_odds(new_difficulty, skill_bonus)
      end
    end
  end

  def self.help
    respond "You need to give an option. See below:"
    respond ""
    respond "   ;resource bonus <PROFESSION> - Show's profession success bonus formula"
    respond "   ;resource all                - Show's all known bonuses from previous BONUS checks"
    respond "   ;resource chart <PROFESSION> - Prints off cost chart for each increase"
    respond "       If no profession given, will use current character profession"
    respond "       Professions supported: wizard, sorcerer, bard, monk, cleric, warrior, ranger, rogue"
    respond ""
    respond "   ;resource calc [starting bonus] [ending bonus] [silver rate per essence]"
    respond "       Tells you the cost for enchanting an item from starting bonus to ending bonus"
    respond ""
    respond "   ;resource item [NOUN] - Will attempt to RECALL NOUN and show current chance of success"
    respond "       Professions supported: wizard, sorcerer, cleric"
    respond "   ;resource chance <DIFFICULTY> <TYPE> <BONUS> - Will calculate the chance to succeed"
    respond "       Supports Enchant(E1-E50), Ensorcell(T1-T5), Sanctify(S1-S6), Tattooing(M1-M5), Resistance(R1-R25), Arts(A1-A25)"
    respond ""
    respond "   ;resource chance - Description Of Test CASTs And Chance To Succeed"
    respond "   ;resource rolls  - Numeric Values For Roll Descriptions"
    respond "   ;resource mats   - Material Difficulty Modifiers"
    if variable.empty?
      respond ""
      silence_me
      fput "resource"
    end
  end
end

case variable[1]
when /^mat/i
  Resource.materials
when /^chance/i
  Resource.chance(variable[2], variable[3], variable[4])
when /^rolls/i
  Resource.rolls
when /^calc/i
  Resource.do_calc
when /^chart/i
  Resource.chart
when /^bonus/i
  Resource.bonus(true, variable[2])
when /^item/i
  Resource.item(variable[2])
when /^character|^all$/i
  Resource.show_bonuses
else
  Resource.help if defined?(script.name)
end
