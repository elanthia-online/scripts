=begin
    A universal resource script to calculate various RESOURCE and bonus needs.
    Suitable for the following professions: Wizard, Sorcerer, Bard, Monk,
                                            Warrior, and Cleric
    
    SYNTAX - ;resource <OPTION>
    
    OPTION Selections Include:
        BONUS <PROFESSION> - Show's profession success bonus formula
        CHART <PROFESSION> - Prints off cost chart for each increase
            If no profession given, will use current character profession
            Professions supported: wizard, sorcerer, bard, monk, cleric

        CALC [starting bonus] [ending bonus] [silver rate per essence]
            Tells you the cost for enchanting an item from starting bonus to ending bonus

        CHANCE - Description Of Test CASTs And Chance To Succeed
        ROLLS  - Numeric Values For Roll Descriptions
        MATS   - Material Difficulty Modifiers
        
       todo: none
     author: Elanthia-Online
       name: resource
       tags: resource, tears, 330, santify, grit, essence, enchant, enchanting, 925, recall, loresinging, bard, lkp, unlocking, murderverse, murder, juice, necrojuice, ensorcell, ensorcelling, 735, mystic tattoo, tattoo, mystic, grit, wps, devotion, jesus juice, sanctify, 330, permabless
    version: 1.3.1

    changelog:
    	1.3.1 (2021-12-17)
		Clarified header and added more tags
        1.3 (2021-09-07)
            Grit
        1.2 (2021-06-23)
            Proposed bonus for clerics 330
        1.1 (2020-12-30)
            Monk bonus math fix
        1.0 (2020-12-29)
            Initial release

=end

class Resource
    COST_ESSENCE = ["0", "312", "625", "937", "1250", "1562", "1875", "2187", "2500", "2812", "3125", "3437", "3750", "4062", "4375", "4687", "5000", "5312", "5625", "5937", "6250", "6562", "6875", "7187", "7500", "15000", "22500", "30000", "37500", "45000", "52500", "60000", "67500", "75000", "82500", "90000", "97500", "105000", "112500", "120000", "127500", "135000", "142500", "150000", "157500", "165000", "172500", "180000", "187500", "195000"]
    COST_OTHER = ["50000", "75000", "100000", "125000", "150000"]
    WEEKLY_RESOURCE = 50000.0
    MAX_RESOURCE = 250000.0
    
    DEBUG_ME = false
    
    PAD = 91
    
    PRIVATE_WORKSHOP = ["Tysong"]
    
    #Array of Material Modifiers [12, 4, 4, 4, 4, 4]
    MAT_LIST = [["Adamantine  ", "-150", "-150", "-150", "N/A ", "N/A "],
                ["Alexandrite ", "-500", "0   ", "N/A ", "N/A ", "N/A "],
                ["Black-alloy ", "0   ", "-50 ", "0   ", "N/A ", "N/A "],
                ["Bone        ", "-250", "+10 ", "-250", "N/A ", "N/A "],
                ["Bronze      ", "-50 ", "N/A ", "-50 ", "N/A ", "N/A "],
                ["Carmiln     ", "N/A ", "N/A ", "N/A ", "+10 ", "+10 "],
                ["Cloth       ", "N/A ", "N/A ", "0   ", "N/A ", "N/A "],
                ["Copper      ", "-50 ", "N/A ", "-50 ", "N/A ", "N/A "],
                ["Coraesine   ", "-200", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Deringo     ", "N/A ", "-20 ", "N/A ", "-20 ", "-20 "],
                ["Drakar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
                ["Drake       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Eahnor      ", "+15 ", "+15 ", "+15 ", "N/A ", "N/A "],
                ["Eonake      ", "-60 ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Faenor      ", "+15 ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Faewood     ", "N/A ", "+10 ", "N/A ", "N/A ", "0   "],
                ["Feras       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Fireleaf    ", "N/A ", "+15 ", "N/A ", "N/A ", "+15 "],
		["Ghezyte     ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
                ["Glaes       ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
                ["Glass       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Glowbark    ", "N/A ", "-10 ", "N/A ", "-10 ", "-10 "],
                ["Golvern     ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
                ["Gornar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
                ["Hoarbeam    ", "N/A ", "+5  ", "N/A ", "+5  ", "+5  "],
                ["Illthorn    ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
                ["Imflass     ", "-30 ", "-30 ", "-30 ", "N/A ", "N/A "],
                ["Invar       ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
                ["Ipantor     ", "N/A ", "N/A ", "N/A ", "-40 ", "N/A "],
                ["Iron        ", "-30 ", "-30 ", "-30 ", "N/A ", "N/A "],
                ["Ironwood    ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
                ["Kakore      ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
                ["Kelyn       ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Krodera     ", "-999", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Kroderine   ", "-999", "-999", "-999", "N/A ", "N/A "],
                ["Leather     ", "N/A ", "N/A ", "-10 ", "N/A ", "N/A "],
                ["Lor         ", "N/A ", "N/A ", "N/A ", "N/A ", "-25 "],
                ["Mein        ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
                ["Mesille     ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
                ["Mithglin    ", "+15 ", "+15 ", "+15 ", "N/A ", "N/A "],
                ["Mithril     ", "+20 ", "+20 ", "+20 ", "N/A ", "N/A "],
                ["Modwir      ", "0   ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Mossbark    ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
                ["Obsidian    ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Ora         ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
                ["Ora, Black  ", "-75 ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Ora, White  ", "-40 ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Orase       ", "N/A ", "0   ", "N/A ", "N/A ", "0   "],
                ["Razern      ", "-20 ", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Rhimar      ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
                ["Rolaren     ", "-40 ", "-40 ", "-40 ", "N/A ", "N/A "],
                ["Rowan       ", "N/A ", "N/A ", "N/A ", "N/A ", "+20 "],
                ["Ruby        ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Ruic        ", "N/A ", "N/A ", "N/A ", "-60 ", "N/A "],
                ["Sephwir     ", "N/A ", "N/A ", "N/A ", "-25 ", "N/A "],
                ["Steel       ", "-10 ", "-10 ", "-10 ", "N/A ", "N/A "],
                ["Stone       ", "-500", "N/A ", "N/A ", "N/A ", "N/A "],
		["Surita-     ", "N/A ", "N/A ", "N/A ", "N/A ", "-100"],
		["Surita+     ", "N/A ", "N/A ", "N/A ", "N/A ", "-200"],
                ["Urglaes     ", "-999", "-999", "-999", "N/A ", "N/A "],
                ["Urnon       ", "-999", "N/A ", "N/A ", "N/A ", "N/A "],
                ["Vaalorn     ", "+10 ", "+10 ", "+10 ", "N/A ", "N/A "],
                ["Veil-iron   ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
                ["Villswood   ", "N/A ", "0   ", "N/A ", "0   ", "0   "],
                ["Vultite     ", "0   ", "0   ", "0   ", "N/A ", "N/A "],
                ["White-alloy ", "N/A ", "0   ", "0   ", "N/A ", "N/A "],
                ["Witchwood   ", "N/A ", "N/A ", "N/A ", "N/A ", "-75 "],
                ["Wood        ", "-100", "-10 ", "-100", "-10 ", "-10 "],
                ["Wyrwood     ", "N/A ", "N/A ", "N/A ", "-60 ", "N/A "],
                ["Yew         ", "N/A ", "N/A ", "N/A ", "-20 ", "N/A "],
                ["Zelnorn     ", "-250", "-250", "-250", "N/A ", "N/A "],
                ["Zorchar     ", "-50 ", "-50 ", "-50 ", "N/A ", "N/A "],
                ["Metal       ", "-500", "-500", "-500", "N/A ", "N/A "]]
    
    #Arrays of Roll Results and Descriptions [33, 82]-Needed [40, 6]-Roll
    R_NEED = [["97% (Will only fail on a fumble.)", "You can only fail if you are horribly unlucky.                                    "],
              ["90%-96% Chance                   ", "You should be able to enchant it easily enough, barring bad luck.                 "],
              ["75%-89% Chance                   ", "The odds are on your side to successfully complete the enchantment.               "],
              ["55%-74% Chance                   ", "You are more likely than not to succeed on your cast, but you will need some luck."],
              ["35%-54% Chance                   ", "This enchantment will be difficult, but possible.                                 "],
              ["15%-34% Chance                   ", "This enchantment will be very difficult.                                          "],
              ["2%-14% Chance                    ", "That this enchantment will be nearly impossible.                                  "],
              ["1% Chance (Roll 100)             ", "You will likely need a miracle to complete this enchantment.                      "],
              ["Only rolling over 100 has a shot.", "This enchantment is completely beyond your abilities.                             "]]
    
    R_RESULT = [["You make an outstanding attempt!        ", "90+   "],
                ["You make an excellent attempt!          ", "80+   "],
                ["You make a good attempt!                ", "70+   "],
                ["You make a decent attempt.              ", "60+   "],
                ["You make an okay attempt.               ", "50+   "],
                ["You make a passable attempt.            ", "40+   "],
                ["You make a questionable attempt.        ", "30+   "],
                ["You make a poor attempt!                ", "20+   "],
                ["You make a very poor attempt!           ", "10+   "],
                ["You make a horribly poor attempt!       ", "2+    "],
                ["You make an astoundingly inept attempt! ", "1     "],
                ["Something doesn't seem right...         ", "Fumble"]]
    
    def self.rowout(msg_arr, mbold = false)
        out = '| '
        msg_arr.each { |m|
            out += '%-12.12s | ' % m
        }
        if mbold == true
            _respond "#{monsterbold_start}#{out}#{monsterbold_end}"
        else
            _respond out
        end
    end

    def self.number_commas(number)
    	return number.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
    end

    def self.silver_to_dollar(silvers, dollar_per)
	    return '%.2f' % ((silvers / 1000000 * dollar_per).to_f.round(2))
    end

    def self.calc_rate_row(rate, running_total_ess)
		silver_cost = rate.to_f * running_total_ess.to_f
		row_label = "#{rate} silver"
		orig_rate = rate * 3.125
		silver_cost_comma = number_commas(silver_cost)
		output = [row_label,
                  "#{orig_rate} silver",
                  silver_cost_comma,
                  silver_to_dollar(silver_cost, 4),
                  silver_to_dollar(silver_cost, 5)]
		return output
	end

    def self.rowout2(msg_arr, mbold = false)
        out = '| '
        msg_arr.each { |m|
            out += '%-16.16s | ' % m
        }
        if mbold == true
            _respond "#{monsterbold_start}#{out}#{monsterbold_end}"
        else
            _respond out
        end
    end
    
    def self.materials
        respond "|--------------------------------------------------------------|"
        respond "|                    Material Difficulty Modifiers             |"
        respond "|--------------------------------------------------------------|"
        respond "|   Material   | Weapons | Shields | Armor | Bows | Runestaves |"
        respond "|--------------------------------------------------------------|"
        MAT_LIST.each{ |mat, weap, shie, arm, bow, rune|
            respond "| #{mat} |  #{weap}   |  #{shie}   | #{arm}  | #{bow} |    #{rune}    |"
        }
        respond "|--------------------------------------------------------------|"
    end

    def self.chance
        respond "|-------------------------------------------------------------------------------------------------------------------------|"
        respond "|                                  Description Of Test CASTs And Chance To Succeed                                        |"
        respond "|-------------------------------------------------------------------------------------------------------------------------|"
        respond "| Chance To Get A Successful CHANNEL |                       Messaging On Test CAST                                       |"
        respond "|-------------------------------------------------------------------------------------------------------------------------|"
        R_NEED.each{|rchan, rmes|
            respond "| #{rchan}  | #{rmes} |"
        }
        respond "|-------------------------------------------------------------------------------------------------------------------------|"
    end
    
    def self.rolls
        respond "|-------------------------------------------------------|"
        respond "|          Numeric Values For Roll Descriptions         |"
        respond "|-------------------------------------------------------|"
        respond "|          Roll Result Description         | Roll Value |"
        respond "|-------------------------------------------------------|"
        R_RESULT.each{|rdesc, rval|
            respond "| #{rdesc} |    #{rval}  |"
        }
        respond "|-------------------------------------------------------|"
    end

    def self.do_calc
        starting_bonus = variable[2].to_i
        if variable[3] and variable[3].to_i <= 50
            ending_bonus = variable[3].to_i
        elsif not variable[3] or variable[3].to_i > 50
            ending_bonus = 50
        end
        if variable[4]
            tears_rate = variable[4].to_i
        end
        if ending_bonus <= starting_bonus
            _respond "Ending bonus must be greater than starting bonus"
            _respond ";resource calc [starting bonus] [ending bonus]"
            return
        end

        _respond "Calculating essence needed to take an item from #{starting_bonus} to #{ending_bonus}"
        _respond ""

        _respond "-" * PAD
        headers = ['Current', 'New', 'Cost (ess)', 'Cost (wks)', 'Total (ess)', 'Total (wks)']
        rowout(headers, true)
        _respond "-" * PAD

        current_bonus = starting_bonus
        running_total_ess = 0
        while current_bonus < ending_bonus
            if current_bonus < 0
                step_cost = 0
            else
                step_cost = COST_ESSENCE[current_bonus].to_i
            end
            running_total_ess += step_cost
            response_array = [current_bonus, 
                              current_bonus + 1, 
                              step_cost, 
                              (step_cost / WEEKLY_RESOURCE).round(2), 
                              running_total_ess, 
                              (running_total_ess / WEEKLY_RESOURCE).round(2)]
            rowout(response_array)
            current_bonus += 1
        end
        _respond "-" * PAD
        _respond ""
        _respond "-" * 96
        headers = ['Cost per Essence', 'Old Cost per Ess', 'Total Cost', '$4/1m Silver', '$5/1m Silver']
        rowout2(headers, true)
        _respond "-" * 96
        if variable[4]
            rowout2(calc_rate_row(tears_rate, running_total_ess))
        else
            (4..10).to_a.each { |rate_multi|
                rate = 16 * rate_multi
                rowout2(calc_rate_row(rate, running_total_ess))
            }
        end
        _respond "-" * 96
    end
    
    def self.chart
        respond "Resource needed per tier profession services"
        respond ""
        if (Char.prof == "Wizard" && variable[2].nil?) || variable[2] =~ /^wiz/i
            COST_ESSENCE.each_index { |resource|
                respond "+#{resource.to_s.rjust(2, " ")} -> +#{(resource+1).to_s.rjust(2, " ")} - #{number_commas(COST_ESSENCE[resource]).rjust(7, " ")} Essence"
            }
        elsif (Char.prof == "Sorcerer" && variable[2].nil?) || variable[2] =~ /^sorc/i
            COST_OTHER.each_index { |resource|
                respond "T#{resource.to_s.rjust(1, " ")} -> T#{(resource+1).to_s.rjust(1, " ")} - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Necrotic Energy"
            }
        elsif (Char.prof == "Bard" && variable[2].nil?) || variable[2] =~ /^bard/i
            COST_OTHER.each_index { |resource|
                respond "LKP#{(resource+1).to_s.rjust(1, " ")} - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Lore Knowledge"
            }
        elsif (Char.prof == "Monk" && variable[2].nil?) || variable[2] =~ /^monk/i
            COST_OTHER.each_index { |resource|
                respond "T#{(resource+1).to_s.rjust(1, " ")} Tattoo - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Motes of Tranquility"
            }
            respond ""
            respond "Tattoos come with 100 max charges and are fully charged upon applying or upgrading to next tier."
            respond "To recharge a tattoo, it costs 1,000 Motes of Tranquility per charge being filled."
        elsif (Char.prof == "Cleric" && variable[2].nil?) || variable[2] =~ /^cleric/i
            COST_OTHER.each_index { |resource|
                respond "T#{(resource+1).to_s.rjust(1, " ")} Sanctify - #{number_commas(COST_OTHER[resource]).rjust(7, " ")} Devotion"
            }
            respond "Add Perm Holy Water Flares to T5".to_s.rjust(1, " ") + " Sanctify - #{number_commas(200000).rjust(7, " ")} Devotion"
        elsif (Char.prof == "Warrior" && variable[2].nil?) || variable[2] =~ /^warrior/i
            respond "25,000 Grit per service on weapons and armor"
            respond ""
            respond "10,000 Grit per serivce on armor accessories"
        else
            respond "You're not a class with a currently supported resource calculation. Please use the following to show an appropriate table:"
            respond "   ;resource chart <PROFESSION>"
            respond "   Professions supported: wizard, sorcerer, bard, monk, cleric, warrior"
        end
        respond ""
    end

    def self.bonus
        level = 0
        arcanesymbols = magicitemuse = physicalfitness = firstaid = 0
        elementalmanacontrol = spiritmanacontrol = mentalmanacontrol = 0
        mentalloretelepathy = mentalloretelepathybonus = mentalloretransformation = mentalloretransformationbonus = 0
        bardranks = sorcererranks = wizardranks = clericranks = minormentalranks = minorspiritranks = 0
        strength = constitution = dexterity = agility = discipline = 0
        aura = logic = intuition = wisdom = influence = 0
        armoruse = shielduse = 0
        edgedweapons = bluntweapons = twohandedweapons = rangedweapons = thrownweapons = polearmweapons = brawling = 0

        if Char.prof !~ /^(?:Wizard|Sorcerer|Bard|Monk|Cleric|Warrior)$/ && variable[2].nil?
            respond "You're not a class with a currently supported resource calculation. Please use the following to show an appropriate table:"
            respond "   ;resource chart <PROFESSION>"
            respond "   Professions supported: wizard, sorcerer, bard, monk, cleric, warrior"
            return
        end

        gritSkills = Hash.new
        put "skills full"
        loop {
            line = get
            if line =~ /Arcane Symbols.*?(\d+)$/
                arcanesymbols = $1.to_i
            elsif line =~ /Magic Item Use.*?(\d+)$/
                magicitemuse = $1.to_i
            elsif line =~ /Physical Fitness.*?(\d+)$/
                physicalfitness = $1.to_i
            elsif line =~ /First Aid.*?(\d+)$/
                firstaid = $1.to_i
            elsif line =~ /Mental Lore - Telepathy.*?(\d+)\s+(\d+)$/
                mentalloretelepathybonus = $1.to_i
                mentalloretelepathy = $2.to_i
            elsif line =~ /Mental Lore - Transformation.*?(\d+)\s+(\d+)$/
                mentalloretransformationbonus = $1.to_i
                mentalloretransformation = $2.to_i
            elsif line =~ /Elemental Mana Control.*?(\d+)$/
                elementalmanacontrol = $1.to_i
            elsif line =~ /Spirit Mana Control.*?(\d+)$/
                spiritmanacontrol = $1.to_i
            elsif line =~ /Mental Mana Control.*?(\d+)$/
                mentalmanacontrol = $1.to_i
            elsif line =~ /Wizard.*?(\d+)$/
                wizardranks = $1.to_i
            elsif line =~ /Sorcerer.*?(\d+)$/
                sorcererranks = $1.to_i
            elsif line =~ /Cleric.*?(\d+)$/
                clericranks = $1.to_i
            elsif line =~ /Minor Mental.*?(\d+)$/
                minormentalranks = $1.to_i
            elsif line =~ /Minor Spiritual.*?(\d+)$/
                minorspiritranks = $1.to_i
            elsif line =~ /Bard.*?(\d+)$/
                bardranks = $1.to_i
            elsif line =~ /Armor Use.*?(\d+)$/
                armoruse = $1.to_i
            elsif line =~ /Shield Use.*?(\d+)$/
                shielduse = $1.to_i
            elsif line =~ /Edged Weapons.*?(\d+)$/
                edgedweapons = $1.to_i
                gritSkills["Edged Weapons"] = edgedweapons
            elsif line =~ /Blunt Weapons.*?(\d+)$/
                bluntweapons = $1.to_i
                gritSkills["Blunt Weapons"] = bluntweapons
            elsif line =~ /Two-Handed Weapons.*?(\d+)$/
                twohandedweapons = $1.to_i
                gritSkills["Two-Handed Weapons"] = twohandedweapons
            elsif line =~ /Ranged Weapons.*?(\d+)$/
                rangedweapons = $1.to_i
                gritSkills["Ranged Weapons"] = rangedweapons
            elsif line =~ /Thrown Weapons.*?(\d+)$/
                thrownweapons = $1.to_i
                gritSkills["Thrown Weapons"] = thrownweapons
            elsif line =~ /Polearm Weapons.*?(\d+)$/
                polearmweapons = $1.to_i
                gritSkills["Polearm Weapons"] = polearmweapons
            elsif line =~ /Brawling.*?(\d+)$/
                brawling = $1.to_i
                gritSkills["Brawling Weapons"] = brawling
            elsif line =~ /\(Use SKILLS BASE to display unmodified ranks and goals\)/
                break
            end
        }
        
        put "info"
        loop {
            line = get
            if line =~ /Level:\s+(\d+)$/
                level = $1.to_i
            elsif line =~ /Strength.*?\((\-*\d+)\)$/
                strength = $1.to_i
            elsif line =~ /Constitution.*?\((\-*\d+)\)$/
                constitution = $1.to_i
            elsif line =~ /Dexterity.*?\((\-*\d+)\)$/
                dexterity = $1.to_i
            elsif line =~ /Agility.*?\((\-*\d+)\)$/
                agility = $1.to_i
            elsif line =~ /Discipline.*?\((\-*\d+)\)$/
                discipline = $1.to_i
            elsif line =~ /Aura.*?\((\-*\d+)\)$/
                aura = $1.to_i
            elsif line =~ /Logic.*?\((\-*\d+)\)$/
                logic = $1.to_i
            elsif line =~ /Intuition.*?\((\-*\d+)\)$/
                intuition = $1.to_i
            elsif line =~ /Wisdom.*?\((\-*\d+)\)$/
                wisdom = $1.to_i
            elsif line =~ /Influence.*?\((\-*\d+)\)$/
                influence = $1.to_i
            elsif line =~ /^Mana/
                break
            end
        }
        
        if DEBUG_ME
            echo "Arcane Symbols: #{arcanesymbols}"
            echo "Magic Item Use: #{magicitemuse}"
            echo "Physical Fitness: #{physicalfitness}"
            echo "First Aid: #{firstaid}"
            echo "EMC: #{elementalmanacontrol}"
            echo "SMC: #{spiritmanacontrol}"
            echo "MMC: #{mentalmanacontrol}"
            echo "ML:Telepathy: #{mentalloretelepathy}"
            echo "ML:Transformation: #{mentalloretransformation}"
            echo "Bard Ranks: #{bardranks}"
            echo "Sorcerer Ranks: #{sorcererranks}"
            echo "Wizard Ranks: #{wizardranks}"
            echo "Minor Mental: #{minormentalranks}"
            echo "Minor Spiritual: #{minorspiritranks}"
            echo "Level: #{level}"
            echo "Strength: #{strength}"
            echo "Constitution: #{constitution}"
            echo "Dexterity: #{dexterity}"
            echo "Agility: #{agility}"
            echo "Discipline: #{discipline}"
            echo "Aura: #{aura}"
            echo "Logic: #{logic}"
            echo "Intuition: #{intuition}"
            echo "Wisdom: #{wisdom}"
            echo "Influence: #{influence}"
            echo gritSkills
        end
        
        if (Char.prof == "Wizard" && variable[2].nil?) || variable[2] =~ /^wiz/i
            respond "Enchanting Success Formula"
            respond "---------------------------"
            respond "  #{(level).to_s.rjust(3)} : Level"
            respond "+ #{(logic).to_s.rjust(3)} : LOG Bonus"
            respond "+ #{(intuition).to_s.rjust(3)} : INT Bonus"
            respond "+ #{((magicitemuse/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
            respond "+ #{((arcanesymbols/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
            respond "+ #{((elementalmanacontrol/2).truncate).to_s.rjust(3)} : trunc(EMC ranks/2)"
            respond "+ #{((wizardranks > (level + 1) ? (level + 1)*2 + (wizardranks - (level + 1)) : wizardranks * 2)).to_s.rjust(3)} : Wizard Spells"
            respond "+  25 : Familiar Bonus"
            respond "+  #{PRIVATE_WORKSHOP.include?(Char.name) ? 75 : 50} : Workshop Bonus"
            respond "==========================="
            respond "Total of #{level + logic + intuition + (magicitemuse/10).truncate + (arcanesymbols/10).truncate + (elementalmanacontrol/2).truncate + (wizardranks > (level + 1) ? (level + 1)*2 + (wizardranks - (level + 1)) : wizardranks * 2) + 25 + (PRIVATE_WORKSHOP.include?(Char.name) ? 75 : 50)}"
        elsif (Char.prof == "Sorcerer" && variable[2].nil?) || variable[2] =~ /^sorc/i
            respond "Ensorcelling Success Formula"
            respond "---------------------------"
            respond "  #{level.to_s.rjust(3)} : Level"
            respond "+ #{wisdom.to_s.rjust(3)} : WIS Bonus"
            respond "+ #{intuition.to_s.rjust(3)} : INT Bonus"
            respond "+ #{((magicitemuse/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
            respond "+ #{((arcanesymbols/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
            respond "+ #{((elementalmanacontrol >= spiritmanacontrol) ? (elementalmanacontrol/2).truncate : (elementalmanacontrol/4).truncate).to_s.rjust(3)} : trunc(EMC ranks/#{(elementalmanacontrol >= spiritmanacontrol) ? "2" : "4"})"
            respond "+ #{((spiritmanacontrol > elementalmanacontrol) ? (spiritmanacontrol/2).truncate : (spiritmanacontrol/4).truncate).to_s.rjust(3)} : trunc(SMC ranks/#{(spiritmanacontrol > elementalmanacontrol) ? "2" : "4"})"
            respond "+ #{((sorcererranks > (level + 1) ? (level + 1)*2 + (sorcererranks - (level + 1)) : sorcererranks * 2)).to_s.rjust(3)} : Sorcerer Spells"
            respond "+  20 : Workshop Bonus"
            respond "==========================="
            respond "Total of #{level + wisdom + intuition + (magicitemuse/10).truncate + (arcanesymbols/10).truncate + ((elementalmanacontrol >= spiritmanacontrol) ? (elementalmanacontrol/2).truncate : (elementalmanacontrol/4).truncate) + ((spiritmanacontrol > elementalmanacontrol) ? (spiritmanacontrol/2).truncate : (spiritmanacontrol/4).truncate) + (sorcererranks > (level + 1) ? (level + 1)*2 + (sorcererranks - (level + 1)) : sorcererranks * 2) + 20}"
        elsif (Char.prof == "Bard" && variable[2].nil?) || variable[2] =~ /^bard/i
            respond "Total RECALL Success Formula"
            respond "---------------------------"
            respond "  #{(level).to_s.rjust(3)} : Level"
            respond "+ #{(aura).to_s.rjust(3)} : AUR Bonus"
            respond "+ #{(influence).to_s.rjust(3)} : INF Bonus"
            respond "+ #{((magicitemuse/2).truncate).to_s.rjust(3)} : trunc(MIU ranks/2)"
            respond "+ #{((elementalmanacontrol/2).truncate).to_s.rjust(3)} : trunc(EMC ranks/2)"
            respond "+ #{((mentalmanacontrol/2).truncate).to_s.rjust(3)} : trunc(MMC ranks/2)"
            respond "+ #{(mentalloretelepathy).to_s.rjust(3)} : Telepathy Ranks"
            respond "+ #{((bardranks > level)? (level * 2) + (bardranks - level) : bardranks * 2).to_s.rjust(3)} : Bard Spells (to level *2)+(over level)"
            respond "==========================="
            respond "Total of #{level + (aura) + (influence) + (magicitemuse/2).truncate + (elementalmanacontrol/2).truncate + (mentalmanacontrol/2).truncate + (mentalloretelepathy) + ((bardranks > level)? (level * 2) + (bardranks - level) : bardranks * 2).truncate}"
        elsif (Char.prof == "Cleric" && variable[2].nil?) || variable[2] =~ /^cleric/i
            respond "Sanctify Success Formula"
            respond "---------------------------"
            respond "  #{(level).to_s.rjust(3)} : Level"
            respond "+ #{(wisdom).to_s.rjust(3)} : WIS Bonus"
            respond "+ #{(influence).to_s.rjust(3)} : INF Bonus"
            respond "+ #{((magicitemuse/10).truncate).to_s.rjust(3)} : trunc(MIU ranks/10)"
            respond "+ #{((arcanesymbols/10).truncate).to_s.rjust(3)} : trunc(AS ranks/10)"
            respond "+ #{((spiritmanacontrol/2).truncate).to_s.rjust(3)} : trunc(SMC ranks/2)"
            respond "+ #{((clericranks > (level + 1) ? (level + 1)*2 + (clericranks - (level + 1)) : clericranks * 2)).to_s.rjust(3)} : Cleric Spells"
            respond "+  20 : Shrine Bonus (10 if aligned to pantheon but not your specific deity)"
            respond "==========================="
            respond "Total of #{level + wisdom + influence + (magicitemuse/10).truncate + (arcanesymbols/10).truncate + (spiritmanacontrol/2).truncate + (clericranks > (level + 1) ? (level + 1)*2 + (clericranks - (level + 1)) : clericranks * 2) + 20}"
        elsif (Char.prof == "Warrior" && variable[2].nil?) || variable[2] =~ /^warrior/i
            respond "Grit (WPS) Success Formula"
            respond "---------------------------"
            respond "  #{(level).to_s.rjust(3)} : Level"
            respond "+ #{(strength).to_s.rjust(3)} : STR Bonus"
            respond "+ #{(discipline).to_s.rjust(3)} : DIS Bonus"
            respond "+ #{(physicalfitness / 10).to_s.rjust(3)} : Physical Fitness"
            respond "+  20 : Workshop Bonus"
            respond "+ Primary Skills:"
            respond "    Weapons (specific to weapon type being serviced):"
            gritSkills.each { |title, weaponValue|
                next if weaponValue == 0
                respond "      #{((weaponValue > (level + 1) ? (level + 1)*2 + (weaponValue - (level + 1)) : weaponValue * 2)).to_s.rjust(3)} : #{title}"
            }
            respond "    Armor (only applies to armor and armor accessories):"
            respond "      #{((armoruse > (level + 1) ? (level + 1)*2 + (armoruse - (level + 1)) : armoruse * 2)).to_s.rjust(3)} : Armor Use"
            respond "+ Secondary Skills:"
            respond "    Weapons (specific to weapon type being serviced):"
            gritSkills.each { |title, weaponValue|
                sortedGritSkills = gritSkills.sort_by { |k,v| v }.reject { |k,v| k == title }
                secondaryWeaponRanks = sortedGritSkills.pop(2).reduce(0) { |sum, skillArray| sum += skillArray[1] }
                respond "      #{(secondaryWeaponRanks / 2).to_s.rjust(3)} : #{title}"
            }
            respond "    Armor (only applies to armor and armor accessories):"
            respond "      #{(shielduse / 3).to_s.rjust(3)} : Shield Use"
            respond "==========================="
            gritCommonBase = level + strength + discipline + (physicalfitness / 10) + 20
            respond "      #{gritCommonBase + ((armoruse > (level + 1) ? (level + 1)*2 + (armoruse - (level + 1)) : armoruse * 2)) + (shielduse / 3)} : Armor"
            gritSkills.each { |title, weaponValue|
                sortedGritSkills = gritSkills.sort_by { |k,v| v }.reject { |k,v| k == title }
                secondaryWeaponRanks = sortedGritSkills.pop(2).reduce(0) { |sum, skillArray| sum += skillArray[1] }
                respond "      #{gritCommonBase + ((weaponValue > (level + 1) ? (level + 1)*2 + (weaponValue - (level + 1)) : weaponValue * 2)) + (secondaryWeaponRanks / 2)} : #{title}"
            }
            respond ""
            respond "NOTE: hybrid weapons (katars) require BOTH weapon skills as the primary. As such, to maximize skill for these weapons you need a total of 4 maxed weapon skills"
        elsif (Char.prof == "Monk" && variable[2].nil?) || variable[2] =~ /^monk/i
            respond "Tattoo Success Formula"
            respond "---------------------------"
            respond "  #{(level).to_s.rjust(3)} : Level"
            respond "+ #{(dexterity*2).to_s.rjust(3)} : DEX Bonus * 2"
            respond "+ #{(discipline*2).to_s.rjust(3)} : DIS Bonus * 2"
            respond "+ #{((physicalfitness*(0.75)).truncate).to_s.rjust(3)} : trunc(PF ranks*(3/4))"
            respond "+ #{(((firstaid/2)).truncate).to_s.rjust(3)} : trunc(FA ranks/2)"
            respond "+ #{((minormentalranks+minorspiritranks)*2).to_s.rjust(3)} : Spell Ranks * 2"
            respond "+ #{((arcanesymbols)).to_s.rjust(3)} : AS ranks"
            respond "+ #{((mentalmanacontrol)).to_s.rjust(3)} : MMC ranks"
            respond "+ #{((spiritmanacontrol)).to_s.rjust(3)} : SMC ranks"
            respond "+ #{((mentalloretransformationbonus)).to_s.rjust(3)} : ML:Transformation Bonus - Self Tattoo"
            respond "+ #{((mentalloretelepathybonus)).to_s.rjust(3)} : ML:Telepathy Bonus - Other Tattoo"
            respond "==========================="
            respond "Self-Tattoo Total of #{level + (dexterity*2) + (discipline*2) + (physicalfitness*(0.75)).truncate + (firstaid/2).truncate + ((minormentalranks+minorspiritranks)*2) + arcanesymbols + mentalmanacontrol + spiritmanacontrol + mentalloretransformationbonus}"
            respond "Other-Tattoo Total of #{level + (dexterity*2) + (discipline*2) + (physicalfitness*(0.75)).truncate + (firstaid/2).truncate + ((minormentalranks+minorspiritranks)*2) + arcanesymbols + mentalmanacontrol + spiritmanacontrol + mentalloretelepathybonus}"
        end
    end
    
    def self.help
        respond "You need to give an option. See below:"
        respond ""
        respond "   ;resource bonus <PROFESSION> - Show's profession success bonus formula"
        respond "   ;resource chart <PROFESSION> - Prints off cost chart for each increase"
        respond "       If no profession given, will use current character profession"
        respond "       Professions supported: wizard, sorcerer, bard, monk, cleric, warrior"
        respond ""
        #respond "   ;tears sense  - Tells you how much tears you have based on SENSE messaging."
        respond "   ;resource calc [starting bonus] [ending bonus] [silver rate per essence]"
        respond "       Tells you the cost for enchanting an item from starting bonus to ending bonus"
        respond ""
        respond "   ;resource chance - Description Of Test CASTs And Chance To Succeed"
        respond "   ;resource rolls  - Numeric Values For Roll Descriptions"
        respond "   ;resource mats   - Material Difficulty Modifiers"
        if variable.empty?
            respond ""
            silence_me
            fput "resource"
        end
    end
end

Resource.help           if variable.empty? || variable[0] =~ /^help/i
Resource.materials      if variable[0] =~ /^mat/i
Resource.chance         if variable[0] =~ /^chance/i
Resource.rolls          if variable[0] =~ /^rolls/i
Resource.do_calc        if variable[0] =~ /^calc/i
Resource.chart          if variable[0] =~ /^chart/i
Resource.bonus          if variable[0] =~ /^bonus/i
