=begin
This script runs the Rings of Lumnis event

It requires the following scripts to support it:
  - rofl-puzzles
  - rofl-questions

See the help info for options and configurations.

        author: elanthia-online
  contributors: Tysong, Dissonance, ChatGPT
          game: Gemstone
          tags: rings of lumnis, RoL
       version: 1.0.2

Changelog
  v1.0.2 - 2025-04-21
    - added additional checks for the support scripts and clarified error messaging/help for them.
    - code optimizations/readability changes
    - expanded debugging message to be user toggleable
  v1.0.1 - 2025-04-21
    - Go to resting location before exiting if out of runs or if flagged to stop, then exit.
    - Clarfied error message when unable to get to the starting location.
  v1.0.0 - 2025-04-20
    - Created the script to run the Rings of Lumnis event using existing puzzles and questions scripts.
=end

module RofLRun
  # set defaults
  UserVars.rofl_debug          ||= false 
  UserVars.ignore_ringing_xp   ||= "no"
  UserVars.stop_ringing        ||= "no"
  UserVars.ringing_mind_state  ||= 90

  @rofl_debug = UserVars.rofl_debug

  def self.ringing_loop(balcony_location, resting_location, ring_rooms)
    # check if the supporting scripts are available
    unless Script.exists?("rofl-puzzles") && Script.exists?("rofl-questions")
      unless Script.exists("rofl-puzzles")
        respond("")
        respond("** You need to download the rofl-puzzles script:")
        respond("     ;repo download rofl-puzzles **")
        respond("")
      end
      unless Script.exists("rofl-questions")
        respond("")
        respond("** You need to download the rofl-questions script:")
        respond("     ;repo download rofl-questions **")
        respond("")
      end

      exit
    end

    # start the support scripts, if needed
    echo("Checking/Starting support scripts...") if @rofl_debug
    Script.start("rofl-puzzles") unless Script.running?("rofl-puzzles")
    Script.start("rofl-questions", "auto") unless Script.running?("rofl-questions")

    # make sure they are running, if not, exit
    if !(Script.running?("rofl-puzzles") && Script.running?("rofl-questions"))
      respond("Support Scripts Issues, waiting 10 seconds in case of a slow startup.")
      sleep(10) # give it another chance to finish starting
      unless Script.running?("rofl-puzzles") && Script.running?("rofl-questions")
        respond(" ** Failed to Start Support Scripts! **")
        respond(" rofl-puzzles: #{Script.running?("rofl-puzzles")}")
        respond(" rofl-questions: #{Script.running?("rofl-questions")}")
        exit
      else
        respond("Scripts Running, continuing.")
      end
    end

    loop do
      # First thing we should do is see if we have more runs left, because if we don't the rest doesn't matter!
      echo("Checking for runs left...") if @rofl_debug
      if dothistimeout("look at scholar's card", 2, /This card grants travel to the trials on Liabo\./).nil?
        respond("You are out of runs!")
        Script.run("go2", "u#{resting_location}")
        respond("You are out of runs!")
        exit
      end

      # Waiting to absorb XP
      echo("Checking mind state...") if @rofl_debug
      if UserVars.ignore_ringing_xp != "yes" && percentmind > UserVars.ringing_mind_state.to_i
        echo("******* Mind #{percentmind}%; over #{UserVars.ringing_mind_state}%.  Going to closest node to wait in 3 seconds.")
        sleep(3)
        Script.run("go2", "u#{resting_location}")
        echo("******* Mind #{percentmind}%; over #{UserVars.ringing_mind_state}%.  Waiting until mind is #{UserVars.ringing_mind_state}% or under.")
        sleep(1) while percentmind > UserVars.ringing_mind_state.to_i
      end

      # if we're already in one of the appropriate ring rooms, then we don't need to move
      unless ring_rooms.include?(Room.current.uid.first)
        # Travel to the correct room, try upto 5 times before giving up
        echo("Traveling to balcony location...") if @rofl_debug
        travelRetry = 0
        until Room.current.uid.include?(balcony_location) do
          fput("unhide") if checkhidden
          Script.run("go2", "u#{balcony_location}")

          travelRetry += 1

          if travelRetry > 5
            respond("Unable to get to the starting location (u#{balcony_location}) room, exiting.")
            exit
          end
        end

        # Randomly choose a location to start from
        echo("Randomly choosing a location to start from...") if @rofl_debug
        fput(["ne", "nw"].sample)
        fput(["n", "look"].sample)
      end

      # Clear any non-card items from our hands
      deal_with_hands

      # Check if we have a card and get it if we do
      echo("Checking/getting scholar's card...") if @rofl_debug
      unless dothistimeout("get scholar's card", 2, /You remove a|You already have that/) =~ /You remove a|You already have that/
        if checkright != "card" && checkleft != "card"
          respond("** Out of runs!")
          Script.run("go2", "u#{resting_location}")
          respond("** You are out of runs! **")
          exit
        end
      end

      # go ring x2
      dothistimeout("go ring", 2, /If this is intended, GO RING within 15 seconds to continue\./)
      dothistimeout("go ring", 2, /Bright light bursts across your vision as you step into the sunken ring, and you feel a slight queasy sensation as your surroundings shift/)

      # supporting scripts will deal with questions and puzzles, so we just need to wait for them to finish.

      # wait to be done, it returns you to a random room in the ring, so we need to see if the current room is any of them
      echo("Room UID: #{Room.current.uid.first}.  Rooms List: #{ring_rooms.join(", ")}.  Room Test: #{ring_rooms.include?(Room.current.uid.first)}") if @rofl_debug
      sleep(1) until ring_rooms.include?(Room.current.uid.first)

      echo("Waiting for scripts to finish...") if @rofl_debug
      sleep(3) # let the supporting scripts finish up

      deal_with_hands # clear any non-card items from our hands again

      # Check if we're going to keep going or if we're told to stop
      if UserVars.stop_ringing == "yes"
        Script.run("go2", "u#{resting_location}")
        echo("Var stop_ringing set to yes, resetting to no and exiting.")
        UserVars.stop_ringing = "no"
        exit
      end
    end
  end

  def self.deal_with_hands
    echo("Checking hands...") if @rofl_debug
    if (checkright != "card" || checkright.nil?)
      echo("Right hand: #{GameObj.right_hand.noun}") if @rofl_debug
      if UserVars.lootsack.nil?
        fput("stow right")
      else
        fput("put #{GameObj.right_hand.noun} in #{UserVars.lootsack}")
      end
    end

    if (checkleft != "card" || checkleft.nil?)
      echo("Left hand: #{GameObj.left_hand.noun}") if @rofl_debug
      if UserVars.lootsack.nil?
        fput("stow left")
      else
        fput("put #{GameObj.left_hand.noun} in #{UserVars.lootsack}")
      end
    end
  end

  def self.show_help
    respond("** ** **  Ringing  ** ** **")
    respond("** ** Version: #{(Script.list.find { |x| x.name == Script.current.name }.inspect)[/version: (\d+\.\d+\.\d+)/i, 1]}  ** **")
    respond("")
    respond("USAGE: '#{$lich_char}#{Script.current.name} <planes/spirit/elements/chaos/order>'")
    respond("")
    respond("This script requires both rofl-puzzles and rofl-questions to be downloaded to work.")
    respond("")
    respond("To stop the script from doing another run after this one:  ")
    respond("   #{$lich_char}vars set stop_ringing=yes")
    respond("this gets auto-reset to no after the run finishes as the script exits.")
    respond("")
    respond("The script will run endlessly until you are over #{UserVars.ringing_mind_state}% XP then rest.")
    respond("You can set the preferred mind state % by:")
    respond("   #{$lich_char}#{Script.current.name} mind=<number> (no percent sign)")
    respond("You can set it to wait until your mind is less than #{UserVars.ringing_mind_state}% by:")
    respond("   #{$lich_char}vars set ignore_ringing_xp=no")
    respond("   or #{$lich_char}#{Script.current.name} absorb_xp_first")
    respond("You can set it to ignore your mind state by:")
    respond("   #{$lich_char}vars set ignore_ringing_xp=yes")
    respond("   or #{$lich_char}#{Script.current.name} ignore_ringing_xp")
    respond("")
    respond("Prizes will be placed in your lootsack: #{UserVars.lootsack} or stowed.")
    respond("If you want to change that, then: ")
    respond("   #{$lich_char}vars set lootsack=<container>")
    respond("")
    respond("Debugging can be toggled (currently: #{@rofl_debug}) by:")
    respond("   #{$lich_char}#{Script.current.name} debug")
    respond("")
    respond("** **  Happy Ringing  ** **")
  end

  echo(Script.current.vars[1].downcase) if @rofl_debug

  if Script.current.vars[1].downcase =~ /planes/
    self.ringing_loop(7111001, 7110206, [*7111001..7111005])
  elsif Script.current.vars[1].downcase =~ /spirit/
    self.ringing_loop(7112001, 7110215, [*7112002..7112005])
  elsif Script.current.vars[1].downcase =~ /elements|elemental/
    self.ringing_loop(7113001, 7110221, [*7113002..7113005])
  elsif Script.current.vars[1].downcase =~ /chaos/
    self.ringing_loop(7114001, 7110227, [*7114002..7114005])
  elsif Script.current.vars[1].downcase =~ /order/
    self.ringing_loop(7115001, 7110233, [*7115002..7115005])
  elsif Script.current.vars[1].downcase =~ /help/
    self.show_help
  elsif Script.current.vars[1].downcase =~ /ignore_ringing_xp/
    UserVars.ignore_ringing_xp = "yes"
    respond("XP status will be ignored.")
  elsif Script.current.vars[1].downcase =~ /absorb_xp_first/
    UserVars.ignore_ringing_xp = "no"
    respond("XP will be absorbed before continuing.")
  elsif Script.current.vars[1].downcase =~ /mind/
    UserVars.ringing_mind_state = Script.current.vars[1].downcase[/\d+/] || 90
    respond("Mind state set to #{UserVars.ringing_mind_state}.")
  elsif Script.current.vars[1].downcase =~ /debug/
    UserVars.rofl_debug = @rofl_debug = !@rofl_debug
    respond("Debugging #{@rofl_debug}.")
  else
    self.show_help
  end
end
