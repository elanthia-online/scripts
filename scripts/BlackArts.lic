=begin
    Alchemy script rewrite based on the original Tillman Alchemy script of DOOM!!!!!!1!!!11.
    Currently relies on the following scripts for full utilization:
      - bigshot, eherbs, eloot
        author: elanthia-online
  contributors: Deysh, Tysong, Gob
          game: Gemstone
          tags: alchemy
       version: 1.2.0

  Improvements:
  Major_change.feature_addition.bugfix
  v1.2.0 (2024-06-17)
    - added Sorcerer Illusions to guild skills
    - added new Icemule note name
=end
=begin
  v1.1.2 (2024-03-09)
    - fix for check_table including itself in contents returned.
  v1.1.1 (2024-03-01)
    - removed magic items from inventory clean up
  v1.1.0 (2024-01-16)
    - added help section
    - added ;blackarts finish to stop script after current task is complete (use when script is running)
    - bugfix for checking troll's blood
    - bugfix for gird command if brawler
    - bugfix for cauldron check if only buying elusive reagents
    - bugfix for meditation regex
    - bugfix: script was looping when user mastered a skill or reached max guild ranks
  v1.0.0 (2023-06-19)
    - Initial creation
=end

require 'yaml'

begin
  require 'terminal-table' unless defined?(Terminal::Table)
rescue LoadError
  respond "You need to have the 'terminal-table' gem installed"
  respond "Please install it with the following command: gem install terminal-table"
  respond "Via your computer's local terminal/shell"
  exit
end

# Recipes
module BlackArts
  module Recipes
    def self.alchemy_recipes
      [
        #
        # general alchemy recipes
        #

        {
          :product => 'tincture of acantha',
          :steps   => ['light', 'add flask of clear water', 'add some acantha leaf', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [1, 12],
        },
        {
          :product => 'tincture of tkaro',
          :steps   => ['light', 'add flask of clear water', 'add tkaro root', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [1, 12],
        },
        {
          :product => 'tincture of ambrominas',
          :steps   => ['light', 'add flask of clear water', 'add some ambrominas leaf', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 13],
        },
        {
          :product => 'tincture of wolifrew',
          :steps   => ['light', 'add flask of clear water', 'add some ground wolifrew', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [3, 14],
        },
        {
          :product => 'minor health potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground cuctucae', 'add some ground cuctucae', 'add some ground cuctucae', 'add ayanad crystal', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [4, 15],
        },
        {
          :product => 'tincture of rose-marrow',
          :steps   => ['light', 'add flask of clear water', 'add some ground rose-marrow', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [4, 15],
        },
        {
          :product => 'tincture of basal',
          :steps   => ['light', 'add flask of clear water', 'add some ground basal moss', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [5, 16],
        },
        {
          :product => 'tincture of yabathilium',
          :steps   => ['light', 'add flask of clear water', 'add yabathilium fruit', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [6, 18],
        },
        {
          :product => 'tincture of bolmara',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground bolmara', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [8, 20],
        },
        {
          :product => 'tincture of ephlox',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground ephlox moss', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [10, 19],
        },
        {
          :product => 'minor mana potion',
          :steps   => ['light', 'add flask of clear water', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [10, 22],
        },
        {
          :product => 'tincture of cactacae',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground cactacae', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [11, 24],
        },
        {
          :product => "grot'tkel potion",
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'boil', 'add ayanad crystal', 'simmer', 'add some crystal core essence', 'seal'],
          :type    => 'alchemy',
          :rank    => [13, 25],
        },
        {
          :product => 'tincture of aloeas',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some aloeas stem', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [13, 21],
        },
        {
          :product => 'tincture of haphip',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground haphip', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [13, 26],
        },
        {
          :product => 'tincture of pothinir',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some pothinir grass', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [13, 22]
        },
        {
          :product => 'tincture of talneo',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground talneo', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [13, 27],
        },
        {
          :product => 'tincture of torban',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some torban leaf', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [13, 25],
        },
        {
          :product => "aish'vrak potion",
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'boil', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add some crystal core essence', 'add some crystal core essence', 'seal'],
          :type    => 'alchemy',
          :rank    => [15, 19],
        },
        {
          :product => 'flask of pure water',
          :steps   => ['distill flask of clear water'],
          :type    => 'alchemy',
          :rank    => [15, 62]
        },
        {
          :product => 'tincture of calamia',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some calamia fruit', 'boil', 'add some essence of regeneration', 'seal'],
          :type    => 'alchemy',
          :rank    => [15, 28],
        },
        {
          :product => 'minor mana-well potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground tkaro', "add s'ayanad crystal", 'add some faintly glimmering dust', 'add some faintly glimmering dust', 'simmer', 'add some glimmering blue essence dust', 'seal'],
          :type    => 'alchemy',
          :rank    => [16, 38],
        },
        {
          :product => 'tincture of woth',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some woth flower', 'boil', 'add some essence of regeneration', 'seal'],
          :type    => 'alchemy',
          :rank    => [16, 30],
        },
        {
          :product => 'tincture of brostheras',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some brostheras grass', 'boil', 'add some essence of regeneration', 'seal'],
          :type    => 'alchemy',
          :rank    => [17, 31],
        },
        {
          :product => 'tincture of wingstem',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground wingstem', 'simmer', 'add some essence of regeneration', 'seal'],
          :type    => 'alchemy',
          :rank    => [18, 32],
        },
        {
          :product => 'tincture of bur-clover',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground bur-clover', 'simmer', 'add some essence of regeneration', 'seal'],
          :type    => 'alchemy',
          :rank    => [19, 34],
        },
        {
          :product => 'minor mana regen potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add some ground tkaro', 'add some ground tkaro', 'simmer', "add s'ayanad crystal", 'add glimmering blue mote of essence', 'seal'],
          :type    => 'alchemy',
          :rank    => [20, 34]
        },
        {
          :product => 'tincture of sovyn',
          :steps   => ['light', 'add flask of clear water', 'add handful of sea salt', 'add some ground sovyn', 'simmer', 'add some essence of regeneration', 'seal'],
          :type    => 'alchemy',
          :rank    => [20, 34],
        },
        {
          :product => 'lesser health potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground marallis', 'add some ground marallis', 'add some ground marallis', "add s'ayanad crystal", 'boil', 'add small troll tooth', 'seal'],
          :type    => 'alchemy',
          :rank    => [22, 37],
        },
        {
          :product => 'lesser mana potion',
          :steps   => ['light', 'add flask of clear water', "add s'ayanad crystal", 'add some faintly glimmering dust', 'simmer', 'add glimmering blue essence shard', 'seal'],
          :type    => 'alchemy',
          :rank    => [28, 44],
        },
        {
          :product => 'essence shard',
          :steps   => ['light', 'add vial of viscous liquid', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [30, 34],
        },
        {
          :product => 'ayanad crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add essence shard', 'add some faintly glowing dust', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [30, 46],
        },
        {
          :product => "s'ayanad crystal",
          :steps   => ['light', 'add vial of viscous liquid', 'add essence shard', 'add some faintly radiant dust', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [30, 46],
        },
        {
          :product => "t'ayanad crystal",
          :steps   => ['light', 'add vial of viscous liquid', 'add essence shard', 'add some faintly shimmering dust', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [30, 46],
        },
        {
          :product => 'small flask of normal-strength skin glue',
          :steps   => ['light', 'add flask of clear water', 'add some powdered sea urchin shell', 'add some powdered crystal crab shell', 'add some powdered crystal crab shell', 'add some essence of earth', 'add some essence of water', 'add some glimmering blue essence dust', 'infuse', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [30, 40],
        },
        {
          :product => 'lesser mana-well potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground tkaro', "add t'ayanad crystal", 'add some faintly glowing dust', 'add some faintly glowing dust', 'simmer', 'add some glowing violet essence dust', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [31, 48],
        },
        {
          :product => 'minor sneezing powder',
          :steps   => ['light', 'add flask of clear water', 'add some powdered citrine quartz', 'add some essence of fire', 'simmer', 'add pepperthorn root', 'add pepperthorn root', 'add pepperthorn root', 'add ayanad crystal', 'add ayanad crystal', 'boil', 'add vial of concentrated firethorn essence', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [34, 51],
        },
        {
          :product => 'smooth stone talisman',
          :nick    => 'minor luck talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add some ground tkaro', 'add some ground tkaro', 'boil', 'add luckbloom blossom', "add s'ayanad crystal", 'simmer', 'add some powdered white pearl', "add pristine nymph's hair", 'infuse', 'add smooth stone', 'seal'],
          :type    => 'alchemy',
          :rank    => [37, 55],
        },
        {
          :product => 'lesser mana regeneration potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add ayana leaf', 'add some ground tkaro', 'add some ground tkaro', 'simmer', "add t'ayanad crystal", 'add glowing violet mote of essence', 'add some faintly glowing dust', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [40, 58]
        },
        {
          :product => 'greater mana potion',
          :steps   => ['light', 'add flask of clear water', 'add ayanad crystal', "add s'ayanad crystal", "add s'ayanad crystal", 'add some faintly glimmering dust', 'simmer', 'add glowing violet essence shard', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [44, 62],
        },
        {
          :product => 'greater health potion',
          :nick    => 'vibrant red potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground yabathilium', 'add some ground yabathilium', 'add some ground yabathilium', "add t'ayanad crystal", 'boil', 'chant 1101', 'add large troll tooth', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [44, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'major sneezing powder',
          :steps   => ['light', 'add flask of clear water', 'add some powdered rose quartz', 'add some essence of fire', 'add some essence of fire', 'simmer', 'add pepperthorn root', 'add pepperthorn root', 'add pepperthorn root', "add s'ayanad crystal", "add s'ayanad crystal", 'boil', 'add vial of concentrated firethorn essence', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [47, 62],
        },
        {
          :product => 'spirit shard',
          :steps   => ['light', 'add vial of viscous liquid', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [50, 58],
        },
        {
          :product => 'mottled malachite talisman',
          :nick    => 'lesser luck talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add some ground tkaro', 'add some ground tkaro', 'boil', 'add luckbloom blossom', 'add luckbloom blossom', "add t'ayanad crystal", 'simmer', 'add some powdered white pearl', 'infuse', "add pristine sprite's hair", 'channel', 'add green malachite stone', 'seal'],
          :type    => 'alchemy',
          :rank    => [50, 62],
        },
        {
          :product => 'greater mana-well potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground tkaro', "add s'ayanad crystal", "add t'ayanad crystal", 'simmer', 'add some faintly radiant dust', 'add some faintly radiant dust', 'infuse', 'add some radiant crimson essence dust', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [57, 62],
        },
        {
          :product => 'full health potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground cothinar', 'add some ground cothinar', 'add some ground cothinar', "add n'ayanad crystal", 'boil', 'chant 1101', 'add flask of sparkling body essence', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [58, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'glowing moonstone talisman',
          :nick    => 'greater luck talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add some ground tkaro', 'add some ground tkaro', 'boil', 'add luckbloom blossom', 'add luckbloom blossom', 'add luckbloom blossom', 'add luckbloom blossom', 'add some faintly glowing dust', 'add some faintly glowing dust', 'simmer', 'add some powdered white pearl', "add t'ayanad crystal", 'infuse', "add pristine siren's hair", 'channel', 'add golden moonstone', 'seal'],
          :type    => 'alchemy',
          :rank    => [59, 62],
        },
        {
          :product => 'greater mana regeneration potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'add some ground tkaro', 'add some ground tkaro', 'simmer', "add s'ayanad crystal", "add t'ayanad crystal", 'infuse', 'add radiant crimson mote of essence', 'add some faintly radiant dust', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [60, 62],
        },
        {
          :product => 'tiny vial of extra-strong skin glue',
          :steps   => ['light', 'add flask of clear water', 'add some powdered iridescent tempest shell', "add some powdered deep blue mermaid's tear sapphire", 'add some essence of earth', 'add some essence of earth', 'add some essence of water', 'add some essence of water', 'add some glowing violet essence dust', 'infuse', 'refract sunlight through ruby lens', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [60, 62],
        },
        {
          :product => 'full mana potion',
          :steps   => ['light', 'add flask of clear water', "add s'ayanad crystal", "add s'ayanad crystal", "add s'ayanad crystal", "add t'ayanad crystal", 'add some faintly glimmering dust', 'add some faintly glimmering dust', 'add some faintly glimmering dust', 'add some faintly glimmering dust', 'simmer', 'add radiant crimson essence shard', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [62, 62],
        },
        {
          :product => 'vial of translucent dye base',
          :steps   => ['light', 'add flask of clear water', 'add some ground murdroot', 'add some ground murdroot', 'add ayanad crystal', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 14],
        },
        {
          :product => 'black vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground alder bark', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 14],
        },
        {
          :product => 'purple vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed wood violet', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'indigo vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed sprig of wild lilac', 'add some ground woad leaves', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'brown vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some powdered walnuts', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 12],
        },
        {
          :product => 'dark red vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed oxblood lily', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 12],
        },
        {
          :product => 'light blue vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground woad leaves', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 12],
        },
        {
          :product => 'dark blue vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed stalk of bluebells', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 12],
        },
        {
          :product => 'light green vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground arctic moss', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 12],
        },
        {
          :product => 'dark green vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground blackened moss', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [2, 12],
        },
        {
          :product => 'light red vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground lichen', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [3, 13],
        },
        {
          :product => 'orange vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed coppery rain lily', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [3, 13],
        },
        {
          :product => 'pink vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground orchil', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [3, 13],
        },
        {
          :product => 'cream white vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground longgrass', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [4, 14],
        },
        {
          :product => 'lavender blue vial of dye',
          # fixme: This is a purple-cap cowrie shell, which becomes powdered cowrie shell.. a conflict with snake-head?  bugged ingame
          # I won't change it here, as it may try to use this recipe and 'wrong' shell for low-level reps.
          :steps   => ['light', 'add vial of translucent dye base', 'add some powdered purple-cap cowrie', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [4, 14],
        },
        {
          :product => 'pale yellow vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed yellow clover', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [4, 14],
        },
        {
          :product => 'tan vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed onion skin', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [4, 14],
        },
        {
          :product => 'bright yellow vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed gorse', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [5, 15],
        },
        {
          :product => 'white vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some ground valerian', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [5, 15],
        },
        {
          :product => 'grey vial of dye',
          :steps   => ['light', 'add vial of translucent dye base', 'add some mashed alligator lily', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [7, 17],
        },
        {
          :product => 'vial of limpid dye base',
          :steps   => ['light', 'add flask of clear water', 'add some ground murdroot', 'add some ground murdroot', 'add some powdered lump of grey ambergris', 'boil', "add s'ayanad crystal", 'add crystalline globe', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'tangerine yellow vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed tiger lily', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'light ginger vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed red clover', 'add some ground ginger', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'raven black vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some ground trollfear mushroom', 'add some ground trollfear mushroom', 'add some ground alder bark', 'add some ground alder bark', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'goldenrod yellow vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed stalk of goldenrod', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'rosy pink vial of dye',
          # not yellow primrose
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed primrose', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'azure vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some ground valerian', 'add some ground valerian', 'add some ground woad leaves', 'add some ground woad leaves', 'simmer', 'add some powdered blue spinel', 'add some powdered blue spinel', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'cerulean blue vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed yellow clover', 'add some mashed yellow clover', 'add some ground woad leaves', 'add some ground woad leaves', 'simmer', 'add some powdered blue lapis lazuli', 'add some powdered blue lapis lazuli', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'cobalt blue vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some ground woad leaves', 'add some ground woad leaves', 'add some ground alder bark', 'add some ground alder bark', 'simmer', 'add some powdered blue lapis lazuli', 'add some powdered blue lapis lazuli', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'periwinkle blue vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some ground woad leaves', 'add some ground woad leaves', 'add some ground orchil', 'add some ground orchil', 'simmer', 'add some powdered red coral', 'add some powdered red coral', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'turquoise blue vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed stalk of bluebells', 'add some mashed stalk of bluebells', 'add some ground woad leaves', 'add some ground woad leaves', 'simmer', 'add some powdered turquoise stone', 'add some powdered turquoise stone', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'cranberry red vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed bright red cranberry', 'simmer', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'slate grey vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some ground valerian', 'add some ground valerian', 'add some ground alder bark', 'add some ground alder bark', 'add some ground alder bark', 'simmer', 'add some powdered white clam shell', 'add some powdered white clam shell', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'slate grey vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some ground valerian', 'add some ground valerian', 'add some ground alder bark', 'add some ground alder bark', 'add some ground alder bark', 'simmer', 'add some powdered white chalcedony', 'add some powdered white chalcedony', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'scarlet vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some mashed orange begonia', 'simmer', 'add some powdered nassa shell', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'tawny brown vial of dye',
          :steps   => ['light', 'add vial of limpid dye base', 'add some powdered walnuts', 'add some powdered walnuts', 'add some mashed onion skin', 'add some mashed onion skin', 'simmer', 'add ruff of raptor feathers', 'add ruff of raptor feathers', 'boil', 'seal'],
          :type    => 'alchemy',
        },
        {
          :product => 'vial of clear dye base',
          :steps   => ['light', 'add flask of clear water', 'add some ground murdroot', 'add some ground murdroot', 'add some ground murdroot', 'add some ground murdroot', 'add some powdered lump of grey ambergris', 'boil', "add t'ayanad crystal", "add t'ayanad crystal", 'add vial of farlook vitreous humor', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'vial of clear dye base',
          :steps   => ['light', 'add flask of clear water', 'add some ground murdroot', 'add some ground murdroot', 'add some ground murdroot', 'add some ground murdroot', "add t'ayanad crystal", "add t'ayanad crystal", 'simmer', 'add some powdered grey caederine', "add s'ayanad crystal", 'boil', 'add vial of farlook vitreous humor', 'infuse', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'sapphire blue vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some ground blue moss', 'add some ground blue moss', 'simmer', 'add some powdered blue sapphire', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'silvery vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some mashed moonlight cactus-bloom', 'add some mashed moonlight cactus-bloom', 'add some mashed moonlight cactus-bloom', 'simmer', 'add some powdered silver fang', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'emerald green vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some ground green fungus', 'add some ground green fungus', 'simmer', 'add some powdered uncut emerald', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'golden vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some mashed flaeshorn berry', 'add some mashed flaeshorn berry', 'add some mashed flaeshorn berry', 'add some mashed flaeshorn berry', 'add some mashed flaeshorn berry', 'simmer', 'add pinch of gold dust', 'add pinch of gold dust', 'add pinch of gold dust', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'amethyst violet vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some mashed purple poppy', 'add some mashed purple poppy', 'add some mashed purple poppy', 'add some mashed purple poppy', 'add some mashed purple poppy', 'simmer', 'add some powdered deep blue amethyst', 'add some powdered deep blue amethyst', 'add some powdered deep blue amethyst', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'olivine vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some ground shadowlace moss', 'add some ground shadowlace moss', 'add some ground shadowlace moss', 'simmer', 'add some powdered olivine feanor-bloom', 'add some powdered olivine feanor-bloom', 'add some powdered olivine feanor-bloom', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'coppery vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some mashed coppery rain lily', 'add some mashed coppery rain lily', 'add some mashed coppery rain lily', 'add some mashed coppery rain lily', 'add some mashed coppery rain lily', 'simmer', 'add some powdered copper fang', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'rainbow vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some mashed stargazer lily', 'add some mashed stargazer lily', 'add some mashed stargazer lily', 'simmer', 'add some powdered swirling aetherstone', 'add some powdered swirling aetherstone', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'ruby red vial of dye',
          :steps   => ['light', 'add vial of clear dye base', 'add some mashed red passionflower', 'add some mashed red passionflower', 'add some mashed red passionflower', 'add some mashed red passionflower', 'add some mashed red passionflower', 'simmer', 'add some powdered uncut ruby', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'brilliant dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some ground sponge mushroom', 'add some ground sponge mushroom', 'add some ground sponge mushroom', 'simmer', 'add some powdered star-of-Tamzyrr diamond', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'glimmering dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some fetid black slime', 'simmer', 'add some powdered maernstrike diamond', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'glittering dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add mass of congealed slime', 'simmer', 'add some powdered blue diamond', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],

        },
        {
          :product => 'glowing dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some ground lichen', 'add some ground lichen', 'add some ground lichen', 'simmer', 'add some powdered uncut diamond', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'radiant dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some ground wyrm thorn', 'add some ground wyrm thorn', 'simmer', 'add some powdered clear glimaerstone', "add some powdered dragon's-tear diamond", 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'shimmering dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some ground petrified shadowstalk', 'add some ground petrified shadowstalk', 'simmer', 'add some powdered uncut diamond', 'add some powdered shimmertine shard', 'add some powdered shimmertine shard', 'add some powdered shimmertine shard', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'shining dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some ground bloodthorn stem', 'add some ground bloodthorn stem', 'simmer', 'add some powdered yellow hyacinth', 'add some powdered maernstrike diamond', 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'sparkling dye additive',
          :steps   => ['light', 'add vial of clear dye base', 'add some powdered grey caederine', 'boil', 'add some ground bone mushroom', 'add some ground bone mushroom', 'simmer', "add some powdered dragon's-tear diamond", 'channel', 'seal'],
          :type    => 'alchemy',
          :rank    => [54, 62],
        },
        {
          :product => 'vial of hair dye base',
          :steps   => ['light', 'add flask of pure oil', 'add some powdered black ambergris', "add s'ayanad crystal", 'add perfect myklian belly scale', 'add some murdroot essence', 'add some murdroot essence', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [26, 36],
        },
        {
          :product => 'temporary honey blonde hair dye',
          :steps   => ['light', 'add vial of hair dye base', 'add some mashed golden buttercup', 'add some powdered honey beryl', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [26, 36],
        },
        {
          :product => 'temporary mossy green hair dye',
          :steps   => ['light', 'add vial of hair dye base', 'add some cave moss', 'add some cave moss', 'add witchwood twig', 'add some powdered malachite stone', 'add some powdered malachite stone', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [26, 36],
        },
        {
          :product => 'temporary dingy hair dye',
          :steps   => ['light', 'add vial of hair dye base', 'add wight skin', 'add some faintly glimmering dust', 'add few lumps of charcoal', 'add few lumps of charcoal', 'boil', 'seal'],
          :type    => 'alchemy',
          :rank    => [26, 36],
        },
        {
          :product => 'temporary plum-colored hair dye',
          :steps   => ['light', 'add vial of hair dye base', 'add some mashed juicy plum', 'add some mashed juicy plum', 'add some powdered violet sapphire', 'add black dreamstone', 'simmer', 'seal'],
          :type    => 'alchemy',
          :rank    => [26, 36],
        },

        #
        # alchemic potions recipes
        #
        {
          :product => 'light blue potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'simmer', 'add some powdered turquoise stone', 'boil', 'add small daisy', 'add small daisy', 'chant 101', 'seal'],
          :type    => 'potions',
          :spell   => '101',
          :rank    => [1, 13],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'silvery potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'boil', 'add some powdered smoky topaz', 'simmer', 'chant 401', 'seal'],
          :type    => 'potions',
          :spell   => '401',
          :rank    => [2, 13],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'cloudy grey tonic',
          :nick    => 'minor stamina potion',
          :steps   => ['light', 'add flask of clear water', 'add smooth stone', 'add smooth stone', 'add some ground oats', 'add some essence of vitality', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [4, 14],
          :for     => ['Empath'],
        },
        {
          :product => 'cloudy grey tonic',
          :nick    => 'minor stamina potion',
          :steps   => ['light', 'add flask of clear water', 'add smooth stone', 'add some powdered water chestnut', 'add some powdered water chestnut', 'add some powdered water chestnut', 'add some essence of vitality', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [4, 14],
          :for     => ['Empath'],
        },
        {
          :product => 'swirling grey potion',
          :steps   => ['light', 'add flask of clear water', 'add giant skin', 'boil', 'add some essence of air', 'simmer', 'chant 102', 'seal'],
          :type    => 'potions',
          :spell   => '102',
          :rank    => [5, 16],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'swirling grey potion',
          :steps   => ['light', 'add flask of clear water', 'add cockatrice plume', 'add cockatrice plume', 'boil', 'add some essence of air', 'simmer', 'chant 102', 'seal'],
          :type    => 'potions',
          :spell   => '102',
          :rank    => [5, 16],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'shimmering pale green potion',
          :steps   => ['light', 'add flask of clear water', 'add sprig of larkspur', 'simmer', 'add glistening black eye', 'boil', 'add some powdered green sapphire', 'chant 402', 'seal'],
          :type    => 'potions',
          :spell   => '402',
          :rank    => [5, 16],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'dimly glowing golden potion',
          :steps   => ['light', 'add flask of clear water', 'add some valerian root', 'add some valerian root', 'simmer', 'add wight skin', 'add wight skin', 'boil', 'add some powdered yellow sapphire', 'chant 202', 'seal'],
          :type    => 'potions',
          :spell   => '202',
          :rank    => [7, 19],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'luminous ruddy potion',
          :steps   => ['light', 'add flask of clear water', 'add sprig of holly', 'add sprig of holly', 'boil', 'add some powdered violet sapphire', 'simmer', 'add boar tusk', 'add boar tusk', 'chant 103', 'seal'],
          :type    => 'potions',
          :spell   => '103',
          :rank    => [8, 20],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'scintillating pale blue potion',
          :steps   => ['light', 'add flask of clear water', 'add blue trafel mushroom', 'boil', 'add some powdered blue lapis lazuli', 'simmer', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'chant 403', 'seal'],
          :type    => 'potions',
          :spell   => '403',
          :rank    => [8, 20],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'dark shimmering oil',
          :steps   => ['light', 'add flask of pure oil', 'add some powdered black jasper', 'add ayanad crystal', 'add ayanad crystal', 'boil', 'add jagged translucent crystal', 'simmer', 'chant 902', 'seal'],
          :type    => 'potions',
          :spell   => '902',
          :rank    => [9, 21],
          :for     => ['Wizard'],
        },
        {
          :product => 'minor repelling oil',
          :steps   => ['light', 'add flask of blessed oil', 'add some mashed mournbloom', 'add some powdered white opal', 'add some glowing white powder', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [10, 20],
          :for     => ['Cleric'],
        },
        {
          :product => 'flask of aromatic yellow oil',
          :nick    => 'minor exorcism oil',
          :steps   => ['light', 'add flask of blessed oil', 'add some mashed sneezeweed', 'add some powdered yellow sapphire', 'add some glowing white powder', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [10, 20],
          :for     => ['Cleric'],
        },
        {
          :product => 'rohnuru potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground ayana', 'add some essence of water', 'chant 925', 'add some faintly glowing dust', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [10, 22],
          :for     => ['Wizard'],
        },
        {
          :product => 'pale sky-blue potion',
          :steps   => ['light', 'add flask of clear water', 'add white hook mushroom', 'boil', 'add ghoul nail', 'add ghoul nail', 'simmer', 'add some powdered star sapphire', 'chant 104', 'seal'],
          :type    => 'potions',
          :spell   => '104',
          :rank    => [11, 24],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'minor heath-well potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered golden amber', 'add some powdered golden amber', 'add small troll tooth', 'add small troll tooth', 'boil', 'add ayana leaf', 'add bear paw', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [11, 21],
          :for     => ['Empath'],
        },
        {
          :product => 'scintillating pale red potion',
          :steps   => ['light', 'add flask of clear water', 'add red trafel mushroom', 'boil', 'add some powdered brown sphene', 'simmer', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'chant 404', 'seal'],
          :type    => 'potions',
          :spell   => '404',
          :rank    => [11, 22],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'foamy dark amber elixir',
          :nick    => 'minor health-well potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered golden amber', 'add some powdered golden amber', 'add small troll tooth', 'add small troll tooth', 'boil', 'add ayana leaf', 'add bear paw', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [10, 21],
          :for     => ['Empath'],
        },
        {
          :product => 'pale sea-green potion',
          :steps   => ['light', 'add flask of clear water', 'add viper fang', 'boil', 'add some ground sweetfern stalk', 'add some ground sweetfern stalk', 'simmer', 'add some powdered green tourmaline', 'chant 105', 'seal'],
          :type    => 'potions',
          :spell   => '105',
          :rank    => [14, 27],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'pale sea-green potion',
          :steps   => ['light', 'add flask of clear water', 'add tree viper fang', 'add tree viper fang', 'boil', 'add some ground sweetfern stalk', 'add some ground sweetfern stalk', 'simmer', 'add some powdered green tourmaline', 'chant 105', 'seal'],
          :type    => 'potions',
          :spell   => '105',
          :rank    => [14, 27],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'minor elemental focus potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered blue peridot', 'add some powdered blue peridot', 'add some powdered green peridot', 'boil', 'add some ground flathead mushroom', "add s'ayanad crystal", 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [12, 22],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          # fixme: grind mother-of-pearl?
          :product => 'rainbow-hued potion',
          :steps   => ['light', 'add flask of clear water', 'add crimson dragonstalk', 'simmer', 'add iridescent piece of mother-of-pearl', 'add myklian scale', 'boil', 'chant 405', 'seal'],
          :type    => 'potions',
          :spell   => '405',
          :rank    => [14, 27],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'rainbow-hued potion',
          :steps   => ['light', 'add flask of clear water', 'add crimson dragonstalk', 'simmer', 'add some powdered rainbow quartz', 'boil', 'chant 405', 'seal'],
          :type    => 'potions',
          :spell   => '405',
          :rank    => [14, 27],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'bright silvery potion',
          :steps   => ['light', 'add flask of clear water', 'add silver mane', 'add some powdered silvery conch shell', 'simmer', 'chant 406', 'seal'],
          :type    => 'potions',
          :spell   => '406',
          :rank    => [18, 31],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'bright silvery potion',
          :steps   => ['light', 'add flask of clear water', 'add ursian tusk', 'add ursian tusk', 'add some powdered shimmertine shard', 'boil', 'chant 406', 'seal'],
          :type    => 'potions',
          :spell   => '406',
          :rank    => [18, 31],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'glimmering sanguine potion',
          :steps   => ['light', 'add flask of blessed water', 'add ayana leaf', 'add some faintly glimmering dust', 'boil', 'add some powdered uncut diamond', 'add troll blood', 'simmer', 'chant 1101', 'seal'],
          :type    => 'potions',
          :rank    => [18, 31],
          :for     => ['Empath'],
        },
        {
          :product => 'sarmoc potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground ayana', 'add some essence of water', 'chant 925', 'add some faintly glimmering dust', 'boil', 'add some essence of fire', 'chant 417', 'seal'],
          :type    => 'potions',
          :rank    => [18, 31],
          :for     => ['Wizard'],
        },
        {
          :product => 'some minor holy oil',
          :steps   => ['light', 'add flask of blessed oil', 'add wraith talon', 'add wraith talon', 'add wraith talon', 'add wraith talon', 'add some powdered white jade', 'boil', 'add ayanad crystal', 'add some glowing white powder', 'simmer', 'chant 304', 'seal'],
          :type    => 'potions',
          :spell   => '304',
          :rank    => [19, 34],
          :for     => ['Cleric'],
        },
        {
          :product => 'deep blue potion',
          :steps   => ['light', 'add flask of clear water', 'add blue poppy', 'add blue poppy', 'add blue poppy', 'simmer', 'add ghoul finger', 'boil', 'add some powdered smoky glimaerstone', 'chant 107', 'seal'],
          :type    => 'potions',
          :spell   => '107',
          :rank    => [20, 34],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'duqnuru potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground ayana', 'add some ground ayana', 'add some essence of water', 'add some essence of water', 'chant 925', 'add some faintly glowing dust', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [20, 33],
          :for     => ['Wizard'],
        },
        {
          :product => 'softly glowing blue potion',
          :steps   => ['light', 'add flask of clear water', 'add blue trafel mushroom', 'add blue trafel mushroom', 'boil', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add some powdered rhodochrosite stone', 'chant 407', 'seal'],
          :type    => 'potions',
          :spell   => '407',
          :rank    => [20, 34],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'softly glowing red potion',
          :steps   => ['light', 'add flask of clear water', 'add red trafel mushroom', 'add red trafel mushroom', 'boil', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add some powdered rhodochrosite stone', 'chant 408', 'seal'],
          :type    => 'potions',
          :spell   => '408',
          :rank    => [23, 38],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'thick silver potion',
          :steps   => ['light', 'add flask of clear water', 'add silvery hoof', 'add some powdered star sapphire', 'boil', 'add sprig of foxglove', 'add sprig of foxglove', 'add sprig of foxglove', 'add sprig of foxglove', 'simmer', 'chant 506', 'seal'],
          :type    => 'potions',
          :spell   => '506',
          :rank    => [23, 38],
          :for     => ['Wizard'],
        },
        {
          :product => 'thick silver potion',
          :steps   => ['light', 'add flask of clear water', 'add viper fang', 'add some powdered black sphene', 'boil', 'add sprig of foxglove', 'add sprig of foxglove', 'add sprig of foxglove', 'add sprig of foxglove', 'simmer', 'chant 506', 'seal'],
          :type    => 'potions',
          :spell   => '506',
          :rank    => [23, 38],
          :for     => ['Wizard'],
        },
        {
          :product => 'prismatic potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered green sapphire', 'add ayanad crystal', 'boil', 'add troll fang', 'add troll fang', 'add shimmering prismatic shard', 'simmer', 'chant 905', 'seal'],
          :type    => 'potions',
          :spell   => '905',
          :rank    => [24, 39],
          :for     => ['Wizard'],
        },
        {
          :product => 'prismatic potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered fiery jacinth', 'add ayanad crystal', 'boil', 'add goat hoof', 'add goat hoof', 'add shimmering prismatic shard', 'simmer', 'chant 905', 'seal'],
          :type    => 'potions',
          :spell   => '905',
          :rank    => [24, 39],
          :for     => ['Wizard'],
        },
        {
          :product => 'pinkish-grey tonic',
          :nick    => 'lesser stamina potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered star ruby', 'add glimmering blue essence shard', 'add some essence of vitality', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [24, 39],
          :for     => ['Empath'],
        },
        {
          :product => 'effervescent white potion',
          :nick    => 'minor spirit-well potion',
          :steps   => ['light', 'add flask of blessed water', 'add some mashed pale yellow daffodil', 'add some mashed pale yellow daffodil', 'add some mashed pale yellow daffodil', 'add some mashed pale yellow daffodil', 'infuse', 'chant 308', 'add white pearl', 'boil', 'add some glowing violet essence dust', 'simmer', 'seal'],
          :type    => 'potions',
          :spell   => '308',
          :rank    => [25, 35],
          :for     => ['Cleric'],
        },
        {
          :product => 'thin murky greenish-black concoction',
          :nick    => 'minor necromantic regeneration potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered black opal', 'add some powdered black opal', 'add some powdered green moonstone', 'add some glimmering blue essence dust', 'boil', 'add some essence of regeneration', 'simmer', 'chant 730', 'seal'],
          :type    => 'potions',
          :rank    => [25, 41],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'flask of noxious brown tar',
          :nick    => 'minor lockrot oil',
          :steps   => ['light', 'add flask of pure oil', 'add some powdered golden amber', 'add some powdered golden amber', "add s'ayanad crystal", 'add some powdered charcoal', 'add some powdered charcoal', 'boil', 'add some essence of water', 'seal'],
          :type    => 'potions',
          :rank    => [26, 36],
          :for     => ['Wizard'],
        },
        {
          :product => 'shimmering silver potion',
          :steps   => ['light', 'add flask of clear water', 'add mountain lion skin', 'add mountain lion skin', 'add some powdered silvery conch shell', 'simmer', 'chant 507', 'seal'],
          :type    => 'potions',
          :spell   => '507',
          :rank    => [27, 39],
          :for     => ['Wizard'],
        },
        {
          :product => 'foamy deep golden elixir',
          :nick    => 'lesser health-well potion',
          :steps   => ['light', 'add flask of clear water', 'add yellow passionflower', 'add some powdered honey beryl', 'add large troll tooth', 'add some faintly glimmering dust', 'add some faintly glimmering dust', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [28, 44],
          :for     => ['Empath'],
        },
        {
          :product => 'dirtokh potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground ayana', 'add some ground ayana', 'add some ground ayana', 'add some essence of water', 'add some essence of water', 'add some essence of water', 'chant 925', 'add some faintly radiant dust', 'infuse', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [30, 40],
          :for     => ['Wizard'],
        },
        {
          :product => 'scintillating lilac potion',
          :steps   => ['light', 'add flask of clear water', 'add sprig of wild lilac', 'add sprig of wild lilac', 'simmer', 'add some powdered pearl nautilus shell', 'boil', 'add mist wraith eye', 'add mist wraith eye', 'infuse', 'chant 207', 'seal'],
          :type    => 'potions',
          :spell   => '207',
          :rank    => [30, 46],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'scintillating lilac potion',
          :steps   => ['light', 'add flask of clear water', 'add sprig of wild lilac', 'add sprig of wild lilac', 'simmer', 'add some powdered water sapphire', 'boil', 'add wight skull', 'add wight skull', 'add wight skull', 'add wight skull', 'infuse', 'chant 207', 'seal'],
          :type    => 'potions',
          :spell   => '207',
          :rank    => [30, 46],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'some scintillating prismatic oil',
          :steps   => ['light', 'add flask of pure oil', 'add fairy primrose', 'add fairy primrose', 'simmer', 'add elemental core', 'add elemental core', 'boil', 'add some powdered green starstone', 'infuse', 'chant 411', 'seal'],
          :type    => 'potions',
          :spell   => '411',
          :rank    => [30, 46],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'some scintillating prismatic oil',
          :steps   => ['light', 'add flask of pure oil', 'add fairy primrose', 'add fairy primrose', 'simmer', 'add elemental core', 'add elemental core', 'boil', 'add some powdered bright bluerock', 'infuse', 'chant 411', 'seal'],
          :type    => 'potions',
          :spell   => '411',
          :rank    => [30, 46],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'gold-flecked clear potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered gold nugget', "add s'ayanad crystal", 'simmer', 'add vruul skin', 'boil', 'infuse', 'chant 508', 'seal'],
          :type    => 'potions',
          :spell   => '508',
          :rank    => [31, 48],
          :for     => ['Wizard'],
        },
        {
          :product => 'effervescent pink potion',
          :nick    => 'lesser wisdom potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered pink pearl', "add pristine siren's hair", 'infuse', 'add centaur hide', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [32, 49],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'effervescent green potion',
          :nick    => 'lesser logic potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'add green sapphire', 'add vial of farlook vitreous humor', 'infuse', 'add some faintly radiant dust', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [32, 47],
          :for     => ['Wizard'],
        },
        # Fixme: Need to check? No seaweed in the east
        # {
        # :product => 'sparkling aquamarine potion',
        # :steps   => ['light', 'add flask of clear water', 'add strand of seaweed', 'add strand of seaweed', 'add strand of seaweed', 'add strand of seaweed', 'boil', 'add some powdered blue moonstone', 'simmer', 'add wight mane', 'infuse', 'chant 112', 'seal'],
        # :type    => 'potions',
        # :spell   => '112',
        # :rank    => [35, 52],
        # :for     => ['Cleric', 'Empath', 'Sorcerer'],
        # },
        {
          :product => 'sparkling aquamarine potion',
          :steps   => ['light', 'add flask of clear water', 'add strand of seaweed', 'add strand of seaweed', 'add strand of seaweed', 'add strand of seaweed', 'boil', 'add some powdered pearl nautilus shell', 'simmer', 'add kappa fin', 'add kappa fin', 'add kappa fin', 'infuse', 'chant 112', 'seal'],
          :type    => 'potions',
          :spell   => '112',
          :rank    => [35, 52],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'blue bubbling potion',
          :nick    => 'lesser elemental focus potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered blue sapphire', 'boil', 'add some essence of water', 'infuse', 'add blue mist-shrouded crystal', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [36, 54],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'turbid aquamarine potion',
          :steps   => ['light', 'add flask of clear water', 'add some cave moss', 'add some cave moss', 'add some cave moss', 'simmer', 'add bear hide', 'boil', 'add some powdered aquamarine gem', 'infuse', "add s'ayanad crystal", 'chant 1107', 'seal'],
          :type    => 'potions',
          :spell   => '1107',
          :rank    => [36, 53],
          :for     => ['Empath'],
        },
        {
          :product => 'dimly glowing sky-blue potion',
          :steps   => ['light', 'add flask of clear water', 'add blue trafel mushroom', 'add blue trafel mushroom', 'boil', 'add troll heart', 'add troll heart', 'simmer', 'add some powdered green jade', 'infuse', 'chant 113', 'seal'],
          :type    => 'potions',
          :spell   => '113',
          :rank    => [38, 56],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'dimly glowing sky-blue potion',
          :steps   => ['light', 'add flask of clear water', 'add blue trafel mushroom', 'add blue trafel mushroom', 'boil', 'add ogre tooth', 'add ogre tooth', 'add ogre tooth', 'simmer', 'add some powdered imperial topaz', 'infuse', 'chant 113', 'seal'],
          :type    => 'potions',
          :spell   => '113',
          :rank    => [38, 56],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'anointing oil',
          :steps   => ['light', 'add flask of blessed oil', 'add some powdered dragonfire opal', 'add cracked soulstone', 'boil', 'infuse', 'add vial of shimmering oil', 'simmer', 'chant 308', 'seal'],
          :type    => 'potions',
          :spell   => '308',
          :rank    => [39, 49],
          :for     => ['Cleric'],
        },
        {
          :product => 'anointing oil',
          :steps   => ['light', 'add flask of blessed oil', 'add some powdered moonglae opal', 'add cracked soulstone', 'boil', 'infuse', 'add vial of shimmering oil', 'simmer', 'chant 308', 'seal'],
          :type    => 'potions',
          :spell   => '308',
          :rank    => [39, 49],
          :for     => ['Cleric'],
        },
        {
          :product => 'mirtokh potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground ayana', 'add some ground ayana', 'add some ground ayana', 'add some ground ayana', 'add some essence of water', 'add some essence of water', 'add some essence of water', 'add some essence of water', 'chant 925', 'add some faintly shimmering dust', 'infuse', 'add some powdered uncut diamond', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [40, 50],
          :for     => ['Wizard'],
        },
        {
          :product => 'dimly glowing sea-green potion',
          :steps   => ['light', 'add flask of clear water', 'add striped heart mushroom', 'add striped heart mushroom', 'boil', 'add stone-grey lizard tail', 'simmer', 'add some powdered rock crystal', 'add vial of viper venom', 'infuse', 'chant 114', 'seal'],
          :type    => 'potions',
          :spell   => '114',
          :rank    => [41, 60],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'dimly glowing sea-green potion',
          :steps   => ['light', 'add flask of clear water', 'add striped heart mushroom', 'add striped heart mushroom', 'boil', 'add troll toe', 'add troll toe', 'add troll toe', 'simmer', 'add some powdered rock crystal', 'add vial of viper venom', 'infuse', 'chant 114', 'seal'],
          :type    => 'potions',
          :spell   => '114',
          :rank    => [41, 60],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'brilliant silvery potion',
          :steps   => ['light', 'add flask of clear water', 'add vesperti claw', 'add vesperti claw', 'add vesperti claw', 'add some powdered golden topaz', 'boil', 'add shining silver crystal fragment', 'simmer', 'infuse', 'chant 414', 'seal'],
          :type    => 'potions',
          :spell   => '414',
          :rank    => [41, 60],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'flask of noxious dark tar',
          :nick    => 'lesser lockrot oil',
          :steps   => ['light', 'add flask of pure oil', 'add some powdered golden amber', 'add some powdered golden amber', "add s'ayanad crystal", 'add some powdered charcoal', 'add some powdered charcoal', 'boil', 'add dark glimmering crystal', 'infuse', 'add some essence of earth', 'seal'],
          :type    => 'potions',
          :rank    => [44, 54],
          :for     => ['Wizard'],
        },
        {
          :product => 'thick murky greenish-black concoction',
          :nick    => 'lesser necromantic regeneration potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered black deathstone', 'add some powdered black deathstone', 'add some powdered black deathstone', 'add some powdered black deathstone', 'refract moonlight through shadowglass lens', 'add some powdered uncut emerald', 'add some glowing violet essence dust', 'add troll blood', 'add some essence of regeneration', 'simmer', 'chant 730', 'seal'],
          :type    => 'potions',
          :rank    => [45, 55],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'light red tonic',
          :nick    => 'greater stamina potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered uncut ruby', 'add large troll tooth', 'add some essence of vitality', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [47, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'sisfu potion',
          :steps   => ['light', 'add flask of clear water', 'add some ground ayana', 'add some ground ayana', 'add some ground ayana', 'add some essence of water', 'add some essence of water', 'add some essence of water', 'chant 925', 'add some faintly radiant dust', 'add some faintly radiant dust', 'refract moonlight through diamond lens', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [50, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'glowing brilliant silver potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'simmer', 'add centaur hide', 'add centaur hide', 'add centaur hide', 'boil', 'add some powdered yellow sapphire', 'infuse', "add t'ayanad crystal", 'channel', 'chant 419', 'seal'],
          :type    => 'potions',
          :spell   => '419',
          :rank    => [50, 62],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'milky blue oil',
          :steps   => ['light', 'add flask of pure oil', 'add some ground valerian', 'simmer', 'add cougar tail', 'add cougar tail', 'boil', 'add some powdered blue sapphire', 'infuse', 'channel', 'chant 213', 'seal'],
          :type    => 'potions',
          :spell   => '213',
          :rank    => [50, 62],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'milky blue oil',
          :steps   => ['light', 'add flask of pure oil', 'add some ground valerian', 'simmer', 'add tawny brindlecat hide', 'boil', 'add some powdered blue moonstone', 'add some powdered blue moonstone', 'infuse', 'channel', 'chant 213', 'seal'],
          :type    => 'potions',
          :spell   => '213',
          :rank    => [50, 62],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'deep green volatile elixir',
          :steps   => ['light', 'add flask of clear water', 'add some powdered green garnet', 'add some essence of vitality', 'simmer', 'add some faintly radiant dust', 'boil', 'seal'],
          :type    => 'potions',
          :rank    => [51, 51],
          :for     => ['Empath'],
        },
        {
          :product => 'sparkling white potion',
          :nick    => 'major spirit-well potion',
          :steps   => ['light', 'add flask of blessed water', 'add white clover blossom', 'add white clover blossom', 'add white clover blossom', 'add some powdered white starstone', 'chant 308', 'infuse', 'add clear tourmaline', 'add flask of sparkling soul essence', 'simmer', 'seal'],
          :type    => 'potions',
          :spell   => '308',
          :rank    => [51, 62],
          :for     => ['Cleric'],
        },
        {
          :product => 'dark murky potion',
          :steps   => ['light', 'add flask of clear water', 'add centaur hide', 'add some powdered violet sapphire', 'boil', "add s'ayanad crystal", 'simmer', 'add dark glimmering crystal', 'infuse', 'chant 911', 'seal'],
          :type    => 'potions',
          :spell   => '911',
          :rank    => [54, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'pure potion',
          :steps   => ['light', 'add flask of blessed water', 'add fragrant white lily', 'add some faintly radiant dust', 'chant 315', 'add plains lion skin', 'add some faintly radiant dust', 'chant 215', 'add glimmering blue mote of essence', 'boil', 'refract sunlight through sapphire lens', 'seal'],
          :type    => 'potions',
          :rank    => [54, 62],
          :for     => ['Cleric'],
        },
        {
          :product => 'inky black potion',
          :steps   => ['light', 'add flask of clear water', 'add some essence of water', 'simmer', 'add some powdered uncut diamond', 'add some powdered uncut diamond', 'add some powdered uncut diamond', 'add some faintly radiant dust', 'infuse', 'add inky necrotic core', 'add flask of sparkling soul essence', 'chant 735', 'seal'],
          :type    => 'potions',
          :spell   => '735',
          :rank    => [56, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'viscous murky greenish-black concoction',
          :nick    => 'greater necromantic regeneration potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered black pearl', 'add some powdered black pearl', 'refract moonlight through shadowglass lens', 'add some powdered emerald blazestar', 'channel', 'add some radiant crimson essence dust', 'add troll blood', 'boil', 'add some essence of regeneration', 'simmer', 'chant 730', 'seal'],
          :type    => 'potions',
          :rank    => [57, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'vivid blue bubbling potion',
          :nick    => 'greater elemental focus potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered dragonseye sapphire', 'boil', 'add flask of sparkling body essence', 'infuse', 'add some powdered wild beechnut', 'add some powdered wild beechnut', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [58, 62],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'ayveneh potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'add some essence of water', 'add some powdered black opal', 'add some powdered black opal', 'simmer', 'add some powdered uncut diamond', 'add some powdered uncut diamond', 'add some faintly radiant dust', 'add some faintly radiant dust', 'add some essence of water', 'boil', 'add some powdered dragonfire opal', 'add some powdered dragonfire opal', 'add some powdered moonglae opal', 'add some powdered moonglae opal', 'add some faintly shimmering dust', 'add some faintly shimmering dust', 'add some faintly shimmering dust', 'add some essence of water', 'infuse', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [60, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'full stamina potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered sylvarraend ruby', 'add troll blood', 'simmer', 'add some mashed golden buttercup', 'add some mashed golden buttercup', 'add some mashed golden buttercup', 'add some mashed golden buttercup', 'chant 1107', 'add some essence of vitality', 'add flask of sparkling body essence', 'boil', 'refract sunlight through ruby lens', 'seal'],
          :type    => 'potions',
          :spell   => '1107',
          :rank    => [60, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'sparkling pink potion',
          :nick    => 'greater wisdom potion',
          :steps   => ['light', 'add flask of clear water', 'add wood violet', 'add split-back pink conch shell', 'infuse', 'add ayana leaf', 'add some powdered uncut diamond', 'simmer', "add n'ayanad crystal", 'add flask of sparkling mind essence', 'refract moonlight through amethyst lens', 'seal'],
          :type    => 'potions',
          :rank    => [62, 62],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'sparkling green potion',
          :nick    => 'greater logic potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add some ground tkaro', 'add some powdered emerald blazestar', 'add some powdered emerald blazestar', 'infuse', "add n'ayanad crystal", 'add flask of sparkling mind essence', 'refract moonlight through emerald lens', 'simmer', 'seal'],
          :type    => 'potions',
          :rank    => [62, 62],
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => 'eoveneh potion',
          :steps   => ['light', 'add flask of clear water', 'add some powdered uncut diamond', 'add some essence of water', 'simmer', 'add some minor holy oil', 'add some faintly radiant dust', 'infuse', 'add radiant white soulstone', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => 'greater exorcism oil',
          :steps   => ['light', 'add flask of blessed oil', 'add kiramon tongue', 'add some mashed golden buttercup', 'add some faintly glowing dust', 'boil', 'add some radiant crimson essence dust', 'refract moonlight through amethyst lens', 'seal'],
          :type    => 'potions',
          :for     => ['Cleric'],
        },
        {
          :product => 'flask of noxious black tar',
          :nick    => 'greater lockrot oil',
          :steps   => ['light', 'add flask of pure oil', 'add some powdered golden amber', 'add some powdered golden amber', "add s'ayanad crystal", 'add some powdered charcoal', 'add some powdered charcoal', 'boil', 'add dark glimmering crystal', 'infuse', 'add some radiant crimson essence dust', 'refract moonlight through amethyst lens', 'seal'],
          :type    => 'potions',
          :rank    => [60, 62], # fixme: unknown start rank
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => 'greater repelling oil',
          :steps   => ['light', 'add flask of blessed oil', 'add small dandelion', 'add nightbloom blossom', 'add some powdered white pearl', 'channel', 'add radiant crimson mote of essence', 'simmer', 'seal'],
          :type    => 'potions',
          :for     => ['Cleric'],
        },
        {
          # fixme: unknown rank
          :product => 'zorveneh potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add some essence of water', 'add some dark glittering powder', 'simmer', 'add some powdered blue sapphire', 'add some essence of air', 'add some faintly glowing dust', 'boil', 'add some powdered uncut diamond', 'infuse', 'add essence of greater air', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [63, 63], # fixme: unknown start rank
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => 'gorveneh potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add some essence of water', 'add some coarse glittering earth', 'simmer', 'add some powdered smoky topaz', 'add some essence of earth', 'add some faintly glowing dust', 'boil', 'add some powdered uncut diamond', 'infuse', 'add essence of greater earth', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [63, 63], # fixme: unknown start rank
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => 'draveneh potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add some essence of water', 'add pinch of gold dust', 'simmer', 'add some powdered citrine quartz', 'add some essence of fire', 'add some faintly glowing dust', 'boil', 'add some powdered uncut diamond', 'infuse', 'add essence of greater fire', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [63, 63], # fixme: unknown start rank
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => 'rhiveneh potion',
          :steps   => ['light', 'add flask of clear water', 'add ayana leaf', 'add some essence of water', 'add pinch of mithril dust', 'simmer', 'add some powdered blue coral', 'add some essence of water', 'add some faintly glowing dust', 'boil', 'add some powdered uncut diamond', 'infuse', 'add essence of greater water', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [63, 63], # fixme: unknown start rank
          :for     => ['Wizard'],
        },
        {
          # fixme: unknown rank
          :product => "urven'eth potion",
          :steps   => ['light', 'add flask of clear water', 'add some powdered uncut diamond', 'add some essence of water', 'add some essence of water', 'simmer', 'add some faintly radiant dust', 'add some faintly radiant dust', 'add radiant white soulstone', 'add some minor holy oil', 'channel', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'add ayana leaf', 'add some essence of water', 'add some faintly shimmering dust', 'add some faintly shimmering dust', 'add some faintly shimmering dust', 'infuse', 'chant 925', 'seal'],
          :type    => 'potions',
          :spell   => '925',
          :rank    => [63, 63], # fixme: unknown start rank
          :for     => ['Wizard'],
        },
        #
        # alchemic trinkets recipes
        #
        {
          :product => 'runed bone talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add ghoul finger', 'add ghoul finger', 'add ghoul finger', 'add ghoul finger', 'boil', 'add some powdered golden amber', 'simmer', 'add small enruned bone', 'chant 301', 'seal'],
          :type    => 'trinkets',
          :spell   => '301',
          :rank    => [1, 15],
          :for     => ['Cleric'],
        },
        {
          :product => 'iron wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered turquoise stone', 'simmer', 'add pinch of iron dust', 'boil', 'chant 901', 'seal'],
          :type    => 'trinkets',
          :spell   => '901',
          :rank    => [1, 15],
          :for     => ['Wizard'],
        },
        {
          :product => 'rough stick of white chalk',
          :steps   => ['light', 'add vial of pearlescent oil', 'add some powdered white marble', 'add some powdered white marble', "add s'ayanad crystal", 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [2, 12],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'some fine sanguine flakes',
          :steps   => ['light', 'add vial of sand-like liquid', 'add kobold skin', 'add kobold skin', 'boil', 'add some powdered red-green bloodstone', 'simmer', 'add ayanad crystal', 'chant 1101', 'seal'],
          :type    => 'trinkets',
          :spell   => '1101',
          :rank    => [2, 13],
          :for     => ['Empath'],
        },
        {
          :product => 'soft ivory powder',
          :steps   => ['light', 'add vial of sand-like liquid', 'add soft white mushroom', 'add soft white mushroom', 'simmer', 'add centaur hide', 'boil', 'add some powdered chrysoberyl gem', 'chant 201', 'seal'],
          :type    => 'trinkets',
          :spell   => '201',
          :rank    => [3, 14],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'pale glittering dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some powdered turquoise stone', 'simmer', 'add sprig of lavender', 'add sprig of lavender', 'boil', 'add ayanad crystal', 'chant 501', 'seal'],
          :type    => 'trinkets',
          :spell   => '501',
          :rank    => [3, 14],
          :for     => ['Wizard'],
        },
        {
          :product => 'polished bloodwood wand ',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered rhodochrosite stone', 'add jagged crimson crystal', 'boil', 'add bloodwood twig', 'add bloodwood twig', 'add bloodwood twig', 'simmer', 'chant 701', 'seal'],
          :type    => 'trinkets',
          :spell   => '701',
          :rank    => [4, 15],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'minor spiritual channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered grey chalcedony', 'add some essence of air', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [6, 16],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'minor spiritual channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered grey chalcedony', 'add some powdered grey chalcedony', 'add some powdered grey chalcedony', 'add some essence of air', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [6, 17],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'minor elemental channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered clear sapphire', 'add some powdered clear sapphire', 'add some powdered clear sapphire', 'add some essence of air', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [6, 17],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'minor mental channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered cloud agate', 'add some essence of air', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [6, 17],
          :for     => ['Empath'],
        },
        {
          :product => 'clear prismatic wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered pink topaz', 'add scraggly orc scalp', 'add scraggly orc scalp', 'simmer', 'chant 502', 'seal'],
          :type    => 'trinkets',
          :spell   => '502',
          :rank    => [7, 19],
          :for     => ['Wizard'],
        },
        {
          :product => 'clear prismatic wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered pink topaz', 'add shelfae crest', 'add shelfae crest', 'boil', 'chant 502', 'seal'],
          :type    => 'trinkets',
          :spell   => '502',
          :rank    => [7, 19],
          :for     => ['Wizard'],
        },
        {
          :product => 'twisted wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered brown jade', 'add jagged crimson crystal', 'boil', 'add twisted twig', 'add twisted twig', 'add twisted twig', 'simmer', 'chant 702', 'seal'],
          :type    => 'trinkets',
          :spell   => '702',
          :rank    => [9, 21],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'twisted wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered brown sphene', 'add jagged crimson crystal', 'boil', 'add twisted twig', 'add twisted twig', 'add twisted twig', 'simmer', 'chant 702', 'seal'],
          :type    => 'trinkets',
          :spell   => '702',
          :rank    => [9, 21],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'dimly glowing enruned bone talisman',
          :nick    => 'minor lichbane talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add small enruned bone', 'simmer', 'add some ground glowing toadstool', 'add some powdered pink pearl', 'add some crystal core essence', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [9, 19],
          :for     => ['Cleric'],
        },
        {
          :product => 'pink burst firework',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some coarse glittering earth', 'add some powdered charcoal', 'simmer', 'add some powdered pink dreamstone', 'boil', 'chant 908', 'seal'],
          :type    => 'trinkets',
          :rank    => [9, 19],
          :for     => ['Wizard'],
        },
        {
          :product => 'blue burst firework',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some coarse glittering earth', 'add some powdered charcoal', 'simmer', 'add some mashed blue poppy', 'add some mashed blue poppy', 'add some powdered blue tourmaline', 'add some powdered blue tourmaline', 'boil', 'chant 908', 'seal'],
          :type    => 'trinkets',
          :rank    => [9, 19],
          :for     => ['Wizard'],
        },
        {
          :product => 'white burst firework',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some coarse glittering earth', 'add some powdered charcoal', 'simmer', 'add some powdered white jade', 'boil', 'chant 908', 'seal'],
          :type    => 'trinkets',
          :rank    => [9, 19],
          :for     => ['Wizard'],
        },
        {
          :product => 'warm golden crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some wheat grass', 'boil', 'add some powdered golden topaz', 'simmer', 'chant 203', 'seal'],
          :type    => 'trinkets',
          :spell   => '203',
          :rank    => [11, 24],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'clear rainbow-flecked crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered blue starstone', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'chant 503', 'seal'],
          :type    => 'trinkets',
          :spell   => '503',
          :rank    => [11, 24],
          :for     => ['Wizard'],
        },
        {
          :product => 'clear rainbow-flecked crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered azurite', 'add ayanad crystal', 'add ayanad crystal', 'boil', 'chant 503', 'seal'],
          :type    => 'trinkets',
          :spell   => '503',
          :rank    => [11, 24],
          :for     => ['Wizard'],
        },
        {
          :product => 'minor spiritual focus crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered pink topaz', 'add some powdered pink topaz', 'add some powdered blue lace agate', "add s'ayanad crystal", 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [12, 22],
          :for     => ['Cleric'],
        },
        {
          :product => 'pale yellow crystal pyramid',
          :nick    => 'minor mental focus crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some ground wolifrew', 'add some ground wolifrew', 'add some ground wolifrew', 'add some powdered water sapphire', 'add some powdered water sapphire', "add s'ayanad crystal", 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [12, 25], # Fixme
          :for     => ['Empath'],
        },
        {
          :product => 'pinch of dark grey dust',
          :nick    => 'limb petrification dust',
          :steps   => ['light', 'add vial of sand-like liquid', "add mummy's shroud", 'add some powdered labradorite stone', 'add some powdered star sapphire', 'simmer', 'add ayana leaf', 'boil', 'chant 708', 'seal'],
          :type    => 'trinkets',
          :spell   => '708',
          :rank    => [13, 23],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'small ivory disc talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add ogre nose', 'add ogre nose', 'add ogre nose', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add some powdered labradorite stone', 'boil', 'add small ivory disc', 'chant 303', 'seal'],
          :type    => 'trinkets',
          :spell   => '303',
          :rank    => [14, 24],
          :for     => ['Cleric'],
        },
        {
          :product => 'gnarled yew wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered black tourmaline', 'add some pale translucent dust', 'boil', 'add yew twig', 'add yew twig', 'add yew twig', 'simmer', 'add ayanad crystal', 'add ayanad crystal', 'chant 703', 'seal'],
          :type    => 'trinkets',
          :spell   => '703',
          :rank    => [14, 27],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'iridescent opal wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered white opal', 'boil', 'add pale blue runed crystal shard', 'simmer', 'chant 903', 'seal'],
          :type    => 'trinkets',
          :spell   => '903',
          :rank    => [14, 27],
          :for     => ['Wizard'],
        },
        {
          :product => 'deep blue eostone talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add golden aster', 'add some powdered blue eostone', 'simmer', 'add spotted leopard pelt', 'boil', "add s'ayanad crystal", 'chant 204', 'seal'],
          :type    => 'trinkets',
          :spell   => '204',
          :rank    => [15, 28],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => "cat's eye moonstone talisman",
          :steps   => ['light', 'add vial of pearlescent oil', 'add golden aster', 'add some powdered cats-eye moonstone', 'simmer', 'add cyclops eye', 'add cyclops eye', 'boil', "add s'ayanad crystal", 'chant 204', 'seal'],
          :type    => 'trinkets',
          :spell   => '204',
          :rank    => [15, 28],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'some dull silvery dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some powdered violet sapphire', 'boil', "add s'ayanad crystal", 'simmer', 'chant 504', 'seal'],
          :type    => 'trinkets',
          :spell   => '504',
          :rank    => [15, 28],
          :for     => ['Wizard'],
        },
        {
          :product => 'foggy grey crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add heath aster', 'add heath aster', 'add heath aster', 'boil', 'add some powdered wraith talon', 'add some powdered wraith talon', 'add some powdered wraith talon', 'add some powdered wraith talon', 'simmer', 'add some powdered pink coral', 'chant 106', 'seal'],
          :type    => 'trinkets',
          :spell   => '106',
          :rank    => [17, 31],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'minor spirit regeneration crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some mashed red poppy', 'add some mashed red poppy', 'add some powdered spessartine garnet', 'chant 308', 'infuse', 'add crystalline globe', 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [18, 32],
          :for     => ['Cleric'],
        },
        {
          :product => 'dull brown crystal disk',
          :nick    => 'minor stamina regeneration crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some ground ironfern', 'add some ground ironfern', 'add some ground ironfern', 'add some powdered red coral', 'add some powdered red coral', 'add some powdered red coral', 'chant 1107', 'add some faintly glowing dust', 'boil', 'add crystalline globe', 'simmer', 'seal'],
          :type    => 'trinkets',
          :spell   => '1107',
          :rank    => [18, 32],
          :for     => ['Empath'],
        },
        {
          :product => 'softly glowing crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add sunburst blossom', 'add sunburst blossom', 'add sunburst blossom', 'add some powdered beryl gem', 'simmer', 'add faintly glowing worm skin', 'add faintly glowing worm skin', 'boil', 'chant 205', 'seal'],
          :type    => 'trinkets',
          :spell   => '205',
          :rank    => [19, 33],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'softly glowing crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add sunburst blossom', 'add sunburst blossom', 'add sunburst blossom', 'add some powdered fire agate', 'simmer', 'add yellowed boar tusk', 'add yellowed boar tusk', 'boil', 'chant 205', 'seal'],
          :type    => 'trinkets',
          :spell   => '205',
          :rank    => [19, 33],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'pale glimmering dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some powdered clear tourmaline', 'add some pale translucent dust', 'boil', 'add ayanad crystal', 'simmer', 'chant 704', 'seal'],
          :type    => 'trinkets',
          :spell   => '704',
          :rank    => [19, 33],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'spiraled sapphire wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add ayana leaf', 'add ayana leaf', 'simmer', 'add some powdered blue sapphire', 'boil', "add s'ayanad crystal", 'chant 505', 'seal'],
          :type    => 'trinkets',
          :spell   => '505',
          :rank    => [19, 33],
          :for     => ['Wizard'],
        },
        {
          :product => 'smooth crystalline wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered clear topaz', 'add shard of cloudy crystal', 'simmer', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'boil', 'chant 904', 'seal'],
          :type    => 'trinkets',
          :spell   => '904',
          :rank    => [19, 33],
          :for     => ['Wizard'],
        },
        {
          :product => 'glowing blue crystal orb',
          :nick    => 'lesser constitution crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add bear hide', 'add bear hide', 'add large troll tooth', 'infuse', 'add blue sapphire', 'add blue sapphire', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [22, 37],
          :for     => ['Empath'],
        },
        {
          :product => 'shifting dark crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add nightbloom blossom', 'add nightbloom blossom', 'add nightbloom blossom', 'add some powdered smoky topaz', 'simmer', 'add silvery tail', 'boil', 'chant 206', 'seal'],
          :type    => 'trinkets',
          :spell   => '206',
          :rank    => [23, 38],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'shifting dark crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add nightbloom blossom', 'add nightbloom blossom', 'add nightbloom blossom', 'add some powdered smoky topaz', 'simmer', 'add black leopard paw', 'boil', 'chant 206', 'seal'],
          :type    => 'trinkets',
          :spell   => '206',
          :rank    => [23, 38],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'oaken wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add tawny brindlecat hide', 'boil', 'add some powdered grey pearl', 'simmer', 'add oak twig', 'add oak twig', 'add oak twig', 'add ayanad crystal', 'add ayanad crystal', 'chant 108', 'seal'],
          :type    => 'trinkets',
          :spell   => '108',
          :rank    => [23, 39],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'oaken wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add warcat whisker', 'boil', 'add some powdered grey pearl', 'simmer', 'add oak twig', 'add oak twig', 'add oak twig', 'add ayanad crystal', 'add ayanad crystal', 'chant 108', 'seal'],
          :type    => 'trinkets',
          :spell   => '108',
          :rank    => [23, 39],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'smooth bone wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered green tourmaline', 'add some powdered skeletal giant bone', 'add some powdered skeletal giant bone', 'add some powdered skeletal giant bone', 'simmer', 'add ayanad crystal', 'add ayanad crystal', 'boil', 'add slender white bone', 'chant 705', 'seal'],
          :type    => 'trinkets',
          :spell   => '705',
          :rank    => [24, 39],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'smooth bone wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered green tourmaline', 'add orc knuckle', 'add orc knuckle', 'simmer', 'add ayanad crystal', 'add ayanad crystal', 'boil', 'add slender white bone', 'chant 705', 'seal'],
          :type    => 'trinkets',
          :spell   => '705',
          :rank    => [24, 39],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'white flask',
          :steps   => ['light', 'add flask of clear water', 'add glistening black eye', 'add glistening black eye', 'boil', 'add some powdered turquoise stone', 'simmer', 'add some glowing white powder', 'chant 305', 'seal'],
          :type    => 'trinkets',
          :spell   => '305',
          :rank    => [24, 29],
          :for     => ['Cleric'],
        },
        {
          :product => 'grooved witchwood wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add faeroth fang', 'add some powdered fiery jacinth', 'boil', 'add witchwood twig', 'add witchwood twig', 'add witchwood twig', 'simmer', 'chant 409', 'seal'],
          :type    => 'trinkets',
          :spell   => '409',
          :rank    => [26, 42],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'grooved witchwood wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add fenghai fur', 'add fenghai fur', 'add some powdered fire pearl', 'boil', 'add witchwood twig', 'add witchwood twig', 'add witchwood twig', 'simmer', 'chant 409', 'seal'],
          :type    => 'trinkets',
          :spell   => '409',
          :rank    => [26, 42],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'dimly glowing moonstone amulet',
          :steps   => ['light', 'add vial of pearlescent oil', 'add silver-tipped horseshoe', 'add silver-tipped horseshoe', 'add silver-tipped horseshoe', 'boil', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add some powdered cats-eye moonstone', 'chant 109', 'seal'],
          :type    => 'trinkets',
          :spell   => '109',
          :rank    => [26, 42],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'dimly glowing moonstone amulet',
          :steps   => ['light', 'add vial of pearlescent oil', 'add scaly burgee shell', 'boil', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add some powdered green moonstone', 'chant 109', 'seal'],
          :type    => 'trinkets',
          :spell   => '109',
          :rank    => [26, 42],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'spiraled willow wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add ghoul nail', 'add ghoul nail', 'boil', 'add some powdered white opal', 'simmer', 'add flask of blessed water', 'add willow twig', 'add willow twig', 'add willow twig', 'chant 306', 'seal'],
          :type    => 'trinkets',
          :spell   => '306',
          :rank    => [29, 45],
          :for     => ['Cleric'],
        },
        {
          :product => 'clear glass wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add some powdered blue tourmaline', 'add scraggly orc scalp', 'add scraggly orc scalp', 'boil', 'add genkew mushroom', 'add genkew mushroom', 'add genkew mushroom', 'add genkew mushroom', 'simmer', 'add handful of quartz sand', 'chant 706', 'seal'],
          :type    => 'trinkets',
          :spell   => '706',
          :rank    => [29, 45],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'golden wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered almandine garnet', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add pinch of gold dust', 'boil', 'chant 906', 'seal'],
          :type    => 'trinkets',
          :spell   => '906',
          :rank    => [29, 40],
          :for     => ['Wizard'],
        },
        {
          :product => 'slender ivory wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add skeleton bone', 'add skeleton bone', 'add skeleton bone', 'add skeleton bone', 'add some powdered clear zircon', 'boil', 'add ayanad crystal', 'simmer', 'add some coarse ivory dust', 'chant 1106', 'seal'],
          :type    => 'trinkets',
          :spell   => '1106',
          :rank    => [29, 45],
          :for     => ['Empath'],
        },
        {
          :product => 'dark translucent crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add wavepetal blossom', 'boil', 'add elemental core', 'simmer', 'add some powdered smoky topaz', 'add ayanad crystal', 'infuse', 'chant 410', 'seal'],
          :type    => 'trinkets',
          :spell   => '410',
          :rank    => [30, 46],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'lustrous beryl wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add ayana leaf', 'add some powdered beryl gem', 'boil', 'add some powdered skeleton bone', 'add some powdered skeleton bone', 'add some powdered skeleton bone', 'add some powdered skeleton bone', 'simmer', "add s'ayanad crystal", "add s'ayanad crystal", 'infuse', 'chant 110', 'seal'],
          :type    => 'trinkets',
          :spell   => '110',
          :rank    => [30, 46],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'lesser elemental channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered fire opal', 'add glowing violet mote of essence', 'infuse', 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [30, 46],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'lesser spiritual channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered labradorite stone', "add pristine siren's hair", 'infuse', 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [30, 46],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'faceted frosty crystal cylinder',
          :nick    => 'lesser mental channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered frost agate', 'add glowing violet essence shard', 'infuse', 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [30, 46],
          :for     => ['Empath'],
        },
        {
          :product => 'lesser intuition crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add ayana leaf', 'add violet sapphire', 'add some mashed blue passionflower', 'add some powdered deep purple amethyst', 'infuse', 'add radiant crimson essence shard', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [31, 41],
          :for     => ['Cleric'],
        },
        {
          :product => 'lesser aura crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add essence shard', 'add ayana leaf', 'simmer', 'add yellow sapphire', 'add some ground angelica', 'add some ground angelica', 'infuse', 'add some radiant crimson essence dust', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [31, 41],
          :for     => ['Wizard'],
        },
        {
          :product => 'grooved ebony wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add mottled faeroth crest', 'boil', 'add some essence of fire', 'simmer', 'add ebony twig', 'add ebony twig', 'add ebony twig', 'add some powdered spessartine garnet', 'infuse', 'chant 111', 'seal'],
          :type    => 'trinkets',
          :spell   => '111',
          :rank    => [32, 49],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'grooved ebony wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add fire rat tail', 'add fire rat tail', 'boil', 'add some essence of fire', 'simmer', 'add ebony twig', 'add ebony twig', 'add ebony twig', 'add some powdered spessartine garnet', 'infuse', 'chant 111', 'seal'],
          :type    => 'trinkets',
          :spell   => '111',
          :rank    => [32, 49],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'silvery monogram rocket',
          :steps   => ['light', 'add vial of sand-like liquid', 'add some coarse glittering earth', 'add some powdered charcoal', 'boil', 'add some powdered black pearl', 'infuse', 'add glowing violet essence shard', 'chant 908', 'seal'],
          :type    => 'trinkets',
          :rank    => [32, 42],
          :for     => ['Wizard'],
        },
        {
          :product => 'dimly glowing crossed bone talisman',
          :nick    => 'lesser lichbane talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add small enruned bone', 'add small enruned bone', 'chant 211', 'simmer', 'add some mashed nightshade', 'infuse', 'add some powdered dragonseye sapphire', 'add some powdered dragonseye sapphire', 'add glimmering blue essence shard', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [33, 43],
          :for     => ['Cleric'],
        },
        {
          :product => 'dimly glowing crossed bone talisman',
          :nick    => 'lesser lichbane talisman',
          :steps   => ['light', 'add vial of pearlescent oil', 'add small enruned bone', 'add small enruned bone', 'chant 211', 'simmer', 'add some mashed nightshade', 'infuse', 'add blue star-shaped riftshard', 'add glimmering blue essence shard', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [33, 43],
          :for     => ['Cleric'],
        },
        {
          :product => 'fine opaline dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add ghoul scraping', 'add ghoul scraping', 'add some powdered spiderweb turquoise', 'simmer', 'infuse', 'chant 209', 'seal'],
          :type    => 'trinkets',
          :spell   => '209',
          :rank    => [35, 52],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'fine opaline dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add spider leg', 'add spider leg', 'add spider leg', 'add some powdered white opal', 'boil', 'infuse', 'chant 209', 'seal'],
          :type    => 'trinkets',
          :spell   => '209',
          :rank    => [35, 52],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'slender azure rod',
          :steps   => ['light', 'add vial of amber-hued oil', 'add slender twig', 'add slender twig', 'add slender twig', 'boil', 'add some powdered blue coral', 'simmer', "add s'ayanad crystal", 'infuse', 'add runed azure crystal', 'chant 907', 'seal'],
          :type    => 'trinkets',
          :spell   => '907',
          :rank    => [34, 44],
          :for     => ['Wizard'],
        },
        {
          :product => 'wavy grey crystal wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add snowy cockatrice tailfeather', 'add snowy cockatrice tailfeather', 'add snowy cockatrice tailfeather', 'boil', 'add some ground ironfern', 'add some ground ironfern', 'add some ground ironfern', 'simmer', 'add some powdered star sapphire', 'infuse', 'chant 412', 'seal'],
          :type    => 'trinkets',
          :spell   => '412',
          :rank    => [35, 52],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'white crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add ayana leaf', 'add ayana leaf', 'simmer', 'add some powdered star ruby', 'boil', "add s'ayanad crystal", 'infuse', 'chant 509', 'seal'],
          :type    => 'trinkets',
          :spell   => '509',
          :rank    => [35, 52],
          :for     => ['Wizard'],
        },
        {
          :product => 'lesser spiritual focus crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some mashed pink rain lily', 'add some powdered shimmarglin sapphire', 'add glimmering blue essence shard', 'infuse', "add s'ayanad crystal", 'simmer', 'seal'],
          :type    => 'trinkets',
          :rank    => [36, 52],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'yellow crystal pyramid',
          :nick    => 'lesser mental focus crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add golden hook mushroom', 'add golden hook mushroom', 'add some powdered yellow sapphire', 'add some powdered yellow sapphire', "add pristine nymph's hair", 'infuse', "add s'ayanad crystal", 'seal'],
          :type    => 'trinkets',
          :rank    => [36, 51],
          :for     => ['Empath'],
        },
        {
          :product => 'shadowy dark crystal wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add yellowed boar tusk', 'add yellowed boar tusk', 'add yellowed boar tusk', 'boil', 'add some powdered green garnet', 'infuse', 'add dark shadow-shrouded crystal', 'simmer', 'chant 413', 'seal'],
          :type    => 'trinkets',
          :spell   => '413',
          :rank    => [38, 56],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'shadowy dark crystal wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add fire cat claw', 'add fire cat claw', 'add fire cat claw', 'boil', 'add some powdered green garnet', 'infuse', 'add dark shadow-shrouded crystal', 'simmer', 'chant 413', 'seal'],
          :type    => 'trinkets',
          :spell   => '413',
          :rank    => [38, 56],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'soft golden sand',
          :steps   => ['light', 'add vial of sand-like liquid', 'add kobold skin', 'add kobold skin', 'add kobold skin', 'add kobold skin', 'boil', "add s'ayanad crystal", "add s'ayanad crystal", 'simmer', 'add some powdered golden amber', 'infuse', 'chant 210', 'seal'],
          :type    => 'trinkets',
          :spell   => '210',
          :rank    => [39, 57],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'slender crimson rod',
          :steps   => ['light', 'add vial of amber-hued oil', 'add slender twig', 'add slender twig', 'add slender twig', 'boil', 'add some powdered citrine quartz', 'simmer', "add s'ayanad crystal", 'infuse', 'add runed crimson crystal', 'chant 908', 'seal'],
          :type    => 'trinkets',
          :spell   => '908',
          :rank    => [39, 49],
          :for     => ['Wizard'],
        },
        {
          :product => 'sleek alabaster wand',
          :steps   => ['light', 'add vial of amber-hued oil', 'add white hook mushroom', 'add white hook mushroom', 'add white hook mushroom', 'boil', 'add some powdered clear tourmaline', 'simmer', 'add some fine alabaster dust', 'infuse', "add s'ayanad crystal", 'chant 1108', 'seal'],
          :type    => 'trinkets',
          :spell   => '1108',
          :rank    => [41, 60],
          :for     => ['Empath'],
        },
        {
          :product => 'faceted topaz wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered smoky topaz', 'simmer', 'add bear hide', 'add bear hide', 'boil', 'add some coarse glittering earth', 'infuse', "add s'ayanad crystal", 'chant 510', 'seal'],
          :type    => 'trinkets',
          :spell   => '510',
          :rank    => [39, 57],
          :for     => ['Wizard'],
        },
        {
          :product => 'black crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered black jasper', 'simmer', 'add plains lion skin', 'add plains lion skin', 'boil', 'add some dark glittering powder', 'infuse', 'chant 511', 'seal'],
          :type    => 'trinkets',
          :spell   => '511',
          :rank    => [43, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'black crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered black jasper', 'simmer', "add roa'ter skin", "add roa'ter skin", 'boil', 'add some dark glittering powder', 'infuse', 'chant 511', 'seal'],
          :type    => 'trinkets',
          :spell   => '511',
          :rank    => [43, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'holy water',
          :steps   => ['light', 'add flask of clear water', 'add wight skull', 'add wight skull', 'add wight skull', 'boil', 'add some powdered white pearl', 'infuse', 'add vial of shimmering oil', 'simmer', 'chant 309', 'seal'],
          :type    => 'trinkets',
          :spell   => '309',
          :rank    => [44, 62],
          :for     => ['Cleric'],
        },
        {
          :product => 'holy water',
          :steps   => ['light', 'add flask of clear water', 'add silvery hoof', 'add silvery hoof', 'boil', 'add some powdered white pearl', 'infuse', 'add vial of shimmering oil', 'simmer', 'chant 309', 'seal'],
          :type    => 'trinkets',
          :spell   => '309',
          :rank    => [44, 62],
          :for     => ['Cleric'],
        },
        {
          :product => 'jagged brown crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add boar tusk', 'add boar tusk', 'add some powdered clear topaz', 'boil', 'add some coarse glittering earth', 'simmer', 'infuse', 'chant 909', 'seal'],
          :type    => 'trinkets',
          :spell   => '909',
          :rank    => [44, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'jagged glossy black shard',
          :nick    => 'sanctuary breaking crystal',
          :steps   => ['light', 'add vial of viscous liquid', "add t'ayanad crystal", 'simmer', 'add some powdered glossy black doomstone', 'infuse', "add ayana'al leaf", "add ayana'al leaf", "add ayana'al leaf", 'refract moonlight through shadowglass lens', 'seal'],
          :type    => 'trinkets',
          :rank    => [45, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'jagged glossy black shard',
          :nick    => 'sanctuary breaking crystal',
          :steps   => ['light', 'add vial of viscous liquid', "add t'ayanad crystal", 'simmer', 'add some powdered glossy black doomstone', 'infuse', "add ayana'al leaf", "add ayana'al leaf", "add ayana'al leaf", 'refract sunlight through shadowglass lens', 'seal'],
          :type    => 'trinkets',
          :rank    => [45, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'translucent pale blue dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add myklian scale', 'add some powdered blue coral', 'boil', "add s'ayanad crystal", "add s'ayanad crystal", 'add blue mist-shrouded crystal', 'simmer', 'infuse', 'chant 512', 'seal'],
          :type    => 'trinkets',
          :spell   => '512',
          :rank    => [47, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'translucent pale blue dust',
          :steps   => ['light', 'add vial of sand-like liquid', 'add tegu tailspike', 'add tegu tailspike', 'add tegu tailspike', 'add some powdered blue coral', 'boil', "add s'ayanad crystal", "add s'ayanad crystal", 'add blue mist-shrouded crystal', 'simmer', 'infuse', 'chant 512', 'seal'],
          :type    => 'trinkets',
          :spell   => '512',
          :rank    => [47, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'blue crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add stargazer lily', 'simmer', 'add some powdered water sapphire', 'infuse', 'add golem bone', 'add golem bone', 'boil', 'channel', 'chant 117', 'seal'],
          :type    => 'trinkets',
          :spell   => '117',
          :rank    => [50, 62],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
          :region  => "east"
        },
        {
          :product => 'blue crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add stargazer lily', 'simmer', 'add some powdered cowrie shell', 'infuse', 'add golem bone', 'add golem bone', 'boil', 'channel', 'chant 117', 'seal'],
          :type    => 'trinkets',
          :spell   => '117',
          :rank    => [50, 62],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
          :region  => "west"
        },
        {
          :product => 'slender mithril wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add shelfae crest', 'add shelfae crest', 'add shelfae crest', 'add shelfae crest', 'boil', 'add some powdered turquoise stone', 'simmer', "add s'ayanad crystal", 'infuse', 'add pinch of mithril dust', 'channel', 'chant 910', 'seal'],
          :type    => 'trinkets',
          :spell   => '910',
          :rank    => [50, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'slender mithril wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add tufted hawk-owl ear', 'boil', 'add some powdered turquoise stone', 'simmer', "add s'ayanad crystal", 'infuse', 'add pinch of mithril dust', 'channel', 'chant 910', 'seal'],
          :type    => 'trinkets',
          :spell   => '910',
          :rank    => [50, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'faceted amethyst wand',
          :steps   => ['light', 'add vial of viscous liquid', 'add basilisk crest', 'add basilisk crest', 'add some powdered deep purple amethyst', 'boil', 'add ayanad crystal', 'add ayanad crystal', 'add ayanad crystal', 'simmer', 'add shimmering prismatic shard', 'chant 1110', 'seal'],
          :type    => 'trinkets',
          :spell   => '1110',
          :rank    => [50, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'gleaming multicolored soulstone',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered uncut emerald', 'refract moonlight through shadowglass lens', 'infuse', 'add some elemental core', 'add some elemental core', 'add some elemental core', 'add some elemental core', 'add some elemental core', 'channel', 'chant 735', 'seal'],
          :type    => 'trinkets',
          :rank    => [50, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'elemental soulstone',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered uncut emerald', 'refract sunlight through shadowglass lens', 'infuse', 'add some elemental core', 'add some elemental core', 'add some elemental core', 'add some elemental core', 'add some elemental core', 'channel', 'chant 735', 'seal'],
          :type    => 'trinkets',
          :rank    => [50, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'greater elemental channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered maernstrike diamond', 'add some radiant crimson essence dust', 'channel', 'add essence shard', 'add sprig of columbine', 'infuse', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [52, 62],
          :for     => ['Wizard', 'Sorcerer'],
        },
        {
          :product => 'solid bead of fiery nacreous crystal',
          :nick    => 'greater spiritual channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered brilliant fire pearl', 'channel', 'add spirit shard', 'add radiant crimson mote of essence', 'infuse', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [52, 62],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'faceted clear crystal cylinder',
          :nick    => 'greater mental channeling crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add golden aster', 'add golden aster', 'add wild orchid', 'add wild orchid', 'add wild pansy blossom', 'add wild pansy blossom', 'add wild pansy blossom', 'channel', 'add radiant crimson essence shard', 'add some faintly glowing dust', 'refract moonlight through emerald lens', 'seal'],
          :type    => 'trinkets',
          :rank    => [52, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'greater constitution crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some ground strigae cactus', 'add some ground strigae cactus', 'add some ground strigae cactus', 'add some powdered blue diamond', 'add flask of sparkling body essence', 'simmer', "add n'ayanad crystal", 'add some fine alabaster dust', 'refract moonlight through diamond lens', 'seal'],
          :type    => 'trinkets',
          :rank    => [54, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'greater intuition crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add pink hydrangea', 'add ayana leaf', 'add bright violet feystone', 'infuse', "add n'ayanad crystal", 'add flask of sparkling mind essence', 'refract moonlight through amethyst lens', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [54, 62],
          :for     => ['Cleric'],
        },
        {
          :product => 'dimly glowing triangular bone talisman',
          :nick    => 'greater lichbane talisman ',
          :steps   => ['light', 'add vial of pearlescent oil', 'add small enruned bone', 'add small enruned bone', 'add small enruned bone', 'chant 215', 'simmer', 'add fragrant white lily', 'infuse', 'add some powdered white sunstone', 'refract sunlight through diamond lens', "add pristine sprite's hair", 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [55, 62],
          :for     => ['Cleric', 'Empath'],
        },
        {
          :product => 'glittering brown crystal disk',
          :nick    => 'greater stamina regeneration crystal',
          :steps   => ['light', 'add vial of viscous liquid', "add ayana'al leaf", 'add some powdered star ruby', 'refract moonlight through sapphire lens', 'add some faintly shimmering dust', 'chant 1107', 'add flask of sparkling body essence', 'boil', 'seal'],
          :type    => 'trinkets',
          :spell   => '1107',
          :rank    => [56, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'vivid pink glassy sphere',
          :nick    => 'greater spiritual focus crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add mammoth arachnid mandible', 'add mammoth arachnid mandible', 'add mammoth arachnid mandible', 'add some powdered selanthan bloodjewel', 'add flask of sparkling mind essence', 'simmer', 'channel', 'seal'],
          :type    => 'trinkets',
          :rank    => [58, 62],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
        },
        {
          :product => 'greater mental focus crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add almandine garnet', 'add almandine garnet', 'add almandine garnet', 'add almandine garnet', 'add some mashed pale yellow daffodil', 'add flask of sparkling mind essence', 'infuse', 'add some faintly glowing dust', 'boil', 'seal'],
          :type    => 'trinkets',
          :rank    => [58, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'glass amulet',
          :steps   => ['light', 'add vial of pearlescent oil', 'add some powdered uncut diamond', 'add some faintly glowing dust', 'simmer', 'add some mashed large white gardenia', 'infuse', 'refract sunlight through sapphire lens', 'boil', 'chant 916', 'seal'],
          :type    => 'trinkets',
          :spell   => '916',
          :rank    => [60, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'piece of crystalline chalk',
          :steps   => ['light', 'add vial of pearlescent oil', 'add some essence of air', 'add handful of quartz sand', 'add handful of quartz sand', 'simmer', 'add some powdered uncut diamond', 'add some powdered aster opal', 'infuse', 'refract moonlight through shadowglass lens', 'boil', 'chant 740', 'seal'],
          :type    => 'trinkets',
          :rank    => [60, 62],
          :for     => ['Sorcerer'],
        },
        {
          :product => 'greater aura crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add ayana leaf', 'add some powdered yellow diamond', 'add some powdered yellow diamond', 'infuse', 'add essence shard', "add n'ayanad crystal", 'add flask of sparkling soul essence', 'refract sunlight through diamond lens', 'seal'],
          :type    => 'trinkets',
          :rank    => [62, 62],
          :for     => ['Wizard'],
        },
        {
          :product => 'greater spirit regeneration crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered yellow sapphire', 'add some powdered grey pearl', 'add some faintly shimmering dust', 'chant 308', 'infuse', 'add handful of pinenuts', 'add flask of sparkling soul essence', 'infuse', 'seal'],
          :type    => 'trinkets',
          :rank    => [62, 62],
          :for     => ['Cleric'],
        },
        {
          :product => 'greater strength crystal',
          :steps   => ['light', 'add vial of viscous liquid', 'add cinnabar crystal', 'add some ground red trafel mushroom', 'add some ground red trafel mushroom', 'add some powdered uncut ruby', 'add some powdered uncut ruby', 'add some powdered uncut ruby', 'infuse', "n'ayanad crystal", 'add flask of sparkling body essence', 'refract sunlight through ruby lens', 'seal'],
          :type    => 'trinkets',
          :rank    => [62, 62],
          :for     => ['Empath'],
        },
        {
          :product => 'radiant white soulstone',
          :steps   => ['light', 'add vial of viscous liquid', 'add some powdered honey beryl', 'add some minor holy oil', 'infuse', 'add some powdered uncut diamond', 'add faint mote of soul', 'channel', 'seal'],
          :type    => 'trinkets',
          :for     => ['Cleric'],
        },
        {
          :product => 'flask of hazy grey liquid essence',
          :steps   => ['light', 'add flask of clear water', 'add tiny golden seed', 'infuse', 'add pink sapphire', 'add pink sapphire', 'infuse', 'boil', 'seal'],
        },
        {
          :product => 'flask of hazy green liquid essence',
          :steps   => ['light', 'add flask of clear water', 'add tiny golden seed', 'channel', 'add uncut diamond', 'boil', 'seal'],
        },
        {
          :product => 'flask of hazy brown liquid essence',
          :steps   => ['light', 'add flask of clear water', 'add tiny golden seed', 'simmer', 'add pine cone', 'add small wild rose', "add ayana'al leaf", 'add uncut emerald', 'boil', 'seal'],
        },
        {
          :product => 'reflective soulstone',
          :steps   => ['light', 'add vial of viscous liquid', 'add some essence of air', 'add some essence of earth', 'add some essence of fire', 'add some essence of water', 'infuse', 'add gleaming multicolored soulstone', 'chant 925', 'seal'],
          :type    => 'trinkets',
          :rank    => [63, 63],
          :for     => ['Wizard'],
        },

        #
        # buy reagents
        #

        {
          :product => 'flask of clear water',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'flask of blessed water',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'flask of pure oil',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'flask of blessed oil',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'vial of viscous liquid',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'vial of sand-like liquid',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'vial of pearlescent oil',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 100,
        },
        {
          :product => 'vial of amber-hued oil',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 250,
        },
        {
          :product => 'some coarse ivory dust',
          :steps   => ["buy from empath alchemy shop"],
          :for     => ['Empath'],
          :cost    => 500,
        },
        {
          :product => 'shimmering shard',
          :steps   => ["buy from empath alchemy shop"],
          :for     => ['Empath'],
          :cost    => 1250,
        },
        {
          :product => 'some fine alabaster dust',
          :steps   => ["buy from empath alchemy shop"],
          :for     => ['Empath'],
          :cost    => 1750,
        },
        {
          :product => 'small enruned bone',
          :steps   => ["buy from cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 800,
        },
        {
          :product => 'small ivory disc',
          :steps   => ["buy from cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 800,
        },
        {
          :product => 'some glowing white powder',
          :steps   => ["buy from cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 1000,
        },
        {
          :product => 'vial of shimmering oil',
          :steps   => ["buy from cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 600,
        },
        {
          :product => 'some dark glittering powder',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 1500,
        },
        {
          :product => 'blue mist-shrouded crystal',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 800,
        },
        {
          :product => 'pinch of iron dust',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 300,
        },
        {
          :product => 'jagged translucent crystal',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 400,
        },
        {
          :product => 'pale blue runed crystal shard',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 250,
        },
        {
          :product => 'shard of cloudy crystal',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 400,
        },
        {
          :product => 'shimmering prismatic shard',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 250,
        },
        {
          :product => 'pinch of gold dust',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 600,
        },
        {
          :product => 'runed azure crystal',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 250,
        },
        {
          :product => 'runed crimson crystal',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 350,
        },
        {
          :product => 'some coarse glittering earth',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 500,
        },
        {
          :product => 'pinch of mithril dust',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 1000,
        },
        {
          :product => 'dark glimmering crystal',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 1000,
        },
        {
          :product => 'dark shadow-shrouded crystal',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 400,
        },
        {
          :product => 'shining silver crystal fragment',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1500,
        },
        {
          :product => 'jagged crimson crystal',
          :steps   => ["buy from sorcerer alchemy shop"],
          :for     => ['Sorcerer'],
          :cost    => 150,
        },
        {
          :product => 'some pale translucent dust',
          :steps   => ["buy from sorcerer alchemy shop"],
          :for     => ['Sorcerer'],
          :cost    => 375,
        },
        {
          :product => 'slender white bone',
          :steps   => ["buy from sorcerer alchemy shop"],
          :for     => ['Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'handful of quartz sand',
          :steps   => ["buy from sorcerer alchemy shop"],
          :for     => ['Sorcerer'],
          :cost    => 450,
        },
        {
          :product => 'vial of concentrated firethorn essence',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 3000,
        },
        {
          :product => 'vial of viper venom',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 1100,
        },
        {
          :product => 'some powdered clear zircon',
          :steps   => ["buy from empath alchemy shop"],
          :for     => ['Empath'],
          :cost    => 50,
        },
        {
          :product => 'some powdered rock crystal',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 20,
        },
        {
          :product => 'some powdered labradorite stone',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Cleric', 'Sorcerer'],
          :cost    => 100,
        },
        {
          :product => 'some powdered black tourmaline',
          :steps   => ["buy from sorcerer alchemy shop"],
          :for     => ['Sorcerer'],
          :cost    => 200,
        },
        {
          :product => 'some powdered green tourmaline',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 220,
        },
        {
          :product => 'some powdered clear tourmaline',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 180,
        },
        {
          :product => 'some powdered golden amber',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 300,
        },
        {
          :product => 'some powdered clear topaz',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 20,
        },
        {
          :product => 'some powdered almandine garnet',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 130,
        },
        {
          :product => 'some powdered black jasper',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 100,
        },
        {
          :product => 'some powdered rose quartz',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 160,
        },
        {
          :product => 'some powdered citrine quartz',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 160,
        },
        {
          :product => 'some powdered chrysoberyl gem',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 400,
        },
        {
          :product => 'some powdered beryl gem',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 480,
        },
        {
          :product => 'some powdered golden topaz',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 1200,
        },
        {
          :product => 'some powdered pink topaz',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 800,
        },
        {
          :product => 'some powdered smoky topaz',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 1000,
        },
        {
          :product => 'some powdered blue lapis lazuli',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1200,
        },
        {
          :product => 'some powdered malachite stone',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 1000,
        },
        {
          :product => 'some powdered green garnet',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1400,
        },
        {
          :product => 'some powdered rhodochrosite stone',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'some powdered pink coral',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 700,
        },
        {
          :product => 'some powdered white opal',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Wizard'],
          :cost    => 1600,
        },
        {
          :product => 'some powdered star ruby',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 2400,
        },
        {
          :product => 'some powdered yellow sapphire',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 1800,
        },
        {
          :product => 'some powdered violet sapphire',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 2000,
        },
        {
          :product => 'some powdered star sapphire',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 2400,
        },
        {
          :product => 'some powdered green sapphire',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1800,
        },
        {
          :product => 'some powdered blue sapphire',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Wizard'],
          :cost    => 6000,
        },
        {
          :product => 'some powdered fire agate',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 360,
        },
        {
          :product => 'some powdered fire agate',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 360,
        },
        {
          :product => 'some powdered water sapphire',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 800,
        },
        {
          :product => 'some powdered water sapphire',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 800,
        },
        {
          :product => 'some powdered spiderweb turquoise',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 1200,
        },
        {
          :product => 'some powdered spiderweb turquoise',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 1200,
        },
        {
          :product => 'some powdered spessartine garnet',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 1400,
        },
        {
          :product => 'some powdered spessartine garnet',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 1400,
        },
        {
          :product => 'some powdered imperial topaz',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 1600,
        },
        {
          :product => 'some powdered imperial topaz',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 1600,
        },
        {
          :product => 'some powdered green moonstone',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2200,
        },
        {
          :product => 'some powdered green moonstone',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2200,
        },
        {
          :product => 'some powdered blue moonstone',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2200,
        },
        {
          :product => 'some powdered blue moonstone',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2200,
        },
        {
          :product => 'some powdered smoky glimaerstone',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2000,
        },
        {
          :product => 'some powdered smoky glimaerstone',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2000,
        },
        {
          :product => 'some powdered shimmertine shard',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1400,
        },
        {
          :product => 'some powdered shimmertine shard',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1400,
        },
        {
          :product => 'some powdered rainbow quartz',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2400,
        },
        {
          :product => 'some powdered rainbow quartz',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2400,
        },
        {
          :product => 'some powdered fiery jacinth',
          :steps   => ["buy from Ta'Illistim #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2000,
        },
        {
          :product => 'some powdered fiery jacinth',
          :steps   => ["buy from Ta'Vaalor #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2000,
        },
        {
          :product => 'some powdered moonglae opal',
          :steps   => ["buy from Ta'Illistim cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 5600,
        },
        {
          :product => 'some powdered moonglae opal',
          :steps   => ["buy from Ta'Vaalor cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 5600,
        },
        {
          :product => 'some powdered blood red garnet',
          :steps   => ["buy from Icemule #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'some powdered gold nugget',
          :steps   => ["buy from Icemule wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 800,
        },
        {
          :product => 'some powdered green jade',
          :steps   => ["buy from Icemule #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 1600,
        },
        {
          :product => 'some powdered white jade',
          :steps   => ["buy from Icemule cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 500,
        },
        {
          :product => 'some powdered brown jade',
          :steps   => ["buy from Icemule sorcerer alchemy shop"],
          :for     => ['Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'some powdered blue coral',
          :steps   => ["buy from wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 60,
        },
        {
          :product => 'some powdered deep purple amethyst',
          :steps   => ["buy from cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 440,
        },
        {
          :product => 'some powdered turquoise stone',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 800,
        },
        {
          :product => 'some powdered grey pearl',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :for     => ['Cleric', 'Empath', 'Sorcerer'],
          :cost    => 4000,
        },
        {
          :product => 'some powdered white pearl',
          :steps   => ["buy from #{Char.prof.downcase} alchemy shop"],
          :cost    => 5000,
        },
        {
          :product => 'some powdered red-green bloodstone',
          :steps   => ["buy from empath alchemy shop"],
          :for     => ['Empath'],
          :cost    => 40,
        },
        {
          :product => 'some powdered aquamarine gem',
          :steps   => ["buy from cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 700,
        },
        {
          :product => 'some powdered cowrie shell',
          :steps   => ["buy from Solhaven #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 900,
        },
        {
          :product => 'some powdered cowrie shell',
          :steps   => ["buy from River's Rest #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 900,
        },
        {
          :product => 'some powdered pearl nautilus shell',
          :steps   => ["buy from Solhaven #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2600,
        },
        {
          :product => 'some powdered pearl nautilus shell',
          :steps   => ["buy from River's Rest #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2600,
        },
        {
          :product => 'some powdered iridescent mother-of-pearl',
          :steps   => ["buy from Solhaven #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'some powdered iridescent mother-of-pearl',
          :steps   => ["buy from River's Rest #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'some powdered silvery conch shell',
          :steps   => ["buy from Solhaven #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1800,
        },
        {
          :product => 'some powdered silvery conch shell',
          :steps   => ["buy from River's Rest #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1800,
        },
        {
          :product => 'some powdered fire pearl',
          :steps   => ["buy from Solhaven #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2600,
        },
        {
          :product => 'some powdered fire pearl',
          :steps   => ["buy from River's Rest #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2600,
        },
        {
          :product => 'some powdered golden moonstone',
          :steps   => ["buy from Kharam-Dzu #{Char.prof.downcase} alchemy shop"],
          :cost    => 5000,
        },
        {
          :product => 'some powdered blue starstone',
          :steps   => ["buy from Kharam-Dzu wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 200,
        },
        {
          :product => 'some powdered green starstone',
          :steps   => ["buy from Kharam-Dzu #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2000,
        },
        {
          :product => 'some powdered cats-eye moonstone',
          :steps   => ["buy from Kharam-Dzu #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric', 'Sorcerer'],
          :cost    => 2400,
        },
        {
          :product => 'some powdered dragonfire opal',
          :steps   => ["buy from Kharam-Dzu cleric alchemy shop"],
          :for     => ['Cleric'],
          :cost    => 6000,
        },
        {
          :product => 'some powdered blue eostone',
          :steps   => ["buy from Zul Logoth #{Char.prof.downcase} alchemy shop"],
          :for     => ['Empath', 'Cleric'],
          :cost    => 2400,
        },
        {
          :product => 'some powdered azurite',
          :steps   => ["buy from Zul Logoth wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 200,
        },
        {
          :product => 'some powdered green sphene',
          :steps   => ["buy from Zul Logoth wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 800,
        },
        {
          :product => 'some powdered brown sphene',
          :steps   => ["buy from Zul Logoth #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 1000,
        },
        {
          :product => 'some powdered black sphene',
          :steps   => ["buy from Zul Logoth wizard alchemy shop"],
          :for     => ['Wizard'],
          :cost    => 1400,
        },
        {
          :product => 'some powdered bright bluerock',
          :steps   => ["buy from Zul Logoth #{Char.prof.downcase} alchemy shop"],
          :for     => ['Wizard', 'Sorcerer'],
          :cost    => 2400,
        },
        {
          :product => 'smooth stone',
          :steps   => ["buy from Wehnimer's Landing general store"],
          :cost    => 200,
        },
        {
          :product => 'some acantha leaf',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 22, # 220 for 10 doses
        },
        {
          :product => 'some wolifrew lichen',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 28, # 110 for 4 doses
        },
        {
          :product => 'some torban leaf',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 55, # 165 for 3 doses
        },
        {
          :product => 'some woth flower',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 55, # 110 for 2 doses
        },
        {
          :product => 'some ambrominas leaf',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 28, # 110 for 4 doses
        },
        {
          :product => 'some pothinir grass',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 200, # 400 for 2 doses
        },
        {
          :product => 'some ephlox moss',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 69, # 275 for 4 doses
        },
        {
          :product => 'some cactacae spine',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 28, # 110 for 4 doses
        },
        {
          :product => 'some calamia fruit',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 138, # 275 for 2 doses
        },
        {
          :product => 'some aloeas stem',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 138, # 275 for 2 doses
        },
        {
          :product => 'some haphip root',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 55, # 220 for 4 doses
        },
        {
          :product => 'some basal moss',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 55, # 220 for 4 doses
        },
        {
          :product => 'some sovyn clove',
          :steps   => ["buy from Wehnimer's Landing herbalist"],
          :cost    => 880, # 880 for 1 dose
        },
        {
          :product => 'vial of faintly glowing aelotoi tears',
          :steps   => ["buy from Icemule empath guild entrance"],
          :cost    => 7000,
        },
        {
          :product => 'vial of faintly glowing aelotoi tears',
          :steps   => ["buy from River's Rest empath fixme"],
          :cost    => 7000,
        },

        #
        # grind reagents
        #
        { :product => "some powdered dragon's-tear diamond",      :steps => ["grind dragon's-tear diamond"]               },
        { :product => 'some powdered clear glimaerstone',         :steps => ['grind clear glimaerstone']                  },
        { :product => 'some powdered clear zircon',               :steps => ['grind clear zircon']                        },
        { :product => 'some powdered rock crystal',               :steps => ['grind rock crystal']                        },
        { :product => 'some powdered labradorite stone',          :steps => ['grind iridescent labradorite stone']        },
        { :product => 'some powdered black tourmaline',           :steps => ['grind black tourmaline']                    },
        { :product => 'some powdered green tourmaline',           :steps => ['grind green tourmaline']                    },
        { :product => 'some powdered clear tourmaline',           :steps => ['grind clear tourmaline']                    },
        { :product => 'some powdered blue tourmaline',            :steps => ['grind blue tourmaline']                     },
        { :product => 'some powdered golden amber',               :steps => ['grind piece of golden amber']               },
        { :product => 'some powdered clear topaz',                :steps => ['grind clear topaz']                         },
        { :product => 'some powdered almandine garnet',           :steps => ['grind almandine garnet']                    },
        { :product => 'some powdered black jasper',               :steps => ['grind black jasper']                        },
        { :product => 'some powdered rose quartz',                :steps => ['grind rose quartz']                         },
        { :product => 'some powdered citrine quartz',             :steps => ['grind citrine quartz']                      },
        { :product => 'some powdered chrysoberyl gem',            :steps => ['grind bright chrysoberyl gem']              },
        { :product => 'some powdered beryl gem',                  :steps => ['grind golden beryl gem']                    },
        { :product => 'some powdered golden topaz',               :steps => ['grind golden topaz']                        },
        { :product => 'some powdered pink topaz',                 :steps => ['grind pink topaz']                          },
        { :product => 'some powdered smoky topaz',                :steps => ['grind smoky topaz']                         },
        { :product => 'some powdered blue lapis lazuli',          :steps => ['grind blue lapis lazuli']                   },
        { :product => 'some powdered malachite stone',            :steps => ['grind green malachite stone']               },
        { :product => 'some powdered green garnet',               :steps => ['grind green garnet']                        },
        { :product => 'some powdered rhodochrosite stone',        :steps => ['grind pink rhodochrosite stone']            },
        { :product => 'some powdered pink coral',                 :steps => ['grind some polished pink coral']            },
        { :product => 'some powdered red coral',                  :steps => ['grind some polished red coral']             },
        { :product => 'some powdered blue coral',                 :steps => ['grind some polished blue coral']            },
        { :product => 'some powdered white opal',                 :steps => ['grind white opal']                          },
        { :product => 'some powdered star ruby',                  :steps => ['grind star ruby']                           },
        { :product => 'some powdered yellow sapphire',            :steps => ['grind yellow sapphire']                     },
        { :product => 'some powdered violet sapphire',            :steps => ['grind violet sapphire']                     },
        { :product => 'some powdered star sapphire',              :steps => ['grind star sapphire']                       },
        { :product => 'some powdered green sapphire',             :steps => ['grind green sapphire']                      },
        { :product => 'some powdered blue sapphire',              :steps => ['grind blue sapphire']                       },
        { :product => 'some powdered fire agate',                 :steps => ['grind fire agate']                          },
        { :product => 'some powdered water sapphire',             :steps => ['grind pale water sapphire']                 },
        { :product => 'some powdered spiderweb turquoise',        :steps => ['grind spiderweb turquoise']                 },
        { :product => 'some powdered spessartine garnet',         :steps => ['grind orange spessartine garnet']           },
        { :product => 'some powdered imperial topaz',             :steps => ['grind orange imperial topaz']               },
        { :product => 'some powdered green moonstone',            :steps => ['grind pale green moonstone']                },
        { :product => 'some powdered blue moonstone',             :steps => ['grind pale blue moonstone']                 },
        { :product => 'some powdered smoky glimaerstone',         :steps => ['grind smoky glimaerstone']                  },
        { :product => 'some powdered shimmertine shard',          :steps => ['grind shimmertine shard']                   },
        { :product => 'some powdered rainbow quartz',             :steps => ['grind rainbow quartz']                      },
        { :product => 'some powdered fiery jacinth',              :steps => ['grind fiery jacinth']                       },
        { :product => 'some powdered moonglae opal',              :steps => ['grind moonglae opal']                       },
        { :product => 'some powdered blood red garnet',           :steps => ['grind blood red garnet']                    },
        { :product => 'some powdered gold nugget',                :steps => ['grind gold nugget']                         },
        { :product => 'some powdered green jade',                 :steps => ['grind green jade']                          },
        { :product => 'some powdered white jade',                 :steps => ['grind white jade']                          },
        { :product => 'some powdered brown jade',                 :steps => ['grind brown jade']                          },
        { :product => 'some powdered deep purple amethyst',       :steps => ['grind deep purple amethyst']                },
        { :product => 'some powdered turquoise stone',            :steps => ['grind turquoise stone']                     },
        { :product => 'some powdered grey pearl',                 :steps => ['grind grey pearl']                          },
        { :product => 'some powdered white pearl',                :steps => ['grind white pearl']                         },
        { :product => 'some powdered black pearl',                :steps => ['grind black pearl']                         },
        { :product => 'some powdered red-green bloodstone',       :steps => ['grind dark red-green bloodstone']           },
        { :product => 'some powdered aquamarine gem',             :steps => ['grind aquamarine gem']                      },
        { :product => 'some powdered cowrie shell',               :steps => ['grind snake-head cowrie shell']             },
        { :product => 'some powdered pearl nautilus shell',       :steps => ['grind pearl nautilus shell']                },
        { :product => 'some powdered iridescent mother-of-pearl', :steps => ['grind iridescent piece of mother-of-pearl'] },
        { :product => 'some powdered silvery conch shell',        :steps => ['grind sparkling silvery conch shell']       },
        { :product => 'some powdered fire pearl',                 :steps => ['grind brilliant fire pearl']                },
        { :product => 'some powdered golden moonstone',           :steps => ['grind golden moonstone']                    },
        { :product => 'some powdered blue starstone',             :steps => ['grind blue starstone']                      },
        { :product => 'some powdered green starstone',            :steps => ['grind green starstone']                     },
        { :product => 'some powdered cats-eye moonstone',         :steps => ['grind cats-eye moonstone']                  },
        { :product => 'some powdered dragonfire opal',            :steps => ['grind dragonfire opal']                     },
        { :product => 'some powdered blue eostone',               :steps => ['grind deep blue eostone']                   },
        { :product => 'some powdered azurite',                    :steps => ['grind azurite']                             },
        { :product => 'some powdered green sphene',               :steps => ['grind green sphene']                        },
        { :product => 'some powdered brown sphene',               :steps => ['grind brown sphene']                        },
        { :product => 'some powdered black sphene',               :steps => ['grind black sphene']                        },
        { :product => 'some powdered bright bluerock',            :steps => ['grind bright bluerock']                     },
        { :product => 'some powdered black opal',                 :steps => ['grind black opal']                          },
        { :product => 'some powdered fire opal',                  :steps => ['grind fire opal']                           },
        { :product => 'some powdered clear sapphire',             :steps => ['grind clear sapphire']                      },
        { :product => 'some powdered pink pearl',                 :steps => ['grind pink pearl']                          },
        { :product => 'some powdered emerald blazestar',          :steps => ['grind emerald blazestar']                   },
        { :product => 'some powdered maernstrike diamond',        :steps => ['grind uncut maernstrike diamond']           },
        { :product => 'some powdered uncut ruby',                 :steps => ['grind uncut ruby']                          },
        { :product => 'some powdered uncut emerald',              :steps => ['grind uncut emerald']                       },
        { :product => 'some powdered olivine feanor\-bloom',      :steps => ['grind olivine feanor\-bloom']               },
        { :product => 'some powdered white starstone',            :steps => ['grind white starstone']                     },
        { :product => 'some powdered cloud agate',                :steps => ['grind cloud agate']                         },
        { :product => 'some powdered grey chalcedony',            :steps => ['grind grey chalcedony']                     },
        { :product => 'some powdered white chalcedony',           :steps => ['grind white chalcedony']                    },
        { :product => 'some powdered shimmarglin sapphire',       :steps => ['grind shimmarglin sapphire']                },
        { :product => 'some powdered dragonseye sapphire',        :steps => ['grind dragonseye sapphire']                 },
        { :product => 'some powdered white marble',               :steps => ['grind white marble']                        },
        { :product => 'some powdered honey beryl',                :steps => ['grind Kezmonian honey beryl']               },
        { :product => 'some powdered glossy black doomstone',     :steps => ['grind glossy black doomstone']              },
        { :product => 'some powdered uncut diamond',              :steps => ['grind uncut diamond']                       },
        { :product => 'some powdered yellow hyacinth',            :steps => ['grind yellow hyacinth']                     },
        { :product => 'some powdered water chestnut',             :steps => ['grind water chestnut']                      },
        { :product => 'some powdered white sunstone',             :steps => ['grind white sunstone']                      },
        { :product => 'some powdered pinenuts',                   :steps => ['grind handful of pinenuts']                 },
        { :product => 'some powdered skeleton bone',              :steps => ['grind skeleton bone']                       },
        { :product => 'some powdered skeletal giant bone',        :steps => ['grind skeletal giant bone']                 },
        { :product => 'some powdered wraith talon',               :steps => ['grind wraith talon']                        },
        { :product => 'some powdered walnuts',                    :steps => ['grind handful of walnuts']                  },
        { :product => 'some powdered lump of grey ambergris',     :steps => ['grind lump of grey ambergris']              },
        { :product => 'some powdered grey caederine',             :steps => ['grind some waxy grey caederine']            },
        { :product => 'some powdered aster opal',                 :steps => ['grind aster opal']                          },
        { :product => 'some powdered white clam shell',           :steps => ['grind white clam shell']                    },
        { :product => 'some powdered nassa shell',                :steps => ['grind ruby-lined nassa shell']              },
        { :product => 'some powdered sea urchin shell',           :steps => ['grind sea urchin shell']                    },
        { :product => 'some powdered crystal crab shell',         :steps => ['grind faceted crystal crab shell']          },
        { :product => 'some powdered copper fang',                :steps => ['grind copper fang']                         },
        { :product => 'some powdered wild beechnut',              :steps => ['grind wild beechnut']                       },
        { :product => 'some powdered charcoal',                   :steps => ['grind few lumps of charcoal']               },
        { :product => 'some powdered silver fang',                :steps => ['grind silver fang']                         },
        { :product => 'some powdered pink dreamstone',            :steps => ['grind pink dreamstone']                     },
        { :product => 'some powdered blue peridot',               :steps => ['grind blue peridot']                        },
        { :product => 'some powdered green peridot',              :steps => ['grind green peridot']                       },
        { :product => 'some powdered blue spinel',                :steps => ['grind blue spinel']                         },
        { :product => 'some powdered yellow diamond',             :steps => ['grind large yellow diamond']                },
        { :product => 'some powdered blue diamond',               :steps => ['grind blue diamond']                        },
        { :product => 'some powdered star-of-Tamzyrr diamond',    :steps => ['grind uncut star-of-Tamzyrr diamond']       },
        { :product => 'some ground bone mushroom',                :steps => ['grind bone mushroom']                       },
        { :product => 'some ground sponge mushroom',              :steps => ['grind sponge mushroom']                     },
        { :product => 'some ground ironfern',                     :steps => ['grind ironfern root']                       },
        { :product => 'some ground wolifrew',                     :steps => ['grind some wolifrew lichen']                },
        { :product => 'some ground rose-marrow',                  :steps => ['grind rose-marrow root']                    },
        { :product => 'some ground valerian',                     :steps => ['grind some valerian root']                  },
        { :product => 'some ground cuctucae',                     :steps => ['grind cuctucae berry']                      },
        { :product => 'some ground murdroot',                     :steps => ['grind murdroot']                            },
        { :product => 'some ground sweetfern stalk',              :steps => ['grind sweetfern stalk']                     },
        { :product => 'some ground basal moss',                   :steps => ['grind some basal moss']                     },
        { :product => 'some ground glowing toadstool',            :steps => ['grind giant glowing toadstool']             },
        { :product => 'some ground ephlox moss',                  :steps => ['grind some ephlox moss']                    },
        { :product => 'some ground bolmara',                      :steps => ['grind some bolmara lichen']                 },
        { :product => 'some ground cactacae',                     :steps => ['grind some cactacae spine']                 },
        { :product => 'some ground haphip',                       :steps => ['grind some haphip root']                    },
        { :product => 'some ground talneo',                       :steps => ['grind some talneo root']                    },
        { :product => 'some ground tkaro',                        :steps => ['grind tkaro root']                          },
        { :product => 'some ground wingstem',                     :steps => ['grind some wingstem root']                  },
        { :product => 'some ground sovyn',                        :steps => ['grind some sovyn clove']                    },
        { :product => 'some ground bur-clover',                   :steps => ['grind some bur-clover root']                },
        { :product => 'some ground yabathilium',                  :steps => ['grind yabathilium fruit']                   },
        { :product => 'some ground marallis',                     :steps => ['grind marallis berry']                      },
        { :product => 'some ground ayana',                        :steps => ['grind ayana leaf']                          },
        { :product => 'some ground cothinar',                     :steps => ['grind some cothinar flower']                },
        { :product => 'some ground oats',                         :steps => ['grind handful of oats']                     },
        { :product => 'some ground alder bark',                   :steps => ['grind some alder bark']                     },
        { :product => 'some ground orchil',                       :steps => ['grind some orchil lichen']                  },
        { :product => 'some ground blackened moss',               :steps => ['grind some blackened moss']                 },
        { :product => 'some ground lichen',                       :steps => ['grind some red lichen']                     },
        { :product => 'some ground lichen',                       :steps => ['grind some glowing green lichen']           },
        # fixme
        # alchemy examine my lichen
        # You examine the ground lichen, noting its unique characteristics and features.
        # You determine that it is similar to ground green lichen in alchemical properties and application, and would likely make a suitable replacement in a recipe.

        { :product => 'some ground longgrass',                    :steps => ['grind some longgrass']                      },
        { :product => 'some ground arctic moss',                  :steps => ['grind some arctic moss']                    },
        { :product => 'some ground woad leaves',                  :steps => ['grind cluster of woad leaves']              },
        { :product => 'some ground ginger',                       :steps => ['grind ginger root']                         },
        { :product => 'some ground blue moss',                    :steps => ['grind some blue moss']                      },
        { :product => 'some ground green fungus',                 :steps => ['grind luminescent green fungus']            },
        { :product => 'some ground shadowlace moss',              :steps => ['grind some shadowlace moss']                },
        { :product => 'some ground wyrm thorn',                   :steps => ['grind black-tipped wyrm thorn']             },
        { :product => 'some ground petrified shadowstalk',        :steps => ['grind some petrified shadowstalk']          },
        { :product => 'some ground bloodthorn stem',              :steps => ['grind bloodthorn stem']                     },
        { :product => 'some ground flathead mushroom',            :steps => ['grind flathead mushroom']                   },
        { :product => 'some ground angelica',                     :steps => ['grind some angelica root']                  },
        { :product => 'some ground strigae cactus',               :steps => ['grind some strigae cactus']                 },
        { :product => 'some ground red trafel mushroom',          :steps => ['grind red trafel mushroom']                 },
        { :product => 'some ground acantha',                      :steps => ['grind some acantha leaf']                   },
        { :product => 'some ground ambrominas',                   :steps => ['grind some ambrominas leaf']                },
        { :product => 'some ground aloeas stem',                  :steps => ['grind some aloeas stem']                    },
        { :product => 'some ground torban',                       :steps => ['grind some torban leaf']                    },
        { :product => 'some ground pothinir',                     :steps => ['grind some pothinir grass']                 },
        { :product => 'some mashed pale yellow daffodil',         :steps => ['grind pale yellow daffodil']                },
        { :product => 'some mashed pink rain lily',               :steps => ['grind pink rain lily']                      },
        { :product => 'some mashed nightshade',                   :steps => ['grind nightshade berry']                    },
        { :product => 'some mashed large white gardenia',         :steps => ['grind large white gardenia']                },
        { :product => 'some mashed red poppy',                    :steps => ['grind red poppy']                           },
        { :product => 'some mashed mournbloom',                   :steps => ['grind sprig of mournbloom']                 },
        { :product => 'some mashed stalk of bluebells',           :steps => ['grind stalk of bluebells']                  },
        { :product => 'some mashed coppery rain lily',            :steps => ['grind coppery rain lily']                   },
        { :product => 'some mashed oxblood lily',                 :steps => ['grind oxblood lily']                        },
        { :product => 'some mashed yellow clover',                :steps => ['grind yellow clover blossom']               },
        { :product => 'some mashed onion skin',                   :steps => ['grind layer of onion skin']                 },
        { :product => 'some mashed gorse',                        :steps => ['grind cluster of gorse']                    },
        { :product => 'some mashed bright red cranberry',         :steps => ['grind bright red cranberry']                },
        { :product => 'some mashed orange begonia',               :steps => ['grind orange begonia']                      },
        { :product => 'some mashed sprig of wild lilac',          :steps => ['grind sprig of wild lilac']                 },
        { :product => 'some mashed tiger lily',                   :steps => ['grind tiger lily']                          },
        { :product => 'some mashed red clover',                   :steps => ['grind red clover blossom']                  },
        { :product => 'some mashed stalk of goldenrod',           :steps => ['grind stalk of goldenrod']                  },
        { :product => 'some mashed golden buttercup',             :steps => ['grind golden buttercup']                    },
        { :product => 'some mashed red passionflower',            :steps => ['grind red passionflower']                   },
        { :product => 'some mashed blue passionflower',           :steps => ['grind blue passionflower']                  },
        { :product => 'some mashed wood violet',                  :steps => ['grind wood violet']                         },
        { :product => 'some mashed moonlight cactus-bloom',       :steps => ['grind moonlight cactus-bloom']              },

        #
        # extract reagents
        #
        { :product => 'troll blood',                  :steps => ['check blood']                },
        { :product => 'handful of sea salt',          :steps => ['special']                    },
        { :product => 'some crystal core essence',    :steps => ['extract crystal core']       },
        { :product => 'some essence of regeneration', :steps => ['extract troll hide']         },
        { :product => 'some essence of regeneration', :steps => ['extract troll beard']        },
        # { :product => 'some essence of regeneration', :steps => ['extract ice troll scalp']    },
        { :product => 'some essence of regeneration', :steps => ['extract troll tongue'] },
        # { :product => 'some essence of regeneration', :steps => ['extract troll scalp']        },
        # { :product => 'some essence of regeneration', :steps => ['extract chipped troll tusk'] },
        { :product => 'some essence of regeneration', :steps => ['extract troll heart']        },
        { :product => 'some essence of regeneration', :steps => ['extract troll skin']         },
        # { :product => 'some essence of regeneration', :steps => ['extract scraggly swamp troll scalp'] },
        { :product => 'some essence of vitality',     :steps => ['extract yabathilium fruit']  },
        { :product => 'some faintly glimmering dust', :steps => ['extract ayanad crystal']     },
        { :product => 'some faintly glowing dust',    :steps => ["extract s'ayanad crystal"]   },
        { :product => 'some faintly radiant dust',    :steps => ["extract t'ayanad crystal"]   },
        { :product => 'some faintly shimmering dust', :steps => ["extract n'ayanad crystal"]   },
        { :product => 'some murdroot essence',        :steps => ['extract murdroot']           },
        { :product => 'few lumps of charcoal',        :steps => ['extract stick']              },
        { :product => 'faint mote of soul',           :steps => ['extract inky necrotic core'], :for => ['Cleric'] },

        #
        # distill for reagants
        #
        { :product => 'flask of sparkling mind essence', :steps => ['distill flask of hazy grey liquid essence'],  },
        { :product => 'flask of sparkling body essence', :steps => ['distill flask of hazy brown liquid essence'], },
        { :product => 'flask of sparkling soul essence', :steps => ['distill flask of hazy green liquid essence'], },

        #
        # forage for reagants
        #
        { :product => 'bone mushroom',              :steps => ['forage'] },
        { :product => 'some acantha leaf',          :steps => ['forage'] },
        { :product => 'rose-marrow root',           :steps => ['forage'] },
        { :product => 'some ambrominas leaf',       :steps => ['forage'] },
        { :product => 'some cactacae spine',        :steps => ['forage'] },
        { :product => 'some aloeas stem',           :steps => ['forage'] },
        { :product => 'some haphip root',           :steps => ['forage'] },
        { :product => 'some pothinir grass',        :steps => ['forage'] },
        { :product => 'some basal moss',            :steps => ['forage'] },
        { :product => 'some ephlox moss',           :steps => ['forage'] },
        { :product => 'some calamia fruit',         :steps => ['forage'] },
        { :product => 'some sovyn clove',           :steps => ['forage'] },
        { :product => 'some wolifrew lichen',       :steps => ['forage'] },
        { :product => 'some woth flower',           :steps => ['forage'] },
        { :product => 'some torban leaf',           :steps => ['forage'] },
        { :product => 'ayana leaf',                 :steps => ['forage'] },
        { :product => 'tkaro root',                 :steps => ['forage'] },
        { :product => 'pepperthorn root',           :steps => ['forage'] },
        { :product => 'some talneo root',           :steps => ['forage'] },
        { :product => 'luckbloom blossom',          :steps => ['forage'] },
        { :product => 'wavepetal blossom',          :steps => ['forage'] },
        { :product => 'red trafel mushroom',        :steps => ['forage in sunlight'] },
        { :product => 'slender twig',               :steps => ['forage'] },
        { :product => 'yabathilium fruit',          :steps => ['forage'] },
        { :product => 'small daisy',                :steps => ['forage'] },
        { :product => 'cuctucae berry',             :steps => ['forage'] },
        { :product => 'some bolmara lichen',        :steps => ['forage'] },
        { :product => 'some rose-marrow root',      :steps => ['forage'] },
        { :product => 'nightshade berry',           :steps => ['forage'] },
        { :product => 'sprig of larkspur',          :steps => ['forage'] },
        { :product => 'some brostheras grass',      :steps => ['forage'] },
        { :product => 'some wingstem root',         :steps => ['forage'] },
        { :product => 'sprig of foxglove',          :steps => ['forage'] },
        { :product => 'blue trafel mushroom',       :steps => ['forage'] },
        { :product => 'sprig of lavender',          :steps => ['forage'] },
        { :product => 'some cothinar flower',       :steps => ['forage'] },
        { :product => 'marallis berry',             :steps => ['forage'] },
        { :product => 'ironfern root',              :steps => ['forage'] },
        { :product => 'some valerian root',         :steps => ['forage'] },
        { :product => 'large white gardenia',       :steps => ['forage'] },
        { :product => 'murdroot',                   :steps => ['forage'] },
        { :product => 'glowing firefly',            :steps => ['forage'] },
        { :product => 'giant glowing toadstool',    :steps => ['forage'] },
        { :product => 'Elanthian snow rose',        :steps => ['forage'] },
        { :product => 'crimson dragonstalk',        :steps => ['forage'] },
        { :product => 'fairy primrose',             :steps => ['forage'] },
        { :product => 'witchwood twig',             :steps => ['forage'] },
        { :product => 'sprig of columbine',         :steps => ['forage'] },
        { :product => 'handful of pinenuts',        :steps => ['forage'] },
        { :product => 'some bur-clover root',       :steps => ['forage'] },
        { :product => 'water chestnut',             :steps => ['forage'] },
        { :product => 'handful of oats',            :steps => ['forage'] },
        { :product => 'pale yellow daffodil',       :steps => ['forage'] },
        { :product => 'pink rain lily',             :steps => ['forage'] },
        { :product => 'stick',                      :steps => ['forage'] },
        { :product => 'sprig of holly',             :steps => ['forage'] },
        { :product => 'white hook mushroom',        :steps => ['forage in moonlight'] },
        { :product => 'blue poppy',                 :steps => ['forage'] },
        { :product => 'yellow passionflower',       :steps => ['forage'] },
        { :product => 'sprig of wild lilac',        :steps => ['forage'] },
        { :product => 'strand of seaweed',          :steps => ['forage'] },
        { :product => 'some cave moss',             :steps => ['forage'] },
        { :product => 'striped heart mushroom',     :steps => ['forage in sunlight'] },
        { :product => 'white clover blossom',       :steps => ['forage'] },
        { :product => 'wood violet',                :steps => ['forage'] },
        { :product => 'soft white mushroom',        :steps => ['forage'] },
        { :product => 'bloodwood twig',             :steps => ['forage'] },
        { :product => 'twisted twig',               :steps => ['forage'] },
        { :product => 'some wheat grass',           :steps => ['forage'] },
        { :product => 'yew twig',                   :steps => ['forage'] },
        { :product => 'sunburst blossom',           :steps => ['forage in sunlight'] },
        { :product => 'nightbloom blossom',         :steps => ['forage in moonlight'] },
        { :product => 'willow twig',                :steps => ['forage'] },
        { :product => 'genkew mushroom',            :steps => ['forage'] },
        { :product => 'ebony twig',                 :steps => ['forage'] },
        { :product => 'stargazer lily',             :steps => ['forage'] },
        { :product => 'fragrant white lily',        :steps => ['forage'] },
        { :product => "ayana'al leaf",              :steps => ['forage'] },
        { :product => 'oak twig',                   :steps => ['forage'] },
        { :product => 'sweetfern stalk',            :steps => ['forage'] },
        { :product => 'red poppy',                  :steps => ['forage'] },
        { :product => 'pine cone',                  :steps => ['forage'] },
        { :product => 'small wild rose',            :steps => ['forage'] },
        { :product => 'some alder bark',            :steps => ['forage'] },
        { :product => 'some orchil lichen',         :steps => ['forage'] },
        { :product => 'stalk of bluebells',         :steps => ['forage'] },
        { :product => 'some blackened moss',        :steps => ['forage'] },
        { :product => 'coppery rain lily',          :steps => ['forage'] },
        { :product => 'some longgrass',             :steps => ['forage'] },
        { :product => 'oxblood lily',               :steps => ['forage'] },
        { :product => 'sprig of mournbloom',        :steps => ['forage'] },
        { :product => 'some red lichen',            :steps => ['forage'] },
        { :product => 'handful of walnuts',         :steps => ['forage'] },
        { :product => 'some arctic moss',           :steps => ['forage'] },
        { :product => 'cluster of woad leaves',     :steps => ['forage'] },
        { :product => 'yellow clover blossom',      :steps => ['forage'] },
        { :product => 'layer of onion skin',        :steps => ['forage'] },
        { :product => 'cluster of gorse',           :steps => ['forage'] },
        { :product => 'bright red cranberry',       :steps => ['forage'] },
        { :product => 'orange begonia',             :steps => ['forage'] },
        { :product => 'wild beechnut',              :steps => ['forage'] },
        { :product => 'pine cone',                  :steps => ['forage'] },
        { :product => 'pink hydrangea',             :steps => ['forage'] },
        { :product => 'heath aster',                :steps => ['forage'] },
        { :product => 'wild orchid',                :steps => ['forage'] },
        { :product => 'wild pansy blossom',         :steps => ['forage'] },
        { :product => 'small dandelion',            :steps => ['forage'] },
        { :product => 'golden hook mushroom',       :steps => ['forage'] },
        { :product => 'some fetid black slime',     :steps => ['forage'] },
        { :product => 'mass of congealed slime',    :steps => ['forage'] },
        { :product => 'tiger lily',                 :steps => ['forage'] },
        { :product => 'red clover blossom',         :steps => ['forage'] },
        { :product => 'ginger root',                :steps => ['forage'] },
        { :product => 'stalk of goldenrod',         :steps => ['forage'] },
        { :product => 'some blue moss',             :steps => ['forage'] },
        { :product => 'luminescent green fungus',   :steps => ['forage'] },
        { :product => 'some shadowlace moss',       :steps => ['forage'] },
        { :product => 'red passionflower',          :steps => ['forage'] },
        { :product => 'black-tipped wyrm thorn',    :steps => ['forage'] },
        { :product => 'some petrified shadowstalk', :steps => ['forage'] },
        { :product => 'bloodthorn stem',            :steps => ['forage'] },
        { :product => 'golden buttercup',           :steps => ['forage'] },
        { :product => 'flathead mushroom',          :steps => ['forage'] },
        { :product => 'blue passionflower',         :steps => ['forage'] },
        { :product => 'some angelica root',         :steps => ['forage'] },
        { :product => 'some strigae cactus',        :steps => ['forage'] },
        { :product => 'golden aster',               :steps => ['forage'] },
        { :product => 'trollfear mushroom',         :steps => ['forage in moonlight'] },
        { :product => 'moonlight cactus-bloom',     :steps => ['forage in moonlight'] },

        #
        # kill for reagents
        #
        { :product => "pristine nymph's hair",        :steps => ['kill sea nymph'],           },
        { :product => 'skeletal giant bone',          :steps => ['kill skeletal giant'],      },
        { :product => 'giant skin',                   :steps => ['kill storm giant'],         },
        { :product => 'cockatrice plume',             :steps => ['kill plumed cockatrice'],   },
        { :product => 'wight skin',                   :steps => ['kill arch wight'],          },
        { :product => 'ghoul nail',                   :steps => ['kill lesser ghoul'],        },
        { :product => 'bear paw',                     :steps => ['kill red bear'],            },
        { :product => 'wraith talon',                 :steps => ['kill wraith'],              },
        { :product => 'ghoul finger',                 :steps => ['kill ghoul master'],        },
        { :product => 'mist wraith eye',              :steps => ['kill mist wraith'],         },
        { :product => 'wight skull',                  :steps => ['kill lesser moor wight'],   },
        { :product => 'wight mane',                   :steps => ['kill greater moor wight'],  },
        { :product => 'kappa fin',                    :steps => ['kill greater kappa'],       },
        { :product => 'bear hide',                    :steps => ['kill black bear'],          },
        { :product => 'troll heart',                  :steps => ['kill war troll'],           },
        { :product => 'ogre tooth',                   :steps => ['kill ogre warrior'],        },
        { :product => 'stone-grey lizard tail',       :steps => ['kill cave lizard'],         },
        { :product => 'troll toe',                    :steps => ['kill mountain troll'],      },
        { :product => 'troll skin',                   :steps => ['kill cave troll'],          },
        { :product => 'cougar tail',                  :steps => ['kill cougar'],              },
        { :product => 'tawny brindlecat hide',        :steps => ['kill tawny brindlecat'],    },
        { :product => 'spotted leopard pelt',         :steps => ['kill mastodonic leopard'],  },
        { :product => 'ogre nose',                    :steps => ['kill mountain ogre'],       },
        { :product => 'cyclops eye',                  :steps => ['kill cyclops'],             },
        { :product => 'mottled faeroth crest',        :steps => ['kill lesser faeroth'],      },
        { :product => 'ghoul scraping',               :steps => ['kill greater ghoul'],       },
        { :product => 'spider leg',                   :steps => ['kill greater spider'],      },
        { :product => 'warcat whisker',               :steps => ['kill striped warcat'],      },
        { :product => 'golem bone',                   :steps => ['kill bone golem'],          },
        { :product => 'basilisk crest',               :steps => ['kill crested basilisk'],    },
        { :product => 'scaly burgee shell',           :steps => ['kill scaly burgee'],        },
        { :product => 'faintly glowing worm skin',    :steps => ['kill phosphorescent worm'], },
        { :product => 'silvery tail',                 :steps => ['kill shadow steed'],        },
        { :product => 'silver-tipped horseshoe',      :steps => ['kill shadow mare'],         },
        { :product => 'fire cat claw',                :steps => ['kill fire cat'],            },
        { :product => 'fire rat tail',                :steps => ['kill fire rat'],            },
        { :product => 'centaur hide',                 :steps => ['kill bay centaur'],         },
        { :product => 'centaur hide',                 :steps => ['kill white centaur'],       },
        { :product => 'centaur hide',                 :steps => ['kill tan centaur'],         },
        { :product => 'centaur hide',                 :steps => ['kill roan centaur'],        },
        { :product => 'centaur hide',                 :steps => ['kill black centaur'],       },
        { :product => 'snowy cockatrice tailfeather', :steps => ['kill snowy cockatrice'],    },
        { :product => 'glistening black eye',         :steps => ['kill dark shambler'],       },
        { :product => 'troll beard',                  :steps => ['kill hill troll'],          },
        { :product => 'mountain lion skin',           :steps => ['kill mountain lion'],       },
        { :product => 'shelfae crest',                :steps => ['kill shelfae chieftain'],   },
        { :product => 'silvery hoof',                 :steps => ['kill night mare'],          },
        { :product => 'vesperti claw',                :steps => ['kill vesperti'],            },
        { :product => 'yellowed boar tusk',           :steps => ['kill ridgeback boar'],      },
        { :product => 'vruul skin',                   :steps => ['kill lesser vruul'],        },
        { :product => 'soft blue griffin feather',    :steps => ['kill storm griffin'],       },
        { :product => 'myklian scale',                :steps => ['kill myklian'],             },
        { :product => 'silver mane',                  :steps => ['kill nightmare steed'],     },
        { :product => 'ursian tusk',                  :steps => ['kill tusked ursian'],       },
        { :product => 'viper fang',                   :steps => ['kill black forest viper'],  },
        { :product => 'tree viper fang',              :steps => ['kill tree viper'],          },
        { :product => 'tree viper fang',              :steps => ['kill hanging tree viper'],  },
        { :product => 'troll fang',                   :steps => ['kill troll chieftain'],     },
        { :product => 'goat hoof',                    :steps => ['kill mountain goat'],       },
        { :product => 'scraggly orc scalp',           :steps => ['kill plains orc warrior'],  },
        { :product => 'faeroth fang',                 :steps => ['kill greater faeroth'],     },
        { :product => 'fenghai fur',                  :steps => ['kill fenghai'],             },
        { :product => 'plains lion skin',             :steps => ['kill plains lion'],         },
        { :product => "roa'ter skin",                 :steps => ["kill roa'ter"],             },
        { :product => 'boar tusk',                    :steps => ['kill great boar'],          },
        { :product => 'tegu tailspike',               :steps => ['kill three-toed tegu'],     },
        { :product => 'tufted hawk-owl ear',          :steps => ['kill giant hawk-owl'],      },
        { :product => 'skeleton bone',                :steps => ['kill skeleton'],            },
        { :product => 'troll hide',                   :steps => ['kill forest troll'],        },
        { :product => 'ice troll scalp',              :steps => ['kill ice troll'],           },
        { :product => 'kobold skin',                  :steps => ['kill kobold'],              },
        { :product => 'troll tongue',                 :steps => ['kill hunter troll'],        },
        { :product => "pristine sprite's hair",       :steps => ['kill fire sprite'],         },
        { :product => 'some essence of fire',         :steps => ['kill fire sprite'],         },
        { :product => 'some essence of fire',         :steps => ['kill fire cat'],            },
        { :product => 'some essence of fire',         :steps => ['kill fire rat'],            },
        { :product => 'elemental core',               :steps => ['kill frost giant'],         },
        { :product => 'some essence of water',        :steps => ['kill frost giant'],         },
        { :product => 'some essence of water',        :steps => ['kill arctic titan'],        },
        { :product => 'some essence of water',        :steps => ['kill ice troll'],           },
        { :product => 'orc knuckle',                  :steps => ['kill Neartofar orc'],       },
        { :product => 'black leopard paw',            :steps => ['kill black leopard'],       },
        { :product => 'kiramon tongue',               :steps => ['kill kiramon defender'],    },
        { :product => 'ruff of raptor feathers',      :steps => ['kill dreadnought raptor'],  },
        { :product => "mummy's shroud",               :steps => ['kill lesser mummy'],        },
        { :product => 'mammoth arachnid mandible',    :steps => ['kill mammoth arachnid'],    },

        #
        # misc alchemy
        #
        { :product => 'ayanad crystal',   :steps => ['separate cluster of ayanad crystals']   },
        { :product => "s'ayanad crystal", :steps => ["separate cluster of s'ayanad crystals"] },
        { :product => "t'ayanad crystal", :steps => ["separate cluster of t'ayanad crystals"] },

      ]
    end

    def self.alchemy_equivalents
      [
        ['ayana leaf', 'ayana lichen', 'ayana weed', 'ayana berry', 'ayana root'],
        ["ayana'al leaf", "ayana'al lichen", "ayana'al weed", "ayana'al berry", "ayana'al root"],
        ['some ground ayana', 'some ground ayana leaf', 'some ground ayana lichen', 'some ground ayana weed', 'some ground ayana berry', 'some ground ayana root'],
        ['myklian scale', 'orange myklian scale', 'red myklian scale', 'yellow myklian scale', 'green myklian scale'],
        ['white pearl', 'large white pearl', 'medium white pearl', 'small white pearl', 'tiny white pearl'],
        ['black pearl', 'large black pearl', 'medium black pearl', 'small black pearl', 'tiny black pearl'],
        ['pink pearl', 'tiny pink pearl', 'small pink pearl', 'medium pink pearl', 'large pink pearl'],
        ['stick', 'thick stick', 'stained stick', 'slender stick', 'pointed stick', 'twisted stick', 'long stick', 'slim stick', 'charred stick', 'flexible stick', 'sturdy stick', 'dark stick', 'hefty stick', 'cracked stick', 'thin stick', 'small stick', 'bent stick', 'short stick', 'heavy stick'],
        ['vial of concentrated firethorn essence', 'vial concentrated firethorn essence'],
        ['some powdered blue eostone', 'some powdered deep blue eostone'],
        ['some powdered rhodochrosite stone', 'some powdered pink rhodochrosite stone'],
        ['some powdered chrysoberyl gem', 'some powdered bright chrysoberyl gem'],
        ['some powdered red-green bloodstone', 'some powdered dark red-green bloodstone'],
        ['some powdered malachite stone', 'some powdered green malachite stone'],
        ['some powdered spessartine garnet', 'some powdered orange spessartine garnet'],
        ['some powdered pink coral', 'some powdered polished pink coral'],
        ['some powdered blue coral', 'some powdered polished blue coral'],
        ['some powdered red coral', 'some powdered polished red coral'],
        ['some powdered water sapphire', 'some powdered pale water sapphire'],
        ['some powdered fire pearl', 'some powdered brilliant fire pearl'],
        ['some powdered cowrie shell', 'some powdered snake-head cowrie shell'],
        ['some powdered iridescent mother-of-pearl', 'some powdered iridescent piece of mother-of-pearl'],
        ['some powdered silvery conch shell', 'some powdered sparkling silvery conch shell'],
        ['some powdered imperial topaz', 'some powdered orange imperial topaz'],
        ['some powdered green moonstone', 'some powdered pale green moonstone'],
        ['some powdered pale blue moonstone', 'some powdered blue moonstone'],
        ['some powdered beryl gem', 'some powdered golden beryl gem'],
        ['crystalline globe', 'corked crystalline globe filled with glowing mineral water',],
        ['some ground sweetfern stalk', 'some mashed sweetfern stalk'],
        ['tkaro root', 'shiny tkaro root'],
        ['tufted hawk-owl ear', 'hawk-owl ear'],
        ['fire cat claw', 'cat claw'],
        ['troll tongue', 'pale troll tongue'],
        ['tiger lily', 'orange tiger lily'],
        ['some elemental core', 'elemental core'],
        ['dark pink rain lily', 'pink rain lily']
      ]
    end

    # average amount you can get for selling reagents; used as opportunity cost when determining the best (cheapest/fastest) recipe
    def self.alchemy_reagent_op_cost
      {
        "yellow hyacinth"                     => 0,
        "white sunstone"                      => 0,
        "emerald blazestar"                   => 0,
        "uncut maernstrike diamond"           => 0,
        "olivine feanor-bloom"                => 0,
        "white starstone"                     => 0,
        "cloud agate"                         => 0,
        "grey chalcedony"                     => 0,
        "white chalcedony"                    => 0,
        "shimmarglin sapphire"                => 0,
        "dragonseye sapphire"                 => 0,
        "white marble"                        => 0,
        "glossy black doomstone"              => 0,
        "pink dreamstone"                     => 0,
        "blue peridot"                        => 0,
        "green peridot"                       => 0,
        "blue spinel"                         => 0,
        "large yellow diamond"                => 0,
        "blue diamond"                        => 0,
        "uncut star-of-Tamzyrr diamond"       => 0,
        "white clam shell"                    => 0,
        "ruby-lined nassa shell"              => 0,
        "sea urchin shell"                    => 0,
        "scaly burgee shell"                  => 0,
        "faceted crystal crab shell"          => 0,
        "clear topaz"                         => 10,
        "rock crystal"                        => 10,
        "clear sapphire"                      => 20,
        "dark red-green bloodstone"           => 40,
        "clear zircon"                        => 25,
        "some polished blue coral"            => 30,
        "iridescent labradorite stone"        => 50,
        "black jasper"                        => 50,
        "almandine garnet"                    => 65,
        "rose quartz"                         => 80,
        "citrine quartz"                      => 80,
        "clear tourmaline"                    => 90,
        "blue starstone"                      => 100,
        "blue tourmaline"                     => 100,
        "black tourmaline"                    => 100,
        "azurite"                             => 100,
        "green tourmaline"                    => 110,
        "piece of golden amber"               => 150,
        "fire agate"                          => 180,
        "fire opal"                           => 186,
        "bright chrysoberyl gem"              => 400,
        "deep purple amethyst"                => 220,
        "golden beryl gem"                    => 240,
        "white jade"                          => 250,
        "aquamarine gem"                      => 350,
        "some polished pink coral"            => 350,
        "some polished red coral"             => 362,
        "pink topaz"                          => 400,
        "pale water sapphire"                 => 800,
        "gold nugget"                         => 400,
        "turquoise stone"                     => 400,
        "green sphene"                        => 400,
        "snake-head cowrie shell"             => 450,
        "smoky topaz"                         => 500,
        "green malachite stone"               => 500,
        "pink rhodochrosite stone"            => 500,
        "blood red garnet"                    => 500,
        "brown jade"                          => 500,
        "iridescent piece of mother-of-pearl" => 500,
        "brown sphene"                        => 500,
        "golden topaz"                        => 600,
        "spiderweb turquoise"                 => 600,
        "blue lapis lazuli"                   => 600,
        "orange spessartine garnet"           => 700,
        "green garnet"                        => 700,
        "black sphene"                        => 700,
        "shimmertine shard"                   => 700,
        "orange imperial topaz"               => 800,
        "white opal"                          => 800,
        "green jade"                          => 800,
        "yellow sapphire"                     => 900,
        "green sapphire"                      => 900,
        "sparkling silvery conch shell"       => 900,
        "clear glimaerstone"                  => 900,
        "violet sapphire"                     => 1000,
        "smoky glimaerstone"                  => 1000,
        "fiery jacinth"                       => 1000,
        "green starstone"                     => 1000,
        "pale blue moonstone"                 => 1100,
        "pale green moonstone"                => 1100,
        "star ruby"                           => 1200,
        "star sapphire"                       => 1200,
        "rainbow quartz"                      => 1200,
        "deep blue eostone"                   => 2400,
        "cats-eye moonstone"                  => 1200,
        "bright bluerock"                     => 1200,
        "brilliant fire pearl"                => 1300,
        "pearl nautilus shell"                => 1300,
        "grey pearl"                          => 2000,
        "pink pearl"                          => 2103,
        "black opal"                          => 2388,
        "pink sapphire"                       => 2596,
        "white pearl"                         => 2500,
        "golden moonstone"                    => 2500,
        "Kezmonian honey beryl"               => 2703,
        "black pearl"                         => 2796,
        "moonglae opal"                       => 2800,
        "blue sapphire"                       => 3000,
        "dragonfire opal"                     => 3000,
        "uncut ruby"                          => 3110,
        "dragon's-tear diamond"               => 4600,
        "uncut diamond"                       => 5103,
        "uncut emerald"                       => 5280,
        "skeleton bone"                       => 0,
        "skeletal giant bone"                 => 0,
        "wraith talon"                        => 0,
        "lump of grey ambergris"              => 0,
        "some waxy grey caederine"            => 0,
        "aster opal"                          => 0,
        "copper fang"                         => 0,
        "silver fang"                         => 0,
        "troll hide"                          => 0,
        "troll beard"                         => 0,
        "ice troll scalp"                     => 0,
        "pale troll tongue"                   => 0,
        "troll scalp"                         => 0,
        "chipped troll tusk"                  => 0,
        "troll heart"                         => 450,
        "troll skin"                          => 0,
        "scraggly swamp troll scalp"          => 0,
        "giant skin"                          => 0,
        "cockatrice plume"                    => 0,
        "wight skin"                          => 0,
        "ghoul nail"                          => 0,
        "bear paw"                            => 0,
        "ghoul finger"                        => 0,
        "mist wraith eye"                     => 0,
        "wight skull"                         => 0,
        "wight mane"                          => 0,
        "kappa fin"                           => 150,
        "bear hide"                           => 285,
        "ogre tooth"                          => 0,
        "stone-grey lizard tail"              => 0,
        "troll toe"                           => 0,
        "cougar tail"                         => 0,
        "tawny brindlecat hide"               => 0,
        "spotted leopard pelt"                => 0,
        "ogre nose"                           => 0,
        "cyclops eye"                         => 0,
        "mottled faeroth crest"               => 0,
        "ghoul scraping"                      => 0,
        "spider leg"                          => 0,
        "warcat whisker"                      => 0,
        "golem bone"                          => 0,
        "basilisk crest"                      => 0,
        "faintly glowing worm skin"           => 0,
        "silvery tail"                        => 0,
        "silver-tipped horseshoe"             => 0,
        "fire cat claw"                       => 300,
        "fire rat tail"                       => 300,
        "centaur hide"                        => 450,
        "snowy cockatrice tailfeather"        => 150,
        "glistening black eye"                => 0,
        "mountain lion skin"                  => 530,
        "shelfae crest"                       => 116,
        "silvery hoof"                        => 1180,
        "vesperti claw"                       => 680,
        "yellowed boar tusk"                  => 0,
        "vruul skin"                          => 0,
        "soft blue griffin feather"           => 0,
        "myklian scale"                       => 241,
        "silver mane"                         => 0,
        "ursian tusk"                         => 0,
        "viper fang"                          => 0,
        "tree viper fang"                     => 0,
        "troll fang"                          => 0,
        "goat hoof"                           => 0,
        "scraggly orc scalp"                  => 0,
        "faeroth fang"                        => 0,
        "fenghai fur"                         => 0,
        "plains lion skin"                    => 0,
        "roa'ter skin"                        => 0,
        "boar tusk"                           => 218,
        "tegu tailspike"                      => 0,
        "tufted hawk-owl ear"                 => 0,
        "kobold skin"                         => 0,
        "orc knuckle"                         => 0,
        "black leopard paw"                   => 0,
        "kiramon tongue"                      => 0,
        "ruff of raptor feathers"             => 0,
        "mummy's shroud"                      => 0,
        "mammoth arachnid mandible"           => 0,
        "ayanad crystal"                      => 64,
        "crystal core"                        => 64,
        "cluster of ayanad crystals"          => 127,
        "elemental core"                      => 128,
        "cracked soulstone"                   => 150,
        "s'ayanad crystal"                    => 255,
        "some essence of air"                 => 255,
        "some essence of earth"               => 255,
        "some essence of fire"                => 255,
        "some essence of water"               => 255,
        "an essence of greater air"           => 5000,
        "an essence of greater earth"         => 5000,
        "an essence of greater fire"          => 5000,
        "an essence of greater water"         => 5000,
        "pristine nymph's hair"               => 255,
        "small troll tooth"                   => 319,
        "glimmering blue essence shard"       => 319,
        "some glimmering blue essence dust"   => 383,
        "glimmering blue mote of essence"     => 383,
        "cluster of s'ayanad crystals"        => 509,
        "glowing violet essence shard"        => 638,
        "crystalline globe"                   => 765,
        "t'ayanad crystal"                    => 893,
        "pristine sprite's hair"              => 893,
        "glowing violet mote of essence"      => 1148,
        "some glowing violet essence dust"    => 1148,
        "perfect myklian belly scale"         => 1275,
        "large troll tooth"                   => 1275,
        "vial of farlook vitreous humor"      => 1275,
        "inky necrotic core"                  => 1275,
        "tiny golden seed"                    => 1275,
        "cluster of t'ayanad crystals"        => 1785,
        "radiant crimson essence shard"       => 1913,
        "pristine siren's hair"               => 2040,
        "n'ayanad crystal"                    => 2678,
        "some radiant crimson essence dust"   => 3443,
        "radiant crimson mote of essence"     => 3443,
        "gleaming multicolored soulstone"     => 0,
      }
    end

    def self.elusive_reagent_cost
      {
        'cluster of ayanad crystals'        => 64,
        'ayanad crystal'                    => 128,
        'crystal core'                      => 128,
        'elemental core'                    => 255,
        "cluster of s'ayanad crystals"      => 255,
        'cracked soulstone'                 => 300, # fixme
        "s'ayanad crystal"                  => 510,
        'some essence of air'               => 510,
        'some essence of earth'             => 510,
        'some essence of fire'              => 510,
        'some essence of water'             => 510,
        "pristine nymph's hair"             => 510,
        'small troll tooth'                 => 638,
        'glimmering blue essence shard'     => 638,
        'some glimmering blue essence dust' => 765,
        'glimmering blue mote of essence'   => 765,
        "cluster of t'ayanad crystals"      => 892,
        'glowing violet essence shard'      => 1275,
        'crystalline globe'                 => 1530,
        "t'ayanad crystal"                  => 1785,
        "pristine sprite's hair"            => 1785,
        'glowing violet mote of essence'    => 2295,
        'some glowing violet essence dust'  => 2295,
        'perfect myklian belly scale'       => 2550,
        'large troll tooth'                 => 2550,
        'vial of farlook vitreous humor'    => 2550,
        'inky necrotic core'                => 2550,
        'tiny golden seed'                  => 2550,
        'radiant crimson essence shard'     => 3825,
        "pristine siren's hair"             => 4080,
        "n'ayanad crystal"                  => 5355,
        'some radiant crimson essence dust' => 6885,
        'radiant crimson mote of essence'   => 6885,
      }
    end
  end
end

# Util
module BlackArts
  module Util
    def self.help
      rows = []
      rows << ["#{$lich_char}#{Script.current.name}", "Runs guild tasks based on UI settings"]
      rows << [' ', ' ']
      rows << ["#{$lich_char}#{Script.current.name} setup", "UI configuration tool"]
      rows << ["#{$lich_char}#{Script.current.name} load", "Reloads settings from yaml file"]
      rows << ["#{$lich_char}#{Script.current.name} list", "Lists settings from yaml file"]
      rows << [' ', ' ']
      rows << ["#{$lich_char}#{Script.current.name} check   <recipe> x<amount>", "Checks if you have ingredients"]
      rows << ["#{$lich_char}#{Script.current.name} make    <recipe> x<amount>", "Makes a recipe a number of times"]
      rows << ["#{$lich_char}#{Script.current.name} prepare <recipe> x<amount>", "Prepares any sub-recipes needed"]
      rows << [' ', ' ']
      rows << ["#{$lich_char}#{Script.current.name} guild", "Travels to the alchemy administrator"]
      rows << ["#{$lich_char}#{Script.current.name} remove <alchemy|potions|trinkets>", "Trades task in"]
      rows << [' ', ' ']
      rows << ["#{$lich_char}#{Script.current.name} buy", "Buys consignment items"]
      rows << ["#{$lich_char}#{Script.current.name} clean", "Attempts to organize/sell alchemy items"]
      rows << ["#{$lich_char}#{Script.current.name} forage <herb to find> x<number>", "Forages herbs"]
      rows << ["#{$lich_char}#{Script.current.name} suggest", "Lists potential recipes for current tasks"]
      rows << [' ', ' ']
      rows << ["#{$lich_char}#{Script.current.name} --debug=<on|off>", "Turns debug on/off for troubleshooting"]
      rows << ["#{$lich_char}#{Script.current.name} finish", "Stops after the current task (script running)"]

      table = Terminal::Table.new :title => "BlackArts Help", :rows => rows
      table.align_column(1, :right)
      respond
      respond table
      respond
    end

    def self.add_commas(num)
      num.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
    end

    def self.all_sack_contents
      return (BlackArts.data.sacks["herb"].contents.to_a | BlackArts.data.sacks["reagent"].contents.to_a | BlackArts.data.sacks["default"].contents.to_a).uniq
    end

    def self.bags_to_check
      herb_sack_id = BlackArts.data.sacks["herb"].id
      default_sack_id = BlackArts.data.sacks["default"].id
      reagent_sack_id = BlackArts.data.sacks["reagent"].id

      if herb_sack_id == default_sack_id && default_sack_id == reagent_sack_id
        bags_to_check = nil
      elsif herb_sack_id != default_sack_id && default_sack_id == reagent_sack_id
        bags_to_check = BlackArts.data.sacks["default"].contents
      elsif herb_sack_id != default_sack_id && herb_sack_id != reagent_sack_id && default_sack_id != reagent_sack_id
        bags_to_check = BlackArts.data.sacks["reagent"].contents | BlackArts.data.sacks["default"].contents
      elsif herb_sack_id == reagent_sack_id && herb_sack_id != default_sack_id
        bags_to_check = BlackArts.data.sacks["default"].contents
      elsif herb_sack_id == default_sack_id && herb_sack_id != reagent_sack_id
        bags_to_check = BlackArts.data.sacks["reagent"].contents
      end

      return bags_to_check
    end

    def self.cast_spell(spell_no)
      return unless Spell[spell_no].known? && Spell[spell_no].affordable?
      return if BlackArts.data.settings[:no_magic].include?(spell_no)

      result = Spell[spell_no].cast

      if result =~ /Your magic fizzles ineffectually/
        Util.msg("info", ' Spell fizzled, adding to no magic room list')
        BlackArts.data.settings[:no_magic].push(spell_no)
        BlackArts.save_profile()
        echo
      end
    end

    def self.check_mana(amount)
      return if mana >= amount

      if Spell[9918].known? && !Spell[9012].active? && checkspirit(6 + [9912, 9913, 9914, 9916, 9916, 9916].count { |num| Spell[num].active? }) && BlackArts.data.settings[:use_wracking]
        Spell[9918].cast
      elsif Spell[9718].known? && BlackArts.data.settings[:use_sigil_power]
        Spell[9718].cast
      elsif Spell[9813].known? && !Effects::Cooldowns.active?("Symbol of Mana")
        Spell[9813].cast
      end

      return if mana >= amount

      Util.msg("yellow", ' Waiting for mana...')
      wait_until { mana >= amount }
    end

    def self.check_spirit
      needed_spirit = 3
      needed_spirit += 1 if Spell[9912].active?
      needed_spirit += 1 if Spell[9913].active?
      needed_spirit += 1 if Spell[9914].active?
      needed_spirit += 3 if Spell[9916].active?

      return if checkspirit(needed_spirit)

      if Char.prof =~ /Empath|Cleric/
        Util.get_lines("spell active", /<dialogData id='Active Spells'/)
        unless Effects::Spells.active?("Meditation")
          Util.msg("yellow", ' Meditating for faster spirit recovery...')

          result = fput "meditate"

          if result =~ /You are not able to enter a meditative trance/
            Spell[213].cast if Spell[213].known? && Spell[213].affordable?
            lines = Util.get_lines("sense", /You open your soul to the lesser/)
            if lines.any? { |l| l =~ /An obvious presence of peace saturates the area and a feeling of safety overwhelms you/ }
              result = fput "meditate"
            end
          end

          if result =~ /You kneel down and begin to meditate|You begin to meditate/
            waitfor 'You wake from your meditation', 'Your action interrupts your meditation'
          end

          until standing?
            fput 'stand'
            sleep 0.2
          end

          Util.get_lines("spell active", /<dialogData id='Active Spells'/)
        end
      end

      Util.msg("yellow", ' Waiting for spirit...')
      sleep 0.3 until checkspirit(needed_spirit)
    end

    def self.check_table(container)
      items = []

      lines = Util.get_lines("look on #{container}", /On the/)

      exist = %r{<a exist=(?:'|")(?<id>\d+)(?:'|") noun=(?:'|")(?<noun>.*?)(?:'|")>(?<name>.*?)</a>}
      lines.each do |line|
        line.scan(exist).each do |matches|
          unless items.any? { |item| item.id == GameObj.new(*matches).id } || container.id == GameObj.new(*matches).id
            items << GameObj.new(*matches)
          end
        end
      end

      return items
    end

    def self.sigil_concentration
      return unless BlackArts.data.settings[:use_sigil_concentration]
      return unless Spell[9714].known?
      return if stamina < 30
      return if Effects::Spells.time_left("Sigil of Concentration") > 3

      Spell[9813].cast
    end

    def self.eat_bread
      return if Effects::Spells.time_left("Manna") > 10

      if Spell[203].known? && Spell[203].affordable?
        Inventory.free_hands(both: true)

        Spell[203].cast
        sleep 0.5
        waitcastrt?
        item = [GameObj.right_hand, GameObj.left_hand].find { |i| i.noun != nil }

        while [GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id)
          fput "gobble my #{item.noun}"
          Util.wait_rt
        end

        Inventory.free_hands(both: true)
      end
    end

    def self.find_trash
      trashcan = nil

      can = Regexp.last_match(1) if Room.current.tags.find { |t| t =~ /meta:trashcan:(.*)/ }

      # Most common scenario - meta:trashcan is defined and GameObj.room_desc is available or trashcan is in GameObj.loot
      trashcan = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.name =~ Regexp.union(can.to_a) }
      return trashcan unless trashcan.nil?

      # Still here? Either the meta:can isn't defined or the room description isn't unavailable. Either way we have to use the noun.
      can = ["barrel", "bin", "basket", "bucket", "canister", "case", "casket", "crate", "hearth", "pit", "stump", "urn", "wastebasket", "wastebin", "wastecan"]
      trash = (Room.current.description.to_s + GameObj.loot.to_s).scan(Regexp.union(can)).uniq

      # Check to make sure it's actually a trashcan and not a custom disk/container
      trash.each { |item|
        lines = Util.get_lines("look in #{item}", /<container|I could not find what you were referring to.|The(.*?)is filled with a variety of garbage/)

        if lines.grep(/variety of garbage/).any?
          trashcan = GameObj.new(Regexp.last_match(1), item, item) if lines.find { |l| l =~ /^<container id='(-?[0-9]+)' title/ }
        end

        break unless trashcan.nil?
      }

      return trashcan
    end

    def self.distance(loc1, loc2)
      _previous, shortest_distances = Room[loc1].dijkstra
      distance = loc2 == 2300 ? shortest_distances[loc2] + 200 : shortest_distances[loc2]
      return distance
    end

    def self.find_next_guild
      current_town = BlackArts.data.current_room.find_nearest_by_tag("town")

      if current_town == 3668
        if UserVars.mapdb_fwi_trinket.nil?
          Util.msg("yellow", " Please set your FWI trinket in go2. \n")
          exit
        end

        Util.travel(3669)
        if UserVars.mapdb_fwi_return_room.nil?
          worn = GameObj[UserVars.mapdb_fwi_trinket].nil? ? false : true
          fput 'get my ' + UserVars.mapdb_fwi_trinket unless worn
          fput 'turn #' + GameObj[UserVars.mapdb_fwi_trinket].id
          fput 'stow my ' + UserVars.mapdb_fwi_trinket unless worn
        else
          Util.go2(UserVars.mapdb_fwi_return_room)
        end

        current_town = Room.current.find_nearest_by_tag("town")
      end

      if current_town.to_s.match?(/#{BlackArts.data.west_guilds.join('|')}/) && BlackArts.data.settings[:guild_travel] && BlackArts.data.west_guilds.length > 1
        locations = BlackArts.data.west_guilds
      elsif current_town.to_s.match?(/#{BlackArts.data.east_guilds.join('|')}/) && BlackArts.data.settings[:guild_travel] && BlackArts.data.east_guilds.length > 1
        locations = BlackArts.data.east_guilds
      else
        Util.go2("#{Char.prof.downcase} alchemy administrator")
        Util.msg("yellow", " Sleeping 1 minute before rechecking. \n")
        sleep 60
        return
      end

      next_town = nil
      closest_distance = nil

      locations.each do |loc|
        next if BlackArts.data.visited_towns.include?(loc)
        dist = Util.distance(current_town, loc)
        if next_town.nil? || dist < closest_distance.to_f
          next_town = loc
          closest_distance = dist
        end
      end

      if next_town.nil?
        BlackArts.data.visited_towns = [BlackArts.data.start_town]
        next_town = BlackArts.data.start_town
      end

      next_guild = Room[next_town].find_nearest_by_tag("#{Char.prof.downcase} alchemy administrator")

      Util.msg("debug", "Util.find_next_guild: next_guild - #{next_guild}")

      BlackArts.data.visited_towns << next_town
      Util.travel(next_guild)
    end

    def self.find_workshops
      location_list = BlackArts.data.current_room.find_all_nearest_by_tag("#{Char.prof.downcase} alchemy workshop")
      _previous, shortest_distances = BlackArts.data.current_room.dijkstra
      location_list.delete_if { |room_id| shortest_distances[room_id].nil? || shortest_distances[room_id].to_i > 10 }
      location_list = location_list.sort { |a, b| shortest_distances[a] <=> shortest_distances[b] }

      if location_list.empty?
        Util.msg('error', "** Unable to find workshops for #{Char.prof} **")
        exit
      end

      return location_list
    end

    def self.fix_name(foragename)
      if foragename =~ /\w+ of (.*?)$/ then foragename = $1
      elsif foragename.include?('iceblossom') then foragename = 'iceblossom'
      elsif foragename.include?('stick') then foragename = 'stick'
      elsif foragename.include?('mold') then foragename = 'mold'
      elsif foragename == 'twisted black mawflower' then foragename = 'mawflower'
      elsif foragename == 'small green olive' then foragename = 'green olive'
      elsif foragename == 'oozing fleshsore bulb' then foragename = 'fleshsore bulb'
      elsif foragename == 'rotting bile green fleshbulb' then foragename = 'fleshbulb'
      elsif foragename == 'discolored fleshbinder bud' then foragename = 'fleshbinder bud'
      elsif foragename == 'slime-covered grave blossom' then foragename = 'grave blossom'
      elsif foragename == 'fragrant white lily' then foragename = 'white lily'
      elsif foragename == 'trollfear mushroom' then foragename = 'mushroom'
      elsif foragename == 'vermilion fire lily' then foragename = 'fire lily'
      elsif foragename == 'orange tiger lily' then foragename = 'tiger lily'
      elsif foragename == 'golden flaeshorn berry' then foragename = 'flaeshorn berry'
      elsif foragename == 'white alligator lily' then foragename = 'alligator lily'
      elsif foragename == 'dark pink rain lily' then foragename = 'pink rain lily'
      elsif foragename == 'white spider lily' then foragename = 'spider lily'
      elsif foragename == 'large black toadstool' then foragename = 'black toadstool'
      elsif foragename == 'glowing green lichen' then foragename = 'green lichen'
      elsif foragename == 'luminescent green fungus' then foragename = 'green fungus'
      elsif foragename == 'black-tipped wyrm thorn' then foragename = 'wyrm thorn'
      elsif foragename == 'fetid black slime' then foragename = 'black slime'
      elsif foragename == 'gnarled pandanus twig' then foragename = 'pandanus twig'
      elsif foragename == 'giant glowing toadstool' then foragename = 'glowing toadstool'
      elsif foragename == 'waxy banana leaf' then foragename = 'banana leaf'
      end

      return foragename
    end

    def self.get_backroom
      menu = Util.read_menu
      return if menu["smooth stone"]

      Inventory.free_hands(both: true)

      Util.silver_withdraw(1000)

      Util.travel(8664)

      begin
        20.times { multifput "order 3", "buy", "put my belt pouch in ##{BlackArts.data.sacks["default"].id}" }

        Util.travel(229)

        20.times { multifput "get belt pouch from ##{BlackArts.data.sacks["default"].id}", "put my pouch in barrel" }

        Util.travel(8664)
        menu = read_menu
        raise if menu["smooth stone"] == nil
      rescue
        retry
      end

      Util.silver_deposit

      Util.travel(8664)
    end

    def self.get_note(need_note = false)
      GameObj.inv.each { |item|
        if GameObj.containers[item.id]
          BlackArts.data.note = item.contents.find { |i| BlackArts.data.note_names.any? { |s| s.include?(i.name) } }
          break if BlackArts.data.note
        end
      }

      return if BlackArts.data.settings[:no_bank]

      if BlackArts.data.note
        note_amount = Util.read_note
        need_note = true unless note_amount >= BlackArts.data.note_refresh
      else
        need_note = true
      end

      return unless need_note

      Util.travel('bank')

      Util.silver_deposit('all')
      result = dothistimeout "withdraw #{BlackArts.data.note_withdrawal} note", 5, /^The teller carefully records the transaction|Very well|The teller hands you the coins|The teller makes some marks on a blank note and hands|The teller makes a few scribblings|The teller taps her quill thoughtfully|seem to have that much/

      if result =~ /seem to have that much/
        Util.msg('error', "** Insufficient funds! Exiting **")
        exit
      end

      BlackArts.data.note = [GameObj.right_hand, GameObj.left_hand].find { |i| BlackArts.data.note_names.any? { |s| s.include?(i.name) } }

      Inventory.single_drag(BlackArts.data.note)
    end

    def self.in_town?(room = BlackArts.data.current_room.id)
      locations = Set.new(
        [
          "Cysaegir",
          "Icemule Trace",
          "Kharam-Dzu",
          "Mist Harbor",
          "Moonshine Manor",
          "Solhaven",
          "Ta'Illistim Embassies",
          "Ta'Illistim",
          "Ta'Vaalor Inns",
          "Ta'Vaalor",
          "Wehnimer's Landing",
          "Zul Logoth",
          "the town of Icemule Trace",
          "the town of Kharam-Dzu",
          "the town of River's Rest",
          "the town of Solhaven",
          "the town of Sylvarraend",
          "the town of Wehnimer's Landing",
          "the village of Cysaegir",
          "the city of Ta'Illistim",
          "the city of Ta'Vaalor",
          "the hamlet of Ravelin",
        ]
      )

      pattern = /inside the (?:.* town|glacier-locked|elven city|elven fortress)|Guild$/

      # Because room descriptions are disabled in TSC all the time...
      rooms = Set.new(
        [
          "[Town Square Central]"
        ]
      )

      title = XMLData.room_title
      return true if rooms.include?(title)

      rm = Room[room]
      return false unless rm and rm.id

      if rm.location
        return true if locations.include?(rm.location)
        return true if pattern =~ rm.location
      end

      return false
    end

    def self.issue_command(command, start_pattern, loud = true, end_pattern = /<prompt/, include_end = false, timeout = 5)
      result = []
      name = "Sell:: -#{Time.now.tv_sec}.#{Time.now.tv_usec}-#{Random.rand(10000)}"
      filter = false
      save_want_downstream = Script.current.want_downstream
      save_want_downstream_xml = Script.current.want_downstream_xml
      Script.current.want_downstream = false
      Script.current.want_downstream_xml = true

      begin
        Timeout::timeout(timeout, Interrupt) {
          DownstreamHook.add(name, proc { |xml|
            is_loud = loud ? xml : nil
            if filter
              if xml =~ end_pattern
                DownstreamHook.remove(name)
                filter = false
              else
                next(is_loud)
              end
            elsif xml =~ start_pattern
              filter = true
              next(is_loud)
            else
              next(is_loud)
            end
          })
          if loud
            fput command
          else
            $_SERVER_.puts command
          end
          until (xml = get) =~ start_pattern; end
          result << xml.rstrip
          until (xml = get) =~ end_pattern
            result << xml.rstrip
          end
          if include_end
            result << xml.rstrip
          end
        }
      rescue Interrupt
        nil
      ensure
        DownstreamHook.remove(name)
        Script.current.want_downstream_xml = save_want_downstream_xml
        Script.current.want_downstream = save_want_downstream
      end

      return result
    end

    def self.is_workshop
      Room.current.tags.include?("#{Char.prof.downcase} alchemy workshop")
    end

    def self.get_command(command, regex)
      lines = []
      regex = Regexp.union(regex, /\.\.\.wait (\d+) [Ss]ec(?:onds)?\./)

      loop {
        Util.wait_rt
        lines = Util.issue_command(command, regex)
        break unless lines.any? { |l| l =~ /\.\.\.wait (\d+) [Ss]ec(?:onds)?\./i }
      }

      return lines
    end

    def self.get_lines(command, regex)
      lines = []
      regex = Regexp.union(regex, /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./)

      loop {
        Util.wait_rt
        lines = Lich::Util.quiet_command_xml(command, regex)
        break unless lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
      }

      return lines
    end

    def self.get_res(command, regex = nil)
      rt_regex = /(?:Roundtime:|\.\.\.wait|Wait) (\d+) [Ss]ec(?:onds?)?\.?/
      regex = regex.nil? ? Regexp.union(/.*?/, rt_regex) : Regexp.union(regex, rt_regex)

      result = nil
      loop {
        Util.wait_rt
        result = dothistimeout(command, 3, regex)
        Util.msg("debug", "Util.get_res: command - #{command} | result - #{result}")
        break unless result =~ rt_regex
      }

      return result
    end

    def self.go2(place)
      fput('unhide') if (hidden? || invisible?)

      return if Room.current.id == place.to_i || Room.current.tags.include?(place)

      move "out" if checkpaths and checkpaths.include?('out')
      Util.mapped_room

      Script.run('go2', "#{place} --disable-confirm", { quiet: true })
    end

    def self.is_moonlight
      !Util.is_sunlight
    end

    def self.is_sunlight
      seconds = (XMLData.server_time - (5 * 60 * 60)) % (60 * 60 * 24) # seconds since midnight, elven time standard
      hours = seconds / (60 * 60)
      seconds = seconds % (60 * 60)
      minutes = seconds / 60

      if ((hours > 6) || ((hours == 6) and (minutes > 30))) && (hours < 18)
        return true
      elsif (hours < 5) || (hours > 20)
        return false
      end
    end

    def self.jar_count(jar)
      lines = Util.get_lines("look in ##{jar.id}", /Inside .*? you see [0-9]+ portions?|is empty/)
      amount = lines[0].scan(/[0-9]+/)[1].to_i
      return amount
    end

    def self.mapped_room
      return if !Room.current.nil?
      while Room.current.id.nil?
        move checkpaths.sample
      end
    end

    def self.msg(type = info, text)
      # color options - set type to use
      # yellow, orange, teal, green, plain

      return if type == "debug" && !BlackArts.data.settings[:debug]

      if text.class == Hash
        text = text.inspect.gsub("#<", "#")
      elsif text.class == Array
        text = text.to_s
      elsif text.class == String
        text = text.gsub("#<", "#")
      end

      type = type == "debug" ? "speech" : type

      Lich::Messaging.msg(type, text)
    end

    def self.no_recipe
      Util.msg('error', " Failed to find a decent recipe: (use ';blackarts suggest' to help figure out why)")
      Guild.get_cauldron
      exit
    end

    def self.only_forage(options)
      if options[2].nil?
        Util.msg "yellow", ' To use this option - ;blackarts forage (herb to find) x<number>'
        Util.msg "yellow", ' Ex ;blackarts forage acantha leaf x5'
        exit
      end

      repetitions = (options[2..-1].find { |var| var =~ /^[Xx][0-9]+$/ }.sub(/[Xx]/, '') || 1).to_i
      herb_string = options[2..-1].join(' ').gsub(/x\d+\z/, '').strip

      return_room = Room.current.id

      forage_list = { herb_string => repetitions }
      Actions.forage(forage_list)
      Util.travel(return_room)
      Hunting.post_hunt
    end

    def self.prep_create(options)
      check_info = nil
      if options[2].nil?
        Util.msg('yellow', ' To use this option - ;Blackarts (check|prepare|make) <potion> x<repetions>')
        Util.msg "yellow", ' Ex ;blackarts check tincture of acantha x5'
        exit
      end

      check_only = options[1].downcase == 'check' ? true : false
      prepare_only = options[1].downcase == 'prepare' ? true : false

      repetitions = (options[2..-1].find { |var| var =~ /^[Xx][0-9]+$/ }.sub(/[Xx]/, '') || 1).to_i
      options.delete_if { |line| line =~ /^[Xx]([0-9]+)$/ }

      duplicate = (options[2..-1].find { |var| var =~ /^recipe:[0-9]+$/i }.sub(/recipe:/i, '') || nil).to_i
      options.delete_if { |line| line =~ /^recipe:[0-9]+$/i }

      search_string = options[2..-1].join(' ')

      matching_recipes = BlackArts.data.recipes.select do |r|
        [r[:product], r[:nick], r[:spell]].any? do |attr|
          attr =~ /^#{search_string}$/i || attr =~ /#{search_string}/i
        end
      end

      if matching_recipes.length.zero?
        Util.msg('error', ' No matching recipe')
        Script.self.kill
      end

      if matching_recipes.length > 1 && duplicate.zero?
        Util.msg('error', " Matching Recipes: #{search_string} (#{matching_recipes.length})")
        Util.msg('error', " Please restart: ;Blackarts (check|prepare|make) <potion> x<repetions> recipe:<number>")

        matching_recipes.each_with_index do |recipe, recipe_no|
          check_info = Guild.check_recipe(recipe: recipe, reps: repetitions, prep_create: true)
          Util.show_check(check_info, recipe_no + 1)
        end

        Script.self.kill
        sleep 5
      end

      recipe = matching_recipes.length > 1 ? matching_recipes[duplicate - 1] : matching_recipes[0]
      check_info = Guild.check_recipe(:recipe => recipe, :reps => repetitions, :prep_create => true)
      Util.show_check(check_info)

      if check_info[:error].empty? && !check_only
        Util.msg('yellow', ' Starting in...')
        3.downto(1) do |i|
          Util.msg('yellow', " #{i}")
          sleep 1
        end

        Inventory.free_hands(both: true)
        return_room = Room.current.id

        Actions.get_supplies(check_info)
        Actions.go_empty_workshop

        if prepare_only
          Tasks.do_steps(check_info[:prepare_steps])
        else
          Tasks.do_steps(check_info[:steps])
        end

        Guild.get_cauldron

        Util.travel(return_room)
      end
    end

    def self.read_menu
      lines = Util.get_lines("order", /<output class="mono"\/>/)

      menu = Hash.new

      lines.each { |line|
        for item in line.scan(/<d.*?cmd=["']order ([0-9]+).*?>(.*?)<\/d>/)
          menu[item[1].sub(/^an? /, '')] = item[0]
        end
      }
      Util.msg("debug", "Util.menu: menu - #{menu}")
      return menu
    end

    def self.read_note
      lines = Util.get_lines("read #{BlackArts.data.note}", /Hold in right hand to use/)

      if lines.any? { |l| l =~ /has a value of (.*?) silver and reads/ }
        result = $1.delete(",").to_i
      end

      return result
    end

    def self.sell_item(item)
      return if item.nil? || item.name == "Empty"

      Inventory.drag(item)

      lines = Util.get_res("sell ##{item.id}", /You (offer to sell|ask)/)

      if lines =~ /I have no use for that|That's not quite my field|That's basically worthless here|Can't say I'm interested in that|This is a pawnshop, sir, not a junkshop|The company don't buy trash|as if you were a lunatic/
        Inventory.store_item(BlackArts.data.sacks["default"], item)
        return
      end

      20.times {
        break if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id))
        sleep 0.1
      }
    end

    def self.set_hooks
      original_once = BlackArts.data.settings[:once_and_done]

      finish = proc { |server_string|
        if server_string =~ /^(?:<c>)?;bla(.*)finish(.*)/i
          BlackArts.data.settings[:once_and_done] = true
          Util.msg("info", " BlackArts will exit after the next task is completed")
        elsif server_string =~ /Please rephrase that command/
          nil
        else
          server_string
        end
      }

      UpstreamHook.add('stop_alchemy', finish)

      before_dying {
        UpstreamHook.remove('stop_alchemy')
        BlackArts.data.settings[:once_and_done] = original_once
      }
    end

    def self.set_needed_reagents
      ingredient_list = Array.new
      check_proc = proc { |recipe|
        for step in recipe[:steps]
          if step =~ /^(?:add|grind|extract|distill|separate)\s+(.*)/
            ingredient_name = $1
            next if ingredient_name =~ /spirit shard/
            ingredient_list.push(ingredient_name) unless ingredient_list.include?(ingredient_name)
            if (equivalent_names = Recipes.alchemy_equivalents.find { |list| list.include?(ingredient_name) })
              for equivalent_name in equivalent_names
                ingredient_list.push(equivalent_name) unless ingredient_list.include?(equivalent_name)
              end
            end
            for sub_recipe in BlackArts.data.recipes.find_all { |r| r[:product] == ingredient_name }
              check_proc.call(sub_recipe)
            end
          end
        end
      }

      BlackArts.data.settings[:item_include].each { |ingredient| ingredient_list.push(ingredient) unless ingredient_list.include?(ingredient) }

      guild_status = Guild.gld
      for type in guild_status.keys
        for recipes in BlackArts.data.recipes.find_all { |recipe| @settings['favorite-recipes'].include?(recipe[:product]) || ((recipe[:product] != 'flask of pure water') && recipe[:type].include?(type) && recipe[:rank] && (guild_status[type][:rank] <= 62) && (guild_status[type][:rank] >= recipe[:rank].min) && (guild_status[type][:rank] <= recipe[:rank].max)) }
          check_proc.call(recipes)
        end
      end
      for product in @settings['favorite-recipes']
        ingredient_list.push(product) unless ingredient_list.include?(product)
      end
      if ingredient_list.empty?
        UserVars.delete('needed_reagents')
      else
        UserVars.needed_reagents = "^#{ingredient_list.join('$|^')}$"
      end
      # Util.msg("info", "Util.set_needed_reagents: ingredient_list - #{ingredient_list}")
    end

    def self.set_variables(check_equipment = true, just_basic = false)
      is_error = false

      # Sort the skills
      BlackArts.data.settings[:skill_types].sort!

      # Set guild groups for travel
      BlackArts.data.start_town = Room[Room.current.find_nearest_by_tag("town")].id
      BlackArts.data.visited_towns = [BlackArts.data.start_town]
      BlackArts.data.west_guilds.delete_if { |id| !BlackArts.data.cities.include?(id) || (id == 3668 && UserVars.mapdb_fwi_trinket.nil?) }
      BlackArts.data.east_guilds.delete_if { |id| !BlackArts.data.cities.include?(id) || (id == 3668 && UserVars.mapdb_fwi_trinket.nil?) }

      # Set Home Guild
      if BlackArts.data.settings[:home_guild] == 'Closest' || BlackArts.data.settings[:home_guild].nil? || BlackArts.data.settings[:home_guild].empty?
        BlackArts.data.current_admin = Room.current.find_nearest_by_tag("#{Char.prof.downcase} alchemy administrator")
      else
        guild_town = Map.list.find { |room| room.location.to_s =~ /#{BlackArts.data.settings[:home_guild]}/ }
        BlackArts.data.current_admin = guild_town.find_nearest_by_tag("#{Char.prof.downcase} alchemy administrator")
      end

      return if BlackArts.data.settings[:no_alchemy]
      return if just_basic

      required_scripts = %w(bigshot eloot eherbs)
      required_scripts_missing = required_scripts.select { |s| !Script.exists?(s) }
      if required_scripts_missing.count > 0
        Util.msg('error', " You must download and configure the following script#{required_scripts_missing.count > 1 ? 's' : ''} to use BlackArts:  " + required_scripts_missing.join(', '))
        exit
      end

      # Find the Containers we need: default, reagent, herb
      container_match = /<a exist="([^"]+)" noun="[^"]+">[^(.]+\(([a-z]+)\)/
      loop {
        container_lines = Util.get_lines("stow list", /<output class="mono"\/>/)

        container_lines.each { |line|
          if line =~ container_match
            BlackArts.data.sacks.store(Regexp.last_match(2), GameObj.inv.find { |i| i.id == Regexp.last_match(1) })
            BlackArts.data.sacks.delete(Regexp.last_match(2)) unless BlackArts.data.sacks[Regexp.last_match(2)]
          end
        }

        if container_lines.any? { |l| l =~ /(none)/ }
          Util.msg('error', " No containers are set. Please see the ingame 'stow' command")
          is_error = true
        elsif !container_lines.any? { |l| l =~ /default/ }
          Util.msg('error', " Set stow container using STOW SET before using this script")
          is_error = true
        elsif !container_lines.any? { |l| l =~ /You have the following containers set as stow targets/ }
          Util.msg("info", " Stow containers didn't load right. Trying again!")
          next
        else
          break
        end
      }

      if !BlackArts.data.sacks["herb"]
        Util.msg('error', ' The herb container is not set. Please use STOW SET in-game.')
        is_error = true
      end
      if !BlackArts.data.sacks["reagent"]
        Util.msg('error', ' The reagent container is not set. Please use STOW SET in-game.')
        is_error = true
      end
      if !BlackArts.data.sacks["default"]
        Util.msg('error', ' The default container is not set. Please use STOW SET in-game.')
        is_error = true
      end
      exit if is_error

      # Make sure we have the contents
      ['herb', 'reagent', 'default'].each { |sack|
        Inventory.open_single_container(sack)
      }

      if check_equipment
        # Do we have a cauldron?
        BlackArts.data.sacks["reagent"].contents.each { |item| BlackArts.data.sacks["cauldron"] = item if item.noun =~ /cauldron/ }

        if BlackArts.data.sacks["cauldron"].nil?
          Util.msg('error', " A cauldron was not found in your #{BlackArts.data.sacks["reagent"].name}.")
          is_error = true
        end

        # Doe we have a mortar and pestle?
        unless BlackArts.data.sacks["reagent"].contents.find { |obj| obj.noun == 'mortar' }
          Util.msg('error', " A mortar and pestle was not found in your #{BlackArts.data.sacks["reagent"].name}.")
          is_error = true
        end

        # Doe we have a vial for sea water?
        unless BlackArts.data.sacks["reagent"].contents.find { |obj| obj.name =~ BlackArts.data.sea_water_vial }
          Util.msg('error', " A vial for sea water was not found in your #{BlackArts.data.sacks["reagent"].name}.")
          is_error = true
        end

        # Doe we have a flask for sea water?
        unless BlackArts.data.sacks["reagent"].contents.find { |obj| obj.name =~ BlackArts.data.sea_water_flask }
          Util.msg('error', " A flask for sea water was not found in your #{BlackArts.data.sacks["reagent"].name}.")
          is_error = true
        end
      end
      exit if is_error
    end

    def self.silver_check
      wealth_pattern = /^You have (no|[,\d]+|but one) silver with you/
      wealth = Util.get_lines("wealth quiet", wealth_pattern).join(" ")
      coins = 0
      if wealth.gsub('but one', '1') =~ wealth_pattern
        coins = $1.gsub(',', '').to_i
      end
      return coins
    end

    def self.silver_deposit(currency = 'silver')
      return if BlackArts.data.settings[:no_bank]
      ending_silver = Util.silver_check

      return if ending_silver.zero? && currency == 'silver'

      Util.travel('bank')
      fput("deposit #{currency}")
    end

    def self.silver_withdraw(amount)
      return if BlackArts.data.settings[:no_bank]
      return if Util.silver_check > amount

      Util.silver_deposit
      Util.travel('bank')
      # TODO: handle not enough silver case
      fput("withdraw #{amount} silvers")
    end

    def self.suggestion
      guild_status = Guild.gld

      all_recipes = Guild.gld_suggestions(guild_status)

      output = "\n"
      for type in ['alchemy', 'potions', 'trinkets']
        repetitions = guild_status[type][:reps]
        task = "#{guild_status[type][:task]} for #{repetitions} reps"
        reps = repetitions.zero? ? '' : Util.title_case(task)
        output.concat "\n #{Util.title_case(type)}: #{reps}\n"

        if Guild.gld_suggestions(guild_status)[type][:recipes].nil? or Guild.gld_suggestions(guild_status)[type][:recipes].empty? or Guild.gld_suggestions(guild_status)[type][:reps].zero?
          output.concat "   (none)\n"
        else
          max_recipe_name = 0
          recipe_list = all_recipes[type][:recipes]
          recipe_list.each { |r| max_recipe_name = [max_recipe_name, r[:product].length].max }
          recipe_output_list = Array.new

          for recipe in recipe_list
            next if recipe[:product] =~ /dye/
            check = Guild.initialize_tracker
            repetitions.times {
              check = Guild.recursive_check_recipe(recipe, check, true)
            }
            Util.msg("debug", "Util.suggestion: reps #{repetitions} - recipe check - #{check}")
            if check[:error].empty?
              recipe_output = "   #{monsterbold_start}#{Util.title_case(recipe[:product].ljust(max_recipe_name))}#{monsterbold_end}"
            else
              recipe_output = "   #{Util.title_case(recipe[:product].ljust(max_recipe_name))}"
            end

            recipe_output.concat "   Ranks: #{recipe[:rank][0].to_s.rjust(2)}-#{recipe[:rank][1].to_s.rjust(2)}"
            recipe_output.concat "   Cost: #{check[:cost].to_i.to_s.rjust(5)}   Time: #{(check[:time] / 60.0).as_time}"
            has_step = Array.new
            recipe[:steps].each { |step| if step =~ /^(boil|infuse|simmer|chant|distill|extract|channel)/ and not has_step.include?($1); has_step.push($1); end }
            recipe_output.concat "   Includes: #{Util.title_case(has_step.sort.join(', '))}" unless has_step.empty?
            recipe_output.concat "\n"

            unless check[:error].empty?
              check[:error].each_pair { |thing, count|
                recipe_output.concat "   #{''.ljust(max_recipe_name)}   Missing: #{Util.title_case(thing)} (#{count})\n"
              }
            end

            recipe_output_list.push([check[:cost], recipe_output])
          end

          recipe_output_list.sort { |a, b| a[0] <=> b[0] }.each { |o| output.concat(o[1]) }
          recipe_output_list = nil
        end
      end

      output.concat "\n"

      if defined?(_respond)
        _respond output
      else
        $stdout.puts output # rescue()
      end
    end

    def self.show_check(check_info, recipe_no = 0)
      output = "\n"
      if recipe_no.positive?
        output.concat "#{Util.title_case(check_info[:recipe_count].keys[0].to_s)} (#{recipe_no})"
      else
        output.concat check_info[:recipe_count].collect { |n, c| if c == 1; Util.title_case(n); else; "#{Util.title_case(n)} (#{c})"; end }.join(', ').to_s
      end
      output.concat "\n"
      max_width = 0
      check_info[:found].each_pair { |n, _c| max_width = [max_width, n.sub(/s*\#.*$/, '').length].max }
      check_info[:forage].each_pair { |n, _c| max_width = [max_width, n.sub(/s*\#.*$/, '').length].max }
      check_info[:kill_for].each { |_npc, foo| foo.each_pair { |n, _c| max_width = [max_width, n.sub(/s*\#.*$/, '').length].max } }
      check_info[:buy].values.each { |place| place.each_pair { |n, _c| max_width = [max_width, n.sub(/s*\#.*$/, '').length].max } }
      unless check_info[:found].empty?
        output.concat "   Have:\n"
        check_info[:found].each_pair { |n, c|
          str = n.sub(/s*\#.*$/, '')
          str = Util.title_case(str)
          str.concat " (#{c})" if c > 1
          output.concat "      #{str.ljust(max_width + 8)}"
          if Recipes.alchemy_reagent_op_cost[n]
            output.concat Util.add_commas(Recipes.alchemy_reagent_op_cost[n] * c).rjust(7)
          else
            output.concat '      -'
          end
          output.concat "\n"
        }
      end
      unless check_info[:kill_for].empty?
        output.concat "   Kill for:\n"
        check_info[:kill_for].each_pair { |_npc, foo|
          foo.each_pair { |n, c|
            str = n.sub(/s*\#.*$/, '')
            str = Util.title_case(str)
            str.concat " (#{c})" if c > 1
            output.concat "      #{str.ljust(max_width + 8)}"
            if (bar = check_info[:itime][n])
              output.concat((bar / 60.0).as_time)
            end
            output.concat "\n"
          }
        }
      end
      unless check_info[:forage].empty?
        output.concat "   Forage:\n"
        check_info[:forage].each_pair { |n, c|
          str = n.sub(/s*\#.*$/, '')
          str = Util.title_case(str)
          str.concat " (#{c})" if c > 1
          output.concat "      #{str.ljust(max_width + 8)}"
          if (foo = check_info[:itime][n])
            output.concat((foo / 60.0).as_time)
          end
          output.concat "\n"
        }
      end
      unless check_info[:buy].empty?
        output.concat "   Buy:\n"
        check_info[:buy].values.each { |place|
          place.each_pair { |n, c|
            str = n.sub(/s*\#.*$/, '')
            str = Util.title_case(str)
            str.concat " (#{c})" if c > 1
            output.concat "      #{str.ljust(max_width + 8)}"
            recipe_cost = BlackArts.data.recipes.find { |r| r[:product] == n }[:cost]
            if recipe_cost
              output.concat Util.add_commas(recipe_cost * c).rjust(7)
            else
              output.concat '      -'
            end
            output.concat "\n"
          }
        }
      end
      unless check_info[:error].empty?
        output.concat "   #{monsterbold_start}Missing:#{monsterbold_end}\n"
        check_info[:error].each_pair { |n, c|
          output.concat "      #{Util.title_case(n)}"
          output.concat(c > 1 ? n =~ /some minor holy oil/i ? " (#{(c.to_f / 4).ceil})" : " (#{c})" : '')
          output.concat "\n"
        }
      end
      output.concat "\n Cost: #{Util.add_commas(check_info[:cost])}   Time: #{(check_info[:time] / 60.0).as_time}\n\n"
      if defined?(_respond)
        _respond output
      else
        $stdout.puts output # rescue()
      end
      sleep 1
    end

    def self.title_case(title, minor_words = '')
      minor_words_as_array = ["a", "an", "the", "and", "but", "or", "for", "nor", "on", "at", "to", "from", "by", "of"].concat(minor_words.split(','))
      title_as_array = title.split(' ')
      title_as_array.map { |word| minor_words_as_array.include?(word) ? word : word.capitalize }.join(' ')
    end

    def self.test
      # Util.set_variables(false)
      # Util.find_next_guild
      # echo Util.distance(188, 188)
      # Util.get_note
      # echo room_list = Hunting.hunting_areas('ghoul master')
      # echo path = Room.current.path_to(Room[room_list])
      # _previous_var, shortest_distances_var = Room.current.dijkstra
      # echo shortest_distances_var[room_list].to_i
      # 5.times { Util.find_next_guild }
      # echo Hunting.hunting_areas('fire sprite')
      # echo Actions.forage_find('strand of seaweed')
      Illusions.demon_refresh
    end

    def self.track_room
      BlackArts.data.current_room = Room.current

      current_room = proc do |server_string|
        if BlackArts.data.current_room != Room.current && !Room.current.nil? && Room.current != 20239
          BlackArts.data.current_room = Room.current
        end
        server_string
      end

      DownstreamHook.add('room_check', current_room)

      before_dying { DownstreamHook.remove('room_check') }
    end

    def self.travel(room_id)
      Util.msg("debug", "Util.travel: room - #{room_id}")

      return if Room.current.id == room_id.to_i || Room.current.tags.include?(room_id)

      unless room_id.is_a?(Integer)
        if room_id.match?(/\A\d+\z/)
          room_id = room_id.to_i
        else
          room_id = BlackArts.data.current_room.find_nearest_by_tag(room_id).to_i
        end
      end

      Inventory.free_hands(both: true)

      path = BlackArts.data.current_room.path_to(Room[room_id])
      Util.msg("debug", "Util.travel: path - #{path}")
      safe_trip = path.all? { |room| room.nil? ? false : Util.in_town?(room) }

      if safe_trip
        Util.go2(room_id)
      else
        fput 'stance defensive' unless stance =~ /defensive|guarded/
        Util.get_res('gird', BlackArts.data.get_regex) unless Skills.brawling >= (Char.level / 1.5)
        Util.go2(room_id)
        Util.get_res('store right', BlackArts.data.put_regex) if checkright
        Util.get_res('store left', BlackArts.data.put_regex) if checkleft
      end
    end

    def self.wait_rt
      sleep 0.2
      waitcastrt?
      waitrt?
      sleep 0.2
    end
  end
end

# Data
module BlackArts
  class Data
    attr_accessor  :settings, :dir, :sacks, :remaining_herbs, :herb, :forage_result, :forage_injury, :reagent, :remaining_reagents,
                   :note, :note_names, :sea_water_flask, :sea_water_vial, :bundled_herb, :ingredient_count, :correct_herb_count, :put_regex, :get_regex, :herb_doses,
                   :last_alchemy_buy, :alchemy_grind_history, :recipes, :consignment_list, :current_admin, :skin, :skin_number, :creature, :guild_skill, :locations, :ranks,
                   :need_empty_flask, :start_room, :start_town, :current_room, :no_forage, :mortar_check, :cauldron, :note_withdrawal, :note_refresh, :visited_towns,
                   :west_guilds, :east_guilds, :all_guilds, :cities, :boundaries, :gld_skills, :shadow_container, :shadow_item, :demon_id

    def initialize(settings)
      @settings = settings
      @locations = []
      @visited_towns = []
      @sacks = {}
      @skin = nil
      @skin_number = 0
      @creature = nil
      @guild_skill = nil
      @ranks = nil
      @need_empty_flask = false
      @start_room = nil
      @start_town = nil
      @current_room = nil
      @mortar_check = true
      @cauldron = nil
      @shadow_container = nil
      @shadow_item = nil
      @demon_id = nil
      @settings[:no_magic] ||= []

      @gld_skills = ['alchemy', 'potions', 'trinkets']
      @gld_skills << 'illusions' if Char.prof == 'Sorcerer'

      # Set up guild groups for travel
      @west_guilds = [3668, 228, 1438, 2300, 10861] # fwi, landing, solhaven, icemule, river's rest
      @east_guilds = [3668, 188, 3519] # fwi, illy, vaalor
      @all_guilds = Map.list.find_all { |room| room.tags.include?("#{Char.prof.downcase} alchemy administrator") }
      @cities = []
      @all_guilds.each { |place| cities << place.find_nearest_by_tag("town") }

      # Boundaries keep character in the area where they started. Basically no mine cart rides.
      @boundaries = [1014, 991, 20239]

      @note_withdrawal = @settings[:note_withdrawal].to_s.gsub(/,|silver/, '').strip.to_i
      @note_withdrawal = 50000 if @note_withdrawal.zero? || @note_withdrawal.nil?

      @note_refresh = @settings[:note_refresh].gsub(/,|silver/, '').strip.to_i
      @note_refresh = 5000 if @note_refresh.zero? || @note_refresh.nil?

      @sea_water_flask = /^(?:small|small opaque|faceted) crystal flask$|^dark sphene-inset flask$/
      @sea_water_vial = /^(?:clouded|warped|chipped|tapered|smoky|thick|slender|clear|blackened) glass vial$|^polished glaes vial$|thin iron-encased vial$/
      @bundled_herb = /^some acantha leaf$|^some cactacae spine$|^some ambrominas leaf$|^some torban leaf$|^some wolifrew lichen$|^some sovyn clove$|^some ephlox moss$|^some pothinir grass$|^some haphip root$|^some calamia fruit$|^some aloeas stem$|^some basal moss$|^some woth flower$/

      @last_alchemy_buy = Time.now

      @ingredient_count = {}
      @correct_herb_count = []

      @alchemy_grind_history = nil
      @recipes = nil
      @current_admin = nil

      @note = nil
      @note_names = ['Northwatch bond note', 'Icemule promissory note', 'Borthuum Mining Company scrip', "Wehnimer's promissory note", 'Torren promissory note', 'mining chit', 'City-States promissory note', 'Vornavis promissory note', 'Mist Harbor promissory note']

      @herb = nil
      @remaining_herbs = 0

      @reagent = nil
      @remaining_reagents = 0

      @dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/bigshot_profiles"

      @no_forage = @settings[:no_forage_rooms].split(',')
      @no_forage.map! { |str| str.to_i }
      [13918, 13923, 23525, 13227].each { |room| @no_forage << room } # These are entries to the water east of Ravelin and the Dragon fountain in Illy
      if (Map.ids_from_uid(14116015)[0] && Society.member !~ /voln/i)
        @no_forage << Map.ids_from_uid(14116015)[0]
      end

      @no_forage.uniq!

      @get_regex = Regexp.union(
        /^You (?:shield the opening of .*? from view as you |discreetly |carefully |deftly |slowly )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have|unsheathe|detach|swap|sling)/,
        /^Get what\?$/,
        /^Why don't you leave some for others\?$/,
        /^You need a free hand/,
        /^You already have that/,
        /Reaching over your shoulder/,
        /^As you draw/,
        /^Ribbons of.*?light/
      )

      @put_regex = Regexp.union(
        /^(?:You carefully (add|hang|secure))/,
        /^(?:You (?:put|(?:discreetly )?tuck|attach|toss|attempt to shield your|place|.* place|slip|wipe off the blade and sheathe|absent-mindedly drop|find an incomplete bundle|untie your drawstring pouch))/,
        /^The .+ is already a bundle/,
        /^Your bundle would be too large if you if you tried to add that/,
        /^The .+ is too large to be bundled\./,
        /^As you place your .+ inside your .+, you notice another .+ inside the .+ and carefully arrange the two .+ into a neat bundle\./,
        /If you wish to continue, throw the item away again within fifteen seconds/,
        /you feel pleased with yourself at having cleaned up the surrounding area/,
        /over your shoulder/,
        /two items in that location/,
        /wear three functional items/,
        /^Your .*? won't fit in .*?\.$/,
      )

      @forage_result = Regexp.union(
        /^You forage/,
        /^You make so much noise that only the dead would not notice you thrashing about in your unsuccessful search\.$/,
        /^You stumble about in a fruitless attempt at foraging\.$/,
        /you are unable to find anything useful/,
        /^As you carefully forage around you (can find no hint|see no evidence) of what you are looking for(?: right now, though you are fairly certain this is where it can be found)?\./,
        /^You begin to forage around when your hand comes into contact with something that stabs you in the finger\.$/,
        /^As you forage around you suddenly feel a sharp pain/,
        /^You begin to forage around when suddenly you feel a burning sensation in your hand\.$/,
        /^You fumble about so badly in your search that you can only hope no one was watching you\.$/
      )

      @forage_injury = Regexp.union(
        /^You begin to forage around when your hand comes into contact with something that stabs you in the finger./,
        /^As you forage around you suddenly feel a sharp pain in your/,
        /suddenly you feel a burning sensation in your hand/
      )

      @consignment_list = Regexp.union(
        /(rainbow\-hued|health|clear|lilac|silver|silvery|white|red|blue|green|grey|mana.*?|murky|bubbling|aquamarine|prismatic) potion/,
        /(rohnuru|sarmoc|duqnuru|dirtokh) potion/,
        /(silvery|glimmering|glittering|grey|opaline) dust/,
        /(opal|yew|grooved ebony|witchwood|iridescent opal|slender mithril|smooth crystalline|sapphire|beryl|willow|clear prismatic) wand/,
        /(prismatic|milky blue|fragrant|dark shimmering) oil/,
        /(dark translucent|foggy grey|glowing|jagged brown|rainbow\-flecked|eight\-sided|azure) crystal/,
        /(ivory disc|smooth stone) talisman/,
        /some powdered/,
        /(ivory|fine white) powder/,
        /hazy glass vial/,
        /holy water/,
        /golden sand/,
        /moonstone amulet/
      )

      @herb_doses = {
        'some acantha leaf'    => 10,
        'some aloeas stem'     => 2,
        'some haphip root'     => 4,
        'some pothinir grass'  => 2,
        'some basal moss'      => 4,
        'some ephlox moss'     => 4,
        'some ambrominas leaf' => 4,
        'some calamia fruit'   => 2,
        'some cactacae spine'  => 4,
        'some sovyn clove'     => 1,
        'some wolifrew lichen' => 4,
        'some woth flower'     => 2,
        'some torban leaf'     => 3,
      }
    end
  end
end

# Setup
module BlackArts
  class Setup < Gtk::Builder
    @@categories = {
      general: {
        skill_types: { default: [] },
        shadow_drop_item: { default: '' },
        forage_options: { default: [] },
        no_forage_rooms: { default: '' },
        only_required_creatures: { default: false },
        use_vouchers: { default: true },
        once_and_done: { default: false },
        no_alchemy: { default: false },
        guild_travel: { default: false },
        home_guild: { default: '' },
        home_guild_name: { default: '' },
        buy_reagents: { default: false },
        sell_consignment: { default: false },
        no_bank: { default: false },
        note_withdrawal: { default: '' },
        note_refresh: { default: '' },
        use_wracking: { default: false },
        use_symbol_mana: { default: false },
        use_symbol_renewal: { default: false },
        use_sigil_power: { default: false },
        use_sigil_concentration: { default: false },

        # Foraging
        forage_prep_commands: { default: '' },
        forage_prep_scripts: { default: '' },
        forage_post_commands: { default: '' },
        forage_post_scripts: { default: '' },

        btn_reset: { default: [] },
        btn_consignment_reset: { default: [] },
        consignment_include: {
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        item_include: {
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        recipe_exclude: {
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        trash: {
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        names_a: { default: '' },
        profile_a: { default: '' },
        profile_name_a: { default: '' },
        kill_a: { default: false },
        names_b: { default: '' },
        profile_b: { default: '' },
        profile_name_b: { default: '' },
        kill_b: { default: false },
        names_c: { default: '' },
        profile_c: { default: '' },
        profile_name_c: { default: '' },
        kill_c: { default: false },
        names_d: { default: '' },
        profile_d: { default: '' },
        profile_name_d: { default: '' },
        kill_d: { default: false },
        names_e: { default: '' },
        profile_e: { default: '' },
        profile_name_e: { default: '' },
        kill_e: { default: false },
        names_f: { default: '' },
        profile_f: { default: '' },
        profile_name_f: { default: '' },
        kill_f: { default: false },
        names_g: { default: '' },
        profile_g: { default: '' },
        profile_name_g: { default: '' },
        kill_g: { default: false },
        names_h: { default: '' },
        profile_h: { default: '' },
        profile_name_h: { default: '' },
        kill_h: { default: false },
        names_i: { default: '' },
        profile_i: { default: '' },
        profile_name_i: { default: '' },
        kill_i: { default: false },
        names_j: { default: '' },
        profile_j: { default: '' },
        profile_name_j: { default: '' },
        kill_j: { default: false },
      },
      internal: {
        silence: { default: true },
        debug: { default: false },
        no_magic: { default: [] },
      }
    }

    def self.get_category(key)
      @@categories.each { |category, data| return category unless data[key].nil? }
      nil
    end

    def self.get_setting(key)
      cat = Setup.get_category(key)
      return nil if cat.nil?

      @@categories[cat].each { |setting, data| return data if setting == key }
      nil
    end

    def initialize(settings)
      super()

      @settings = settings

      @default_buy = ["essence of air", "essence of earth", "essence of fire", "essence of water", "elemental core", "ayanad crystal", "s'ayanad crystal", "t'ayanad crystal", "n'ayanad crystal", "tiny golden seed", "inky necrotic core"]

      @default_sell = [
        "(rainbow\-hued|health|clear|lilac|silver|silvery|white|red|blue|green|grey|mana.*?|murky|bubbling|aquamarine|prismatic) potion",
        "(rohnuru|sarmoc|duqnuru|dirtokh) potion",
        "(silvery|glimmering|glittering|grey|opaline) dust",
        "(opal|yew|grooved ebony|witchwood|iridescent opal|slender mithril|smooth crystalline|sapphire|beryl|willow|clear prismatic) wand",
        "(prismatic|milky blue|fragrant|dark shimmering) oil",
        "(dark translucent|foggy grey|glowing|jagged brown|rainbow\-flecked|eight\-sided|azure) crystal",
        "(ivory disc|smooth stone) talisman",
        "(ivory|fine white) powder",
        "hazy glass vial",
        "holy water",
        "golden sand",
        "moonstone amulet",
        "sanguine flakes"
      ]

      # set default values if they don't exist
      @@categories.each do |_, data|
        data.each { |key, value| @settings[key] = value[:default] if @settings[key].nil? }
      end

      # remove settings that don't exist
      @settings.delete_if { |key, _| next Setup.get_category(key).nil? }

      # use a GTK Builder to setup all the basics of the window then expand on that base
      return unless defined?(Gtk) && Gtk::Version::MAJOR == 3

      Gtk.queue do
        # add_from_file("#{$data_dir}BlackArts.ui")
        add_from_string(ui)
        load_settings

        self['main'].keep_above = true
        self['main'].set_title "BlackArts Setup v#{BlackArts_version}"

        # connect signals after settings are loaded to a bunch of handlers don't trigger
        connect_signals { |handler| method(handler) }
      end
    end

    def ui
      '<?xml version="1.0" encoding="UTF-8"?><!-- Generated with glade 3.38.2 --><interface><requires lib="gtk+" version="3.20"/><object class="GtkListStore" id="consignment_include_store"><columns><!-- column-name exclusion --><column type="gchararray"/></columns></object><object class="GtkListStore" id="item_include_store"><columns><!-- column-name exclusion --><column type="gchararray"/>
      </columns></object><object class="GtkListStore" id="recipe_exclude_store"><columns><!-- column-name exclusion --><column type="gchararray"/></columns></object><object class="GtkListStore" id="trash_store"><columns><!-- column-name exclusion --><column type="gchararray"/></columns></object><object class="GtkWindow" id="main"><property name="width-request">750</property><property name="height-request">775</property><property name="can-focus">False</property><property name="title" translatable="yes">Black Arts Setup</property><property name="modal">True</property><signal name="destroy" handler="on_destroy" swapped="no"/><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><property name="orientation">vertical</property><property name="spacing">5</property><child><object class="GtkNotebook"><property name="visible">True</property><property name="can-focus">True</property><property name="hexpand">True</property><property name="vexpand">True</property><child><object class="GtkScrolledWindow"><property name="visible">True</property><property name="can-focus">True</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><property name="orientation">vertical</property><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=6 n-rows=1 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="column-homogeneous">True</property><child><object class="GtkCheckButton" id="skill_types:alchemy"><property name="label" translatable="yes">Alchemy</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-start">5</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="skill_types:potions"><property name="label" translatable="yes">Potions</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="skill_types:trinkets"><property name="label" translatable="yes">Trinkets</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="skill_types:illusions"><property name="label" translatable="yes">Illusions</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">3</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property></object><packing><property name="left-attach">4</property><property name="top-attach">0</property></packing></child><child><placeholder/></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Guild Skills</property>
      </object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=4 n-rows=3 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkCheckButton" id="skill_types:teach"><property name="label" translatable="yes">Teach</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-start">5</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="skill_types:learn"><property name="label" translatable="yes">Learn</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="shadow_drop_item"><property name="width-request">330</property><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-bottom">10</property><property name="placeholder-text" translatable="yes">Something small and cheap in case it gets lost</property></object><packing><property name="left-attach">0</property><property name="top-attach">2</property><property name="width">3</property>
      </packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-start">10</property><property name="margin-bottom">5</property><property name="label" translatable="yes">Shadow Drop Item</property></object><packing><property name="left-attach">0</property><property name="top-attach">1</property></packing></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/>
      </child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Illusion Skill Options</property></object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">1</property></packing></child><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=5 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkCheckButton" id="no_bank"><property name="label" translatable="yes">Do Not Use Bank (?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">Will only use coins/notes in your inventory and will not deposit after selling</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property><property name="height">2</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">Will withdrawl a note of specified amount</property><property name="halign">end</property><property name="margin-start">50</property><property name="label" translatable="yes">Withdrawal Amount</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">Will withdraw a new note if it falls below this amount</property><property name="halign">end</property><property name="label" translatable="yes">Refresh Note</property></object><packing><property name="left-attach">1</property><property name="top-attach">1</property>
      </packing></child><child><object class="GtkEntry" id="note_withdrawal"><property name="width-request">200</property><property name="visible">True</property><property name="can-focus">True</property><property name="tooltip-text" translatable="yes">Will withdrawl a note of specified amount</property><property name="margin-start">10</property><property name="margin-bottom">5</property><property name="placeholder-text" translatable="yes">Default amount is 50,000 silvers</property></object><packing><property name="left-attach">2</property><property name="top-attach">0</property><property name="width">2</property>
      </packing></child><child><object class="GtkEntry" id="note_refresh"><property name="visible">True</property><property name="can-focus">True</property><property name="tooltip-text" translatable="yes">Will withdraw a new note if it falls below this amount</property><property name="margin-start">10</property><property name="margin-bottom">5</property><property name="placeholder-text" translatable="yes">Default refresh is 5,000 silvers</property></object><packing><property name="left-attach">2</property><property name="top-attach">1</property><property name="width">2</property>
      </packing></child><child><placeholder/></child><child><placeholder/></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Banking</property></object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">2</property></packing></child><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=4 n-rows=5 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="row-spacing">5</property><property name="column-spacing">5</property><property name="column-homogeneous">True</property><child><object class="GtkCheckButton" id="once_and_done"><property name="label" translatable="yes">Run one task and quit (?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">When enabled this will quit after one bounty.</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">1</property></packing></child><child><object class="GtkCheckButton" id="use_vouchers"><property name="label" translatable="yes">Use Vouchers</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">0</property>
      </packing></child><child><object class="GtkCheckButton" id="no_alchemy"><property name="label" translatable="yes">No Alchemy (?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">Only accept tasks that require no alchemy to complete.</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">2</property></packing></child><child><object class="GtkCheckButton" id="guild_travel"><property name="label" translatable="yes">Travel to other Guilds (?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">If enabled the script will travel to other guilds to finish tasks. Will stay on the east or west side of the Dragon Spine.</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">3</property></packing></child><child><object class="GtkCheckButton" id="use_wracking"><property name="label" translatable="yes">Use Wracking</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">1</property><property name="top-attach">0</property>
      </packing></child><child><object class="GtkCheckButton" id="use_sigil_concentration"><property name="label" translatable="yes">Use Sigil of Concentration</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">start</property><property name="margin-start">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">1</property><property name="top-attach">4</property>
      </packing></child><child><object class="GtkCheckButton" id="use_sigil_power"><property name="label" translatable="yes">Use Sigil of Power</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">1</property><property name="top-attach">3</property>
      </packing></child><child><object class="GtkCheckButton" id="use_symbol_mana"><property name="label" translatable="yes">Use Symbol of Mana(?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">The script will wait for the cooldown before reusing to avoid using deeds.</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">1</property></packing></child><child><object class="GtkCheckButton" id="use_symbol_renewal"><property name="label" translatable="yes">Use Symbol of Renewal</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">2</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property></object><packing><property name="left-attach">3</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="sell_consignment"><property name="label" translatable="yes">Sell at Consignment (?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">If enabled the script will try to sell alchemy products at the consignment shop.
      Use the Consignment tab to sell sellable items.</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">1</property></packing></child><child><object class="GtkCheckButton" id="buy_reagents"><property name="label" translatable="yes">Buy Reagents (?)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="tooltip-text" translatable="yes">If enabled the script will periodically go to the consignment and try to purchase items on your reagents tab.</property><property name="halign">start</property><property name="margin-start">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-start">10</property><property name="label" translatable="yes">Home Guild</property></object><packing><property name="left-attach">2</property><property name="top-attach">2</property></packing></child><child><object class="GtkComboBoxText" id="home_guild"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-start">10</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="home_guild_name"><property name="can-focus">True</property>
      </object></child></object><packing><property name="left-attach">2</property><property name="top-attach">3</property><property name="width">2</property></packing></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Misc</property>
      </object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">3</property></packing></child><child><!-- n-columns=1 n-rows=6 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-start">20</property><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="label" translatable="yes">Default, Herb, and Reagent bags need to be set with STOW</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="label" translatable="yes">Selling Script: Requires eloot</property></object><packing><property name="left-attach">0</property><property name="top-attach">1</property></packing>
      </child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="label" translatable="yes">Healing Script: Requires eherbs</property></object><packing><property name="left-attach">0</property><property name="top-attach">2</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="label" translatable="yes">None of these are required if using "No Alchemy" mode</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">3</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="label" translatable="yes">The script will NOT purchase jars</property></object><packing><property name="left-attach">0</property><property name="top-attach">4</property></packing>
      </child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="label" translatable="yes">*** Register and Mark Your Items ***</property><attributes><attribute name="foreground" value="#e0e01b1b2424"/></attributes></object><packing><property name="left-attach">0</property><property name="top-attach">5</property></packing></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">4</property>
      </packing></child></object></child></object></child></object></child><child type="tab"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">General</property></object><packing><property name="tab-fill">False</property></packing></child><child><object class="GtkScrolledWindow"><property name="visible">True</property><property name="can-focus">True</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><property name="orientation">vertical</property><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-top">5</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=4 n-rows=4 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="column-homogeneous">True</property><child><object class="GtkCheckButton" id="forage_options:use_506"><property name="label" translatable="yes">Celerity (506)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="forage_options:use_213"><property name="label" translatable="yes">Minor Sanctuary (213)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="forage_options:use_709"><property name="label" translatable="yes">Grasp of the Grave (709)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">1</property></packing></child><child><object class="GtkCheckButton" id="forage_options:run"><property name="label" translatable="yes">Run from creatures</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="forage_options:use_919"><property name="label" translatable="yes">Wizard\'s Shield (919)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">1</property></packing></child><child><object class="GtkCheckButton" id="forage_options:use_140"><property name="label" translatable="yes">Wall of Force (140)</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-bottom">5</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">1</property></packing></child><child><object class="GtkEntry" id="no_forage_rooms"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-left">10</property><property name="margin-start">10</property><property name="margin-top">3</property><property name="margin-bottom">5</property><property name="placeholder-text" translatable="yes">Example: 228, 188, 2300</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">3</property><property name="width">2</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">start</property><property name="margin-left">10</property><property name="margin-start">10</property><property name="label" translatable="yes">Rooms NOT to forage in</property></object><packing><property name="left-attach">0</property><property name="top-attach">2</property>
      </packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property></object><packing><property name="left-attach">3</property><property name="top-attach">0</property></packing></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Foraging Options</property>
      </object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=2 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">end</property><property name="margin-start">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="label" translatable="yes">Pre-Foraging Commands:</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="forage_prep_commands"><property name="width-request">550</property><property name="visible">True</property><property name="can-focus">True</property><property name="valign">start</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="max-width-chars">40</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">end</property><property name="margin-start">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="label" translatable="yes">Active Foraging Scripts:</property></object><packing><property name="left-attach">0</property><property name="top-attach">1</property>
      </packing></child><child><object class="GtkEntry" id="forage_prep_scripts"><property name="visible">True</property><property name="can-focus">True</property><property name="valign">start</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="max-width-chars">40</property></object><packing><property name="left-attach">1</property><property name="top-attach">1</property>
      </packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Pre-Foraging</property></object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">1</property></packing></child><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=2 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">end</property><property name="margin-start">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="label" translatable="yes">Post-Foraging Commands:</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="forage_post_commands"><property name="width-request">550</property><property name="visible">True</property><property name="can-focus">True</property><property name="valign">start</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="max-width-chars">40</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">end</property><property name="margin-start">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="label" translatable="yes">Post-Foraging Scripts:</property></object><packing><property name="left-attach">0</property><property name="top-attach">1</property>
      </packing></child><child><object class="GtkEntry" id="forage_post_scripts"><property name="visible">True</property><property name="can-focus">True</property><property name="valign">start</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">10</property><property name="margin-bottom">10</property><property name="max-width-chars">40</property></object><packing><property name="left-attach">1</property><property name="top-attach">1</property>
      </packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Post-Foraging</property></object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">2</property></packing></child></object></child></object></child></object><packing><property name="position">1</property></packing></child><child type="tab"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Foraging</property>
      </object><packing><property name="position">1</property><property name="tab-fill">False</property></packing></child><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><property name="orientation">vertical</property><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="label-xalign">0</property><property name="shadow-type">none</property><child><!-- n-columns=2 n-rows=1 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkFrame"><property name="height-request">300</property><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=3 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="row-spacing">2</property><property name="column-spacing">5</property><child><object class="GtkButton" id="recipe_exclude_add"><property name="label" translatable="yes">Add</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-start">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkButton" id="recipe_exclude_delete"><property name="label" translatable="yes">Delete</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">end</property><property name="margin-end">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="recipe_exclude_entry"><property name="width-request">218</property><property name="visible">True</property><property name="can-focus">True</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="hexpand">True</property><property name="placeholder-text" translatable="yes">Alchemy Recipes to Exclude</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkScrolledWindow"><property name="height-request">525</property><property name="visible">True</property><property name="can-focus">True</property><property name="hexpand">True</property><property name="border-width">5</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkTreeView" id="recipe_exclude"><property name="visible">True</property><property name="can-focus">True</property><property name="vexpand">False</property><property name="model">recipe_exclude_store</property><property name="headers-visible">False</property><property name="search-column">0</property><property name="fixed-height-mode">True</property><child internal-child="selection"><object class="GtkTreeSelection"/>
      </child><child><object class="GtkTreeViewColumn"><property name="sizing">fixed</property><property name="title" translatable="yes">Exclusion</property><child><object class="GtkCellRendererText"/><attributes><attribute name="text">0</attribute></attributes></child></object></child></object></child></object></child></object><packing><property name="left-attach">0</property><property name="top-attach">1</property><property name="width">3</property></packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">
      </property>
      </object></child></object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkFrame"><property name="height-request">300</property><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=3 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="row-spacing">2</property><property name="column-spacing">5</property><child><object class="GtkButton" id="trash_add"><property name="label" translatable="yes">Add</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-start">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkButton" id="trash_delete"><property name="label" translatable="yes">Delete</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">end</property><property name="margin-end">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="trash_entry"><property name="width-request">218</property><property name="visible">True</property><property name="can-focus">True</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="hexpand">True</property><property name="placeholder-text" translatable="yes">Always trash these items</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkScrolledWindow"><property name="height-request">525</property><property name="visible">True</property><property name="can-focus">True</property><property name="hexpand">True</property><property name="border-width">5</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkTreeView" id="trash"><property name="visible">True</property><property name="can-focus">True</property><property name="vexpand">False</property><property name="model">trash_store</property><property name="headers-visible">False</property><property name="search-column">0</property><property name="fixed-height-mode">True</property><child internal-child="selection"><object class="GtkTreeSelection"/>
      </child><child><object class="GtkTreeViewColumn"><property name="sizing">fixed</property><property name="title" translatable="yes">Exclusion</property><child><object class="GtkCellRendererText"/><attributes><attribute name="text">0</attribute></attributes></child></object></child></object></child></object></child></object><packing><property name="left-attach">0</property><property name="top-attach">1</property><property name="width">3</property></packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">
      </property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property></object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child></object><packing><property name="position">2</property>
      </packing></child><child type="tab"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Recipes/Trash</property></object><packing><property name="position">2</property><property name="tab-fill">False</property></packing></child><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><property name="orientation">vertical</property><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="label-xalign">0</property><property name="shadow-type">none</property><child><!-- n-columns=2 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=3 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="row-spacing">2</property><property name="column-spacing">5</property><child><object class="GtkButton" id="item_include_add"><property name="label" translatable="yes">Add</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-start">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkButton" id="item_include_delete"><property name="label" translatable="yes">Delete</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">end</property><property name="margin-end">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="item_include_entry"><property name="width-request">218</property><property name="visible">True</property><property name="can-focus">True</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="hexpand">True</property><property name="placeholder-text" translatable="yes">Items to buy at reagent shop</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkScrolledWindow"><property name="height-request">525</property><property name="visible">True</property><property name="can-focus">True</property><property name="hexpand">True</property><property name="border-width">5</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkTreeView" id="item_include"><property name="visible">True</property><property name="can-focus">True</property><property name="vexpand">False</property><property name="model">item_include_store</property><property name="headers-visible">False</property><property name="search-column">0</property><property name="fixed-height-mode">True</property><child internal-child="selection"><object class="GtkTreeSelection"/>
      </child><child><object class="GtkTreeViewColumn"><property name="sizing">fixed</property><property name="title" translatable="yes">Exclusion</property><child><object class="GtkCellRendererText"/><attributes><attribute name="text">0</attribute></attributes></child></object></child></object></child></object></child></object><packing><property name="left-attach">0</property><property name="top-attach">1</property><property name="width">3</property></packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">
      </property>
      </object></child></object><packing><property name="left-attach">0</property><property name="top-attach">1</property></packing></child><child><object class="GtkButton" id="btn_reset"><property name="label" translatable="yes">Reset Reagent Buying     </property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="valign">end</property><property name="margin-start">10</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=3 n-rows=2 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="row-spacing">2</property><property name="column-spacing">5</property><child><object class="GtkButton" id="consignment_include_add"><property name="label" translatable="yes">Add</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="margin-left">5</property><property name="margin-start">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkButton" id="consignment_include_delete"><property name="label" translatable="yes">Delete</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">end</property><property name="margin-right">5</property><property name="margin-end">5</property><property name="margin-bottom">5</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="consignment_include_entry"><property name="width-request">218</property><property name="visible">True</property><property name="can-focus">True</property><property name="halign">start</property><property name="margin-bottom">5</property><property name="hexpand">True</property><property name="placeholder-text" translatable="yes">Items to sell at the consignment shop</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkScrolledWindow"><property name="height-request">525</property><property name="visible">True</property><property name="can-focus">True</property><property name="hexpand">True</property><property name="border-width">5</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkTreeView" id="consignment_include"><property name="visible">True</property><property name="can-focus">True</property><property name="vexpand">False</property><property name="model">consignment_include_store</property><property name="headers-visible">False</property><property name="search-column">0</property><property name="fixed-height-mode">True</property><child internal-child="selection"><object class="GtkTreeSelection"/>
      </child><child><object class="GtkTreeViewColumn"><property name="sizing">fixed</property><property name="title" translatable="yes">Exclusion</property><child><object class="GtkCellRendererText"/><attributes><attribute name="text">0</attribute></attributes></child></object></child></object></child></object></child></object><packing><property name="left-attach">0</property><property name="top-attach">1</property><property name="width">3</property></packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">
      </property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">1</property></packing></child><child><object class="GtkButton" id="btn_consignment_reset"><property name="label" translatable="yes">Reset Consignment Selling</property><property name="width-request">80</property><property name="height-request">20</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">start</property><property name="valign">end</property><property name="margin-start">10</property>
      </object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property></object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child></object><packing><property name="position">3</property></packing></child><child type="tab"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Buying/Selling</property>
      </object><packing><property name="position">3</property><property name="tab-fill">False</property></packing></child><child><object class="GtkScrolledWindow"><property name="visible">True</property><property name="can-focus">True</property><property name="shadow-type">in</property><child><object class="GtkViewport"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><property name="orientation">vertical</property><child><object class="GtkFrame"><property name="visible">True</property><property name="can-focus">False</property><property name="border-width">10</property><property name="label-xalign">0</property><child><!-- n-columns=3 n-rows=25 --><object class="GtkGrid"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">1</property><property name="width">3</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="tooltip-text" translatable="yes">Names should be seperated by commas.</property><property name="margin-top">5</property><property name="margin-bottom">10</property><property name="label" translatable="yes">Ingredient Names (?)</property><property name="use-markup">True</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">0</property></packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-top">5</property><property name="margin-bottom">10</property><property name="label" translatable="yes">Associated Profile</property></object><packing><property name="left-attach">1</property><property name="top-attach">0</property></packing></child><child><object class="GtkEntry" id="names_a"><property name="width-request">250</property><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property>
      </object><packing><property name="left-attach">0</property><property name="top-attach">6</property></packing></child><child><object class="GtkComboBoxText" id="profile_a"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_a"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">6</property></packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">7</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_b"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_b"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">8</property></packing></child><child><object class="GtkEntry" id="names_b"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">8</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">9</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_c"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_c"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">10</property></packing></child><child><object class="GtkEntry" id="names_c"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">10</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">11</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_d"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_d"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">12</property></packing></child><child><object class="GtkEntry" id="names_d"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">12</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">13</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_e"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_e"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">14</property></packing></child><child><object class="GtkEntry" id="names_e"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">14</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">15</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_f"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_f"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">16</property></packing></child><child><object class="GtkEntry" id="names_f"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">16</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">17</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_g"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_g"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">18</property></packing></child><child><object class="GtkEntry" id="names_g"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">18</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">19</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_h"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_h"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">20</property></packing></child><child><object class="GtkEntry" id="names_h"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">20</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">21</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_i"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_i"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">22</property></packing></child><child><object class="GtkEntry" id="names_i"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">22</property>
      </packing></child><child><object class="GtkSeparator"><property name="visible">True</property><property name="can-focus">False</property><property name="hexpand">True</property></object><packing><property name="left-attach">0</property><property name="top-attach">23</property><property name="width">3</property></packing></child><child><object class="GtkComboBoxText" id="profile_j"><property name="visible">True</property><property name="can-focus">False</property><property name="valign">center</property><property name="margin-start">10</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="has-entry">True</property><child internal-child="entry"><object class="GtkEntry" id="profile_name_j"><property name="can-focus">False</property>
      </object></child></object><packing><property name="left-attach">1</property><property name="top-attach">24</property></packing></child><child><object class="GtkEntry" id="names_j"><property name="visible">True</property><property name="can-focus">True</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="xalign">0.5</property></object><packing><property name="left-attach">0</property><property name="top-attach">24</property>
      </packing></child><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="halign">center</property><property name="valign">center</property><property name="margin-end">5</property><property name="label" translatable="yes">Only Kill Req.
      </property></object><packing><property name="left-attach">2</property><property name="top-attach">0</property></packing></child><child><object class="GtkCheckButton" id="kill_a"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">6</property></packing></child><child><object class="GtkCheckButton" id="kill_b"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">2</property><property name="top-attach">8</property>
      </packing></child><child><object class="GtkCheckButton" id="kill_c"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">2</property><property name="top-attach">10</property></packing></child><child><object class="GtkCheckButton" id="kill_d"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">12</property></packing></child><child><object class="GtkCheckButton" id="kill_e"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">2</property><property name="top-attach">14</property>
      </packing></child><child><object class="GtkCheckButton" id="kill_f"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">2</property><property name="top-attach">16</property></packing></child><child><object class="GtkCheckButton" id="kill_g"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">18</property></packing></child><child><object class="GtkCheckButton" id="kill_h"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">2</property><property name="top-attach">20</property>
      </packing></child><child><object class="GtkCheckButton" id="kill_i"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property></object><packing><property name="left-attach">2</property><property name="top-attach">22</property></packing></child><child><object class="GtkCheckButton" id="kill_j"><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">False</property><property name="halign">center</property><property name="valign">center</property><property name="draw-indicator">True</property>
      </object><packing><property name="left-attach">2</property><property name="top-attach">24</property></packing></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child><child><placeholder/></child></object></child><child type="label"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Profiles</property>
      </object></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child></object></child></object></child></object><packing><property name="position">4</property></packing></child><child type="tab"><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="label" translatable="yes">Profiles</property></object><packing><property name="position">4</property><property name="tab-fill">False</property>
      </packing></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child><child><object class="GtkBox"><property name="visible">True</property><property name="can-focus">False</property><child><object class="GtkLabel"><property name="visible">True</property><property name="can-focus">False</property><property name="margin-start">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="label" translatable="yes">Your changes are saved automatically.</property><attributes><attribute name="style" value="italic"/>
      </attributes></object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">0</property></packing></child><child><object class="GtkButton"><property name="label" translatable="yes">Close</property><property name="width-request">80</property><property name="visible">True</property><property name="can-focus">True</property><property name="receives-default">True</property><property name="halign">end</property><property name="margin-end">10</property><property name="margin-top">5</property><property name="margin-bottom">5</property><property name="hexpand">True</property><signal name="clicked" handler="on_close_clicked" swapped="no"/>
      </object><packing><property name="expand">False</property><property name="fill">True</property><property name="position">1</property></packing></child></object><packing><property name="expand">False</property><property name="fill">True</property><property name="pack-type">end</property><property name="position">2</property></packing></child></object></child></object></interface>'
    end

    # This is connected to automatically during load_settings and syncs data back to CharSettings.
    def on_update(obj)
      Gtk.queue do
        key = obj.builder_name.to_sym
        setting = Setup.get_setting(key)
        return if setting.nil?

        if obj.class == Gtk::CheckButton
          @settings[key] = obj.active?
        elsif obj.class == Gtk::Entry
          @settings[key] = obj.text.strip
        elsif obj.class == Gtk::SpinButton
          # update from text entry
          obj.update

          # force int, we don't use floats anywhere
          @settings[key] = obj.adjustment.value.to_i
        elsif obj.class == Gtk::ComboBoxText
          @settings[key] = obj.active_text
        end
      end
    end

    def on_close_clicked
      BlackArts.save_profile()
      self['main'].destroy
    end

    def on_destroy
      Gtk.queue { @running = false }
    end

    def on_guild_load
      all_guilds = Map.list.find_all { |room| room.tags.include?("#{Char.prof.downcase} alchemy administrator") }

      self['home_guild'].remove_all
      self['home_guild'].append_text('Closest') unless all_guilds.size.zero?

      unless UserVars.mapdb_fwi_trinket
        all_guilds.delete_if { |hash|
          hash.location == 'Mist Harbor'
        }
      end

      locations = []
      all_guilds.each { |place|
        named_location = Room[place.find_nearest_by_tag("town")].location
        named_location = named_location.gsub(/the town of|the tunnels and caverns of|the city of|the free port of/i, '').strip
        locations << named_location
      }

      locations.sort!.each { |place| self['home_guild'].append_text(place) }
    end

    def on_drop_load(profile_name)
      dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/bigshot_profiles"
      self[profile_name].remove_all
      self[profile_name].append_text('')
      names = []
      Dir.foreach(dir) { |f| names.push(f) }
      names.each { |filename|
        next if filename == '.' || filename == '..' || filename =~ /.ini/
        self[profile_name].append_text("#{filename.sub(".yaml", "")}")
      }
    end

    # iterate all objects and for any that match a setting name directly we set the default
    def load_settings
      Gtk.queue do
        # load up the generic settings which are just matching by name of the widget
        objects.each do |obj|
          next unless obj.methods.include?(:builder_name)

          key = obj.builder_name.to_sym

          next if (setting = Setup.get_setting(key)).nil?

          # set the default value
          if obj.class == Gtk::CheckButton
            obj.active = @settings[key]
            obj.signal_connect('toggled') { on_update(obj) }

            obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("use_wracking")) unless Spell[9918].known?
            obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("use_symbol_mana")) unless Spell[9813].known?
            obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("use_symbol_renewal")) unless Spell[9819].known?
            obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("use_sigil_power")) unless Spell[9718].known?
            obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("use_sigil_concentration")) unless Spell[9714].known?
          elsif obj.class == Gtk::Entry
            obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("shadow_drop_item")) && Char.prof != "Sorcerer"
            obj.text = @settings[key].strip

            if obj.builder_name.to_s == "profile_name_a"
              obj.text = @settings[:profile_a]
            elsif obj.builder_name.to_s == "profile_name_b"
              obj.text = @settings[:profile_b]
            elsif obj.builder_name.to_s == "profile_name_c"
              obj.text = @settings[:profile_c]
            elsif obj.builder_name.to_s == "profile_name_d"
              obj.text = @settings[:profile_d]
            elsif obj.builder_name.to_s == "profile_name_e"
              obj.text = @settings[:profile_e]
            elsif obj.builder_name.to_s == "profile_name_f"
              obj.text = @settings[:profile_f]
            elsif obj.builder_name.to_s == "profile_name_g"
              obj.text = @settings[:profile_g]
            elsif obj.builder_name.to_s == "profile_name_h"
              obj.text = @settings[:profile_h]
            elsif obj.builder_name.to_s == "profile_name_i"
              obj.text = @settings[:profile_i]
            elsif obj.builder_name.to_s == "profile_name_j"
              obj.text = @settings[:profile_j]
            elsif obj.builder_name.to_s == "home_guild_name"
              obj.text = @settings[:home_guild_name]
            end

            obj.signal_connect('changed') { on_update(obj) }
          elsif obj.class == Gtk::SpinButton
            obj.value = @settings[key]
            obj.adjustment.value = @settings[key]
            obj.signal_connect('changed') { on_update(obj) }
          elsif obj.class == Gtk::ComboBoxText
            if obj.builder_name.to_s == "home_guild"
              on_guild_load
            else
              on_drop_load(obj.builder_name.to_s)
            end
            obj.signal_connect('changed') { on_update(obj) }
          elsif obj.class == Gtk::Button
            if obj.builder_name.to_s == 'btn_reset'
              obj.signal_connect('clicked') do
                # Delete all the entries
                @settings[:item_include].each { |item| setting[:delete].call(@store, item, @settings[:item_include]) }

                # Reset defaults
                @settings[:item_include] = @default_buy.dup

                # Add defaults
                @settings[:item_include].each { |item| setting[:set].call(@store, item, @settings[:item_include]) }

                # List them
                @store.clear
                @settings[:item_include].each do |text| @store.append[0] = text end
              end
            end

            if obj.builder_name.to_s == 'btn_consignment_reset'
              obj.signal_connect('clicked') do
                # Delete all the entries
                @settings[:consignment_include].each { |item| setting[:delete].call(@c_store, item, @settings[:consignment_include]) }

                # Reset defaults
                @settings[:consignment_include] = @default_sell.dup

                # Add defaults
                @settings[:consignment_include].each { |item| setting[:set].call(@c_store, item, @settings[:consignment_include]) }

                # List them
                @c_store.clear
                @settings[:consignment_include].each do |text| @c_store.append[0] = text end
              end
            end

          elsif obj.class == Gtk::TreeView && obj.builder_name.to_s == 'item_include'
            if (@store = self["#{key}_store"]).nil?
              respond "** failed to find store for treeview #{key}"
              next
            elsif setting[:load].nil?
              respond "** no :load defined #{key}"
              next
            end

            if @settings[key].empty?
              @settings[key] = @default_buy.dup
            end

            setting[:load].call(@store, @settings[key])

            # setup the signals
            if (add = self["#{key}_add"]).nil?
              respond "** failed to find add for treeview #{key}"
              next
            elsif (delete = self["#{key}_delete"]).nil?
              respond "** failed to find delete for treeview #{key}"
              next
            elsif (entry = self["#{key}_entry"]).nil?
              respond "** failed to find entry for treeview #{key}"
              next
            end

            add.signal_connect('clicked') do
              if setting[:set].nil?
                respond "** no :set defined for #{key}"
                next
              elsif entry.text.empty?
                next
              end
              setting[:set].call(@store, entry.text, @settings[key])
              setting[:load].call(@store, @settings[key])
              entry.text = ''
            end

            delete.signal_connect('clicked') do
              if setting[:delete].nil?
                respond "** no :delete defined for #{key}"
                next
              elsif (selected = obj.selection.selected).nil?
                next
              end
              setting[:delete].call(@store, selected, @settings[key])
              setting[:load].call(@store, @settings[key])
            end
          elsif obj.class == Gtk::TreeView && obj.builder_name.to_s == 'consignment_include'
            if (@c_store = self["#{key}_store"]).nil?
              respond "** failed to find store for treeview #{key}"
              next
            elsif setting[:load].nil?
              respond "** no :load defined #{key}"
              next
            end

            if @settings[key].empty?
              @settings[key] = @default_sell.dup
            end

            setting[:load].call(@c_store, @settings[key])

            # setup the signals
            if (add = self["#{key}_add"]).nil?
              respond "** failed to find add for treeview #{key}"
              next
            elsif (delete = self["#{key}_delete"]).nil?
              respond "** failed to find delete for treeview #{key}"
              next
            elsif (entry = self["#{key}_entry"]).nil?
              respond "** failed to find entry for treeview #{key}"
              next
            end

            add.signal_connect('clicked') do
              if setting[:set].nil?
                respond "** no :set defined for #{key}"
                next
              elsif entry.text.empty?
                next
              end
              setting[:set].call(@c_store, entry.text, @settings[key])
              setting[:load].call(@c_store, @settings[key])
              entry.text = ''
            end

            delete.signal_connect('clicked') do
              if setting[:delete].nil?
                respond "** no :delete defined for #{key}"
                next
              elsif (selected = obj.selection.selected).nil?
                next
              end
              setting[:delete].call(@c_store, selected, @settings[key])
              setting[:load].call(@c_store, @settings[key])
            end
          elsif obj.class == Gtk::TreeView && obj.builder_name.to_s =~ /recipe_exclude|trash/
            if (store = self["#{key}_store"]).nil?
              respond "** failed to find store for treeview #{key}"
              next
            elsif setting[:load].nil?
              respond "** no :load defined #{key}"
              next
            end

            setting[:load].call(store, @settings[key])

            # setup the signals
            if (add = self["#{key}_add"]).nil?
              respond "** failed to find add for treeview #{key}"
              next
            elsif (delete = self["#{key}_delete"]).nil?
              respond "** failed to find delete for treeview #{key}"
              next
            elsif (entry = self["#{key}_entry"]).nil?
              respond "** failed to find entry for treeview #{key}"
              next
            end

            add.signal_connect('clicked') do
              if setting[:set].nil?
                respond "** no :set defined for #{key}"
                next
              elsif entry.text.empty?
                next
              end
              setting[:set].call(store, entry.text, @settings[key])
              setting[:load].call(store, @settings[key])
            end

            delete.signal_connect('clicked') do
              if setting[:delete].nil?
                respond "** no :delete defined for #{key}"
                next
              elsif (selected = obj.selection.selected).nil?
                next
              end
              setting[:delete].call(store, selected, @settings[key])
              setting[:load].call(store, @settings[key])
            end
          end
        end

        # checkboxes for array storage with id's <setting>:<value>
        # this is primarily used by the loot types
        objects.each do |obj|
          next unless obj.methods.include?(:builder_name)
          next unless obj.builder_name =~ /^([^:]+):(.*)$/i
          next unless obj.class == Gtk::CheckButton

          key = Regexp.last_match(1).to_sym
          value = Regexp.last_match(2).to_s
          next if Setup.get_setting(key).nil?

          # disable unless spell is known
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("forage_options:use_506")) unless Spell[506].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("forage_options:use_213")) unless Spell[213].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("forage_options:use_709")) unless Spell[709].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("forage_options:use_919")) unless Spell[919].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("forage_options:use_140")) unless Spell[140].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("skill_types:illusions")) && Char.prof != 'Sorcerer'
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("skill_types:teach")) && Char.prof != 'Sorcerer'
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("skill_types:learn")) && Char.prof != 'Sorcerer'

          obj.active = @settings[key].include?(value)

          # add in hook
          obj.signal_connect('toggled') do
            @settings[key].delete(value)
            if obj.active?
              @settings[key].push(value)
              @settings[key].uniq!.sort!
            end
          end
        end
      end
    end

    def start
      @running = true

      Gtk.queue { self['main'].show_all }

      wait_while { @running }
    end

    def list(cat_to_list: 'all')
      indent_size = 4
      print_array =
        proc do |key, value, indent|
          _respond("#{' ' * indent_size * indent.to_i}#{key}:")
          value.sort!.each { |entry| _respond("#{' ' * indent_size * (indent.to_i + 1)}#{value.index(entry) + 1}. #{entry}") }
        end

      print_value = proc { |key, value, indent| _respond("#{' ' * indent_size * indent.to_i}#{key}: #{value}") }

      categories = cat_to_list == 'all' ? %w[general] : [cat_to_list]
      if $frontend == 'stormfront'
        output = "<output class=\"mono\"/>\n"
      else
        output = String.new
      end
      categories.each do |opt|
        _respond("#{output}") if !output.empty?
        _respond("#{monsterbold_start}  #{opt.capitalize} =#{monsterbold_end}\n")
        @@categories[opt.to_sym].each do |id, _|
          value = @settings[id]
          value.class == Array ? print_array.call(id, value, 1) : print_value.call(id, value, 1)
        end
      end
      if $frontend == 'stormfront'
        output = "<output class=\"\"/>\n"
        _respond("#{output}")
      end
    end

    def self.update_setting(key, value)
      setting = Setup.get_setting(key)
      Util.msg('error', "** Setting \"#{key}\" does not exist") if setting.nil?

      action = nil

      if value.to_s =~ /^([+-])(.*)$/
        action = Regexp.last_match(1)
        value = Regexp.last_match(2).strip.downcase
      end

      if value == 'reset'
        @settings.delete(key)
        Util.msg("info", " Reset #{key}")
      elsif @settings[key].class == Array
        if value =~ /\d/ && @settings[key][value.to_i]
          @settings[key].delete_at(value.to_i)
        else
          @settings[key].delete(value)
        end

        if action == '-'
          Util.msg("info", " \"#{value}\" removed from \"#{key}\"")
        else
          @settings[key].push(value)
          Util.msg("info", " \"#{value}\" added to \"#{key}\"")
        end

        Util.msg("info", " \"#{key}\" is now \"#{@settings[key].join(', ')}\"")
      else
        if @settings[key].class == FalseClass || @settings[key].class == TrueClass
          value = value =~ /^true|1|yes|on/ ? true : false
        elsif @settings[key].class == Integer
          value = value.to_i
        end

        Util.msg("info", " \"#{key}\" has been set to \"#{value}\"")
        @settings[key] = value
      end
    end
  end
end

# Main
module BlackArts
  BlackArts_version = '1.0.0'
  @@data ||= nil

  ##### Data & Setup Start #####

  def self.data
    @@data
  end

  def self.load(settings)
    @@data = Data.new(settings)
  end

  def self.load_defaults()
    default_hash = {}
    FileUtils.mkdir_p(File.join(DATA_DIR, XMLData.game, Char.name, 'bigshot_profiles'))
    File.write(File.join(DATA_DIR, XMLData.game, Char.name, 'blackarts.yaml'), default_hash.to_yaml)
    default_hash
  end

  def self.load_profile(name: Char.name)
    if name != nil
      filename = File.join(DATA_DIR, XMLData.game, name, 'blackarts.yaml')
      if File.exist?(filename) && name == Char.name
        settings_hash = YAML.load_file(filename)
      elsif !File.exist?(filename) && name != Char.name
        Util.msg('error', " BlackArts.load_profile: Attempt to load a profile that does not exist.")
      elsif !File.exist?(filename) && name == Char.name
        Util.msg("info", " No current settings found.  Loading defaults for configurtion.")
        Util.msg("info", " Suggest you configure to your needs with ;blackarts setup")
        settings_hash = BlackArts.load_defaults()
      else
        Util.msg('error', ' BlackArts.load_profile: There was an unknown error with loading a profile')
      end
    else
      Util.msg('error', ' BlackArts.load_profile: name not defined')
    end

    settings_hash
  end

  def self.save_profile(name: Char.name)
    if name != nil
      filename = File.join(DATA_DIR, XMLData.game, Char.name, 'blackarts.yaml')
      if name == Char.name
        File.write(filename, BlackArts.data.settings.to_yaml)
        Util.msg("info", " Settings saved to file: #{filename}.")
      elsif File.exist?(filename) && name != Char.name
        Util.msg("info", " You are attempt to overwrite another profile!")
        Util.msg("info", " If you wish to overwrite, please ;unpause blackarts.")
        Util.msg("info", " Else ;kill blackarts and choose another filename.")
        pause_script
        File.write(filename, BlackArts.data.settings.to_yaml)
        Util.msg("info", " Settings saved to file: #{filename}.")
      elsif !File.exist?(filename) && name != Char.name
        File.write(filename, BlackArts.data.settings.to_yaml)
        Util.msg("info", " Settings are being saved to another profile!")
        Util.msg("info", " Settings saved to file: #{filename}.")
      else
        Util.msg('error', ' BlackArts.save_profile: There was an unknown error with saving a profile')
      end
    end
  end

  module Hunting
    def self.hunting_areas(npc)
      Util.msg("debug", "Hunting.hunting_areas: npc - #{npc}")

      if npc =~ /centaur/
        npc = 'centaur'
      elsif npc =~ /tree viper/
        npc = 'tree viper'
      end

      hunting_locations = {
        'arch wight'          => [2974, 10729],
        'arctic titan'        => [2569],
        'black bear'          => [4215, 10659],
        'black forest viper'  => [9709],
        'black leopard'       => [10171],
        'bone golem'          => [7782, 10694],
        'cave lizard'         => [9567, 29058],
        'cave troll'          => [5129],
        'centaur'             => [5323, 5995],
        'cougar'              => [5323],
        'crested basilisk'    => [5496, 9939],
        'cyclops'             => [5368],
        'dark shambler'       => [8443, 10729],
        'dreadnought raptor'  => [4714],
        'fenghai'             => [5251],
        'fire cat'            => [6385],
        'fire rat'            => [6385],
        'fire sprite'         => [2230],
        'frost giant'         => [2569],
        'forest troll'        => [5213],
        'ghoul master'        => [7184, 10729],
        'giant hawk-owl'      => [1649],
        'great boar'          => [4215, 5148, 6060],
        'greater faeroth'     => [4903],
        'greater ghoul'       => [5207, 5835],
        'greater kappa'       => [7615],
        'greater moor wight'  => [10008],
        'greater spider'      => [5129],
        'hill troll'          => [4251],
        'hunter troll'        => [1635],
        'ice troll'           => [2569],
        'kiramon defender'    => [4969],
        'kobold'              => [5055, 10271],
        'lesser faeroth'      => [4903],
        'lesser ghoul'        => [7173, 5835],
        'lesser moor wight'   => [11639, 10008],
        'lesser mummy'        => [4144],
        'lesser vruul'        => [19261],
        'mammoth arachnid'    => [8326],
        'mastodonic leopard'  => [4714],
        'mist wraith'         => [9344, 5835],
        'mountain goat'       => [1617],
        'mountain lion'       => [3566],
        'mountain ogre'       => [8045],
        'mountain troll'      => [6510],
        'myklian'             => [7478],
        'Neartofar orc'       => [10622],
        'nightmare steed'     => [7332],
        'night mare'          => [7332],
        'ogre warrior'        => [6799, 10660],
        'phosphorescent worm' => [9204],
        'plains lion'         => [10171],
        'plains orc warrior'  => [4990],
        'plumed cockatrice'   => [10622],
        'red bear'            => [3563],
        'ridgeback boar'      => [4612],
        "roa'ter"             => [13988],
        'sea nymph'           => [487],
        'scaly burgee'        => [1633],
        'shadow mare'         => [7332],
        'shadow steed'        => [7332],
        'shelfae chieftain'   => [7659],
        'skeletal giant'      => [8450],
        'skeleton'            => [7173, 5835],
        'snowy cockatrice'    => [3207],
        'storm giant'         => [8450],
        'storm griffin'       => [3980],
        'striped warcat'      => [6385],
        'tawny brindlecat'    => [4612],
        'three-toed tegu'     => [1633],
        'tree viper'          => [1220],
        'troll chieftain'     => [11403],
        'tusked ursian'       => [4738],
        'vesperti'            => [5297],
        'war troll'           => [4251],
        'wraith'              => [6889],
      }

      location_list = hunting_locations[npc]

      if location_list.nil?
        Util.msg('yellow', " The look up for #{ncp} is not in the hunting_list")
        Util.msg('yellow', " Please report this to EO in the discord scripting channel for correction")
        exit
      end

      location_list.delete_if { |room_id|
        path = Room.current.path_to(Room[room_id])
        BlackArts.data.boundaries.any? { |fence| path.include?(fence) } || path.nil?
      }

      return location_list.first
    end

    def self.run_scripts(scripts)
      scripts.split(/,\s*/).each do |i|
        Util.msg("debug", "Hunting.run_scripts: scripts - #{i}")
        tokens = i.split(/\s+/)
        if (tokens.size > 1)
          start_script tokens[0], tokens[1..-1]
          wait_until { !running? tokens[0] }
        else
          start_script tokens[0]
          wait_until { !running? tokens[0] }
        end
      end
    end

    def self.set_eval
      bounty_eval = %Q{ !!(j=[];c=0;GameObj.inv.each { |sack| sack.contents.each { |k| j.push(k) if k.name =~ /bundle of #{BlackArts.data.skin}/ && !hidden?}};j.uniq.each { |k| lines = Lich::Util.quiet_command_xml("measure #"+k.id.to_s, /You glance through/); c += $1.to_i if lines.any? { |l| l=~ /count a total of (\\d+) <a exist/}};c >= BlackArts.data.skin_number.to_i)}
      bounty_eval += %Q{ || !!(c=0;GameObj.inv.each { |sack| sack.contents.each{ |i| c+=1 if i.name =~ /#{BlackArts.data.skin}/i}};c >= BlackArts.data.skin_number.to_i)}

      UserVars.op['bounty_eval'] = bounty_eval
      Util.msg("debug", "Hunting.set_eval: bounty_eval - #{bounty_eval}")
      sleep 0.2
    end

    def self.pre_hunt
      BlackArts.data.settings[:forage_prep_commands].split(",").each { |i|
        if i =~ /^script\s+(.*?)(\s|$)(.*)/i
          name = $1
          args = $3
          if (args == nil || args =~ /^\s*$/)
            start_script name
          else
            args = args.split(/ /)
            start_script name, args
          end
        else
          fput(i)
          sleep(0.3)
        end
      }

      BlackArts.data.settings[:forage_prep_scripts].split(/,\s*/).each do |i|
        tokens = i.split(/\s+/)
        if (tokens.size > 1)
          start_script tokens[0], tokens[1..-1]
        else
          start_script tokens[0]
        end
      end
    end

    def self.post_hunt
      commands = BlackArts.data.settings[:forage_post_commands]
      kill_scripts = BlackArts.data.settings[:forage_prep_scripts]
      scripts = BlackArts.data.settings[:forage_post_scripts]

      unless kill_scripts.to_s.empty?
        kill_scripts.split(/,\s*/).each do |i|
          tokens = i.split(/\s+/)
          kill_script(tokens[0]) if running?(tokens[0])
        end
      end

      unless commands.to_s.empty?
        commands.split(",").each { |i|
          Util.msg("debug", "commands: #{i}")
          if i =~ /^script\s+(.*?)(\s|$)(.*)/i
            name = $1
            args = $3
            if (args == nil || args =~ /^\s*$/)
              Script.run(name)
            else
              args = args.split(/ /)
              Script.run(name, args)
            end
          else
            fput(i)
            sleep(0.3)
          end
        }
        Util.msg("debug", "End of commands")
      end

      unless scripts.to_s.empty?
        scripts.split(/,\s*/).each do |i|
          Util.msg("debug", "scripts: #{i}")
          tokens = i.split(/\s+/)
          if (tokens.size > 1)
            Script.run(tokens[0], tokens[1..-1].join(", "))
          else
            Script.run(tokens[0])
          end
        end
        Util.msg("debug", "End of scripts")
      end
    end

    def self.go_hunting
      original_targets = UserVars.op['targets']
      original_fried = UserVars.op['fried']
      original_rest = UserVars.op['rest_till_exp']
      original_rest_scripts = UserVars.op['resting_scripts']

      before_dying {
        Script.kill("bigshot") if Script.running?("bigshot")
        UserVars.op['targets'] = original_targets
        UserVars.op['bounty_eval'] = ''
        UserVars.op['fried'] = original_fried
        UserVars.op['rest_till_exp'] = original_rest
        UserVars.op['resting_scripts'] = original_rest_scripts
      }

      Hunting.set_eval

      UserVars.op['resting_scripts'] = UserVars.op['resting_scripts'].split(',').map { |script| if script =~ /eloot sell/ then "eloot sell alchemy_mode" else script end }.join(", ")
      UserVars.op['fried'] = "101"
      UserVars.op['rest_till_exp'] = "100"

      if BlackArts.data.settings[:only_required_creatures]
        if (result = UserVars.op['targets'].match(/#{BlackArts.data.creature.split.last}(\([a-j]\))/))
          routine = $1
        end
        new_target = result.nil? ? BlackArts.data.creature.split.last : BlackArts.data.creature.split.last + routine
        UserVars.op['targets'] = new_target
      end

      Util.mapped_room

      Script.run('bigshot', 'bounty')

      # Final Looting, sometimes BS stops to soon
      Script.run('eloot')

      UserVars.op['targets'] = original_targets
      UserVars.op['bounty_eval'] = ''
      UserVars.op['fried'] = original_fried
      UserVars.op['rest_till_exp'] = original_rest
    end

    def self.switch_profile(skin)
      Util.msg("debug", "Hunting.switch_profile: skin - #{skin}")
      skin = skin.gsub(/^some /, "")
      profile_letter = nil
      options = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]

      # Check for full name first
      options.each { |letter| profile_letter = letter if BlackArts.data.settings["names_#{letter}".to_sym] =~ /#{skin}/i }
      Util.msg("debug", "Hunting.switch_profile: profile_letter - #{profile_letter}")
      if profile_letter
        dir = BlackArts.data.dir
        profile = "#{dir}/#{BlackArts.data.settings["profile_#{profile_letter}".to_sym] + ".yaml"}"
        UserVars.op = YAML.load_file(profile)
        BlackArts.data.settings[:only_required_creatures] = BlackArts.data.settings["kill_#{profile_letter}".to_sym] ? true : false
        return
      else
        Util.msg "info", " No Bigshot profile found for #{skin} from a(n) #{BlackArts.data.creature}. Please check the Profiles tab. Exiting..."
        exit
      end
    end
  end

  module Inventory
    def self.all_sack_contents
      return (BlackArts.data.sacks["default"].contents.to_a | BlackArts.data.sacks["reagent"].contents.to_a | BlackArts.data.sacks["herb"].contents.to_a)
    end

    def self.free_hand
      unless (GameObj.right_hand.id.nil? and ([Wounds.rightArm, Wounds.rightHand, Scars.rightArm, Scars.rightHand].max < 3)) or (GameObj.left_hand.id.nil? and ([Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max < 3))
        if GameObj.right_hand.id && ([Wounds.rightArm, Wounds.rightHand, Scars.rightArm, Scars.rightHand].max < 3 || [Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max == 3)
          Util.wait_rt
          Inventory.free_hands(right: true)
        else
          Util.wait_rt
          Inventory.free_hands(left: true)
        end
      end
    end

    def self.free_hands(right: false, left: false, both: false)
      if (right || both) && checkright
        if !GameObj.right_hand.id.nil?
          Inventory.single_drag(GameObj.right_hand) # drags single item into container
        end
      end

      if (left || both) && checkleft
        if !GameObj.left_hand.id.nil?
          Inventory.single_drag(GameObj.left_hand) # drags single item into container
        end
      end
    end

    def self.open_single_container(sack)
      return if sack.nil? || sack.empty?

      container = sack.class == GameObj ? sack : BlackArts.data.sacks[sack]

      # If its in the game obj and contents.is_a?(Array) return
      return if GameObj.containers.keys.include?(container.id) && container.contents.is_a?(Array)

      # Still here? Assume the container is closed and open it
      Util.get_lines("open ##{container.id}", /<exposeContainer|That is already open|<container|There doesn't seem to be any way to do that.|You open/i)

      # Check out whats inside
      lines = Util.get_lines("look in ##{container.id}", /<exposeContainer|<dialogData|<container|you glance|There is nothing/i)
      return if lines.any? { |l| l =~ /You glance|There is nothing/i }

      20.times {
        break if GameObj.containers.keys.include?(container.id) && container.contents.is_a?(Array)
        sleep 0.1
      }
    end

    def self.drag(item) # drags things from inventory to a hand
      return if item.nil? || item.empty? || item.name == "Empty"

      to = GameObj.right_hand.id.nil? ? 'right' : 'left'

      line = Util.get_res("_drag ##{item.id} #{to}", BlackArts.data.get_regex)

      20.times {
        return true if ([GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id))
        break if line =~ /Get what|I could not find what you were referring to/
        sleep 0.1
      }

      if line =~ /Get what|I could not find what you were referring to/
        Util.msg("info", "Can't find #{item.name}.")
      end

      return false
    end

    def self.single_drag(item) # drags single item into container
      return if item.nil?
      # Fixme - types don't show in-hand
      if item.type =~ /alchemy equipment|reagent|jar|herb/
        Inventory.store_item(BlackArts.data.sacks["reagent"], item)
      else
        Inventory.store_item(BlackArts.data.sacks["default"], item)
      end
    end

    def self.store_item(bag, item)
      return if item.nil? || item.name == "Empty"

      Util.get_res("_drag ##{item.id} ##{bag.id}", /You|Spreading your wings|I could not find what you were referring to|Draping the|Heedful of your surroundings|won't fit|crumbles? and decays? away|That is not yours/i)

      20.times {
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) && bag.contents.to_a.map(&:id).include?(item.id))
        sleep 0.1
      }

      # Still here? Assume bag is closed
      Inventory.open_single_container(bag)

      # Try it again
      fput "_drag ##{item.id} ##{bag.id}"

      10.times {
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) && bag.contents.to_a.map(&:id).include?(item.id))
        sleep 0.1
      }

      # try default
      if bag.id != BlackArts.data.sacks["default"].id
        bag = BlackArts.data.sacks["default"]
        Util.get_res("_drag ##{item.id} ##{bag.id}", /You|Spreading your wings|I could not find what you were referring to|Draping the|Heedful of your surroundings|won't fit|crumbles? and decays? away|That is not yours/i)

        20.times {
          return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) && bag.contents.to_a.map(&:id).include?(item.id))
          sleep 0.1
        }
      end
      # Give up and return false
      return false
    end
  end

  module Guild
    def self.initialize_tracker
      {
        error: {},
        recipe_count: {},
        claimed_ingredients: [],
        ingredient_count: {},
        extra_ingredients: [],
        found: {},
        buy: {},
        forage: {},
        kill_for: {},
        steps: [],
        prepare_steps: [],
        finish_steps: [],
        cost: 0,
        time: 0,
        itime: {},
        icost: {}
      }
    end

    def self.check_audience
      return true if GameObj.pcs.size > 4
      return false if GameObj.pcs.size < 3

      audience = 0
      lines = Lich::Util.quiet_command_xml("gld rank all", /<a exist=".*?" noun=".*?\/a> is .*? of (your guild|the Sorcerer Guild).|You look around, but don't see anyone else/i)
      lines.each { |line|
        audience += 1 if line =~ /is not part of your guild/
        audience += 1 if line =~ /is an inactive member of the Sorcerer Guild/
        audience += 2 if line =~ /is an active member of the Sorcerer Guild/
      }
      return true if audience > 4
      return false
    end

    def self.check_recipe(args)
      Util.msg("debug", "Guild.check_recipe: args - #{args}")
      if args[:name]
        recipe_list = BlackArts.data.recipes.find_all { |recipe| recipe[:product] == args[:name] }
      elsif args[:names]
        recipe_list = BlackArts.data.recipes.find_all { |recipe| args[:names].include?(recipe[:product]) }
      elsif args[:recipe]
        recipe_list = [args[:recipe]]
      elsif args[:recipes]
        recipe_list = args[:recipes]
      end

      tracker = Guild.initialize_tracker
      args[:reps] ||= 1

      # Check list of recipes and sort by time/money
      for recipe in recipe_list.dup
        # echo recipe[:product]
        tmp_tracker = Guild.initialize_tracker
        valid_tracker = Guild.recursive_check_recipe(recipe, tmp_tracker, top_level = true)
        recipe[:value] = (valid_tracker[:cost] + (valid_tracker[:time] * 15))
        # echo "#{recipe[:product]} valid_tracker[:cost]: #{valid_tracker[:cost]} valid_tracker[:time] * 15: #{valid_tracker[:time] * 15} recipe[:value]: #{recipe[:value]}"
        # echo "valid_tracker: #{valid_tracker}"
        # echo "-------------------------------------------------------------------------"
        next if args[:prep_create]
        if !valid_tracker[:error].empty?
          Util.msg("debug", "Guild.check_recipe | Recipe: #{recipe} deleted because #{valid_tracker[:error]}")
          recipe_list.delete(recipe)
        end
      end

      if recipe_list.empty?
        Util.no_recipe
      end

      recipe_list.sort! { |a, b| a[:value] <=> b[:value] }
      Util.msg("debug", "Guild.check_recipe | Recipe List: #{recipe_list}")
      for recipe in recipe_list.dup
        temp_tracker = Guild.initialize_tracker
        args[:reps].to_i.times {
          temp_tracker = Guild.recursive_check_recipe(recipe, temp_tracker, top_level = true)
          BlackArts.data.ingredient_count.each_pair { |ingredient_id, count| temp_tracker[:ingredient_count][ingredient_id] ||= count }
        }
        Util.msg("debug", "Guild.check_recipe | Recipe: #{recipe} temp_tracker[:error]: #{temp_tracker[:error]}")
        if temp_tracker[:error].empty? || args[:prep_create]
          tracker = temp_tracker
          break
        end
      end
      # echo "-------------------------------------------------------------------------"
      # echo "tracker: #{tracker[:recipe_count].empty?} tracker_error: #{tracker[:error]}"

      if tracker[:recipe_count].empty?
        Util.msg('error', " Failed to find a recipe: (use ';blackarts suggest' to figure out why)")
        if (Time.now - BlackArts.data.last_alchemy_buy) > 600
          Actions.buy_elusive
        end
        exit
      end

      tracker[:kill_for].each { |k, v|
        v.each { |k2, _v2|
          how_many = 0
          tracker[:steps].each { |step| how_many += 1 if step.include?(k2) }
          tracker[:kill_for][k][k2] = how_many
        }
      }

      fixed_buy = Hash.new
      tracker[:buy].each_pair { |where_what, how_many|
        where, what = where_what.split(';')
        fixed_buy[where] ||= Hash.new
        fixed_buy[where][what] = how_many
      }
      tracker[:buy] = fixed_buy
      tracker.delete(:claimed_ingredients)
      tracker.delete(:ingredient_count)
      tracker.delete(:extra_ingredients)
      Util.msg("debug", "Guild.check_recipe: tracker - #{tracker}")
      return tracker
    end

    def self.check_ingredient(ingredient_name, temp_claimed_ingredients, temp_ingredient_count)
      temp_claimed_ingredients ||= []
      temp_ingredient_count ||= BlackArts.data.ingredient_count.dup
      found = false

      equivalent_ingredients = (Recipes.alchemy_equivalents.find { |list| list.include?(ingredient_name) } || [ingredient_name])

      if (holy_oil = Inventory.all_sack_contents.find { |obj| equivalent_ingredients.include?(obj.name) && obj.name =~ /minor holy oil/i && (temp_ingredient_count[obj.id].nil? || temp_ingredient_count[obj.id] > 0) })
        if temp_ingredient_count[holy_oil.id].nil?
          Inventory.free_hands(both: true)
          Util.get_res("get ##{holy_oil.id}", BlackArts.data.get_regex)

          lines = Util.get_lines("measure ##{holy_oil.id}", /The <a exist=".*?" noun="oil">minor holy oil<\/a> looks like/)
          amount = lines[0].match(/<a exist="\d+" noun="[^"]+">[^<]+<\/a>.*?(\d+)\s+dose/)[1].to_i

          temp_ingredient_count[holy_oil.id] = amount
          BlackArts.data.ingredient_count[holy_oil.id] = amount
          Inventory.single_drag(holy_oil)
        end

        temp_ingredient_count[holy_oil.id] -= 1
        found = true
      elsif (ingredient = Inventory.all_sack_contents.find { |obj| equivalent_ingredients.include?(obj.name) && (obj.name !~ Regexp.union(BlackArts.data.bundled_herb, /minor holy oil/i)) && !temp_claimed_ingredients.include?(obj.id) })
        temp_claimed_ingredients.push(ingredient.id)
        found = true
      elsif (bundle = Inventory.all_sack_contents.find { |obj| equivalent_ingredients.include?(obj.name) && (obj.name =~ BlackArts.data.bundled_herb) && (temp_ingredient_count[obj.id].nil? || temp_ingredient_count[obj.id] > 0) })
        if temp_ingredient_count[bundle.id].nil?
          Inventory.free_hands(both: true)
          Util.get_res("get ##{bundle.id}", BlackArts.data.get_regex)

          lines = Util.get_lines("measure ##{bundle.id}", /The .*? has ([0-9]+) (bite|bites) left/)
          amount = lines[0].scan(/[0-9]+/)[1].to_i > 0 ? lines[0].scan(/[0-9]+/)[1].to_i : 1

          temp_ingredient_count[bundle.id] = amount
          BlackArts.data.ingredient_count[bundle.id] = amount

          Inventory.single_drag(bundle)

        end
        temp_ingredient_count[bundle.id] -= 1
        found = true
      elsif (jar = Inventory.all_sack_contents.find { |obj| (obj.after_name =~ /containing (?:#{equivalent_ingredients.collect { |name| name.sub('some ', '(?:some )?').sub('handful of ', '(?:handful of )?').sub('sprig of ', '(?:sprig of )?').sub('tooth', '(?:teeth|tooth)').sub('leaf', '(?:leaf|leaves)').sub(/y\b/, '(?:y|ie)').split(' ').join('s? ') }.join('|')})/) and (temp_ingredient_count[obj.id].nil? or temp_ingredient_count[obj.id] > 0) })
        if temp_ingredient_count[jar.id].nil?
          amount = Util.jar_count(jar)
          temp_ingredient_count[jar.id] = amount
          BlackArts.data.ingredient_count[jar.id] = amount
        end
        temp_ingredient_count[jar.id] -= 1
        found = true
      elsif (bundle = Inventory.all_sack_contents.find { |obj| (obj.name =~ /^bundle of (?:#{equivalent_ingredients.collect { |name| name.split(' ').join('s? ') }.join('|')})/) && (temp_ingredient_count[obj.id].nil? || temp_ingredient_count[obj.id] > 0) })
        if temp_ingredient_count[bundle.id].nil?
          lines = Util.get_lines("measure ##{bundle.id}", /^You.*?total of [0-9]+/)
          amount = lines[0].scan(/[0-9]+/)[0].to_i
          temp_ingredient_count[bundle.id] = amount
          BlackArts.data.ingredient_count[bundle.id] = amount
        end
        temp_ingredient_count[bundle.id] -= 1
        found = true
      end

      [found, temp_claimed_ingredients, temp_ingredient_count]
    end

    def self.check_locations(item, place = nil)
      entry = BlackArts.data.locations.find { |location| location[:starting_room] == BlackArts.data.current_room.id && location[:item] == item }

      if entry
        return [entry[:room], entry[:travel]]
      end

      room_list = place == "hunting" ? Hunting.hunting_areas(item).to_i : BlackArts.data.current_room.find_nearest_by_tag(item).to_i
      extra_time = place == "hunting" ? 30 : (place == "foraging" ? 10 : 0)
      travel_time = 0

      unless room_list.zero?
        path = BlackArts.data.current_room.path_to(Room[room_list])

        if BlackArts.data.boundaries.any? { |fence| path.include?(fence) } || path.nil?
          room_list = 0
        else
          travel_time = extra_time + (path.length * 0.4)
        end
      end

      new_travel_data = { starting_room: BlackArts.data.current_room.id, item: item, room: room_list, travel: travel_time }
      BlackArts.data.locations.push(new_travel_data)

      return [room_list, travel_time]
    end

    def self.recursive_check_recipe(recipe, tracker, top_level)
      # recipe_start = Time.now
      # respond "#{''.ljust(@recursive_padding)}start recipe: #{recipe[:product]}" if BlackArts.data.settings[:debug]
      @recursive_padding += 3

      recipe[:steps].each { |step|
        # step_start = Time.now
        # respond "#{''.ljust(@recursive_padding)}start step: #{step}" if BlackArts.data.settings[:debug]
        @recursive_padding += 3
        if step =~ /^(?:add|grind|extract|distill|separate)\s+(.*)/
          ingredient_name = $1

          if step =~ /^grind/
            unless Inventory.all_sack_contents.any? { |obj| obj.noun == 'mortar' }
              tracker[:error]['mortar'] = 1
            end
            if Char.prof == 'Wizard'
              tracker[:time] += 5
            else
              tracker[:time] += 25
            end
          elsif step =~ /^extract/
            if BlackArts.data.ranks > 14
              tracker[:time] += 40
            else
              tracker[:error]['extract skill'] = 1
            end
          elsif step =~ /^distill/
            tracker[:time] += 40
          end
          if tracker[:extra_ingredients].include?(ingredient_name)
            tracker[:extra_ingredients].delete_at(tracker[:extra_ingredients].index(ingredient_name))
          else
            found_this, temp_claimed_ingredients, temp_ingredient_count = Guild.check_ingredient(ingredient_name, tracker[:claimed_ingredients].dup, tracker[:ingredient_count].dup)
            if found_this
              tracker[:claimed_ingredients] = temp_claimed_ingredients
              tracker[:ingredient_count] = temp_ingredient_count
              tracker[:found][ingredient_name] = tracker[:found][ingredient_name].to_i + 1
              if Recipes.alchemy_reagent_op_cost[ingredient_name]
                tracker[:cost] += Recipes.alchemy_reagent_op_cost[ingredient_name]
              end
            else
              support_recipe_list = BlackArts.data.recipes.find_all { |r| r[:product] == ingredient_name }
              if support_recipe_list.length > 0
                tracker_list = Array.new
                for support_recipe in support_recipe_list
                  temp_tracker = { :error => tracker[:error].dup, :recipe_count => tracker[:recipe_count].dup, :claimed_ingredients => tracker[:claimed_ingredients].dup, :ingredient_count => tracker[:ingredient_count].dup, :extra_ingredients => tracker[:extra_ingredients].dup, :found => tracker[:found].dup, :buy => tracker[:buy].dup, :forage => tracker[:forage].dup, :kill_for => tracker[:kill_for].dup, :steps => tracker[:steps].dup, :prepare_steps => tracker[:prepare_steps].dup, :finish_steps => tracker[:finish_steps].dup, :cost => tracker[:cost], :time => tracker[:time], :itime => tracker[:itime].dup, :icost => tracker[:icost].dup }
                  temp_tracker = Guild.recursive_check_recipe(support_recipe.dup, temp_tracker, _top_level = false)
                  tracker_list.push(temp_tracker)
                  BlackArts.data.ingredient_count.each_pair { |ingredient_id, count| tracker[:ingredient_count][ingredient_id] ||= count }
                end
                tracker_list.sort! { |a, b| (a[:cost] + (a[:time] * 15)) <=> (b[:cost] + (b[:time] * 15)) }

                unless (tracker = tracker_list.find { |t| t[:error].empty? })
                  tracker_list.sort! { |a, b|
                    ae = 0
                    a[:error].values.each { |v| ae += v }
                    be = 0
                    b[:error].values.each { |v| be += v }
                    ae <=> be
                  }
                  tracker = tracker_list.first
                end
              else
                tracker[:error][ingredient_name] = tracker[:error][ingredient_name].to_i + 1
              end
            end
          end
        elsif step =~ /^buy\s+.*?from\s+(.*)/
          place = Regexp.last_match(1)

          room_list, travel_time = Guild.check_locations(place, 'shopping')

          if room_list.zero?
            tracker[:error]["#{place} to buy #{recipe[:product]}"] = tracker[:error]["#{place} to buy #{recipe[:product]}"].to_i + 1
            tracker[:time] += travel_time
            tracker[:cost] += recipe[:cost].to_i
          else
            tracker[:time] += travel_time
            tracker[:cost] += recipe[:cost].to_i
            tracker[:buy]["#{place};#{recipe[:product]}"] = tracker[:buy]["#{place};#{recipe[:product]}"].to_i + 1
          end
        elsif step =~ /^forage( in sunlight| in moonlight)?/
          light = Regexp.last_match(1)
          herb_name = recipe[:product].gsub(/^some /, "")

          room_list, travel_time = Guild.check_locations(herb_name, 'foraging')

          if room_list.zero?
            tracker[:error][recipe[:product]] = tracker[:error][recipe[:product]].to_i + 1
          elsif (light == ' in sunlight') and Util.is_moonlight
            tracker[:error]["sunlight to forage for #{recipe[:product]}"] = tracker[:error]["sunlight to forage for #{recipe[:product]}"].to_i + 1
          elsif (light == ' in moonlight') and Util.is_sunlight
            tracker[:error]["moonlight to forage for #{recipe[:product]}"] = tracker[:error]["moonlight to forage for #{recipe[:product]}"].to_i + 1
          else
            tracker[:time] += travel_time
            tracker[:forage][recipe[:product]] = tracker[:forage][recipe[:product]].to_i + 1
          end
        elsif step =~ /^kill\s+(.*)/
          npc = Regexp.last_match(1)

          room_list, travel_time = Guild.check_locations(npc, 'hunting')

          if room_list.zero?
            tracker[:error][recipe[:product]] = tracker[:error][recipe[:product]].to_i + 1
          else
            tracker[:kill_for][npc] ||= Hash.new
            tracker[:time] += travel_time
            tracker[:kill_for][npc][recipe[:product]] = tracker[:kill_for][npc][recipe[:product]].to_i + 1
          end
        elsif step =~ /^light/
          # Nothing to see here: should have a cauldron
          conditions = {
            'checkroom'         => checkroom == '[A Secluded Corner]',
            'room_desc'         => GameObj.room_desc.any? { |obj| obj.noun == 'cauldron' },
            'loot_desc'         => (GameObj.loot.any? { |obj| obj.noun =~ /#{BlackArts.data.sacks["cauldron"]}/ } && !BlackArts.data.sacks["cauldron"].nil?),
            'all_sack_contents' => (Inventory.all_sack_contents.any? { |obj| obj.noun =~ /#{BlackArts.data.sacks["cauldron"].noun}/ } && !BlackArts.data.sacks["cauldron"].nil?)
          }

          if conditions.values.all?(&:!) # Check if all conditions are false
            tracker[:error]['cauldron'] = 1
          end
        elsif step =~ /^special/
          items_to_find = {
            "vial for sea water"  => BlackArts.data.sea_water_vial,
            "flask for sea water" => BlackArts.data.sea_water_flask
          }

          items_to_find.each do |tracker_key, item_name|
            if (item = Inventory.all_sack_contents.find { |obj| obj.name =~ item_name })
              tracker[:found][item.name] = 1
            else
              tracker[:error][tracker_key] = 1
            end
          end
          tracker[:time] += 40
        elsif step =~ /check blood/
          need_blood = true
          vials = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.name =~ BlackArts.data.sea_water_vial }
          flasks = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.name =~ BlackArts.data.sea_water_flask }
          equipment = vials + flasks

          if vials.length.positive? && flasks.length.positive?
            equipment.each do |item|
              lines = BlackArts::Util.get_lines("look in ##{item.id}", /cork that holds it securely closed|cork that dangles at its side/)
              if lines.grep(/is filled with a dark crimson fluid/i).any?
                need_blood = false
                break
              end
            end
          end

          if need_blood
            tracker[:error]['troll blood'] = 1
          else
            tracker[:found]['troll blood'] = 1
          end

          tracker[:time] += 40
        elsif step =~ /^simmer/
          tracker[:time] += 20
        elsif step =~ /^boil/
          tracker[:time] += 20
        elsif step =~ /^chant/
          tracker[:time] += 30
        elsif step =~ /^infuse/
          tracker[:time] += 15
          unless BlackArts.data.ranks >= 30
            tracker[:error]['alchemy infuse'] = 1
          end
        elsif step =~ /^channel/
          tracker[:time] += 30
        elsif step =~ /^seal/
          tracker[:time] += 26
        elsif step =~ /^refract (moonlight|sunlight) through (.* lens)$/
          light = Regexp.last_match(1)
          lens = Regexp.last_match(2)

          unless Inventory.all_sack_contents.any? { |obj| obj.name == lens }
            tracker[:error][lens] = 1
          end

          if (light == 'sunlight' && Util.is_moonlight) || (light == 'moonlight' && Util.is_sunlight)
            tracker[:error][light] = 1
          end

          tracker[:time] += 10
        else
          echo "warning: unkown step: #{step}"
        end
        @recursive_padding -= 3
        # respond "#{''.ljust(@recursive_padding)}end step: #{step}: #{Time.now - step_start}" if BlackArts.data.settings[:debug]
      }
      if top_level
        tracker[:recipe_count][recipe[:product]] = tracker[:recipe_count][recipe[:product]].to_i + 1
        recipe[:steps].each { |step| tracker[:finish_steps].push(step) unless step =~ /^buy|^forage|^kill/ }
      else
        recipe[:steps].each { |step| tracker[:prepare_steps].push(step) unless step =~ /^buy|^forage|^kill|check blood/ }
      end
      recipe[:steps].each { |step| tracker[:steps].push(step) unless step =~ /^buy|^forage|^kill/ }
      if recipe[:product] =~ /^(?:s'|t')?ayanad crystal$/
        tracker[:extra_ingredients].push(recipe[:product])
      end
      @recursive_padding -= 3
      # respond "#{''.ljust(@recursive_padding)}end recipe: #{recipe[:product]}: #{Time.now - recipe_start}" if BlackArts.data.settings[:debug]

      tracker
    end

    def self.gld_suggestions(guild_status)
      if guild_status.values.any? { |hash| hash[:recipes].nil? }
        guild_status.each_key do |type|
          if guild_status[type][:task] =~ /(?:with your|that involve) (.*?)(?: ability| mana|ing spells|ing|ing mana|ing spirit)?$/
            required_step = $1
            if guild_status[type][:task] =~ /cauldron workshop/
              guild_status[type][:recipes] = BlackArts.data.recipes.find_all { |recipe| recipe[:type].include?(type) and recipe[:rank] and guild_status[type][:rank] >= recipe[:rank].min and guild_status[type][:rank] <= recipe[:rank].max and recipe[:steps].any? { |step| step =~ /^#{required_step}/ } && !recipe[:steps].any? { |step| step =~ /^refract/ } }
            else
              guild_status[type][:recipes] = BlackArts.data.recipes.find_all { |recipe| recipe[:type].include?(type) and recipe[:rank] and guild_status[type][:rank] >= recipe[:rank].min and guild_status[type][:rank] <= recipe[:rank].max and recipe[:steps].any? { |step| step =~ /^#{required_step}/ } }
            end
          elsif guild_status[type][:task] =~ /follow some tough recipes and create some items|visit a skilled master for a lesson/
            guild_status[type][:recipes] = BlackArts.data.recipes.find_all { |recipe| (recipe[:product] != 'flask of pure water') and recipe[:type].include?(type) and recipe[:rank] and guild_status[type][:rank] >= recipe[:rank].min and guild_status[type][:rank] <= recipe[:rank].max }
          elsif guild_status[type][:task] == 'practice distilling for reagents'
            guild_status[type][:recipes] = BlackArts.data.recipes.find_all { |recipe| recipe[:product] == 'flask of pure water' }
          elsif guild_status[type][:task] == 'practice extracting for reagents'
            guild_status[type][:recipes] = BlackArts.data.recipes.find_all { |recipe| recipe[:product] == 'handful of sea salt' }
          else
            guild_status[type][:recipes] = Array.new
          end
        end
      end

      guild_status
    end

    def self.gld
      if Char.level < 15
        Util.msg('error', " You must be at least level 15 to join a guild. Exiting...")
        exit
      end

      fix_type = { 'General Alchemy' => 'alchemy', 'Alchemic Potions' => 'potions', 'Alchemic Trinkets' => 'trinkets', 'Illusions' => 'illusions' }

      task = Hash.new
      task['guild'] = Hash.new
      for type in fix_type.values
        next if type == 'illusions' && Char.prof != 'Sorcerer'
        task[type] = Hash.new
      end

      lines = Util.get_lines("gld", /<output class="mono"\/>/)

      lines.each { |line|
        if line =~ /You (are an?|have) (inactive member|member|no guild affiliation|Guild Master|Grandmaster)/
          task['guild'][:standing] = $2
          task['guild'][:guild_master] = line =~ /You are a (Guild Master|Grandmaster)/ ? true : false
        elsif line =~ /^You currently have no ranks in any guild skills./
          for type in fix_type.values
            next if type == 'illusions' && Char.prof != 'Sorcerer'
            task[type][:rank] = 0
            task[type][:task] = 'no task'
            task[type][:reps] = 0
          end
        elsif line =~ /^You have ([0-9]+|no) ranks? in the (General Alchemy|Alchemic Potions|Alchemic Trinkets|Illusions) skill\.$/
          rank = $1
          type = fix_type[$2]
          if rank =~ /^[0-9]+$/
            task[type][:rank] = rank.to_i
          else
            task[type][:rank] = 0
          end
        elsif line =~ /^You are a Master of (General Alchemy|Alchemic Potions|Alchemic Trinkets)\.$/
          type = fix_type[$1]
          task[type][:rank] = 63
        elsif line =~ /^The Training Administrator told you to (.*)\.$/
          task[type][:task] = $1
        elsif line =~ /^You have earned enough training points for your next rank\./
          task[type][:task] = 'promotion'
        elsif line =~ /^You are not currently training in this skill\.$|^You have not yet obtained your first task for this skill rank\.$|You have not yet been assigned a task for this skill|You have not been assigned a current task for this skill/
          task[type][:task] = 'no task'
          task[type][:reps] = 0
        elsif line =~ /You have no repetitions remaining for this task./
          task[type][:reps] = 0
        elsif line =~ /^You have ([0-9]+) repetitions? remaining (?:for|to complete) this task\.$/
          task[type][:reps] = $1.to_i
        elsif line =~ /month|check in again sometime in the next (.*?) day/i
          amount = $1
          task['guild'][:checkin] = amount.to_i
        elsif line =~ /have (.*?) task trading vouchers/i
          task['guild'][:vouchers] = $1.to_i
        elsif line =~ /You currently have (.*?) ranks? out of a possible (.*?) for your training/
          task['guild'][:total_ranks] = $1.to_i
          task['guild'][:max_ranks] = $2.to_i
        end
      }
      BlackArts.data.ranks = task["alchemy"][:rank].to_i
      Util.msg("debug", "Guild.gld: task - #{task}")
      return task
    end

    def self.drop_cauldron
      return if GameObj.loot.find { |item| item.id == BlackArts.data.sacks["cauldron"].id } != nil || GameObj.room_desc.find { |item| item.id == BlackArts.data.sacks["cauldron"].id } != nil
      return if BlackArts.data.settings[:no_alchemy]

      Inventory.drag(BlackArts.data.sacks["cauldron"])

      result = Util.get_res("drop #{BlackArts.data.sacks["cauldron"]}", /^You drop|you decide it would be best if you just used the already present training cauldron/)

      if result =~ /you decide it would be best if you just used the already present training cauldron/
        Guild.get_cauldron
        BlackArts.data.cauldron = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.name =~ /training cauldron/ || (obj.id.to_i.negative? && obj.noun =~ /cauldron/) }
        return
      else
        BlackArts.data.cauldron = BlackArts.data.sacks["cauldron"]
      end

      Util.get_lines("drag #{BlackArts.data.sacks["cauldron"]}", /You are now automatically attempting/)
    end

    def self.get_cauldron
      return if BlackArts.data.sacks["reagent"].contents.find { |item| item.id == BlackArts.data.sacks["cauldron"].id }
      return if BlackArts.data.settings[:no_alchemy]

      result = Inventory.store_item(BlackArts.data.sacks["reagent"], BlackArts.data.sacks["cauldron"])

      unless result
        Util.msg('error', " Something is wrong. Unable to recover cauldron. Exiting...")
        exit
      end
      BlackArts.data.cauldron = nil
      Util.get_lines("drag stop", /You weren't dragging anything|Clearing your default/)
    end

    def self.checkin(guild_status)
      return if BlackArts.data.settings[:no_bank]
      if guild_status['guild'][:standing] =~ /inactive member|no guild affiliation/i
        amount = 4500
      else
        amount = 1500
      end

      Util.silver_withdraw(amount) unless guild_status['guild'][:standing] =~ /Guild Master|Grandmaster/i

      Util.travel("#{Char.prof.downcase} alchemy guildmaster")

      if guild_status['guild'][:standing] =~ /inactive member|no guild affiliation/i
        dothistimeout "ask ##{GameObj.npcs.find { |npc| npc.name =~ /guild/i }.id} about membership", 3, /by applying to the/i
        dothistimeout "gld accept", 3, /You agree to the oath/i
      else
        dothistimeout "ask ##{GameObj.npcs.find { |npc| npc.name =~ /guild/i }.id} about checkin", 3, /You need to have|and accepts your|Guild Master|Grandmaster/
      end
    end

    def self.get_promoted(skill, location = nil)
      Util.travel(BlackArts.data.current_admin)
      Util.travel("#{Char.prof.downcase} alchemy guildmaster")

      lines = Util.get_command("ask ##{GameObj.npcs.find { |npc| npc.name =~ /guild/i }.id} about next #{skill}", /You ask/i)

      if lines.any? { |l| l =~ /you must diversify/ } && BlackArts.data.settings[:skill_types].size == 1
        Util.msg("yellow", " You need to diversify but only have one skill selected.")
        Util.msg("yellow", " Please run setup and add a skill.")
        exit
      end

      Util.set_needed_reagents

      unless location.nil?
        Util.travel(location)
        return
      end

      Guild.new_task
    end

    def self.get_work(item)
      Util.travel(BlackArts.data.current_admin)

      guild_status = Guild.gld

      if guild_status['guild'][:max_ranks] == guild_status['guild'][:total_ranks]
        respond
        Util.msg("yellow", " Your total ranks equal your max guild ranks. You need to level up more to continue. Exiting...")
        respond
        exit
      end

      lines = Util.get_command("ask ##{GameObj.npcs.find { |npc| npc.name =~ /training/i }.id} to train #{item}", /You ask|Who are you trying to ask/i)

      # Exit if Run one task and quit
      if lines.any? { |l| l =~ /All done with that task/ } && BlackArts.data.settings[:once_and_done]
        Guild.get_promoted(item, BlackArts.data.current_room.id) if lines.any? { |l| l =~ /Go find a Guild Master and get yourself promoted/ }
        respond
        Util.msg("info", " Task Complete. Exiting...")
        respond
        exit
      end

      if lines.any?(/but you're a Master.*?already/)
        BlackArts.data.settings[:skill_types].reject! { |skill| skill == item }
        item = nil
      end

      if lines.any? { |l| l =~ /It seems that your general alchemy skills are not quite up to snuff/ }
        respond
        Util.msg("info", " Seems you need to train more general alchemy before continuing with #{item}. Exiting...")
        respond
        exit
      end

      if lines.any? { |l| l =~ /Come back in about (.*?) minute/i }
        Util.msg("info", " For faster progress, consider using guild vouchers. Waiting for #{$1} minute(s)")
        rest_time = Time.now + ($1.to_i * 60)

        # No vouchers so we wait
        sleep 5 while Time.now < rest_time
      end

      Guild.new_task(item)
    end

    def self.new_task(skill = nil)
      guild_status = Guild.gld
      Guild.checkin(guild_status) if guild_status['guild'][:checkin] <= 60

      if BlackArts.data.gld_skills.all? { |type| guild_status[type][:rank] == 63 }
        Util.msg("yellow", " Congratulations! You are a master of alchemy, potions, and trinkets.")
        exit
      end

      BlackArts.data.gld_skills.each do |type|
        BlackArts.data.settings[:skill_types].reject! { |skill| skill == type } if guild_status[type][:rank] == 63
      end

      if guild_status['guild'][:vouchers] == 0 && BlackArts.data.settings[:use_vouchers]
        # Do we have voucher packs?
        voucher_pack = BlackArts.data.sacks["default"].contents.find { |i| i.name == 'Elanthian Guilds voucher pack' }

        if voucher_pack
          Util.travel("#{Char.prof.downcase} alchemy administrator")
          multifput "_drag ##{voucher_pack.id} right", "give ##{GameObj.npcs.find { |npc| npc.name =~ /training/i }.id}"
        end
      end

      if skill.nil?
        skill = BlackArts.data.settings[:skill_types].map { |type| [type, guild_status.dig(type, :rank).to_i] }.min_by { |_type, rank| rank }[0]
        if skill.nil?
          Util.msg("yellow", " No skills available for training. Please check UI")
          exit
        end
      end

      Guild.activity(guild_status, skill)
    end

    def self.remove_task(skill)
      Util.travel(BlackArts.data.current_admin)
      Util.get_res("ask ##{GameObj.npcs.find { |npc| npc.name =~ /training/i }.id} about trade #{skill}", /^#{GameObj.npcs.last.noun} .*?, "/i)
    end

    def self.activity(guild_status, skill)
      if guild_status[skill][:task] == "promotion"
        Guild.get_promoted(skill)
      elsif guild_status[skill][:task] == nil || guild_status[skill][:reps] == 0
        Guild.get_work(skill)
      elsif guild_status[skill][:task] =~ /visit a skilled master for a lesson|find an Arcane Master to practice with/
        Guild.skilled_masters(skill)
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /clean alchemic equipment in the labs|sweep the alchemy labs|polish tarnished lens assemblies/
        if guild_status[skill][:task] =~ /clean alchemic equipment in the labs/
          Tasks.clean_equipment
        elsif guild_status[skill][:task] =~ /sweep the alchemy labs/
          Tasks.sweep_labs
        elsif guild_status[skill][:task] =~ /polish tarnished lens assemblies/
          Tasks.polish_lens
        end
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /distill water for the guild's supply/
        Tasks.distill_water
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /grind some ingredients for the guild's supply/
        Tasks.grind_ingredients
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /gather alchemy ingredients for the guild's supply/i
        Guild.remove_task(skill)
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /find a fellow guild member to teach Illusions to/i
        if BlackArts.data.settings[:skill_types].include?("teach")
          Util.msg('info', " You have been asked to #{guild_status[skill][:task]}")
          Util.msg('info', ' Restart the script when finished')
          Util.msg('info', ' To turn in automatically toggle option in UI')
          exit
        else
          Guild.remove_task(skill)
          Guild.new_task(skill)
        end
      elsif guild_status[skill][:task] =~ /find a fellow guild member to teach you illusions/i
        if BlackArts.data.settings[:skill_types].include?("learn")
          Util.msg('info', " You have been asked to #{guild_status[skill][:task]}")
          Util.msg('info', ' Restart the script when finished')
          Util.msg('info', ' To turn in automatically toggle option in UI')
          exit
        else
          Guild.remove_task(skill)
          Guild.new_task(skill)
        end
      elsif guild_status[skill][:task] =~ /practice grinding various ingredients with a mortar and pestle/
        if BlackArts.data.settings[:no_alchemy]
          Guild.remove_task(skill)
        else
          Tasks.grind_mine(guild_status[skill][:reps])
        end
        Actions.cleanup
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /visit the cauldron workshop and practice making solutions with your (simmer|chant|boil|infuse|channel) ability/
        if BlackArts.data.settings[:no_alchemy]
          Guild.remove_task(skill)
        else
          Util.msg "info", " Looking for recipes to practice #{$1} in the cauldron workshop"

          recipe_list = Guild.gld_suggestions(guild_status)[skill][:recipes].dup

          check_info = Guild.check_recipe(:recipes => recipe_list, :reps => guild_status[skill][:reps])

          if check_info[:error].empty?

            fput 'stance offensive' unless stance =~ /offensive/
            Guild.get_cauldron
            Util.show_check(check_info)
            Actions.get_supplies(check_info)

            if check_info[:prepare_steps]
              Actions.go_empty_workshop
              Tasks.do_steps(check_info[:prepare_steps])
              Guild.get_cauldron
              Util.travel("#{Char.prof.downcase} alchemy training cauldron")
              Tasks.do_steps(check_info[:finish_steps])
            else
              Util.travel("#{Char.prof.downcase} alchemy training cauldron")
              Util.show_check(check_info)
              fput 'stance offensive' unless stance =~ /offensive/
              Tasks.do_steps(check_info[:steps])
            end
            move "out" if checkpaths and checkpaths.include?('out')
          else
            Util.no_recipe
          end
          Actions.cleanup
        end
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /^practice creating tough solutions|follow some tough recipes and create some items|^practice (?:distilling|extracting) for reagents/
        if BlackArts.data.settings[:no_alchemy]
          Guild.remove_task(skill)
        else
          Util.msg "info", " Looking for recipes to practice #{skill}"
          check_info = Guild.check_recipe(:recipes => Guild.gld_suggestions(guild_status)[skill][:recipes], :reps => guild_status[skill][:reps])

          if check_info[:error].empty?
            Guild.get_cauldron
            Util.show_check(check_info)
            Actions.get_supplies(check_info)

            if check_info[:prepare_steps]
              Actions.go_empty_workshop
              Tasks.do_steps(check_info[:prepare_steps])
              Tasks.do_steps(check_info[:finish_steps])
            else
              Actions.go_empty_workshop
              Tasks.do_steps(check_info[:steps])
            end
            Guild.get_cauldron

          else
            Util.no_recipe
          end
          Actions.cleanup
        end

        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /practice your latest Illusion in front of an audience/
        Illusions.do_illusions(place: 'audience')
        Guild.new_task(skill)
      elsif guild_status[skill][:task] =~ /see how many times you can create an Illusion within one minute/
        Illusions.do_illusions(place: 'speed')
        Guild.new_task(skill)
      else
        Util.msg('error', " #{guild_status[skill][:task]}")
        Util.msg('error', " Task not coded yet. Exiting...")
        exit
      end
    end

    def self.skilled_masters(skill)
      Guild.get_cauldron
      Inventory.free_hands(both: true)

      if XMLData.injuries.any? { |_a, h| h['wound'] > 0 || h['scar'] > 0 } || percenthealth < 95
        Script.run('eherbs')
      end

      Util.travel(BlackArts.data.current_admin)
      Util.travel("#{Char.prof.downcase} alchemy masters")
      npcs = GameObj.npcs.find_all { |i| i.name !~ /Guild Master/ && i.name.include?('Master') }
      dothistimeout "ask #{npcs.sample} about training #{skill}", 10, /^You ask/

      while (line = get)
        if line =~ /First, we light the cauldron\.  Go ahead\.|Please #{XMLData.name}, LIGHT the cauldron/
          fput 'light cauldron'
        elsif line =~ /Excellent, now try to extinguish it\.|Please #{XMLData.name}, EXTINGUISH the cauldron\./
          fput 'extinguish cauldron'
        elsif line =~ /\[Use the ALCHEMY SEAL command to seal the solution inside the training cauldron\.\]|\[You can use the ALCHEMY verb to SEAL the mixture in the cauldron\.\]/
          fput 'alchemy seal'
        elsif line =~ /try a recipe with (.*?) as a component/
          if BlackArts.data.settings[:no_alchemy]
            Guild.remove_task(skill)
            break
          end
          Tasks.do_task_reps(skill, $1.downcase)
          Actions.cleanup if Guild.gld[skill][:reps].zero?
          break
        elsif line =~ /Please type: ILLUSION (ROSE|VORTEX|MAELSTROM|VOID)/i
          Illusions.do_illusions
          break
        elsif line =~ /Please type: ILLUSION SHADOW/
          Illusions.do_shadow(item: 'wand')
          break
        elsif line =~ /Please type: ILLUSION DEMON/
          Illusions.do_demons
          break
        elsif line == '[You have completed your training task.]'
          Guild.get_cauldron
          break
        end
      end
    end
  end

  module Illusions
    def self.latest_illusion
      ranks = Guild.gld['illusions'][:rank]
      illusion = nil

      case ranks
      when 0..6
        illusion = 'rose'
      when 7..14
        illusion = 'vortex'
      when 15..24
        illusion = 'maelstrom'
      when 25..34
        illusion = 'void'
      when 35..47
        illusion = "shadow"
      when 48..63
        illusion = 'demon'
      end

      return "illusion #{illusion}"
    end

    def self.do_illusions(place: nil)
      if place == 'audience'
        location = XMLData.game == "GSF" ? 20239 : 'town'
        Util.go2(location)
      elsif place == 'speed'
        Actions.go_empty_workshop
      end

      Util.wait_rt
      illusion = Illusions.latest_illusion

      if illusion =~ /shadow/
        Illusions.do_shadow(place: place)
        return
      elsif illusion =~ /demon/
        Illusions.do_demons(place: place)
        return
      end

      loop do
        destroy = nil

        if place == 'audience'
          sleep 5 until Guild.check_audience
        end

        fput illusion
        Util.wait_rt

        case GameObj.right_hand.name
        when /black essence rose/
          destroy = 'eat my rose'
        when /vortex/
          destroy = 'peer my vortex'
        when /tempest/
          destroy = 'peer my tempest'
        when /void/
          destroy = 'poke my void'
        end

        if destroy
          fput destroy
          Util.wait_rt

          sleep 35 if place == 'audience' && Guild.gld['illusions'][:reps].to_i.positive?
        end
        break if Guild.gld['illusions'][:reps].to_i.zero?
      end
    end

    def self.do_shadow(place: nil, item: nil)
      drop_item = BlackArts.data.settings[:shadow_drop_item]

      drop_item = item.nil? ? drop_item : item

      if item.nil?
        Illusions.shadow_item(item: drop_item)
        Util.get_res("_drag ##{BlackArts.data.shadow_item.id} drop", BlackArts.data.get_regex)
        Util.wait_rt
      end

      loop do
        if place == 'audience'
          sleep 5 until Guild.check_audience
        end

        sleep 0.5 until checkmana > 3

        fput "illusion shadow #{drop_item}"
        Util.wait_rt

        if GameObj.loot.find { |item| item.name =~ /errant shadow/ }
          Util.wait_rt
          fput 'illusion shadow shadow'
          Util.wait_rt

          sleep 35 if place == 'audience' && Guild.gld['illusions'][:reps].to_i.positive?
        end
        break if Guild.gld['illusions'][:reps].to_i.zero?
      end

      sleep 1
      Inventory.store_item(BlackArts.data.shadow_container, BlackArts.data.shadow_item) unless !item.nil?
    end

    def self.shadow_item(item: nil)
      item_found = false
      container_ids = []

      if BlackArts.data.settings[:shadow_drop_item].to_s.empty?
        Util.msg("yellow", "Missing a shadow drop item. Please check UI")
        exit
      end

      res = Lich::Util.quiet_command_xml("inventory containers", /Your worn items are:/, /<prompt time=/)
      res.each { |l|
        container_ids = l.scan(/<a exist=\"([^\"]+)\"/).flatten if (l =~ /<a exist=\"([^\"]+)\"/)
      }
      find_all_containers_var = container_ids.collect { |id| GameObj[id] }
      find_all_containers_var.each { |i|
        if i.contents.nil?
          res = Lich::Util.quiet_command_xml("look in ##{i.id}", /In the|There is nothing|This|is closed|shut too tightly/, /<prompt time=/)
          if res.any? { |line| line =~ /is closed|shut too tightly/i } # do we want it to open containers?
            Lich::Util.quiet_command_xml("open ##{i.id}", /<a exist=/, /<prompt time=/)
            Lich::Util.quiet_command_xml("look in ##{i.id}", /In the|There is nothing|This/, /<prompt time=/)
          end
        end
        i.contents.each { |s|
          if s.name =~ /#{item}/i
            BlackArts.data.shadow_item = s
            BlackArts.data.shadow_container = i
            item_found = true
          end
        }
        break if item_found
      }

      before_dying {
        if GameObj.loot.find { |item| item.name =~ /errant shadow/ }
          Util.wait_rt
          fput 'illusion shadow shadow'
          Util.wait_rt
        end
        Inventory.store_item(BlackArts.data.shadow_container, BlackArts.data.shadow_item) if GameObj.loot.find { |item| item.id == BlackArts.data.shadow_item.id }
      }
    end

    def self.demon_refresh
      GameObj.inv.each { |item|
        next unless GameObj.containers[item.id]
        item.contents.each { |thing|
          next unless thing.name =~ /stone/

          lines = Util.get_lines("read ##{thing.id}", /You quickly recognize the rune/)
          if lines.any?(/vakra/)
            Inventory.drag(thing)
            fput "rub ##{thing.id}"
            Inventory.store_item(item, thing)
            return true
          end
        }
      }
    end

    def self.demon_permit
      permit = false
      GameObj.inv.each { |item|
        if GameObj.containers[item.id]
          item.contents.each { |thing|
            permit = true if thing.name =~ /demon permit/
          }
        end
      }
      return permit
    end

    def self.demon_allowed?
      town = Room[Room.current.find_nearest_by_tag("town")].location

      if town =~ /icemule|mist|landing/i
        return true
      elsif town =~ /zul|kharam/i && Illusions.demon_permit
        return true
      elsif town =~ /zul|kharam/i && !Illusions.demon_permit
        Util.msg("yellow", "No demon permit. Please buy one and restart the script.")
        exit
      else
        Util.msg("yellow", "Demons are not allowed in this town.")
        exit
      end
    end

    def self.determine_demon
      unless Effects::Spells.active?("Minor Summoning")
        Util.msg("yellow", "No demon active. Please summon one and restart the script.")
        exit
      end

      BlackArts.data.demon_id = nil
      lines = Lich::Util.quiet_command_xml("tell md to follow", /You have no minor demon at this time|You command your|is already following you/)

      if lines.any?(/(?:Your|You command your) <pushBold\/><a exist="(\d+)" noun="[\w,'-]+">[\w\-' ]+<\/a><popBold\/>/)
        BlackArts.data.demon_id = Regexp.last_match(1)
      end
    end

    def self.do_demons(place: nil)
      Illusions.demon_allowed? unless place.nil?
      Illusions.determine_demon

      loop do
        unless Effects::Spells.active?("Minor Summoning")
          Util.msg("yellow", "No demon active. Please summon one and restart the script.")
          exit
        end

        if Effects::Spells.time_left("Minor Summoning") < 0.5
          Illusions.demon_refresh
        end

        if place == 'audience'
          sleep 5 until Guild.check_audience
        end

        sleep 0.5 until checkmana > 5

        lines = Util.issue_command("illusion demon ##{BlackArts.data.demon_id}", /You shift your gaze to your|is already illusioned/)
        Util.wait_rt

        if lines.any?(/Piece by piece, the creature's form changes until|is already illusioned/)
          Util.wait_rt
          sleep 0.5 until checkmana > 5
          fput "illusion demon ##{BlackArts.data.demon_id} dispel"
          Util.wait_rt

          sleep 35 if place == 'audience' && (Guild.gld['illusions'][:reps].to_i.positive? || lines.any?(/is already illusioned/))
        end
        break if Guild.gld['illusions'][:reps].to_i.zero?
      end
    end
  end

  module Actions
    def self.buy(shopping_list)
      Util.msg("debug", "Actions.buy: shopping_list - #{shopping_list}")
      Guild.get_cauldron

      # Open containers
      ["herb", "reagent", "default"].each { |sack| Inventory.open_single_container(sack) }

      # Make sure we have a note
      Util.get_note
      Inventory.free_hands(both: true)

      for place, hash in shopping_list
        Util.travel(place)

        if Room.current.id == 8664
          Util.get_backroom
        end

        menu = Util.read_menu

        Util.get_note
        Inventory.drag(BlackArts.data.note)

        for name, num in hash
          equivalent_ingredients = (Recipes.alchemy_equivalents.find { |list| list.include?(name) } || [name])

          equivalent_ingredients.each do |item|
            if menu.key?(item)
              name = item
              break
            end
          end

          if menu[name].nil?
            Util.msg('error', " error: failed to find #{name} on the menu.")
            exit
          end

          unknown_variable = (1..num).to_a
          sliced_variables = unknown_variable.each_slice(10).to_a

          # Accessing the separated variables
          sliced_variables.each_with_index do |slice, index|
            item = nil
            amount = slice.max - (index * 10)
            Util.get_res("order #{amount} of #{menu[name].sub(/s*\#.*$/, '')}", /BUY/)
            result = fput "buy"
            if result =~ /you do not have enough/i
              if BlackArts.data.settings[:no_bank]
                Util.msg("error", "Insufficient funds. Exiting...")
                exit
              else
                Util.silver_deposit
                Util.get_note(true)
                Util.travel(place)
                Inventory.free_hands(both: true)
                Inventory.drag(BlackArts.data.note)
                Util.get_res("order #{amount} of #{menu[name].sub(/s*\#.*$/, '')}", /BUY/)
                fput "buy"
              end
            end
            20.times {
              break if (item = [GameObj.right_hand, GameObj.left_hand].find { |i| i.name !~ /Empty|note|scrip|chit/ })
              sleep 0.1
            }

            if item.name =~ /package/
              Util.get_res('open my package', /^You open|^That is already open/)
              Util.get_res("empty my package in ##{BlackArts.data.sacks["default"].id}", /everything falls in/)
              Util.get_res("throw my package", /^You throw away/)
            else
              Inventory.store_item(BlackArts.data.sacks["default"], item)
            end
          end
        end

        # All done here. Put the note away
        Inventory.single_drag(BlackArts.data.note)

      end
    end

    def self.buy_elusive(buy_only = false)
      return unless BlackArts.data.settings[:buy_reagents]

      Guild.get_cauldron unless buy_only

      unless UserVars.needed_reagents.nil? or UserVars.needed_reagents.empty?
        Util.travel('town')
        Util.get_note
        Inventory.free_hands(both: true)

        Util.travel('reagent shop')

        table = (GameObj.loot.to_a + GameObj.room_desc.to_a).find { |obj| obj.noun == 'table' }
        count = Hash.new

        keep_looking = true
        while keep_looking
          table_contents = Util.check_table(table)
          Util.msg("debug", "Actions.buy_elusive: table_contents - #{table_contents}")
          keep_looking = false
          if table_contents.any? { |obj| obj.name =~ /#{UserVars.needed_reagents}/ }
            Inventory.free_hands(both: true)
            Inventory.drag(BlackArts.data.note)
            for obj in table_contents
              if obj.name =~ /#{UserVars.needed_reagents}/
                unless count[obj.name]
                  count[obj.name] = Inventory.all_sack_contents.find_all { |o| o.name == obj.name }.length
                  jar_list = Inventory.all_sack_contents.find_all { |o| o.after_name =~ /containing #{obj.name.sub('some ', '(?:some )?').sub('handful of ', '(?:handful of )?').sub('sprig of ', '(?:sprig of )?').sub('tooth', '(?:teeth|tooth)').sub('leaf', '(?:leaf|leaves)').sub(/y\b/, '(?:y|ie)').split(' ').join('s? ')}/ }
                  for jar in jar_list
                    count[obj.name] += Util.jar_count(jar)
                  end
                end

                Util.msg("debug", "Actions.buy_elusive: Jar - name: #{obj.name} count: #{count[obj.name]}")
                if count[obj.name] < 20
                  count[obj.name] = count[obj.name].to_i + 1
                  fput 'unhide' if invisible?

                  item = nil
                  result = fput "buy ##{obj.id}"
                  if result =~ /you do not have enough/i
                    if BlackArts.data.settings[:no_bank]
                      Util.msg("error", "Insufficient funds. Exiting...")
                      exit
                    else
                      Util.silver_deposit
                      Util.get_note(true)
                      Util.travel('reagent shop')
                      Inventory.free_hands(both: true)
                      Inventory.drag(BlackArts.data.note)
                      Inventory.free_hands(both: true)
                      Util.get_res("order #{amount} of #{menu[name].sub(/s*\#.*$/, '')}", /BUY/)
                      fput "buy ##{obj.id}"
                    end
                  end
                  20.times {
                    item = [GameObj.right_hand, GameObj.left_hand].find { |i| i.name !~ /Empty|note|scrip|chit/ }
                    break if item
                    sleep 0.1
                  }
                  Inventory.store_item(BlackArts.data.sacks["reagent"], item) unless item.nil?
                  keep_looking = true
                end
              end
            end
            Inventory.single_drag(BlackArts.data.note)
            sleep 0.05
            Actions.top_off_jars
          end
        end
      end

      BlackArts.data.last_alchemy_buy = Time.now
    end

    def self.cleanup
      # Lets put things where they belong

      Inventory.free_hands(both: true)

      # start with Herb bundling
      herb_list = ['some torban leaf', 'some basal moss', 'some acantha leaf', 'some ambrominas leaf', 'some cactacae spine', 'some aloeas stem', 'some haphip root', 'some pothinir grass', 'some ephlox moss', 'some calamia fruit', 'some sovyn clove', 'some wolifrew lichen', 'some woth flower']

      if Util.bags_to_check.any? { |obj| herb_list.include?(obj.name) }
        while (herb_name = Util.bags_to_check.find { |obj| herb_list.include?(obj.name) }.name)
          if (bundle = BlackArts.data.sacks["herb"].contents.find { |obj| obj.name == herb_name })
            Util.get_res("get ##{bundle.id}", BlackArts.data.get_regex)
          end
          drop_herb = false
          while (herb = Util.bags_to_check.find { |obj| obj.name == herb_name })
            Util.get_res("get ##{herb.id}", BlackArts.data.get_regex)
            if drop_herb
              Util.get_res("drop ##{herb.id}", /^You drop/)
            else
              while checkleft and checkright
                bundle_result = Util.get_res('bundle', /^Carefully, you combine|^If you add anything more to this bundle|^You do not have anything to bundle!$/)
                if bundle_result =~ /^If you add anything more to this bundle/
                  drop_herb = true
                  Util.get_res("eat ##{herb.id}", /^You take a bite/)
                elsif bundle_result.nil?
                  break
                end
              end
            end
          end
          Util.get_res("put ##{GameObj.right_hand.id} in ##{BlackArts.data.sacks["herb"].id}", /^You put|^You carefully add/) if checkright
          Util.get_res("put ##{GameObj.left_hand.id} in ##{BlackArts.data.sacks["herb"].id}", /^You put|^You carefully add/) if checkleft
        end
      end

      # Trash stuff
      unless BlackArts.data.settings[:trash].empty?
        things = BlackArts.data.settings[:trash].join("|")
        Util.msg("debug", "Actions.cleanup: trash - #{things}")
        trash_things = Util.all_sack_contents.find_all { |o| o.name =~ /#{things}/ }
        if trash_things.length.positive?
          trash = Util.find_trash
          unless trash
            # going here because they all have trash cans. Don't want to litter
            Util.travel('locksmith pool')
            trash = Util.find_trash
          end

          trash_things.each { |item|
            Inventory.drag(item)
            fput("put ##{item.id} in ##{trash.id}")

            20.times {
              next if ![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id)
              sleep 0.1
            }

            if [GameObj.right_hand.id, GameObj.left_hand.id].include?(item.id)
              Util.msg("info", " #{item.name} isn't gone so maybe its special...keepin it.")
              Inventory.single_drag(item)
            end
          }
        end
      end

      # Move any herbs and reagents
      BlackArts.data.sacks["default"].contents.each { |item|
        if item.type =~ /herb/ && BlackArts.data.sacks["default"].id != BlackArts.data.sacks["herb"].id
          Inventory.drag(item)
          Inventory.store_item(BlackArts.data.sacks["herb"], item)
        end
        if item.type =~ /reagent/ && BlackArts.data.sacks["default"].id != BlackArts.data.sacks["reagent"].id
          Inventory.drag(item)
          Inventory.store_item(BlackArts.data.sacks["reagent"], item)
        end
      }

      if (Time.now - BlackArts.data.last_alchemy_buy) > 600
        Actions.buy_elusive
      else
        Actions.top_off_jars
      end

      if BlackArts.data.settings[:sell_consignment]
        things = BlackArts.data.settings[:consignment_include].join("|")
        Util.msg("debug", "Actions.cleanup: sell_consignment - #{things}")
        sell_consignment = BlackArts.data.sacks["default"].contents.find_all { |o| o.name =~ /#{things}/ || o.after_name =~ /#{things}/ }
        unless sell_consignment.nil?
          Util.travel("consignment")
          sell_consignment.each { |item| Util.sell_item(item) }
        end
      end

      Script.run('eloot', "sell alchemy_mode") unless BlackArts.data.settings[:no_bank]

      # Once all done. Deposit silver
      Util.silver_deposit
    end

    def self.forage(forage_list)
      for herb, num in forage_list.dup

        location_list = Actions.forage_find(herb)

        unless location_list.length.positive?
          Util.msg('error', " error: failed to find a location for #{herb}.")
          exit
        end
        # Make sure we are searching for the right thing
        herb = herb.gsub(/^some /, "")
        forage_item = Util.fix_name(herb)
        found_count = 0

        Hunting.pre_hunt

        Util.wait_rt
        fput "stance defensive" unless stance =~ /defensive|guarded/

        Util.mapped_room

        location_list.each { |room|
          Util.travel(room)
          Util.wait_rt
          unless (GameObj.targets.count.positive? && BlackArts.data.settings[:forage_options].include?("run"))
            loop {
              unless Util.in_town?
                if Char.prof =~ /Cleric|Empath/i && BlackArts.data.settings[:forage_options].include?("use_213")
                  lines = Util.get_lines("sense", /You open your soul to the lesser/)
                  if lines.any? { |l| l =~ /Nothing stands out to you/ }
                    Util.cast_spell(213)
                  end
                end

                Util.get_lines("spell active", /<dialogData id='Active Spells'/)

                if BlackArts.data.settings[:forage_options].include?("use_709") && !GameObj.targets.any? { |c| c.name =~ /arm/ } && GameObj.targets.count.positive?
                  Util.cast_spell(709)
                end

                # Cast any helper spells before kneeling
                Util.cast_spell(919) if !Effects::Buffs.to_h.has_key?(919) && !Effects::Cooldowns.to_h.has_key?(919) && BlackArts.data.settings[:forage_options].include?("use_919")
                Util.cast_spell(140) if !Effects::Buffs.to_h.has_key?(140) && !Effects::Cooldowns.to_h.has_key?(140) && BlackArts.data.settings[:forage_options].include?("use_140")
                Util.cast_spell(9704) if !Effects::Buffs.to_h.has_key?(5309) && BlackArts.data.settings[:forage_options].include?("use_resolve")
              end

              Util.cast_spell(506) if !Effects::Buffs.to_h.has_key?(506) && !Effects::Cooldowns.to_h.has_key?(506) && BlackArts.data.settings[:forage_options].include?("use_506")

              empty_hands

              until kneeling?
                result = fput 'kneel'
                break if result =~ /That's not possible to do while swimming|How can you do that while swimming?|Don't be silly...you're in a creek!/
                sleep 0.2
              end

              forage_result = dothistimeout "forage for #{forage_item}", 2, BlackArts.data.forage_result
              Util.wait_rt
              if forage_result =~ /^You forage briefly and manage to find/
                item = [GameObj.right_hand, GameObj.left_hand].find { |i| i.noun != nil }

                if BlackArts.data.herb_doses[forage_item]
                  forage_list[herb] = forage_list[herb] - BlackArts.data.herb_doses[forage_item]
                  found_count += BlackArts.data.herb_doses[forage_item]
                else
                  forage_list[herb] = forage_list[herb] - 1
                  found_count += 1
                end

                Inventory.store_item(BlackArts.data.sacks["herb"], item)

                Util.msg "yellow", " #{Util.title_case(forage_item)}: #{found_count} / #{num}"
                _respond

                break if found_count >= num.to_i

              elsif forage_result =~ BlackArts.data.forage_injury
                Util.wait_rt
                Util.cast_spell(114) if poisoned?
              elsif forage_result.nil? || (forage_result =~ /^As you carefully forage around you (can find no hint|see no evidence) of what you are looking for(?: right now, though you are fairly certain this is where it can be found)?\.|As you forage around, you notice that someone has been foraging here recently and you are unable to find anything useful/)
                break
              end

              if XMLData.injuries.any? { |_a, h| h['wound'] > 1 || h['scar'] > 1 } || percenthealth < 70
                return_room = Room.current.id
                Util.travel("#{Char.prof.downcase} alchemy administrator")
                Script.run('eherbs')
                Util.go2(return_room)
              end

              break if GameObj.targets.count.positive? && BlackArts.data.settings[:forage_options].include?("run")
            }

            fput 'stand' until standing?

            fill_hands

            if Char.prof =~ /Cleric|Empath/i && BlackArts.data.settings[:forage_options].include?("use_213")
              lines = Util.get_lines("sense", /You open your soul to the lesser/)
              if lines.any? { |l| l =~ /An obvious presence of peace saturates the area and a feeling of safety overwhelms you/ }
                fput "stop 213"
              end
            end

            break if found_count >= num.to_i

          end
        }

      end
    end

    def self.forage_find(herb)
      Util.msg("debug", "Actions.forage_find: herb - #{herb}")
      herb = herb.strip
      herb = 'ayana leaf' if herb =~ /ayana (weed|lichen|berry|root)/
      herb = "ayana'al leaf" if herb =~ /ayana'al (weed|lichen|berry|root)/

      herb_alt = herb.gsub(/^some /, "")
      herb_fix = Util.fix_name(herb_alt)

      # Grab all the rooms that mostly match.
      location_list = []
      Room.list.find_all do |r|
        if r.tags.any? { |tag| (tag.end_with? herb) || ((herb.start_with? tag) && herb =~ /ayana/) || (herb.end_with? tag) }
          location_list.push(r.id)
        end
      end

      # Remove rooms we know we don't want
      location_list.delete_if { |room|
        !Room[room].tags.any? { |tag| tag =~ /#{herb}|#{herb_alt}|#{herb_fix}/ } ||
          Room[room].title.join(' ').scan(/\btable\b|\branger\b/i).any? ||
          BlackArts.data.no_forage.include?(room)
      }

      # Sort the list and reduce to the top 10
      _previous, shortest_distances = BlackArts.data.current_room.dijkstra
      location_list.delete_if { |room_id| shortest_distances[room_id].nil? }
      location_list.sort! { |a, b| shortest_distances[a] <=> shortest_distances[b] }
      location_list = location_list.first(10)

      # Remove any locations where the path includes boundary rooms
      location_list.delete_if { |room|
        path = BlackArts.data.current_room.path_to(Room[room])
        BlackArts.data.boundaries.any? { |fence| path.include?(fence) }
      }

      return location_list
    end

    def self.get_ingredient(ingredient_name)
      equivalent_ingredients = (Recipes.alchemy_equivalents.find { |list| list.include?(ingredient_name) } || [ingredient_name])

      if (ingredient = Util.all_sack_contents.find { |obj| equivalent_ingredients.include?(obj.name) and (obj.name !~ BlackArts.data.bundled_herb) })
        Inventory.drag(ingredient)
      elsif (bundle = Util.all_sack_contents.find { |obj| equivalent_ingredients.include?(obj.name) and (obj.name =~ BlackArts.data.bundled_herb) })
        Inventory.drag(bundle)
        bundle_remove_result = Util.get_res('bundle remove', /^You (?:carefully )?remove|^Those were the last two|^You only have one/)
        if bundle_remove_result =~ /^You only have one/
          BlackArts.data.correct_herb_count.delete(bundle.id)
          BlackArts.data.ingredient_count.delete(bundle.id)
          ingredient = bundle
        elsif BlackArts.data.correct_herb_count.include?(bundle.id)
          BlackArts.data.ingredient_count[bundle.id] = BlackArts.data.ingredient_count[bundle.id] - 1
          Inventory.single_drag(bundle)
          if checkleft
            ingredient = GameObj.left_hand
          else
            echo 'error: left hand unexpectedly empty'
          end
        else
          measure_result = Util.get_res("measure ##{bundle.id}", /^(?:You can't tell exactly, but the|The) .*? has ([0-9]+) (bite|bites) left\./)
          if measure_result =~ /^The .*? has ([0-9]+) (bite|bites) left\./
            min_count = $1.to_i
            BlackArts.data.correct_herb_count.push(bundle.id)
          else
            min_count = 0
            echo "error: unmatched measure result: #{measure_result.inspect}"
          end
          if BlackArts.data.ingredient_count[bundle.id].nil?
            BlackArts.data.ingredient_count[bundle.id] = min_count
          else
            BlackArts.data.ingredient_count[bundle.id] = [(BlackArts.data.ingredient_count[bundle.id] - 1), min_count].max
          end
          Inventory.single_drag(bundle)
          if checkleft
            ingredient = GameObj.left_hand
          else
            echo 'error: left hand unexpectedly empty'
          end
        end
      elsif (jar = Util.all_sack_contents.find { |obj| obj.after_name =~ /containing (?:#{equivalent_ingredients.collect { |name| name.sub('some ', '(?:some )?').sub('handful of ', '(?:handful of )?').sub('sprig of ', '(?:sprig of )?').sub('tooth', '(?:teeth|tooth)').sub('leaf', '(?:leaf|leaves)').sub(/y\b/, '(?:y|ie)').split(' ').join('s? ') }.join('|')})/ })
        unless BlackArts.data.ingredient_count[jar.id].nil?
          BlackArts.data.ingredient_count[jar.id] = @ingredient_count[jar.id] - 1
          BlackArts.data.ingredient_count.delete(jar.id) if @ingredient_count[jar.id] < 1
        end
        Inventory.drag(jar)
        Util.get_res("shake ##{jar.id}", /^You .*shake/)
        Inventory.single_drag(jar)
        if checkleft
          ingredient = GameObj.left_hand
        else
          echo 'error: left hand unexpectedly empty'
        end
      elsif (bundle = Util.all_sack_contents.find { |obj| obj.name =~ /^bundle of (?:#{equivalent_ingredients.collect { |name| name.split(' ').join('s? ') }.join('|')})/ })
        unless @ingredient_count[bundle.id].nil?
          BlackArts.data.ingredient_count[bundle.id] = BlackArts.data.ingredient_count[bundle.id] - 1
          BlackArts.data.ingredient_count.delete(bundle.id) if BlackArts.data.ingredient_count[bundle.id] < 2
        end
        Inventory.drag(bundle)
        Util.get_res("bundle remove", /^You remove|^Those were the last two/)
        Inventory.single_drag(bundle)
        if checkleft
          ingredient = GameObj.left_hand
        else
          echo 'error: left hand unexpectedly empty'
        end
      end

      if ingredient.nil?
        Util.msg('error', " Error: Missing #{ingredient_name}")
        Guild.get_cauldron
        exit
      end

      ingredient
    end

    def self.get_supplies(check_info)
      Util.msg("debug", "Actions.get_supplies: check_info - #{check_info}")
      if check_info[:kill_for].size.positive?
        Actions.kill_for(check_info[:kill_for])
      end
      if check_info[:forage].size.positive?
        Actions.forage(check_info[:forage])
        Util.travel("#{Char.prof.downcase} alchemy administrator")
        if XMLData.injuries.any? { |_a, h| h['wound'] > 0 || h['scar'] > 0 } || percenthealth < 95
          Script.run('eherbs')
        end
        Hunting.post_hunt
      end
      if check_info[:buy].size.positive?
        Actions.buy(check_info[:buy])
      end
      Util.travel(BlackArts.data.current_admin)
    end

    def self.go_empty_workshop
      room_list = Util.find_workshops

      for room_id in room_list
        Util.travel(room_id)
        break unless checkpcs
      end
    end

    def self.kill_for(targets)
      Util.msg("debug", "Actions.kill_for: targets - #{targets}")
      targets.each do |key, value|
        value.each do |key2, value2|
          Util.msg("debug", "Need to hunt for value2:#{value2} key2:#{key2}(s) from key:#{key}")
          BlackArts.data.skin = key2
          BlackArts.data.skin_number = value2
          BlackArts.data.creature = key

          Hunting.switch_profile(key2)

          # Lets heal up before going out
          if XMLData.injuries.any? { |_a, h| h['wound'] > 0 || h['scar'] > 1 } || percenthealth < 95
            Script.run('eherbs')
          end

          Hunting.go_hunting
          Util.go2(UserVars.op['resting_room_id'])
          Hunting.post_hunt

          Script.run('eloot', "sell alchemy_mode") unless BlackArts.data.settings[:no_bank]
          Util.travel(BlackArts.data.current_admin) unless BlackArts.data.current_admin.nil?
        end
      end
    end

    def self.store_ingredient
      if (GameObj.right_hand.name =~ /ayanad crystals$/) or (GameObj.left_hand.name =~ /ayanad crystals$/)
        Util.get_res("get crystal from my crystals", /You separate/)
      end

      Inventory.store_item(BlackArts.data.sacks["default"], GameObj.right_hand)
      Inventory.store_item(BlackArts.data.sacks["default"], GameObj.left_hand)
    end

    def self.top_off_jars
      Inventory.free_hands(both: true)
      for jar in BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.after_name =~ /^containing / }
        next if jar.after_name == 'containing fine white powder'
        got_jar = false
        for item in Inventory.all_sack_contents.find_all { |obj| jar.after_name =~ /containing #{obj.name.sub('some ', '(?:some )?').sub('handful of ', '(?:handful of )?').sub('sprig of ', '(?:sprig of )?').sub('tooth', '(?:teeth|tooth)').sub('leaf', '(?:leaf|leaves)').sub(/y\b/, '(?:y|ie)').split(' ').join('s? ')}/ }
          unless got_jar
            Util.get_res("get ##{jar.id}", BlackArts.data.get_regex)
            got_jar = true
          end
          result = Util.get_res("_drag ##{item.id} ##{jar.id}", /^You add|is full/)
          if result =~ /is full/
            Inventory.store_item(BlackArts.data.sacks["reagent"], item)
            break
          else
            BlackArts.data.ingredient_count[jar.id] = BlackArts.data.ingredient_count[jar.id] + 1 unless BlackArts.data.ingredient_count[jar.id].nil?
          end
        end
        if got_jar
          Inventory.store_item(BlackArts.data.sacks["reagent"], jar)
        end
      end

      empty_jar_list = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.noun =~ /^(?:jar|beaker|bottle)$/ and obj.after_name.nil? }
      unless empty_jar_list.empty?
        important_stuff = Inventory.all_sack_contents.find_all { |obj| Recipes.elusive_reagent_cost.keys.include?(obj.name) and not Inventory.all_sack_contents.any? { |alchemy_jar| alchemy_jar.noun =~ /^(?:jar|beaker|bottle)$/ and alchemy_jar.after_name =~ /containing #{obj.name.sub('some ', '(?:some )?').sub('handful of ', '(?:handful of )?').sub('sprig of ', '(?:sprig of )?').sub('tooth', '(?:teeth|tooth)').sub('leaf', '(?:leaf|leaves)').sub(/y\b/, '(?:y|ie)').split(' ').join('s? ')}/ } }
        important_stuff_count = Hash.new
        important_stuff.each { |stuff| important_stuff_count[stuff.name] = important_stuff_count[stuff.name].to_i + 1 }
        important_stuff_count = important_stuff_count.sort { |a, b| b[1] <=> a[1] }.collect { |n| n[0] }
        for empty_jar in empty_jar_list
          if (name = important_stuff_count.pop)
            Inventory.drag(empty_jar)
            for obj in Inventory.all_sack_contents
              if obj.name == name
                result = Util.get_res("_drag ##{obj.id} ##{empty_jar.id}", /^You add|^You put|is full/)
                if result =~ /is full/
                  Inventory.store_item(BlackArts.data.sacks["reagent"], obj)
                  break
                end
              end
            end
            Inventory.store_item(BlackArts.data.sacks["reagent"], empty_jar)
          end
        end
      end
    end
  end

  module Tasks
    def self.clean_equipment
      finished = false
      location_list = Util.find_workshops
      Util.msg('debug', "Tasks.clean_equipment | location_list: #{location_list}")

      Guild.get_cauldron
      Inventory.free_hands(both: true)
      Util.travel("#{Char.prof.downcase} alchemy cleaning supplies")

      Util.get_res('get rag', /^You take/)

      for room_id in location_list
        Util.go2(room_id)
        clean_result = Util.get_res('clean crucible', /You have|Perhaps you should check another workshop/)
        Util.wait_rt
        if clean_result =~ /You have completed/
          finished = true
          break
        end
        break if clean_result =~ /Perhaps you should/
      end
      Util.wait_rt
      Util.get_res('drop rag', BlackArts.data.put_regex)

      if !finished
        Util.find_next_guild
        Tasks.clean_equipment
      end

      BlackArts.data.visited_towns = [BlackArts.data.start_town]
      Util.travel(BlackArts.data.current_admin)
    end

    def self.distill_water
      Guild.get_cauldron
      Inventory.free_hands(both: true)
      Actions.go_empty_workshop

      loop {
        Util.get_res("pour alembic", /^You collect/)
        Util.wait_rt

        Util.get_res("light alembic", /^You focus/)
        waitfor "pressure within it builds"

        Util.get_res("turn alembic", /^Turning a mithril lever/)
        waitfor "pressure within it builds"

        Util.get_res("turn alembic", /^Turning a mithril lever/)
        waitfor "the flame beneath it suddenly dies down"

        Util.get_res("clean alembic", /^Using a barrel of water/)
        Util.wait_rt

        Util.get_res("get alembic", /^Having cleaned the/)
        line = waitfor "You have"
        Util.wait_rt

        break if line == "[You have completed your training task.]"
      }
    end

    def self.do_steps(steps, single = false)
      Util.eat_bread
      Util.sigil_concentration
      Inventory.free_hands(both: true)
      BlackArts.data.start_room = nil
      Util.msg("debug", "Tasks.do_steps: all steps - #{steps}")
      while (step = steps.shift)
        Util.msg("debug", "Tasks.do_steps: step - #{step}")

        case step
        when 'add troll blood'
          Tasks.do_steps_troll_blood
        when /^(add|grind|extract|distill|separate)\s+(.*)/
          action = Regexp.last_match(1)
          ingredient = Actions.get_ingredient(Regexp.last_match(2))
          Tasks.do_steps_action(action, ingredient)
        when 'boil'
          Tasks.do_steps_boil
        when 'channel'
          Tasks.do_steps_channel
        when /^chant /
          Tasks.do_steps_chant(step)
        when /^infuse/
          Tasks.do_steps_infuse
        when 'light'
          Tasks.do_steps_light(steps)
        when /^refract (?:moonlight|sunlight) through (.* lens)$/
          Tasks.do_steps_refract(Regexp.last_match(1))
        when 'seal'
          Tasks.do_steps_seal
          return steps if single
        when 'simmer'
          Tasks.do_steps_simmer
        when 'special'
          Tasks.do_steps_special
        when 'check blood'
          # Fixme: hunt for troll blood here
        else
          Util.msg('error', " error: failed to match step: #{step}")
          exit
        end
      end
      if BlackArts.data.start_room
        Guild.get_cauldron
        Util.travel(BlackArts.data.start_room)
      end
    end

    def self.do_steps_action(action, ingredient)
      case action
      when 'add'
        Tasks.do_steps_add(ingredient)
      when 'grind'
        Tasks.do_steps_grind(ingredient)
      when 'extract'
        Tasks.do_steps_extract
      when 'distill'
        Tasks.do_steps_distill
      when 'separate'
        Tasks.do_steps_separate
      else
        Util.msg('error', " error: failed to match step: #{step}")
        exit
      end
    end

    def self.do_steps_add(ingredient)
      Util.get_res("put ##{ingredient.id} in ##{BlackArts.data.cauldron.id}", /^You place|^You pour/)

      empty_flask = [GameObj.right_hand, GameObj.left_hand].find { |i| i.name == 'empty flask' }
      if empty_flask
        Inventory.store_item(BlackArts.data.sacks["reagent"], empty_flask)
        BlackArts.data.need_empty_flask = true
      end

      # Fixme: Why am I doing this?
      result = [GameObj.right_hand, GameObj.left_hand].find { |i| i.name == "minor holy oil" }
      Inventory.store_item(BlackArts.data.sacks["reagent"], result) if result
    end

    def self.do_steps_boil
      loop {
        Util.check_mana(10)
        boil_result = Util.get_res('alchemy boil', /^You focus on the [\w\s\-]+ (?:cauldron|vat|kettle|boiler).*?and push mana into it.  The flame beneath it (flickers briefly, but then dies down|quickly flares up wildly, bringing the contents to a rolling boil)\.$/)
        Util.wait_rt
        break if boil_result =~ /^You focus on the [\w\s\-]+ (?:cauldron|vat|kettle|boiler).*?and push mana into it.  The flame beneath it quickly flares up wildly, bringing the contents to a rolling boil\.$/
      }
    end

    def self.do_steps_channel
      loop {
        Util.check_spirit
        channel_result = Util.get_res('alchemy channel', /^You focus .*? and link your spirit|^You attempt to channel/)
        Util.wait_rt
        break if channel_result =~ /^You focus .*? and link your spirit/
      }
    end

    def self.do_steps_chant(step)
      loop {
        Util.check_mana(40)
        chant_result = Util.get_res("alchemy #{step}", /^You extend/)
        Util.wait_rt
        break if chant_result =~ /^You extend your hands.*vanish into the solution/
      }
    end

    def self.do_steps_distill
      # Fixme: change to confirm the hand/ingredient
      unless checkright
        dothis 'swap', /^You swap/
      end
      return_room = nil
      unless Util.is_workshop
        return_room = Room.current.id
        Guild.get_cauldron
        Actions.go_empty_workshop
      end
      if Room.current.tags.include?("#{Char.prof.downcase} alchemy workshop")
        Util.get_res('alchemy distill', /^You select an unused/)
        waitfor 'Sensing the process nearing its end'
        Util.wait_rt
        Actions.store_ingredient
        if return_room
          Util.travel(return_room)
        end
      else
        Util.msg('error', ' error: failed to find workshop')
        exit
      end
    end

    def self.do_steps_extract
      # Fixme: change to confirm the hand/ingredient
      unless checkright
        dothis 'swap', /^You swap/
      end
      return_room = nil
      unless Util.is_workshop
        return_room = Room.current.id
        Guild.get_cauldron
        Actions.go_empty_workshop
      end
      if Room.current.tags.include?("#{Char.prof.downcase} alchemy workshop")
        Util.check_mana(10)

        Util.get_res('alchemy extract', /^You carefully (?:pour|place)/)
        result = nil
        9000.times {
          sleep 0.1
          break if (result = clear.any? { |line| line =~ /Sensing the process nearing its end/ })
        }
        Util.wait_rt
        Actions.store_ingredient
        if return_room
          Util.travel(return_room)
        end
        if result.nil?
          Util.msg('error', ' error: extract failed (game bug)')
          exit
        end
      else
        Util.msg('error', ' error: failed to find workshop')
        exit
      end
    end

    def self.do_steps_grind(ingredient)
      unless (mortar = [GameObj.right_hand, GameObj.left_hand].find { |i| i.noun =~ /mortar/ })
        mortar = BlackArts.data.sacks["reagent"].contents.find { |obj| obj.noun == 'mortar' }
        Inventory.drag(mortar)
      end

      if BlackArts.data.mortar_check
        lines = Util.get_lines("inspect ##{mortar.id}", /You carefully inspect|Inspecting that may not be a sound idea./)

        if lines.any? { |l| l =~ /You carefully inspect/i }
          Util.msg('info', " This is an old style mortar and doesn't work with alchemy. Please 'tap mortar' then 'rub mortar' to convert it. Exiting...")
          exit
        end
        BlackArts.data.mortar_check = false
      end

      Util.get_res("put ##{ingredient.id} in ##{mortar.id}", BlackArts.data.put_regex)

      loop {
        grind_result = Util.get_res("grind #{ingredient.noun} from my mortar", /^Roundtime. [0-9]+ sec\.$|appears to be as ground as it'?s going to get|^Grind what|^With what do you intend to grind/)

        if grind_result =~ /appears to be as ground as it'?s going to get|^Grind what/
          break
        elsif grind_result =~ /^With what do you intend to grind/
          unless (pestle = BlackArts.data.sacks["reagent"].contents.find { |obj| obj.noun == 'pestle' })
            Util.msg('error', ' Error: Missing pestle')
            exit
          end
          Util.get_res("_drag ##{pestle.id} ##{mortar.id}", BlackArts.data.put_regex)
        end
      }

      if mortar.contents.nil?
        Util.get_res("look in ##{mortar.id}", /^In the .*? you see/)
      end

      for item in mortar.contents
        next if item.noun == 'pestle'
        Inventory.store_item(BlackArts.data.sacks["reagent"], item)
      end
      Inventory.store_item(BlackArts.data.sacks["reagent"], mortar)
    end

    def self.do_steps_infuse
      loop {
        Util.check_mana(10)
        Util.get_res('alchemy infuse', /^You focus/)
        infuse_result = waitfor 'The translucent thread fades away.  You feel slightly drained from the ordeal.', 'Your concentration lapses and the translucent thread connecting you to the solution fades away.'
        Util.wait_rt
        break if infuse_result == 'The translucent thread fades away.  You feel slightly drained from the ordeal.'
      }
    end

    def self.do_steps_light(steps)
      BlackArts.data.need_empty_flask = false
      wait_spirit = false
      temp_claimed_ingredients = Array.new
      temp_ingredient_count = BlackArts.data.ingredient_count.dup
      for sub_step in steps
        next if sub_step =~ /troll blood/
        if sub_step =~ /^add\s+(.*)/
          ingredient_name = $1
          found, temp_claimed_ingredients, temp_ingredient_count = Guild.check_ingredient(ingredient_name, temp_claimed_ingredients, temp_ingredient_count)
          unless found
            Util.msg('error', " Error: Missing #{ingredient_name}")
            error = true
          end
        elsif sub_step == 'channel'
          wait_spirit = true
        elsif sub_step =~ /^(?:buy|forage|kill)/
          Util.msg('error', " Tasks.do_steps: sub_step failed - #{sub_step}")
          error = true
          break
        elsif sub_step == 'seal'
          break
        elsif sub_step =~ /^refract (moonlight|sunlight)/
          light = $1
          if (light == 'sunlight') and Util.is_moonlight
            Util.msg('error', ' Tasks.do_steps: sub_step failed - missing sunlight')
            error = true
            break
          elsif (light == 'moonlight') and Util.is_sunlight
            Util.msg('error', ' Tasks.do_steps: sub_step failed - missing moonlight')
            error = true
            break
          end
          unless Util.is_workshop
            BlackArts.data.start_room = Room.current.id
            Guild.get_cauldron
            Actions.go_empty_workshop
          end
        end
      end
      if error
        Guild.get_cauldron
        exit
      else
        Util.check_spirit if wait_spirit
        Guild.drop_cauldron
        Util.check_mana(1)
        Util.get_res("light ##{BlackArts.data.cauldron.id}", /^You focus|^But that is already lit!$/)
      end
    end

    def self.do_steps_refract(lens_name)
      unless (lens = BlackArts.data.sacks["reagent"].contents.find { |obj| obj.name == lens_name })
        Util.msg('error', " error: Failed to find #{lens_name} in #{BlackArts.data.sacks["reagent"].name}")
        exit
      end
      Inventory.drag(lens)
      Util.get_res('alchemy refract', /^The surface of the solution in .* shimmers in response!/)
      Util.wait_rt
      Actions.store_ingredient
    end

    def self.do_steps_seal
      Util.check_mana(20)
      if BlackArts.data.need_empty_flask
        Util.get_res("get empty flask from ##{BlackArts.data.sacks["reagent"].id}", BlackArts.data.get_regex)
      end

      fput "look in ##{BlackArts.data.cauldron.id}"
      Util.get_res('alchemy seal', /^You hold your hands over/)
      nil until get =~ /You sense (?:that the ritual is complete|something amiss with the solution)/
      Util.wait_rt
      Actions.store_ingredient
    end

    def self.do_steps_separate
      noun = GameObj.right_hand.noun || GameObj.left_hand.noun
      Util.get_res("get 1 #{noun.sub(/s$/, '')} from my #{noun}", /^You separate/)
      Actions.store_ingredient
    end

    def self.do_steps_simmer
      loop {
        Util.check_mana(10)
        simmer_result = Util.get_res('alchemy simmer', /flickers briefly, but then dies down|quickly flares to life, bringing the contents to a slow simmer/)
        Util.wait_rt
        break if simmer_result =~ /quickly flares to life, bringing the contents to a slow simmer/
      }
    end

    def self.do_steps_special
      need_water = true
      need_turned_vial = false
      need_opened_vial = false
      need_turned_flask = false
      need_opened_flask = false

      vials = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.name =~ BlackArts.data.sea_water_vial }
      flasks = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.name =~ BlackArts.data.sea_water_flask }

      unless vials.length.positive? && flasks.length.positive?
        Util.msg('error', ' error: failed to find a vial or flask for sea water')
        exit
      end

      vial = nil
      vials.each_with_index do |item, index|
        lines = Util.get_lines("look in ##{item.id}", /cork that holds it securely closed|cork that dangles at its side/)
        if lines.grep(/cork that holds it securely closed/i).any?
          need_opened_vial = true
        end

        if lines.grep(/is filled with an oceanic blue water solution/i).any?
          vial = item
          need_water = false
          break
        elsif !lines.grep(/is filled with (a dark crimson fluid|an oceanic blue water solution)/i).any?
          vial = item
        elsif lines.grep(/is filled with a dark crimson fluid/i).any? && index == vials.length - 1 && vial.nil?
          need_turned_vial = true
          vial = item
        end
      end

      flask = nil
      if need_water
        flasks.each_with_index do |item, index|
          lines = Util.get_lines("look in ##{item.id}", /cork that holds it securely closed|cork that dangles at its side/)
          if lines.grep(/cork that holds it securely closed/i).any?
            need_opened_flask = true
          end

          if lines.grep(/is filled with an oceanic blue water solution/i).any?
            flask = item
            need_water = false
            break
          elsif !lines.grep(/is filled with (a dark crimson fluid|an oceanic blue water solution)/i).any?
            flask = item
          elsif lines.grep(/is filled with a dark crimson fluid/i).any? && index == vials.length - 1 && flask.nil?
            need_turned_flask = true
            flask = item
          end
        end
      end

      if need_water
        Guild.get_cauldron
        room_list = BlackArts.data.current_room.find_nearest_by_tag('alchemy sea water').to_i
        if room_list.nil?
          Util.msg('error', ' error: failed to find a place to collect sea water')
          exit
        else
          return_room = Room.current.id
          Util.travel(room_list)

          Inventory.drag(vial)
          Util.get_res("open ##{vial.id}", /^You gently twist the stopper on the/) if need_opened_vial
          Util.get_res("turn ##{vial.id}", /^You turn/) if need_turned_vial
          Util.get_res("harvest water with ##{vial.id}", /under water until it is filled|is already filled/)
          Inventory.store_item(BlackArts.data.sacks["reagent"], vial)

          Inventory.drag(flask)
          Util.get_res("open ##{flask.id}", /^You gently twist the stopper on the/) if need_opened_flask
          Util.get_res("turn ##{flask.id}", /^You turn/) if need_turned_flask
          Util.get_res("harvest water with ##{flask.id}", /under water until it is filled|is already filled/)
          Inventory.store_item(BlackArts.data.sacks["reagent"], flask)

          Util.travel(return_room)
        end
      end

      unless Util.is_workshop
        return_room = Room.current.id
        Guild.get_cauldron
        Actions.go_empty_workshop
      end

      Inventory.drag(vial)
      lines = Util.get_lines("look in ##{vial.id}", /cork that holds it securely closed|cork that dangles at its side/)
      Util.get_res("open ##{vial.id}", /^You gently twist the stopper on the/) if lines.grep(/cork that holds it securely closed/i).any?

      unless lines.grep(/is filled with an oceanic blue water solution/i).any?
        Inventory.drag(flask)
        lines = Util.get_lines("look in ##{flask.id}", /cork that holds it securely closed|cork that dangles at its side/)
        Util.get_res("open ##{flask.id}", /^You gently twist the stopper on the/) if lines.grep(/cork that holds it securely closed/i).any?
        Util.get_res("pour ##{flask.id} in ##{vial.id}", /^You pour|^It looks like your glass vial is already full\.$|^But your .*? flask is empty!$/)
        Inventory.store_item(BlackArts.data.sacks["reagent"], flask)
      end

      if Room.current.tags.include?("#{Char.prof.downcase} alchemy workshop")
        Util.check_mana(10)
        Util.get_res('alchemy extract', /^You carefully (?:pour|place)/)
        result = nil
        9000.times {
          sleep 0.1
          break if (result = clear.any? { |line| line =~ /Sensing the process nearing its end/ })
        }
        Util.wait_rt
        Inventory.store_item(BlackArts.data.sacks["reagent"], vial)
        Actions.store_ingredient

        if return_room
          Util.travel(return_room)
        end
        if result.nil?
          Util.msg('error', ' error: extract failed (game bug)')
          exit
        end
      else
        Util.msg('error', ' error: failed to find workshop')
        exit
      end
    end

    def self.do_steps_troll_blood
      vial = nil
      need_opened_vial = nil
      need_turned_vial = nil

      vials = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.name =~ BlackArts.data.sea_water_vial }
      flasks = BlackArts.data.sacks["reagent"].contents.find_all { |obj| obj.name =~ BlackArts.data.sea_water_flask }

      unless vials.length.positive? && flasks.length.positive?
        Util.msg('error', ' error: failed to find a vial or flask for troll blood')
        exit
      end

      vials.each_with_index do |item, index|
        lines = Util.get_lines("look in ##{item.id}", /cork that holds it securely closed|cork that dangles at its side/)
        if lines.grep(/cork that holds it securely closed/i).any?
          need_opened_vial = item.id
        end

        if lines.grep(/is filled with a dark crimson fluid/i).any?
          Inventory.drag(item)
          Util.get_res("open ##{item.id}", /^You gently twist the stopper on the/) if lines.grep(/cork that holds it securely closed/i).any?
          Util.get_res("pour ##{item.id} in ##{BlackArts.data.cauldron.id}", /^You place|^You pour/)
          Inventory.store_item(BlackArts.data.sacks["reagent"], item)
          return true
        elsif !lines.grep(/is filled with (a dark crimson fluid|an oceanic blue water solution)/i).any?
          vial = item
        elsif lines.grep(/is filled with an oceanic blue water solution/i).any? && index == vials.length - 1 && vial.nil?
          need_turned_vial = item.id
          vial = item
        end
      end

      flasks.each do |item|
        lines = Util.get_lines("look in ##{item.id}", /cork that holds it securely closed|cork that dangles at its side/)

        if lines.grep(/is filled with a dark crimson fluid/i).any?
          Inventory.drag(vial)
          Util.get_res("open ##{vial.id}", /^You gently twist the stopper on the/) if need_opened_vial == vial.id
          Util.get_res("turn ##{vial.id}", /^You turn/) if need_turned_vial == vial.id

          Inventory.drag(item)
          Util.get_res("open ##{item.id}", /^You gently twist the stopper on the/) if lines.grep(/cork that holds it securely closed/i).any?
          Util.get_res("pour ##{item.id} in ##{vial.id}", /^You pour|^It looks like your glass vial is already full\.$|^But your .*? flask is empty!$/)
          Inventory.store_item(BlackArts.data.sacks["reagent"], item)

          Util.get_res("pour ##{vial.id} in ##{BlackArts.data.cauldron.id}", /^You place|^You pour/)
          Inventory.store_item(BlackArts.data.sacks["reagent"], vial)

          return true
        end
      end

      Util.msg('error', ' error: No troll blood found.')
      Util.msg('error', ' error: The script cannot get it yet. You will need to harvest it yourself.')
      exit
    end

    def self.do_task_reps(skill, required_step)
      do_again = false
      redo_task = nil
      guild_status = Guild.gld

      Util.msg("default", " Required Step: #{required_step}")

      recipe_list = Guild.gld_suggestions(guild_status)[skill][:recipes].dup
      recipe_list.delete_if { |r| !r[:steps].any? { |step| step =~ /^#{required_step}/ } }
      Util.msg("default", " Checking ingredients...")
      check_info = Guild.check_recipe(:recipes => recipe_list, :reps => guild_status[skill][:reps])
      check_steps = check_info[:finish_steps].dup

      if !check_info[:error].empty?
        Util.no_recipe
      end

      fput 'stance offensive' unless stance =~ /offensive/

      Util.show_check(check_info)

      if check_info[:buy].size.positive? || check_info[:forage].size.positive? || check_info[:kill_for].size.positive?
        Guild.get_cauldron
        Actions.get_supplies(check_info)
        if check_info[:prepare_steps].length.to_i > 0
          Actions.go_empty_workshop
          Tasks.do_steps(check_info[:prepare_steps])
        end
      elsif check_info[:prepare_steps].length.to_i > 0
        Guild.get_cauldron
        Actions.go_empty_workshop
        Tasks.do_steps(check_info[:prepare_steps])
        Guild.get_cauldron
      else
        single = Array.new
        check_steps.each { |item|
          single.push(item)
          break if item == "seal"
        }

        Tasks.do_steps(check_steps, true)

        reget(25).each { |line|
          if line =~ /try a recipe with (.*?) as a component/
            redo_task = $1.downcase
            do_again = true
            break
          end
        }
      end

      if percentencumbrance >= 80
        Guild.get_cauldron
        move "out" if checkpaths and checkpaths.include?('out')
        Util.silver_deposit
      elsif do_again
        Tasks.do_task_reps(skill, redo_task)
      else
        Util.silver_deposit if percentencumbrance.positive?
        Guild.get_cauldron
        move "out" if checkpaths and checkpaths.include?('out')
      end
    end

    def self.grind_ingredients
      Guild.get_cauldron
      Inventory.free_hands(both: true)
      Util.travel("#{Char.prof.downcase} alchemy shop")

      clerk = nil
      20.times {
        clerk = checknpcs.find { |npc_name| npc_name =~ /^clerk$|acolyte$|^hobgoblin$|^gnome$|^apothecary$|^apprentice$/ }
        break if clerk
        sleep 0.1
      }

      if clerk.nil?
        Util.msg('error', " Not able to find the clerk. Report this to EO to fix.")
        Util.msg('error', " Method: Tasks.grind_ingredients | Class: #{Char.prof} | Room: #{Room.current.id} | NPCs: #{GameObj.npcs}")
      end

      result = Util.get_res('get mortars', /^You take|^You already have a stone mortar|^Get what\?/)
      if result =~ /^Get what\?/
        Util.get_res('get stone mortars', /^You take|^You already have a stone mortar/)
      end

      shelf = GameObj.room_desc.find { |obj| obj.noun == 'shelf' } || GameObj.loot.find { |obj| obj.noun == 'shelf' }

      loop {
        shelf_contents = Util.check_table(shelf)
        grindable_id = shelf_contents.first.id

        if grindable_id.nil?
          Util.get_res("ask #{clerk} about ingredients", /^You ask the .*? about ingredients\.$/)
          shelf_contents = Util.check_table(shelf)
          grindable_id = shelf_contents.first.id
        end

        get_result = Util.get_res("get ##{grindable_id}", /^You take/)

        if get_result
          loop {
            grind_result = Util.get_command("grind ##{grindable_id}", /You take|ground as much as possible|as ground as it'?s going to get|^Grind what/)

            break if grind_result.any? { |l| l =~ /ground as much as possible|as ground as it'?s going to get|^Grind what/ }
          }
        else
          Util.msg('error', " Failed to get ingredient. Report this to EO to fix.")
          Util.msg('error', " Method: Tasks.grind_ingredients | Class: #{Char.prof} | Room: #{Room.current.id} | get_result: #{get_result}")
          exit
        end

        give_result = Util.get_res("give my mortar to #{clerk}", /^\[You have/)
        break unless give_result =~ /\[You have [0-9]+ repetitions? remaining\.\]/
      }

      Util.get_res('put mortar', BlackArts.data.put_regex)
    end

    def self.grind_mine(reps)
      BlackArts::Util.travel("#{Char.prof.downcase} alchemy administrator")
      Util.msg("info", " Looking for recipes involving grinding.")
      BlackArts.data.alchemy_grind_history ||= Hash.new
      BlackArts.data.alchemy_grind_history.delete_if { |_recipe, time| time > Time.now + 600 }

      check_list = Array.new
      forage_list = Array.new
      recipe_list = BlackArts.data.recipes.find_all { |recipe| (recipe[:product] !~ /powdered/) && (recipe[:steps].first =~ /^grind/) && !BlackArts.data.alchemy_grind_history.keys.include?(recipe[:product]) }

      # Rank the foraging by location, find closest ones
      recipe_list.dup.each { |recipe|
        herb = recipe[:steps].first.gsub("grind", "").strip

        _previous, shortest_distances = BlackArts.data.current_room.dijkstra
        location_list = []
        Room.list.find_all do |r|
          if r.tags.any? { |tag| (tag.end_with? herb) || ((herb.start_with? tag) && herb =~ /ayana/) || (herb.end_with? tag) } && !shortest_distances[r.id].nil? && shortest_distances[r.id] < 5
            location_list.push(r.id)
          end
        end

        forage_list.push(recipe) if location_list.length.positive?
        break if forage_list.length >= reps
      }

      for item in forage_list
        tracker = Guild.initialize_tracker
        tracker = Guild.recursive_check_recipe(item, tracker, true)
        fixed_buy = Hash.new
        tracker[:buy].each_pair { |where_what, how_many|
          where, what = where_what.split(';')
          fixed_buy[where] ||= Hash.new
          fixed_buy[where][what] = how_many
        }

        if tracker[:error]["mortar"] == 1
          Util.msg('error', " You are missing a mortar! Exiting...")
          exit
        end

        tracker[:buy] = fixed_buy
        tracker.delete(:claimed_ingredients)
        tracker.delete(:ingredient_count)
        tracker.delete(:extra_ingredients)
        check_list.push(tracker)
      end

      check_list.delete_if { |check| !check[:error].empty? or check[:steps].first !~ /^grind/ }
      check_list.sort! { |a, b| (a[:cost] + (a[:time] * 15)) <=> (b[:cost] + (b[:time] * 15)) }
      Inventory.free_hands(both: true)

      for check_info in check_list
        return_room = Room.current.id
        Util.show_check(check_info)
        Actions.get_supplies(check_info)
        Util.travel(return_room)

        Tasks.do_steps(check_info[:steps])
        BlackArts.data.alchemy_grind_history[check_info[:recipe_count].keys.first] = Time.now
        result = reget.reverse.find { |line| line =~ /^\[You have|as ground as it'?s going to get/ }
        break unless result =~ /remaining/
      end
    end

    def self.polish_lens
      finished = false
      location_list = Util.find_workshops

      Guild.get_cauldron
      Inventory.free_hands(both: true)

      Util.travel("#{Char.prof.downcase} alchemy cleaning supplies")
      Util.get_res('get cloth', /^You take/)

      for room_id in location_list
        Util.go2(room_id)
        clean_result = Util.get_res('polish ass', /You have|Perhaps you should check another workshop/)
        Util.wait_rt
        if clean_result =~ /You have completed/
          finished = true
          break
        end
        break if clean_result =~ /Perhaps you should/
      end
      Util.wait_rt
      Util.get_res('put cloth', BlackArts.data.put_regex)

      if !finished
        Util.find_next_guild
        Tasks.polish_lens
      end

      BlackArts.data.visited_towns = [BlackArts.data.start_town]
      Util.travel(BlackArts.data.current_admin)
    end

    def self.sweep_labs
      location_list = Util.find_workshops

      Guild.get_cauldron
      Inventory.free_hands(both: true)

      Util.travel("#{Char.prof.downcase} alchemy cleaning supplies")

      Util.get_res('get broom', /^You take/)
      Util.get_res('get pan', /^You take/)

      sweep_result = nil
      loop {
        for room_id in location_list
          Util.go2(room_id)
          loop {
            sweep_result = Util.get_res('sweep dust', /^Roundtime|You'll need something to sweep the pile|^Sweep what|^Your dust pan appears to be full\.|^But your dust pan is already full|^Someone else is already sweeping that pile of dust|^What did the dust ever do to you\?$/)
            Util.wait_rt
            if sweep_result =~ /You'll need something to/
              Inventory.free_hands(both: true)
              Util.travel("#{Char.prof.downcase} alchemy cleaning supplies")
              Util.get_res('get broom', /^You take/)
              Util.get_res('get pan', /^You take/)
              Util.go2(room_id)
            end

            break if sweep_result =~ /^Sweep what|^Your dust pan appears to be full\.$|^But your dust pan is already full|^Someone else is already sweeping that pile of dust|^What did the dust ever do to you\?$/
          }
          break if sweep_result =~ /^Your dust pan appears to be full\.$|^But your dust pan is already full\.$/
        end
        Util.go2("#{Char.prof.downcase} alchemy cleaning supplies")
        if sweep_result =~ /^Your dust pan appears to be full\.$|^But your dust pan is already full\.$/
          put_result = Util.get_command('put my pan in bin', /^You take|You empty your/)
          if put_result.any? { |l| l =~ /You have completed your training/ }
            break
          end
        end
      }
      Util.wait_rt
      Util.get_res('put broom', BlackArts.data.put_regex)
      Util.get_res('put pan', BlackArts.data.put_regex)

      Util.travel(BlackArts.data.current_admin)
    end
  end
end

if Script.current.vars.any? { |var| var =~ /help/ }
  BlackArts::Util.help
  exit
end

if Char.prof !~ /cleric|empath|sorcerer|wizard/i
  BlackArts::Util.msg("orange", " This script will not work for the #{Char.prof} class. Exiting...")
  exit
end

if Script.current.vars.any? { |var| var =~ /^--debug=(on|off|true|false|yes|no)$/i }
  fix_option = { 'on' => true, 'true' => true, 'yes' => true, 'off' => false, 'false' => false, 'no' => false }
  BlackArts.load(BlackArts.load_profile()) unless BlackArts.data
  BlackArts::Setup.update_setting(:debug, fix_option[$1])
  BlackArts.data.settings[:debug] = fix_option[$1]
  BlackArts.save_profile()
  exit
end

# Initialize default settings
unless BlackArts.data
  BlackArts.load(BlackArts.load_profile())
end

unless BlackArts.data.recipes.length.positive?
  BlackArts.data.recipes = BlackArts::Recipes.alchemy_recipes.delete_if { |recipe| (!recipe[:for].nil? && !recipe[:for].include?(Char.prof)) || (!BlackArts.data.settings[:sell_exclude].nil? && recipe[:product] =~ /#{BlackArts.data.settings[:sell_exclude].join('|')}/) }
end

# Set needed ingredients
BlackArts::Util.set_needed_reagents

if Room.current.id.nil?
  BlackArts::Util.mapped_room
end

BlackArts::Util.track_room

# Reset the mortar check in case it's an old style
BlackArts.data.mortar_check = true

# Default to running guild tasks
if Script.current.vars[1].nil?
  BlackArts::Util.set_variables
  BlackArts::Util.set_hooks

  current_settings = UserVars.op
  before_dying {
    UserVars.op = current_settings
  }
  BlackArts::Guild.new_task

  exit
end

case Script.current.vars[1].downcase
when 'buy'
  if (Time.now - BlackArts.data.last_alchemy_buy) > 600 || Script.current.vars[2] == 'force'
    return_room = Room.current.id
    BlackArts::Util.set_variables(false)
    BlackArts::Actions.buy_elusive(true)
    BlackArts::Util.silver_deposit('all')
    BlackArts::Util.travel(return_room)
  else
    total_seconds = 600 - (Time.now - BlackArts.data.last_alchemy_buy)
    minutes = (total_seconds / 60).to_i
    seconds = (total_seconds % 60).to_i
    BlackArts::Util.msg("yellow", " Last buy was less than 10 minutes ago. Next buy in #{minutes} minutes and #{seconds} seconds")
  end
when /clean/
  return_room = Room.current.id
  BlackArts::Util.set_variables(false)
  BlackArts::Actions.cleanup
  BlackArts::Util.travel(return_room)
  BlackArts::Actions.top_off_jars
when 'forage'
  BlackArts::Util.set_variables(false)
  BlackArts::Util.only_forage(Script.current.vars)
when /^(check|make|prepare)$/i
  BlackArts::Util.set_variables
  BlackArts::Util.prep_create(Script.current.vars)
when 'list'
  BlackArts::Setup.new(BlackArts.data.settings).list
when 'setup'
  BlackArts::Setup.new(BlackArts.data.settings).start
  BlackArts.load(BlackArts.load_profile())
  BlackArts::Util.set_variables
  BlackArts.data.recipes = BlackArts::Recipes.alchemy_recipes.delete_if { |recipe| (!recipe[:for].nil? && !recipe[:for].include?(Char.prof)) || (!BlackArts.data.settings[:recipe_exclude].nil? && recipe[:product] =~ /#{BlackArts.data.settings[:recipe_exclude].join('|')}/i) }
when 'load'
  BlackArts.load(BlackArts.load_profile)
  BlackArts::Util.set_variables
when 'remove'
  unless Script.current.vars[2] =~ /alchemy|potions|trinkets/
    BlackArts::Util.msg "yellow", ' Proper syntax: ;blackarts remove (alchemy|potions|trinkets)'
    exit
  end
  return_room = Room.current.id
  BlackArts::Util.set_variables(false, true)
  BlackArts::Guild.remove_task(Script.current.vars[2])
  BlackArts::Util.travel(return_room)
when /guild|gld/
  BlackArts::Util.travel("#{Char.prof.downcase} alchemy administrator")
when 'suggest'
  BlackArts::Util.set_variables
  BlackArts::Util.suggestion
when 'test'
  BlackArts::Util.test
when 'finish'
  BlackArts::Util.msg "yellow", ' This command only works while the script is running'
else
  BlackArts::Util.help
end
