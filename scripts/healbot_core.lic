=begin

  healbot_core.lic: An automated healbot script to run commands based on regex

        author: Elanthia-Online
  contributors: Athias
          game: Gemstone
          tags: utility, shattered, automated
       version: 1.1.0
      required: Lich >= 4.6.58
        source: https://github.com/elanthia-online/scripts 

  notes:
    This script is intended to be completely automated
    AFK scripting a violation of ToS, and this script is only intended for use in Shattered

=end

required_scripts = Array.new
required_scripts = ["healbot_actions", "waggle"]

# healbot_actions is required
required_scripts.each { |cur_script|
  unless Script.exists?(cur_script)
    do_client(";repository download #{cur_script}.lic")
    wait_while { running?('repository') }
    sleep 0.5
    do_client(";autostart add --global #{cur_script}")
    wait_while { running?('autostart') }
    sleep 0.5
    do_client(";repository set-updatable #{cur_script}.lic")
    wait_while { running?('repository') }
    sleep 0.5
  end
}

# GSF (shattered) only
unless XMLData.game =~ /^GSF/
  respond "*****"
  respond "*"
  respond "* This script is completely automated and can easily be run"
  respond "* while AFK - which is a violation of ToS unless you are in"
  respond "* the Shattered instance."
  respond "*"
  respond "* If you wish to still run this script:"
  respond "*   type ;u to unpause"
  respond "*"
  respond "*****"
  pause_script
end

# Variables Used
@nw_action_queue = Array.new
action_to_do = Hash.new
trigger_regex_hash = Hash.new
arrived = Hash.new
wounded = Hash.new
spellup = Hash.new
regex_one = nil
regex_two = nil
regex_three = nil

class Injuries
  def Injuries.any
    fix_injury_mode
    [XMLData.injuries['leftArm']['wound'],XMLData.injuries['rightArm']['wound'],XMLData.injuries['leftHand']['wound'],XMLData.injuries['rightHand']['wound'],XMLData.injuries['leftLeg']['wound'],XMLData.injuries['rightLeg']['wound'],XMLData.injuries['rightEye']['wound'],XMLData.injuries['leftEye']['wound'],XMLData.injuries['chest']['wound'],XMLData.injuries['abdomen']['wound'],XMLData.injuries['back']['wound'],XMLData.injuries['nsys']['wound'],XMLData.injuries['head']['wound'],XMLData.injuries['neck']['wound']].max
  end
end

# REGEX hashes to run actions
update_hash = proc {
  trigger_regex_hash = {
    /([A-Z,a-z]+)('s group| )(just arrived|just came crawling in|just limped in|just came marching in|just came sashaying in gracefully|just arrived, skipping merrily|just tiptoed in|just strode  in|just stumbled in|just came trudging in|pokes you in the ribs.)/ => "run transfer",
    /([A-Z,a-z]+)'s voice focuses on the .* which quickly shatters into thousands of fragments/ => "run transfer",
    /([A-Z,a-z]+) whispers, "Mana."/ => "run sendmana",
    /([A-Z,a-z]+) whispers, "Bread."/ => "run givebread",
    /([A-Z,a-z]+) whispers, "Spells."/ => "run waggleme",
    /([A-Z,a-z]+) whispers, "Buffs."/ => "run waggleme",
  }
}

##THREADS
queue = Thread.new{
  while line = get
    trigger_regex_hash.each_pair {|k,v|
      if line =~ k
        if $1 != nil then
          regex_one = $1
        end
        if $2 != nil then
          regex_two = $2
        end
        if $3 != nil then
          regex_three = $3
        end
        action_to_do["name"] = $1
        update_hash.call
        action_to_do["command"] = trigger_regex_hash[k]
        if !@nw_action_queue.include?(action_to_do)
          @nw_action_queue.push(action_to_do)
        end
        action_to_do = {}
        regex_one = nil
        regex_two = nil
        regex_three = nil
        update_hash.call
      end
    }
  end
}

# perform_action thread
perform_action = Thread.new {
  loop {
    wait_until {@nw_action_queue.length > 0 }
    echo target_character = @nw_action_queue[0]["name"]
    echo target_command = @nw_action_queue[0]["command"]
    if checkpcs.include?(target_character) || target_character == Char.name
      if !target_command.is_a? String
        target_command.call(target_character)
      elsif target_command.split[0] == "run"
        Script.run('healbot_actions',"#{target_command.split[1]} #{target_character}")
      elsif target_command.split[0] == "cast"
        cast target_command.split[1]
      else
        echo do_client target_command
      end
      target_character = nil
      target_command = nil
    end
    @nw_action_queue.shift
  }
}

# monitor_wounds action
monitor_wounds = Thread.new {
  loop {
    wait_until{Injuries.any > 1 || health < maxhealth }
    echo "injured"
    wounded["name"] = Char.name
    wounded["command"] = "run healdown"
    if @nw_action_queue.length == 0
      @nw_action_queue.push(wounded)
    else
      @nw_action_queue.insert(1,wounded)
    end
    if @nw_action_queue.include?(wounded)
    end
    wait_while {@nw_action_queue.include?(wounded)}
  }
}

monitor_room = Thread.new {
  population = checkpcs
  loop {
    wait_while { ((checkpcs - population) + (population - checkpcs)).empty? }
    difference = checkpcs - population
    population = checkpcs
    difference.each {|x|
      arrived["name"] = x
      arrived["command"] = "run transfer"
      if !@nw_action_queue.include?(arrived)
        @nw_action_queue.push(arrived)
      end
    }
  }
}

# 
keep_spells_up = Thread.new {
  loop {
    if Spell[1125].timeleft <= 5 && Spell[1125].known?
      spellup["name"] = Char.name
      spellup["command"] = "cast 1125"
      @nw_action_queue.push(spellup)
    elsif Spell[203].timeleft <= 5
      spellup["name"] = Char.name
      spellup["command"] = "run eatbread"
      @nw_action_queue.push(spellup)
    elsif Spell[215].timeleft <= 5 && Spell[215].known?
      spellup["name"] = Char.name
      spellup["command"] = "cast 215"
      @nw_action_queue.push(spellup)
    end
    sleep 60
  }
}

#MAIN
update_hash.call
threads = [queue,perform_action,monitor_wounds,monitor_room,keep_spells_up]
threads.each{ |th| th.join}
