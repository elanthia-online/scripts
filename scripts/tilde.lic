=begin
	quick shortcuts for dealing with containers

	examples:
	  ~cloak                 => look in my cloak
	  ~cloak box         		 => put box in my cloak
		~pants ruby amulet     => put ruby amulet in my pants
		~:lootsack ruby amulet => put ruby amulet in your lootsack
		^:harness small statue => remove a small statue from your Vars[:harness]

	additive search algorithm weights:
		1. right hand
		2. left hand
		3. loot
		4. items in GameObj.containers.keys

	profanity integration:
		This script makes it trivial to have portable macros across all of your characters
		using ProfanityFE.
		
		example:
			<key id='ctrl+p' macro='\x~:lootsack \?'/>

		this macro will be rebound across all of your characters to use your ;vars in Lich

	Notes:

	1. due to safety concerns it only works on containers in your inventory
	   however the items that it will try to add to your container can be
	   anywhere reachable
	2. only your 'stow' container contents are eagerly loaded in the Game stream
	   so until you look in some containers, their contents will not be reachable

  Required: Lich 4.3.12
  Author: Ondreian
  Tags: util, containers
  
=end
module Tilde
	@vars = Script.current.vars
	VAR_TOKEN = %[:]
	TTL       = 3 # s

	class TildeError < Exception; end
	module CLI
		TILDE     = %[<c>~]
		PIN       = %[<c>^]
		CMD_SIZE  = TILDE.size
		HELP_CMDS = %w[help info]
		Handler   = -> incoming {
			return incoming unless incoming.start_with?(TILDE) or incoming.start_with?(PIN)
			CLI.consume(incoming)
			return nil
		}

		def self.add_hook()
			UpstreamHook.add(self.name.downcase, Handler)
		end

		def self.print_help()
			fail TildeError, <<-HELP
			  tilde@1.0.0

			  this script is useful short-hand to interact with your containers

			  example:
			   ~pants       => look in my pants
			   ~pants chest => put chest in my pants
			HELP
		end

		def self.parse_input(raw)
			cmd = raw.slice(CMD_SIZE, raw.size)
			container, *item = cmd.split(" ")
			return print_help() if HELP_CMDS.include?(container)
			
			kind = case (this = raw.slice(0, CMD_SIZE))
				when PIN
					:pin
				when TILDE
					:tilde
				else
					fail TildeError, %[unknown Kind[#{this}]]
				end

			{ kind:      kind, 
				container: if kind.eql?(:tilde) then container else false end, 
				item:      if kind.eql?(:tilde) then item.join(" ") else cmd end}
		end

		def self.consume(incoming)
			Tilde.unwrap_error do 
				Tilde.schedule(
					**CLI.parse_input(incoming))
			end
		end

		CLI.add_hook()
	end

	def self.unwrap_error()
		begin
			yield
		rescue TildeError => e
			_respond e.message
		rescue Exception => e
			_respond e.message
			respond e.backtrace
		end
	end

	def self.check_user_vars(symbolized_var)
		var = (Vars[symbolized_var.slice(1..-1)] or container_not_found("Vars[#{symbolized_var}]"))
		if var.split(" ").size > 1 
			GameObj.inv.find do |item| item.name.eql?(var) end or container_not_found("Vars[#{symbolized_var}]")
		else
			matches = GameObj.inv.select do |item| item.noun.eql?(var) end 
			return container_not_found("Vars[#{symbolized_var}]") if matches.empty?
			return ambigious_container("Vars[#{symbolized_var}]", matches) if matches.size > 1
			return matches.first
		end
	end

	def self.find_container(search)
		return check_user_vars(search) if search.start_with?(VAR_TOKEN)
		GameObj.inv.find do |item| item.noun.start_with?(search) end or 
		container_not_found(search)
	end

	def self.items_view(items)
		names = items.to_a.map(&:name).sort {|n1, n2| n2.size <=> n1.size }
		names.map.with_index { |n, i| "... #{i+1}> " + n }.join("\n")
	end

	def self.ambigious_container(search, matches)
		fail TildeError, [
			%(<b>ambigious container found for #{search} in your inventory</b>),
			%(details:),
			items_view(matches) ].join("\n")
	end

	def self.container_not_found(search)
		fail TildeError, [
			%(<b>could not find a container matching #{search} in your inventory</b>),
			%(inventory:),
			items_view(GameObj.inv) ].join("\n")
	end

	def self.build_search_list()
		([GameObj.right_hand, GameObj.left_hand] + 
			GameObj.loot.to_a + 
			GameObj.containers.values.flatten)
	end

	def self.peek_container(obj)
		Tilde::OPERATIONS << {kind: :tilde, container: obj, item: nil}
		ttl = Time.now + TTL
		until GameObj.containers.include?(obj.id) or Time.now > ttl do sleep 0.01 end
		fail TildeError, "failed to check contents of #{obj.name} in #{TTL}s" if Time.now > ttl
	end

	def self.find_item(desc)
		words = desc.split(" ")

		if words.first.start_with?(VAR_TOKEN)
			(symbolized_var, *rest) = words
			query = rest.join(" ")
			container = find_container(symbolized_var)
			GameObj.containers[container.id] or peek_container(container)
			GameObj.containers[container.id]
				.reject do |item| item.id.nil? end
				.find do |item| item.name.include?(query) end or
				fail TildeError, %[could not find any matches for Item[desc: #{query}] in Container[name: #{container.name}]]
		else
			build_search_list
				.reject do |item| item.id.nil? end
				.find do |item| item.name.include?(desc) end or
				fail TildeError, %[could not find any matches for Item[desc: #{desc}]]
		end
	end

	def self.schedule(args)
		respond "Tilde.schedule(#{args})" if @vars.include?("--debug")
		container = if args.fetch(:container, false)
			Tilde.find_container(
				args.fetch(:container))
		else
			false
		end

		item = args.fetch(:item)

		if item and item.empty?
			Tilde::OPERATIONS << args.merge({
				container: container,
				item: nil})
		else
			Tilde::OPERATIONS << args.merge({ 
				container: container,
				item:      Tilde.find_item(item)})
		end
	end

	OPERATIONS = Queue.new

	def self.init()
		loop do 
			while OPERATIONS.empty? do sleep 0.01 end
			Tilde.run_in_main_thread(**OPERATIONS.shift) until OPERATIONS.empty?
		end
	end

	def self.run_in_main_thread(kind:, container:, item:)
		respond "Tilde.schedule(item: #{item}, container: #{container}, kind: #{kind})" if @vars.include?("--debug")
		Tilde.unwrap_error do 
			case kind
			when :pin
				Tilde.fetch(item)
			when :tilde
				if item.nil?
					Tilde.look_in(container)
				else
					Tilde._drag(container, item)
				end
			else
				fail TildeError, %[Kind[#{kind}] is not implemented]
			end
		end
	end

	def self.try_or_fail(seconds: 5, command: nil)
		fput(command)
		expiry = Time.now + seconds
		wait_until do yield or Time.now > expiry end
		return {error: "Error[command: #{command}, seconds: #{seconds}]"} if Time.now > expiry
		return {ok: command}
	end

	def self._drag(container, item)
		try_or_fail(command: %[_drag ##{item.id} ##{container.id}]) do
			GameObj.containers[container.id].to_a.map(&:id).include?(item.id)
		end
	end

	def self.look_in(container)
		try_or_fail(command: %[look in ##{container.id}]) do
			GameObj.containers.include?(container.id)
		end
	end

	def self.fetch(item)
		try_or_fail(command: %[get ##{item.id}]) do
			[GameObj.right_hand, GameObj.left_hand].map(&:id).include?(item.id)
		end
	end

	Tilde.init()
end