=begin
Shoard- a gem hoarding script

  maintainer: Elanthia-Online
      author: SpiffyJr
        game: Gemstone
        tags: gem, hoarding 
    required: Lich > 5.0.1
     version: 1.1.0

  changelog:
    v1.1.0 (2022-03-13)
      Adds support for standard (not-Premium) lockers
      Adds HELP. See ;shoard help
      Locker add/delete: Changed logic to use current room if no room specified
      Locker add/delete: Removed "locker" mapdb tag check due to unreliable/incomplete tagging
      Entry fixed for locker entry rooms that don't expose the "opening" or "curtain" in the loot or room description
   
    v1.0.0 (2021-10-11)
      Initial release  
=end

# frozen_string_literal: true

# Gem hoarding module
module Hoard
  # Data storage
  class Data
    attr_accessor :sacks, :settings

    def initialize(settings)
      @sacks = {}
      @settings = settings

      res = dothistimeout('stow list', 3, /You have the following/)
      error('Failed to check STOW list; restart me') if res !~ /You have the following/

      while (line = get)
        case line
        when /<a exist="([^"]+)" noun="[^"]+">[^(]+\(([a-z]+)\)/
          @sacks[Regexp.last_match(2)] = GameObj.inv.find { |i| i.id == Regexp.last_match(1) }
          @sacks.delete(Regexp.last_match(2)) unless @sacks[Regexp.last_match(2)]
        when /<prompt/
          break
        end
      end

      lootsack = sack('default')
      error('Set default stow container before using this script.') if lootsack.nil?
    end

    def sack(type)
      return @sacks[type] if @sacks[type]

      type = 'default' unless @sacks[type]

      dothistimeout("look in ##{@sacks[type].id}", 3, /^In the/) unless @sacks[type].contents

      @sacks[type]
    end
  end

  def self.help
    print_option =
    proc do |option, msg, eg = '', pad = 2|
      msg = format("%-40s #{$lich_char}#{script.name} #{eg}", msg) if eg != ''

      respond(format('  %<pad>s%<option>-25s %<msg>s', {
        pad: ' ' * pad,
        option: option,
        msg: msg
      }))
    end

  respond('shoard originally by spiffyjr maintained by elanthia-online')
  respond('')
  respond('shoard is a gem hoarding script designed to make hoarding gems in lockers as fast and easy as possible.')
  respond('')
  respond('Gem hoarding:')
  print_option.call('add [room number]', 'adds locker of current or optionally defined [room number] as hoarding location. For reliability this should be set to the room OUTSIDE the booth (ie: before you enter the curtained opening)')
  print_option.call('bounty ', 'Attempts to raid hoard for bounty gems')
  print_option.call('delete [room number]', 'deletes locker of current or optionally defined [room number] as hoarding location.')
  print_option.call('get # <gem name>', 'get gems from closest locker hoard')
  print_option.call('go2', 'go2 the nearest locker')
  #print_option.call('forget <room#|all>', 'forget the index for the room (or all)')
  print_option.call('index', 'index the nearest locker')
  print_option.call('list [alpha|gem name]', 'list locker contents')
  print_option.call('store', 'store gems in the nearest locker')
  respond('')
  end

  def self.error(msg)
    echo("** #{msg}")
    exit
  end

  def self.info(msg)
    echo(">> #{msg}")
  end

  def self.closest_locker
    Room.current.find_nearest(@data.settings[:lockers].keys)  
  end

  def self.go2(place)
    Script.run('go2', "#{place} --disable-confirm", { quiet: true })
  end

  def self.go2_locker(id = closest_locker)
  
    # check if in locker booth
    return if (GameObj.loot.to_a + GameObj.room_desc.to_a).find { |obj| obj.noun =~ /^(?:locker|counter)$/ }

    go2(id)

    return if (GameObj.loot.to_a + GameObj.room_desc.to_a).find { |obj| obj.noun =~ /^(?:locker|counter)$/ }

    if (way_in = (GameObj.loot.to_a + GameObj.room_desc.to_a).find { |obj| obj.noun =~ /^(?:opening|curtain|tapestry)$/ })
      # handle CHE locker opening hidden behind tapestry
      way_in.noun = "opening" if way_in.noun == "tapestry"

      current = Room.current.id
      
      move("go #{way_in.noun}")
      # You'll have to wait, Kimsy is presently using that locker booth.
      if current == Room.current.id
        info("Someone is using that locker. Waiting until they're done...")
        wait_while { current == Room.current.id }
      end
    else
      error('Failed to find locker entrance.')
    end
  end

  def self.leave_locker
    return if Room.current.tags.none? { |tag| tag =~ /locker/ }

    if (way_out = (GameObj.loot.to_a + GameObj.room_desc.to_a).find { |obj| obj.noun =~ /^(?:opening|curtain)$/ })
      # handle CHE locker opening hidden behind tapestry
      way_out.noun = "opening" if way_out.noun == "tapestry"

      current = Room.current.id
      move("go #{way_out.noun}")
      wait_while { current == Room.current.id }
    else
      error('Failed to find locker exit.')
    end
  end

  def self.open_locker
    dothistimeout('open locker', 3, /As you open the|That is already|You open the/)
  end

  def self.close_locker
    dothistimeout('close locker', 3, /You hear the faint creak|That is already|You close the/)
  end

  def self.normalize_gem(gem_name)
    gem_name.gsub(
      # strip out containing and some prefixes
      /^containing |large |medium |small |tiny |some |pieces? of |shard of /,
      ''
    ).gsub(/ies$/, 'y').gsub(/xes$/, 'x').gsub(/zes$/, 'z').gsub(/es$/, 'e').gsub(/s$/, '') # remove pluarl
  end

  def self.fwi?(room)
    (room.location =~ /Four Winds|Mist Harbor|Western Harbor/)
  end

  def self.bounty
    # rubocop:disable Layout/LineLength
    gem_match = /The gem dealer in ([^,]+), [^,]+, has received orders from multiple customers requesting (?:an?|some) ([^.]+)\.  You have been tasked to retrieve (\d+)/
    # rubocop:enable Layout/LineLength

    return unless bounty? =~ gem_match

    realm = Regexp.last_match(1)
    gem = normalize_gem(Regexp.last_match(2))
    gems_needed = Regexp.last_match(3).to_i
    gems_on_hand = @data.sack('gem').contents.to_a.find_all { |l| gem == normalize_gem(l.name) }
    gems_needed -= gems_on_hand.length

    gemshop = Room.list.find { |r| r.tags.include?('gemshop') && r.location =~ /#{realm}/i }
    error('Failed to find the gemshop to turn in to') unless gemshop

    info("Checking for #{gem} in #{realm}. Need: #{gems_needed}, Have: #{gems_on_hand.length}.")

    # Raid stockpile if we need to
    if gems_on_hand.length < gems_needed
      has_fwi_locker = false
      @data.settings[:lockers].each_pair do |locker_id, _|
        room = Room[locker_id]
        next unless room.id != 0 && fwi?(room)

        go2(room.id)
        has_fwi_locker = true
        break
      end

      go2(gemshop) unless has_fwi_locker

      jar_data = @data.settings[:lockers][closest_locker][:jars].find { |jar| jar[:gem] == gem }

      get_gems(gems_needed, gem) if gems_needed.positive? && jar_data && jar_data[:count] >= gems_needed
    end

    gems_on_hand = @data.sack('gem').contents.to_a.find_all { |l| gem == normalize_gem(l.name) }

    return unless gems_on_hand.length >= 0

    go2(gemshop)

    gems_on_hand.each do |l|
      fput("get ##{l.id}")
      fput("sell ##{l.id}")
    end
  end

  def self.get_gems(count, gem, room_id = closest_locker)
    if count.zero?
      error('Invalid gem count. Trry a number greater than 0.')
      return
    elsif gem.empty?
      error('Invalid or missing gem name')
      return
    end

    index unless @data.settings[:lockers][room_id]

    locker_data = @data.settings[:lockers][room_id]
    jar_data = locker_data[:jars].find { |jar| jar[:gem] == gem }

    if !jar_data || jar_data[:count] < count
      info("Sorry, you do not have enough to get #{count} of #{gem}.")
      return
    end

    go2_locker
    open_locker

    jar = locker.contents.find do |obj|
      obj.noun =~ /^(?:jar|bottle|beaker)$/i && gem == normalize_gem(obj.after_name)
    end

    if jar
      fput("get ##{jar.id} from ##{locker.id}")

      count.times do
        fput("shake ##{jar.id}")
        fput('stow left gem')

        jar_data[:count] -= 1
        jar_data[:full] = false
      end

      fput("put ##{jar.id} in locker")
    end

    # If we emptied the jar clean up some data
    if jar_data[:count].zero?
      locker_data[:empty] += 1
      locker_data[:jars].delete(jar_data)
    end

    close_locker
    leave_locker
  end

  def self.store(room_id = closest_locker)
    index unless @data.settings[:lockers][room_id]

    gemsack = @data.sack('gem')
    locker_data = @data.settings[:lockers][room_id]

    jars_available = locker_data[:jars].find_all do |jar|
      gemsack.contents.any? { |obj| obj.type =~ /gem/ && jar[:gem] == normalize_gem(obj.name) }
    end

    gems_to_store = gemsack.contents.find_all do |obj|
      obj.type =~ /gem/ && jars_available.none? { |jar| jar[:gem] == normalize_gem(obj.name) }
    end

    gems_to_store = gems_to_store.collect { |gem| normalize_gem(gem.name) }.uniq
    jars_to_fill = jars_available.delete_if { |jar| jar[:full] }

    return if jars_to_fill.empty? && (gems_to_store.empty? || locker_data[:count].zero?)

    go2_locker
    open_locker

    # proc to handle dragging gem
    drag_gem = proc do |gem, jar, jar_data|
      drag_match = /^You (?:add|put)|is full|does not appear to be a suitable container for/
      res = dothistimeout("_drag ##{gem.id} ##{jar.id}", 3, drag_match)

      case res
      when /^You add .* filling it/
        jar_data[:count] += 1
        jar_data[:full] = true
      when /^You add|You put/
        jar_data[:count] += 1
      when /is full/
        jar_data[:full] = true
        fput("stow ##{gem.id}")
      when /does not appear to be a suitable container for/
        fput("stow ##{gem.id}")
      end
    end

    jars_to_fill.each do |jar_data|
      jar = locker.contents.find do |obj|
        obj.noun =~ /^(?:jar|bottle|beaker)$/i && jar_data[:gem] == normalize_gem(obj.after_name)
      end
      error("Failed to find existing jar for #{jar_data[:gem]}: this shouldn't happen!") unless jar

      fput("get ##{jar.id} from ##{locker.id}")

      # stash each of the matching gems until full
      gems = gemsack.contents.find_all { |obj| obj.type =~ /gem/ && jar_data[:gem] == normalize_gem(obj.name) }
      gems.each do |gem|
        drag_gem.call(gem, jar, jar_data)
        break if jar_data[:full]
      end

      fput("put ##{jar.id} in locker")
    end

    # Store new gems if we have some empty containers
    if locker_data[:empty].positive?
      gems_to_store.each do |gem_name|
        jar = locker.contents.find do |obj|
          obj.noun =~ /^(?:jar|bottle|beaker)$/i && obj.after_name.nil?
        end
        error("Failed to find empty jar for #{gem_name}: put some empty jars to your locker, run ;shoard index then rerun ;shoard store") unless jar

        fput("get ##{jar.id} from ##{locker.id}")

        jar_data = {
          gem: gem_name,
          count: 0,
          full: false
        }

        # stash each of the matching gems until full
        gems = gemsack.contents.find_all { |obj| obj.type =~ /gem/ && gem_name == normalize_gem(obj.name) }
        gems.each { |gem| drag_gem.call(gem, jar, jar_data) }

        locker_data[:empty] -= 1
        locker_data[:jars].push(jar_data)

        fput("put ##{jar.id} in locker")
      end
    end

    close_locker
    leave_locker
  end

  def self.index
    id = closest_locker
    go2_locker(id)
    open_locker

    empty_count = 0
    jars = []

    locker.contents.find_all { |obj| obj.noun =~ /^(?:jar|bottle|beaker)$/i }.each do |jar|
      if jar.after_name.nil?
        empty_count += 1
      else
        res = dothistimeout("look in ##{jar.id} from ##{locker.id}", 3, /^Inside .*? you see [0-9]+ portion/)
        if res =~ /^Inside .*? you see ([0-9]+) portion/
          jars.push({
            gem: normalize_gem(jar.after_name),
            count: Regexp.last_match(1).to_i,
            full: res.include?('It is full')
          })
        end
      end
    end

    @data.settings[:lockers][id] = { empty: empty_count, jars: jars }

    close_locker
  end

  def self.list(input)
    @data.settings[:lockers].each_pair do |room_id, data|
      room = Room[room_id]
      _respond("<b>#{room.location} - #{room.title.first} - Lich Room #: #{room.id} (#{data[:jars].length} jars, #{data[:empty]} empty)</b>")
      respond('Name                                   Count  Full')
      respond('-------------------------------------- -----  ----')

      if input == 'alpha'
        jars = data[:jars].sort_by { |obj| obj[:gem] }
      elsif !input.empty? && input.length.positive?
        jars = data[:jars].find_all { |obj| obj[:gem] =~ /#{input}/i }
      else
        jars = data[:jars].sort_by { |obj| -1 * obj[:count] }
      end

      jars.each do |jar|
        respond(format('%<gem>-40s %<count>-5d %<full>-4s', {
          gem: jar[:gem],
          count: jar[:count],
          full: jar[:full] ? 'yes' : 'no'
        }))
      end

      respond('-------------------------------------- -----  ----')
      respond
    end
  end

  def self.locker
    locker = (GameObj.loot.to_a + GameObj.room_desc.to_a).find { |obj| obj.noun =~ /^(?:chest|locker)$/i }

    if locker.nil?
      #echo "checking counter"
      #locker = GameObj.room_desc.each { |counter|  counter.contents.each { |obj| obj.noun =~ /locker/   }}
      #echo "first locker ID: #{locker.id}"
      counter = GameObj.room_desc.to_a.find { |counter| counter.noun =~ /counter/ }
      #echo "counter id: #{counter.id}"
      fput "look on ##{counter.id}"
      sleep 0.1
      locker = counter.contents.find { |obj| obj.noun =~ /locker/   }
      #counter.contents.count { |obj| echo "obj id: #{obj.id}"   }
      #echo "locker ID: #{locker.id}"
      dothistimeout("look in ##{locker.id}", 3, /In the|There is nothing/)
    end
        
    error('failed to find jar storage') unless locker

    if locker.contents.nil?
      dothistimeout("look in ##{locker.id}", 3, /In the|There is nothing/)
      30.times do
        break unless locker.contents.nil?

        sleep(0.10)
      end
    end

    error('failed to get locker contents') if locker.contents.nil?

    locker
  end

  def self.load(settings, force: false)
    $shoard_data = Data.new(settings.to_hash) if force || $shoard_data.nil?

    @data = $shoard_data
  end

  def self.start(vars, settings)
    load(settings)

    unless vars[1]
      help
      return
    end

    # This allows partial matches the same way Gemstone works.
    # e.g., ;shunt dete would match ;shunt detect
    command = '^add^bounty^debug^delete^get^go2^index^list^store'

    # No match - show help message
    unless (idx = (command =~ /\^#{vars[1]}/))
      help
      return
    end

    # Got a match, strip the command down to the parts in between the ^
    start = idx + 1
    stop = command.index('^', idx + 1) - 1

    command = command[start..stop]

    case command
    when 'add'
      # unless vars[2]
      #   error('You must specify a locker to add.')
      #   return
      #end

      if vars[2].nil?
        id = Room.current.id.to_i
      else
        id = vars[2].to_i
      end

      if settings[:lockers][id]
        error('Locker already exists.')
        return
      end

      # Overly optimistic check assumed locker areas are tagged. They're not (see Clovertooth in IMT for example)
      #unless Room[id].tags.any? { |t| t =~ /locker/ }
      #  error('That does not appear to be a valid locker room.')
      #  return
      #end

      settings[:lockers][id] = { empty: 0, jars: [] }
      load(settings, { force: true })
      info("Lockers set to: #{@data.settings[:lockers].keys.join(' ,')}.")
    when 'bounty'
      bounty
    when 'debug'
      settings[:debug] = !settings[:debug]
      if settings[:debug]
        info('Debug mode enabled.')
      else
        info('Debug mode disabled.')
      end
      load(settings, { force: true })
    when 'delete'
      # unless vars[2]
      #   error('You must specify a locker to delete.')
      #   return
      # end
      
      if vars[2].nil?
        id = Room.current.id.to_i
      else
        id = vars[2].to_i
      end

      unless settings[:lockers][id]
        error('You have not added that locker.')
        return
      end

      settings[:lockers].delete(id)

      info("Lockers set to: #{settings[:lockers].keys.join(' ,')}.")
      load(settings, { force: true })
    when 'get'
      count = vars[2].to_i
      gem = vars[3..-1].join(' ')
      get_gems(count, gem)
    when 'go2'
      go2_locker
    when 'index'
      index
    when 'list'
      list(vars[2..-1].join(' '))
    when 'store'
      store
    end
  end
end

default_settings = {
  # Enabling debug mode assumes you know what you're doing and removes some checks
  debug: false,
  # Lockers with storage
  lockers: {}
}

default_settings.each do |k, v|
  cls = CharSettings[k].class
  next if [TrueClass, FalseClass].include?(cls) && [TrueClass, FalseClass].include?(v.class)
  next if cls == v.class

  CharSettings[k] = v
end

script.want_downstream = false
script.want_downstream_xml = true

Hoard.start(script.vars, CharSettings)
