=begin
CURE- a script to handle healing while resting or hunting. 
 
	Maintainer: Elanthia-Online
	Original Authors: Tayre, Ashraam
	game: Gemstone
	tags: heal, cure, empath, healing  
	required: Lich > 5.0.1
	version: 1.2

  changelog:
    version 1.2 (2021-09-20) Modifications by EO to support aligned menus
    version 1.1 (2019-08-01) Fixed some messaging
    version 1.0              Initial release


This script started as a combination of Heal (by Tayre) and Healself (by Ashraam).  Talonhawke has heavily modified it since then. EO has updated it to support GTK3 (Lich5)

Features include taking scars if your training allows, custom healing messages *should* work, as well as a lot of customization options!

Please use ";cure setup" first!
=end

before_dying { DownstreamHook.remove("Appraising") }
if $SAFE > 0
        echo "This script needs to be trusted to work. (;trust #{script.name})"
        exit
end

if Stats.prof != 'Empath'
  respond "Nice try, non-empath person!"
  exit
end

  Settings.load
  Settings[Char.name] ||= Hash.new
  @doneVerb             = Settings[Char.name]['@doneVerb']||= 'salute'
  @useSigns             = Settings[Char.name]['@useSigns']||=false
  @altBehavior          = Settings[Char.name]['@altBehavior']||=false
  @useTB                = Settings[Char.name]['@useTB']||=false
  @HNPriority           = Settings[Char.name]['@HNPriority']||=false
  @toggle               = Settings[Char.name]['@toggle']||='heal'
  @allWounds            = Settings[Char.name]['@allWounds']||=3
  @allScars             = Settings[Char.name]['@allScars']||=3
  head_wounds_Heal      = Settings[Char.name]['head_wounds_Heal']||=3
  neck_wounds_Heal      = Settings[Char.name]['neck_wounds_Heal']||=3
  abdomen_wounds_Heal   = Settings[Char.name]['abdomen_wounds_Heal']||=3
  back_wounds_Heal      = Settings[Char.name]['back_wounds_Heal']||=3
  chest_wounds_Heal     = Settings[Char.name]['chest_wounds_Heal']||=3
  righteye_wounds_Heal  = Settings[Char.name]['righteye_wounds_Heal']||=3
  lefteye_wounds_Heal   = Settings[Char.name]['lefteye_wounds_Heal']||=3
  rightleg_wounds_Heal  = Settings[Char.name]['rightleg_wounds_Heal']||=3
  leftleg_wounds_Heal   = Settings[Char.name]['leftleg_wounds_Heal']||=3
  rightarm_wounds_Heal  = Settings[Char.name]['rightarm_wounds_Heal']||=3
  leftarm_wounds_Heal   = Settings[Char.name]['leftarm_wounds_Heal']||=3
  righthand_wounds_Heal = Settings[Char.name]['righthand_wounds_Heal']||=3
  lefthand_wounds_Heal  = Settings[Char.name]['lefthand_wounds_Heal']||=3
  nerves_wounds_Heal    = Settings[Char.name]['nerves_wounds_Heal']||=3
  head_scars_Heal       = Settings[Char.name]['head_scars_Heal']||=3
  neck_scars_Heal       = Settings[Char.name]['neck_scars_Heal']||=3
  abdomen_scars_Heal    = Settings[Char.name]['abdomen_scars_Heal']||=3
  back_scars_Heal       = Settings[Char.name]['back_scars_Heal']||=3
  chest_scars_Heal      = Settings[Char.name]['chest_scars_Heal']||=3
  righteye_scars_Heal   = Settings[Char.name]['righteye_scars_Heal']||=3
  lefteye_scars_Heal    = Settings[Char.name]['lefteye_scars_Heal']||=3
  rightleg_scars_Heal   = Settings[Char.name]['rightleg_scars_Heal']||=3
  leftleg_scars_Heal    = Settings[Char.name]['leftleg_scars_Heal']||=3
  rightarm_scars_Heal   = Settings[Char.name]['rightarm_scars_Heal']||=3
  leftarm_scars_Heal    = Settings[Char.name]['leftarm_scars_Heal']||=3
  righthand_scars_Heal  = Settings[Char.name]['righthand_scars_Heal']||=3
  lefthand_scars_Heal   = Settings[Char.name]['lefthand_scars_Heal']||=3
  nerves_scars_Heal     = Settings[Char.name]['nerves_scars_Heal']||=3

  head_wounds_Hunt      = Settings[Char.name]['head_wounds_Hunt']||=3
  neck_wounds_Hunt      = Settings[Char.name]['neck_wounds_Hunt']||=3
  abdomen_wounds_Hunt   = Settings[Char.name]['abdomen_wounds_Hunt']||=3
  back_wounds_Hunt      = Settings[Char.name]['back_wounds_Hunt']||=3
  chest_wounds_Hunt     = Settings[Char.name]['chest_wounds_Hunt']||=3
  righteye_wounds_Hunt  = Settings[Char.name]['righteye_wounds_Hunt']||=3
  lefteye_wounds_Hunt   = Settings[Char.name]['lefteye_wounds_Hunt']||=3
  rightleg_wounds_Hunt  = Settings[Char.name]['rightleg_wounds_Hunt']||=3
  leftleg_wounds_Hunt   = Settings[Char.name]['leftleg_wounds_Hunt']||=3
  rightarm_wounds_Hunt  = Settings[Char.name]['rightarm_wounds_Hunt']||=3
  leftarm_wounds_Hunt   = Settings[Char.name]['leftarm_wounds_Hunt']||=3
  righthand_wounds_Hunt = Settings[Char.name]['righthand_wounds_Hunt']||=3
  lefthand_wounds_Hunt  = Settings[Char.name]['lefthand_wounds_Hunt']||=3
  nerves_wounds_Hunt    = Settings[Char.name]['nerves_wounds_Hunt']||=3
  head_scars_Hunt       = Settings[Char.name]['head_scars_Hunt']||=3
  neck_scars_Hunt       = Settings[Char.name]['neck_scars_Hunt']||=3
  abdomen_scars_Hunt    = Settings[Char.name]['abdomen_scars_Hunt']||=3
  back_scars_Hunt       = Settings[Char.name]['back_scars_Hunt']||=3
  chest_scars_Hunt      = Settings[Char.name]['chest_scars_Hunt']||=3
  righteye_scars_Hunt   = Settings[Char.name]['righteye_scars_Hunt']||=3
  lefteye_scars_Hunt    = Settings[Char.name]['lefteye_scars_Hunt']||=3
  rightleg_scars_Hunt   = Settings[Char.name]['rightleg_scars_Hunt']||=3
  leftleg_scars_Hunt    = Settings[Char.name]['leftleg_scars_Hunt']||=3
  rightarm_scars_Hunt   = Settings[Char.name]['rightarm_scars_Hunt']||=3
  leftarm_scars_Hunt    = Settings[Char.name]['leftarm_scars_Hunt']||=3
  righthand_scars_Hunt  = Settings[Char.name]['righthand_scars_Hunt']||=3
  lefthand_scars_Hunt   = Settings[Char.name]['lefthand_scars_Hunt']||=3
  nerves_scars_Hunt     = Settings[Char.name]['nerves_scars_Hunt']||=3

#echo @HNPriority

if Spell[9909].known?
@signToUse = 9909
elsif Spell[9905].known?
@signToUse = 9905
else
@signToUse = nil
end

def checkSigns
  if @useSigns == true
    if Spell[@signToUse].active? == false
      wait_until {Spell[@signToUse].affordable?}
      Spell[@signToUse].cast
    end
  end
end

if script.vars[1] =~ /^setup$|^options$/i
  window = window_action = nil
  Gtk.queue {

    doneVerbCheck = Gtk::Entry.new()
    doneVerbCheck.set_text(@doneVerb)
    doneVerbCheckLabel = (Gtk::Label.new("Optional action for when the script finishes:"))
    doneVerbCheck.signal_connect( "changed" ) {
    @doneVerb = doneVerbCheck.text
#   echo @doneVerb
    }
    toggleCheck = Gtk::Button.new(:label => 'Healing Mode Selected')
    if @toggle == 'hunt'
      toggleCheck.label = ('Hunting Mode Selected')
    elsif @toggle == 'heal'
      toggleCheck.label = ('Healing Mode Selected')
    end
    toggleCheck.signal_connect('clicked') {
    if @toggle == 'hunt'
      @toggle = 'heal'
      toggleCheck.label = ('Healing Mode Selected')
    elsif @toggle == 'heal'
      @toggle = 'hunt'
      toggleCheck.label = ('Hunting Mode Selected')
    end
    }
    HNPriorityCheck = Gtk::CheckButton.new "Heal Head and Nerves First"
    if @HNPriority == true
    HNPriorityCheck.set_active true
    end
    HNPriorityCheck.signal_connect("clicked") {
    if HNPriorityCheck.active?
      @HNPriority = true
    else
      @HNPriority = false
    end
    }
    useTBCheck = Gtk::CheckButton.new "Use Troll's Blood"
    if @useTB == true
    useTBCheck.set_active true
    end
    useTBCheck.signal_connect("clicked") {
    if useTBCheck.active?
      @useTB = true
    else
      @useTB = false
    end
    }

    altBehaviorCheck = Gtk::CheckButton.new "Alternative Behavior"
    if @altBehavior == true
    altBehaviorCheck.set_active true
    end
    altBehaviorCheck.signal_connect("clicked") {
    if altBehaviorCheck.active?
      @altBehavior = true
    else
      @altBehavior = false
    end
    }

    useSignsCheck = Gtk::CheckButton.new "Use Signs"
    if @useSigns == true
    useSignsCheck.set_active true
    end
    useSignsCheck.signal_connect("clicked") {
    if useSignsCheck.active?
      @useSigns = true
    else
      @useSigns = false
    end
    }

    allWoundsCheck = Gtk::SpinButton.new(0,3,1)
    allWoundsLabel = (Gtk::Label.new("All Wounds Target Level"))
    allWoundsCheck.value = @allWounds.to_f
    allScarsCheck = Gtk::SpinButton.new(0,3,1)
    allScarsLabel = (Gtk::Label.new("All Scars Target Level"))
    allScarsCheck.value = @allScars.to_f
    head_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    head_wounds_HealCheck.value = head_wounds_Heal.to_f
    neck_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    neck_wounds_HealCheck.value = neck_wounds_Heal.to_f
    abdomen_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    abdomen_wounds_HealCheck.value = abdomen_wounds_Heal.to_f
    back_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    back_wounds_HealCheck.value = back_wounds_Heal.to_f
    chest_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    chest_wounds_HealCheck.value = chest_wounds_Heal.to_f
    righteye_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righteye_wounds_HealCheck.value = righteye_wounds_Heal.to_f
    lefteye_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefteye_wounds_HealCheck.value = lefteye_wounds_Heal.to_f
    rightleg_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightleg_wounds_HealCheck.value = rightleg_wounds_Heal.to_f
    leftleg_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftleg_wounds_HealCheck.value = leftleg_wounds_Heal.to_f
    rightarm_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightarm_wounds_HealCheck.value = rightarm_wounds_Heal.to_f
    leftarm_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftarm_wounds_HealCheck.value = leftarm_wounds_Heal.to_f
    righthand_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righthand_wounds_HealCheck.value = righthand_wounds_Heal.to_f
    lefthand_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefthand_wounds_HealCheck.value = lefthand_wounds_Heal.to_f
    nerves_wounds_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    nerves_wounds_HealCheck.value = nerves_wounds_Heal.to_f


    woundBox = Gtk::Box.new(:vertical, 0)
    woundBox.add(Gtk::Label.new("Head:"))
    woundBox.pack_start(head_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Neck:"))
    woundBox.pack_start(neck_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Abdomen:"))
    woundBox.pack_start(abdomen_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Back:"))
    woundBox.pack_start(back_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Chest:"))
    woundBox.pack_start(chest_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Right Eye:"))
    woundBox.pack_start(righteye_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Left Eye:"))
    woundBox.pack_start(lefteye_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Right Leg:"))
    woundBox.pack_start(rightleg_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Left Leg:"))
    woundBox.pack_start(leftleg_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Right Arm:"))
    woundBox.pack_start(rightarm_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Left Arm:"))
    woundBox.pack_start(leftarm_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
      woundBox.add(Gtk::Label.new("Right Hand:"))
    woundBox.pack_start(righthand_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Left Hand:"))
    woundBox.pack_start(lefthand_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)
    woundBox.add(Gtk::Label.new("Nerves:"))
    woundBox.pack_end(nerves_wounds_HealCheck, :expand => true, :fill => false, :padding => 0)


    head_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    head_scars_HealCheck.value = head_scars_Heal.to_f
    neck_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    neck_scars_HealCheck.value = neck_scars_Heal.to_f
    abdomen_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    abdomen_scars_HealCheck.value = abdomen_scars_Heal.to_f
    back_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    back_scars_HealCheck.value = back_scars_Heal.to_f
    chest_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    chest_scars_HealCheck.value = chest_scars_Heal.to_f
    righteye_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righteye_scars_HealCheck.value = righteye_scars_Heal.to_f
    lefteye_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefteye_scars_HealCheck.value = lefteye_scars_Heal.to_f
    rightleg_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightleg_scars_HealCheck.value = rightleg_scars_Heal.to_f
    leftleg_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftleg_scars_HealCheck.value = leftleg_scars_Heal.to_f
    rightarm_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightarm_scars_HealCheck.value = rightarm_scars_Heal.to_f
    leftarm_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftarm_scars_HealCheck.value = leftarm_scars_Heal.to_f
    righthand_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righthand_scars_HealCheck.value = righthand_scars_Heal.to_f
    lefthand_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefthand_scars_HealCheck.value = lefthand_scars_Heal.to_f
    nerves_scars_HealCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    nerves_scars_HealCheck.value = nerves_scars_Heal.to_f

    scarBox = Gtk::Box.new(:vertical, 0)
    scarBox.add(Gtk::Label.new("Head:"))
    scarBox.pack_start(head_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Neck:"))
    scarBox.pack_start(neck_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Abdomen:"))
    scarBox.pack_start(abdomen_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Back:"))
    scarBox.pack_start(back_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Chest:"))
    scarBox.pack_start(chest_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Right Eye:"))
    scarBox.pack_start(righteye_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Left Eye:"))
    scarBox.pack_start(lefteye_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Right Leg:"))
    scarBox.pack_start(rightleg_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Left Leg:"))
    scarBox.pack_start(leftleg_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Right Arm:"))
    scarBox.pack_start(rightarm_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Left Arm:"))
    scarBox.pack_start(leftarm_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
      scarBox.add(Gtk::Label.new("Right Hand:"))
    scarBox.pack_start(righthand_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Left Hand:"))
    scarBox.pack_start(lefthand_scars_HealCheck, :expand => true, :fill => false, :padding => 0)
    scarBox.add(Gtk::Label.new("Nerves:"))
    scarBox.pack_end(nerves_scars_HealCheck, :expand => true, :fill => false, :padding => 0)

    head_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    head_wounds_HuntCheck.value = head_wounds_Hunt.to_f
    neck_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    neck_wounds_HuntCheck.value = neck_wounds_Hunt.to_f
    abdomen_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    abdomen_wounds_HuntCheck.value = abdomen_wounds_Hunt.to_f
    back_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    back_wounds_HuntCheck.value = back_wounds_Hunt.to_f
    chest_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    chest_wounds_HuntCheck.value = chest_wounds_Hunt.to_f
    righteye_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righteye_wounds_HuntCheck.value = righteye_wounds_Hunt.to_f
    lefteye_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefteye_wounds_HuntCheck.value = lefteye_wounds_Hunt.to_f
    rightleg_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightleg_wounds_HuntCheck.value = rightleg_wounds_Hunt.to_f
    leftleg_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftleg_wounds_HuntCheck.value = leftleg_wounds_Hunt.to_f
    rightarm_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightarm_wounds_HuntCheck.value = rightarm_wounds_Hunt.to_f
    leftarm_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftarm_wounds_HuntCheck.value = leftarm_wounds_Hunt.to_f
    righthand_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righthand_wounds_HuntCheck.value = righthand_wounds_Hunt.to_f
    lefthand_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefthand_wounds_HuntCheck.value = lefthand_wounds_Hunt.to_f
    nerves_wounds_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    nerves_wounds_HuntCheck.value = nerves_wounds_Hunt.to_f


    huntBox = Gtk::Box.new(:vertical, 0)
    huntBox.add(Gtk::Label.new("Head:"))
    huntBox.pack_start(head_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Neck:"))
    huntBox.pack_start(neck_wounds_HuntCheck,:expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Abdomen:"))
    huntBox.pack_start(abdomen_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Back:"))
    huntBox.pack_start(back_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Chest:"))
    huntBox.pack_start(chest_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Right Eye:"))
    huntBox.pack_start(righteye_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Left Eye:"))
    huntBox.pack_start(lefteye_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Right Leg:"))
    huntBox.pack_start(rightleg_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Left Leg:"))
    huntBox.pack_start(leftleg_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Right Arm:"))
    huntBox.pack_start(rightarm_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Left Arm:"))
    huntBox.pack_start(leftarm_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
      huntBox.add(Gtk::Label.new("Right Hand:"))
    huntBox.pack_start(righthand_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Left Hand:"))
    huntBox.pack_start(lefthand_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntBox.add(Gtk::Label.new("Nerves:"))
    huntBox.pack_end(nerves_wounds_HuntCheck, :expand => true, :fill => false, :padding => 0)


    head_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    head_scars_HuntCheck.value = head_scars_Hunt.to_f
    neck_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    neck_scars_HuntCheck.value = neck_scars_Hunt.to_f
    abdomen_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    abdomen_scars_HuntCheck.value = abdomen_scars_Hunt.to_f
    back_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    back_scars_HuntCheck.value = back_scars_Hunt.to_f
    chest_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    chest_scars_HuntCheck.value = chest_scars_Hunt.to_f
    righteye_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righteye_scars_HuntCheck.value = righteye_scars_Hunt.to_f
    lefteye_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefteye_scars_HuntCheck.value = lefteye_scars_Hunt.to_f
    rightleg_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightleg_scars_HuntCheck.value = rightleg_scars_Hunt.to_f
    leftleg_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftleg_scars_HuntCheck.value = leftleg_scars_Hunt.to_f
    rightarm_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    rightarm_scars_HuntCheck.value = rightarm_scars_Hunt.to_f
    leftarm_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    leftarm_scars_HuntCheck.value = leftarm_scars_Hunt.to_f
    righthand_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    righthand_scars_HuntCheck.value = righthand_scars_Hunt.to_f
    lefthand_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    lefthand_scars_HuntCheck.value = lefthand_scars_Hunt.to_f
    nerves_scars_HuntCheck = Gtk::SpinButton.new( (Gtk::Adjustment.new(0, 0, 3, 1, 1, 0)), 1, 0);
    nerves_scars_HuntCheck.value = nerves_scars_Hunt.to_f

    huntscarBox = Gtk::Box.new(:vertical, 0)
    huntscarBox.add(Gtk::Label.new("Head:"))
    huntscarBox.pack_start(head_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Neck:"))
    huntscarBox.pack_start(neck_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Abdomen:"))
    huntscarBox.pack_start(abdomen_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Back:"))
    huntscarBox.pack_start(back_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Chest:"))
    huntscarBox.pack_start(chest_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Right Eye:"))
    huntscarBox.pack_start(righteye_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Left Eye:"))
    huntscarBox.pack_start(lefteye_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Right Leg:"))
    huntscarBox.pack_start(rightleg_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Left Leg:"))
    huntscarBox.pack_start(leftleg_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Right Arm:"))
    huntscarBox.pack_start(rightarm_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Left Arm:"))
    huntscarBox.pack_start(leftarm_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Right Hand:"))
    huntscarBox.pack_start(righthand_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Left Hand:"))
    huntscarBox.pack_start(lefthand_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)
    huntscarBox.add(Gtk::Label.new("Nerves:"))
    huntscarBox.pack_end(nerves_scars_HuntCheck, :expand => true, :fill => false, :padding => 0)

    WelcomeText = Gtk::Label.new(";cure <commands>:\n\n;cure all or ;cure <target> all\nIncluding the word 'all' will heal you down of all wounds.\n\n;cure group\nHeals everyone in your group.\n\n;cure room\nHeals everyone in a room. Use this responsibly!\n\n\nThis script is still very untested!  Please contact me if you have any feedback!  Talonhawke@gmail.com")
    ModeText = Gtk::Label.new("Mode Button: Toggles between settings for Hunting and Healing which can be set on their respective tabs.\nYou can also change this by typing ;#{script.name} hunt or ;#{script.name} heal")
    AllButtonsText = Gtk::Label.new("All Wounds & All Scars:\tSets the level of wound or scar that will be healed down to. \n\t\t\t\t\tA value of 3 will do nothing, while 0 will attempt to heal down completely.\n\nWARNING:\tThese buttons will override any higher values set on the Hunting and Healing Setup tabs.\n\t\t\tThey are here for those who want to keep things simple!")


#   toolTips = Gtk::Tooltips.new
    HNPriorityCheck.set_tooltip_text("If active, will cause the script to heal any head or nervous system wounds down to a Level 1 scar before doing other injuries.\nUseful if you're worried about XP loss from these injuries.")
    useTBCheck.set_tooltip_text("Checks to see if Troll's Blood is active and will cast it before any healing.\nKeep in mind, if you are low on mana, this will cause you to wait until you have enough to cast 1125.")
    altBehaviorCheck.set_tooltip_text("Changes script behavior so that ;#{script.name} by itself will heal *you* down, but when targeting others, the script will only heal you down enough to take all their wounds.")
    useSignsCheck.set_tooltip_text("...uses powers from a Council(that may or may not exist)to keep you from bleeding.")
    doneVerbCheck.set_tooltip_text("You can enter an action to do when the script finishes. Helps let others know when you're done healing.")

    simpleTable = Gtk::Table.new(11,2,false)
    simpleTable.border_width = 10

    simpleTable.attach(AllButtonsText,0,2,2,3,:shrink,:shrink,20,20)
    simpleTable.attach(allWoundsLabel,0,1,0,1,:shrink,:shrink,20,5)
    simpleTable.attach(allScarsLabel,1,2,0,1,:shrink,:shrink,20,5)
    simpleTable.attach(allWoundsCheck,0,1,1,2,:shrink,:shrink,20,5)
    simpleTable.attach(allScarsCheck,1,2,1,2,:shrink,:shrink,20,5)
    simpleTable.attach(ModeText,0,2,4,5,:shrink,:shrink,20,0)
    simpleTable.attach(toggleCheck,0,2,3,4,:shrink,:shrink,20,10)

    simpleTable.attach(HNPriorityCheck, 0, 1, 5, 6, :shrink,:shrink,20,30)
    simpleTable.attach(useTBCheck, 1, 2, 5, 6, :shrink,:shrink,20,30)
    simpleTable.attach(altBehaviorCheck, 0, 1, 7, 8, :shrink,:shrink,20,10)
    simpleTable.attach(useSignsCheck, 1, 2, 7, 8, :shrink,:shrink,20,10)
    simpleTable.attach(doneVerbCheckLabel, 0, 2, 8, 9, :shrink,:shrink,20,10)
    simpleTable.attach(doneVerbCheck, 0, 2, 9, 10, :shrink,:shrink,20,0)
    simpleTable.attach(WelcomeText,0,2,10,11, :shrink,:shrink,20,40)

    saveButton = Gtk::Button.new(:label => 'Save')

    advancedHealText = Gtk::Label.new("Healing Mode:\nHere you can set individual heal down levels for each body part. Setting a value to 3 will cause that area to be ignored, while setting a value to 0 will heal that location completely.")
    advancedHealText.width_request = 300
    advancedHealText.wrap = true
    advancedHuntText = Gtk::Label.new("Hunting Mode:\nHere you can set individual heal down levels for each body part. Setting a value to 3 will cause that area to be ignored, while setting a value to 0 will heal that location completely.")
    advancedHuntText.width_request = 300
    advancedHuntText.wrap = true
    woundText = Gtk::Label.new("Wound Level Targets")
    scarText = Gtk::Label.new("Scar Level Targets")
    HwoundText = Gtk::Label.new("Wound Level Targets")
    HscarText = Gtk::Label.new("Scar Level Targets")
    HuntingText = Gtk::Label.new("Hunting Setup")
    HealingText = Gtk::Label.new("Healing Setup")
    SimpleText = Gtk::Label.new("Basic Setup")


    hunt_table = Gtk::Table.new(4,2,false)
    hunt_table.border_width = 10
    hunt_table.attach(advancedHuntText,0,2,0,1,:shrink,:shrink,20,20)
    hunt_table.attach(woundText,0,1,1,2)
    hunt_table.attach(huntBox,0,1,2,3,:shrink,:shrink,20,3)
    hunt_table.attach(scarText,1,2,1,2)
    hunt_table.attach(huntscarBox,1,2,2,3,:shrink,:shrink,20,3)


    heal_table = Gtk::Table.new(4,2,false)
    heal_table.border_width = 10
    heal_table.attach(advancedHealText,0,2,0,1,:shrink,:shrink,20,20)
    heal_table.attach(HwoundText,0,1,1,2)
    heal_table.attach(woundBox,0,1,2,3,:shrink,:shrink,20,3)
    heal_table.attach(HscarText,1,2,1,2)
    heal_table.attach(scarBox,1,2,2,3,:shrink,:shrink,20,3)

#   simple_table = Gtk::Table.new(1,1,false)
#   simple_table.attach(simpleBox,0,1,0,1,:shrink,:shrink,20,5)

    Gui = Gtk::Notebook.new
    Gui.append_page(simpleTable, SimpleText)
    Gui.append_page(hunt_table, HuntingText)
    Gui.append_page(heal_table, HealingText)
    window = Gtk::Window.new
    winTable = Gtk::Table.new(3,1,false)
#   window.set_size_request(400, 400)
    saveButton = Gtk::Button.new(:label => 'Save')
    winTable.attach(saveButton, 0,2,1,2)
    window.title = "Cure Setup"
    window.border_width = 10
    winTable.attach(Gui,0,2,0,1)
    window.add(winTable)
    window.show_all
    saveButton.signal_connect('clicked') {
          Gtk.queue {
# @toggle         = toggleCheck.value
# @HNPriority       =   not needed
# @useSigns       = useSignsCheck.value
  @allWounds        = allWoundsCheck.value
  @allScars       = allScarsCheck.value
  head_wounds_Heal      = head_wounds_HealCheck.value
  neck_wounds_Heal      = neck_wounds_HealCheck.value
  abdomen_wounds_Heal   = abdomen_wounds_HealCheck.value
  back_wounds_Heal      = back_wounds_HealCheck.value
  chest_wounds_Heal   = chest_wounds_HealCheck.value
  righteye_wounds_Heal    = righteye_wounds_HealCheck.value
  lefteye_wounds_Heal   = lefteye_wounds_HealCheck.value
  rightleg_wounds_Heal    = rightleg_wounds_HealCheck.value
  leftleg_wounds_Heal   = leftleg_wounds_HealCheck.value
  rightarm_wounds_Heal    = rightarm_wounds_HealCheck.value
  leftarm_wounds_Heal   = leftarm_wounds_HealCheck.value
  righthand_wounds_Heal = righthand_wounds_HealCheck.value
  lefthand_wounds_Heal    = lefthand_wounds_HealCheck.value
  nerves_wounds_Heal    = nerves_wounds_HealCheck.value
  head_scars_Heal     = head_scars_HealCheck.value
  neck_scars_Heal     = neck_scars_HealCheck.value
  abdomen_scars_Heal    = abdomen_scars_HealCheck.value
  back_scars_Heal     = back_scars_HealCheck.value
  chest_scars_Heal      = chest_scars_HealCheck.value
  righteye_scars_Heal   = righteye_scars_HealCheck.value
  lefteye_scars_Heal    = lefteye_scars_HealCheck.value
  rightleg_scars_Heal   = rightleg_scars_HealCheck.value
  leftleg_scars_Heal    = leftleg_scars_HealCheck.value
  rightarm_scars_Heal   = rightarm_scars_HealCheck.value
  leftarm_scars_Heal    = leftarm_scars_HealCheck.value
  righthand_scars_Heal    = righthand_scars_HealCheck.value
  lefthand_scars_Heal   = lefthand_scars_HealCheck.value
  nerves_scars_Heal   = nerves_scars_HealCheck.value

  head_wounds_Hunt        = head_wounds_HuntCheck.value
  neck_wounds_Hunt        = neck_wounds_HuntCheck.value
  abdomen_wounds_Hunt     = abdomen_wounds_HuntCheck.value
  back_wounds_Hunt        = back_wounds_HuntCheck.value
  chest_wounds_Hunt       = chest_wounds_HuntCheck.value
  righteye_wounds_Hunt      = righteye_wounds_HuntCheck.value
  lefteye_wounds_Hunt     = lefteye_wounds_HuntCheck.value
  rightleg_wounds_Hunt      = rightleg_wounds_HuntCheck.value
  leftleg_wounds_Hunt     = leftleg_wounds_HuntCheck.value
  rightarm_wounds_Hunt      = rightarm_wounds_HuntCheck.value
  leftarm_wounds_Hunt     = leftarm_wounds_HuntCheck.value
  righthand_wounds_Hunt     = righthand_wounds_HuntCheck.value
  lefthand_wounds_Hunt      = lefthand_wounds_HuntCheck.value
  nerves_wounds_Hunt      = nerves_wounds_HuntCheck.value
  head_scars_Hunt     = head_scars_HuntCheck.value
  neck_scars_Hunt     = neck_scars_HuntCheck.value
  abdomen_scars_Hunt    = abdomen_scars_HuntCheck.value
  back_scars_Hunt     = back_scars_HuntCheck.value
  chest_scars_Hunt      = chest_scars_HuntCheck.value
  righteye_scars_Hunt   = righteye_scars_HuntCheck.value
  lefteye_scars_Hunt    = lefteye_scars_HuntCheck.value
  rightleg_scars_Hunt   = rightleg_scars_HuntCheck.value
  leftleg_scars_Hunt    = leftleg_scars_HuntCheck.value
  rightarm_scars_Hunt   = rightarm_scars_HuntCheck.value
  leftarm_scars_Hunt    = leftarm_scars_HuntCheck.value
  righthand_scars_Hunt    = righthand_scars_HuntCheck.value
  lefthand_scars_Hunt   = lefthand_scars_HuntCheck.value
  nerves_scars_Hunt   = nerves_scars_HuntCheck.value
          puts "-=[ Settings Saved ]=-"
          window_action = :save
          }
      }
    window.signal_connect('delete_event') {window_action = :cancel}
    window.show_all
  }
  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
  undo_before_dying
  Gtk.queue { window.destroy }
  Settings[Char.name].clear
  Settings[Char.name]['@doneVerb']      = @doneVerb
  Settings[Char.name]['@useSigns']      = @useSigns
  Settings[Char.name]['@altBehavior']     = @altBehavior
  Settings[Char.name]['@useTB']       = @useTB
  Settings[Char.name]['@HNPriority']      = @HNPriority
  Settings[Char.name]['@toggle']        = @toggle
  Settings[Char.name]['@allWounds']     = @allWounds
  Settings[Char.name]['@allScars']      = @allScars
  Settings[Char.name]['head_wounds_Heal']   = head_wounds_Heal
  Settings[Char.name]['neck_wounds_Heal']      =  neck_wounds_Heal
  Settings[Char.name]['abdomen_wounds_Heal']   =  abdomen_wounds_Heal
  Settings[Char.name]['back_wounds_Heal']      =  back_wounds_Heal
  Settings[Char.name]['chest_wounds_Heal']     =  chest_wounds_Heal
  Settings[Char.name]['righteye_wounds_Heal']  =  righteye_wounds_Heal
  Settings[Char.name]['lefteye_wounds_Heal']   =  lefteye_wounds_Heal
  Settings[Char.name]['rightleg_wounds_Heal']  =  rightleg_wounds_Heal
  Settings[Char.name]['leftleg_wounds_Heal']   =  leftleg_wounds_Heal
  Settings[Char.name]['rightarm_wounds_Heal']  =  rightarm_wounds_Heal
  Settings[Char.name]['leftarm_wounds_Heal']   =  leftarm_wounds_Heal
  Settings[Char.name]['righthand_wounds_Heal'] =  righthand_wounds_Heal
  Settings[Char.name]['lefthand_wounds_Heal']  =  lefthand_wounds_Heal
  Settings[Char.name]['nerves_wounds_Heal']   = nerves_wounds_Heal
  Settings[Char.name]['head_scars_Heal']       =  head_scars_Heal
  Settings[Char.name]['neck_scars_Heal']       =  neck_scars_Heal
  Settings[Char.name]['abdomen_scars_Heal']    =  abdomen_scars_Heal
  Settings[Char.name]['back_scars_Heal']       =  back_scars_Heal
  Settings[Char.name]['chest_scars_Heal']      =  chest_scars_Heal
  Settings[Char.name]['righteye_scars_Heal']   =  righteye_scars_Heal
  Settings[Char.name]['lefteye_scars_Heal']    =  lefteye_scars_Heal
  Settings[Char.name]['rightleg_scars_Heal']   =  rightleg_scars_Heal
  Settings[Char.name]['leftleg_scars_Heal']    =  leftleg_scars_Heal
  Settings[Char.name]['rightarm_scars_Heal']   =  rightarm_scars_Heal
  Settings[Char.name]['leftarm_scars_Heal']    =  leftarm_scars_Heal
  Settings[Char.name]['righthand_scars_Heal']  =  righthand_scars_Heal
  Settings[Char.name]['lefthand_scars_Heal']   =  lefthand_scars_Heal
  Settings[Char.name]['nerves_scars_Heal']    = nerves_scars_Heal
  Settings[Char.name]['head_wounds_Hunt']   = head_wounds_Hunt
  Settings[Char.name]['neck_wounds_Hunt']     = neck_wounds_Hunt
  Settings[Char.name]['abdomen_wounds_Hunt']  = abdomen_wounds_Hunt
  Settings[Char.name]['back_wounds_Hunt']     = back_wounds_Hunt
  Settings[Char.name]['chest_wounds_Hunt']    = chest_wounds_Hunt
  Settings[Char.name]['righteye_wounds_Hunt'] = righteye_wounds_Hunt
  Settings[Char.name]['lefteye_wounds_Hunt']  = lefteye_wounds_Hunt
  Settings[Char.name]['rightleg_wounds_Hunt'] = rightleg_wounds_Hunt
  Settings[Char.name]['leftleg_wounds_Hunt']  = leftleg_wounds_Hunt
  Settings[Char.name]['rightarm_wounds_Hunt'] = rightarm_wounds_Hunt
  Settings[Char.name]['leftarm_wounds_Hunt']  = leftarm_wounds_Hunt
  Settings[Char.name]['righthand_wounds_Hunt']= righthand_wounds_Hunt
  Settings[Char.name]['lefthand_wounds_Hunt'] = lefthand_wounds_Hunt
  Settings[Char.name]['nerves_wounds_Hunt']   = nerves_wounds_Hunt
  Settings[Char.name]['head_scars_Hunt']       =  head_scars_Hunt
  Settings[Char.name]['neck_scars_Hunt']       =  neck_scars_Hunt
  Settings[Char.name]['abdomen_scars_Hunt']    =  abdomen_scars_Hunt
  Settings[Char.name]['back_scars_Hunt']       =  back_scars_Hunt
  Settings[Char.name]['chest_scars_Hunt']      =  chest_scars_Hunt
  Settings[Char.name]['righteye_scars_Hunt']   =  righteye_scars_Hunt
  Settings[Char.name]['lefteye_scars_Hunt']    =  lefteye_scars_Hunt
  Settings[Char.name]['rightleg_scars_Hunt']   =  rightleg_scars_Hunt
  Settings[Char.name]['leftleg_scars_Hunt']    =  leftleg_scars_Hunt
  Settings[Char.name]['rightarm_scars_Hunt']   =  rightarm_scars_Hunt
  Settings[Char.name]['leftarm_scars_Hunt']    =  leftarm_scars_Hunt
  Settings[Char.name]['righthand_scars_Hunt']  =  righthand_scars_Hunt
  Settings[Char.name]['lefthand_scars_Hunt']   =  lefthand_scars_Hunt
  Settings[Char.name]['nerves_scars_Hunt']    = nerves_scars_Hunt
  Settings.save
  exit
end
#echo @HNPriority
  if head_wounds_Heal == nil
  respond "Please use ';#{script.name} setup' first!"
  exit
  end

silence_me

if script.vars.include?("all")
# echo "All toggled"
  @allWounds = 0
  @allScars = 0
  script.vars.delete("all")
end

if script.vars.empty?

# respond("Healing any injuries...")
# healtargets = [ Char.name ]
  elsif script.vars[1] =~ /^hunt$/i
  @toggle = 'hunt'
  elsif script.vars[1] =~ /^heal$/i
  @toggle = 'heal'
  elsif script.vars.include?('help')
  respond "This script is still very much a work in progress, so use at your own risk!\nValid options are:\nCure - Heal yourself.  This will heal you completely no matter your settings in setup!\nCure setup - GUI that will give you options on how far to heal yourself before exiting.\nCure <target> <target> <target> etc - Heal list of people\nCure group - Heals everyone in your group\nCure room - Heals everyone in a room (Please use common sense and courtesy with this option!)"
  exit
  elsif script.vars.include?('room')
    if GameObj.pcs.length != nil
      healtargets = Array.new
      GameObj.pcs.each{|pc|
      healtargets.push(pc.noun)
      }
    else
      respond ("No PCs found?  There is either no one else in the room or in a player home where the 'room' option doesn't work correctly yet.")
    end
  elsif script.vars.include?('group')
    done  = false
    healtargets = Array.new
    action = proc { |server_string|
      if /^<a exist="-\d+" noun="(?'pcName'.*)">(?:.*)<\/a> is the leader of your group\./ =~ server_string
        healtargets.push(pcName)
        groupleader = pcName
        nil
      elsif /^<a exist="-\d+" noun="(?'pcName'.*)">(?:.*)<\/a> is also a member of your group\./ =~ server_string
        healtargets.push(pcName)
        nil
      elsif /^<a exist="-\d+" noun="(?'pcName'.*)">(?:.*)<\/a> is following you\./ =~ server_string
        healtargets.push(pcName.to_s)
        nil
      elsif /Your group status is currently/ =~ server_string
        nil
          elsif /You are not currently in a group/ =~ server_string
        nil
      elsif /<prompt/ =~ server_string
        nil
      elsif /GROUP HELP/ =~ server_string
        done = true
        DownstreamHook.remove('Group_hook')
        nil
      else
        server_string
      end
      }

    DownstreamHook.add('Group_hook', action)
    silence_me unless undo_silence = silence_me
    fput 'group'
    silence_me if undo_silence
    wait_until { done }
#   healtargets.delete_at(0)
  else
  healtargets = Array.new
  if GameObj.pcs.length != nil
    script.vars[1..-1].each { |input|
      if pc = GameObj.pcs.find { |pc| pc.noun =~ /^#{input}/i }
        healtargets.push(pc.noun)
      end
      }
  else
    target_list = script.vars[1..-1]
  end
end
if @useTB == true
  if !Spell[1125].active?
    if Spell[1125].affordable?
    Spell[1125].cast
    else
    respond "Waiting on mana to cast Troll's Blood..."
    wait_until { Spell[1125].affordable? }
    Spell[1125].cast
    end
  end
end
if healtargets.any?
#echo healtargets
respond ("Attemping to heal "+healtargets.to_s.gsub(/[\[\"\]]/, '')+".")
#elsif script.vars.any?
#respond ("None of your targets found...")
#exit
end
healdown = proc { |area|
  if area =~ /head|neck/
    spell = 1104
    if Wounds.neck > 1 then cost = 9 else cost = 4 end
  elsif area =~ /hand|arm|leg/
    spell = 1102
    if Wounds.limbs > 1 then cost = 7 else cost = 2 end
  elsif area =~ /eye|ab|chest|back/
    spell = 1105
    if Wounds.torso > 1 then cost = 10 else cost = 5 end
  elsif area =~ /nerve/
    spell = 1103
    if Wounds.nerves > 1 then cost = 8 else cost = 3 end
  end
  unless mana?(cost)
    respond("Waiting for mana...")
    until mana?(cost)
      sleep 1
    end
  end
  fput "cure #{area}"
  sleep 3
  waitrt?
}

translate_wound = proc { |wound|
  wound = wound.split.join(' ')
  if /(?'rightleft'l|r)(?:eft|ight) (?'bodyPart'arm|hand|leg|eye)/ =~ wound
    Wounds.send("#{rightleft}#{bodyPart}")
    echo Wounds.send("#{rightleft}#{bodyPart}")
  elsif /abdom/ =~ wound
    Wounds.send("abs")
  elsif /nerve/ =~ wound
    Wounds.send('nerves')
  elsif /(head|neck)/ =~ wound
    Wounds.send(bodyPart)
  elsif /(chest|back)/ =~ wound
    Wounds.send(bodyPart)
  end
}

def appraisetarget(pc)
  done = false
  wounds = Array.new
  @healtarget = nil
  action = proc { |server_string|
    if /^\s*You take a quick appraisal of <a exist="-\d+" noun=".*">(?'aTarget'\w+)<\/a> and find that <a exist="-\d+" noun=".*">(?:he|she)<\/a> has (?'aWounds'..*)\./ =~ server_string
      wounds.push(aWounds)
      @healtarget = (aTarget)
      nil
    elsif /^\s*Appraise what\?/i =~ server_string
      wounds.push(server_string)
      @healtarget = pc.to_s
      respond("'#{pc}' not found!")
      nil
    elsif /^\s*<a exist="-\d+" noun=".*">(?:He|She)<\/a> has (?'aScars'..*)\./  =~ server_string
      if Skills.mltransference >= 50
      wounds.push(aScars)
      end
    nil
    elsif /^\s*<a exist="-\d+" noun=".*">(?:He|She)<\/a> is bleeding(..*)\./  =~ server_string
    nil
    elsif !wounds.empty? and server_string =~ /<prompt/
      done = true
      DownstreamHook.remove("Appraising")
      nil
    else
    server_string
    end
    }
  DownstreamHook.add("Appraising", action)
  fput "app "+pc.to_s
  wait_until { done }
  DownstreamHook.remove("Appraising")
  return(wounds);
end

if @useTB == true
  if !Spell[1125].active?
    if Spell[1125].affordable?
      Spell[1125].cast
    else
      respond "Waiting on mana to cast Troll's Blood..."
      wait_until { Spell[1125].affordable? }
      Spell[1125].cast
    end
  end
end

healtargets.each{ |healtarget|
pause 0.1
wound_line = appraisetarget(healtarget).join(", ").to_s
#new wound_line gsub patch
wound_line = wound_line.gsub(/arm and/, "arm, ").gsub(/\<d cmd.*?\>/, "").gsub(/<\/d.*?>/, "")
#echo wound_line
healparts = wound_line


if wound_line =~ /Appraise what/
  respond("Couldn't find '#{healtarget}'!")
elsif wound_line =~ /no apparent injuries|no apparent wounds\z/
  respond("#{@healtarget} does not appear to be injured.")
else

if wound_line.include?(",")
  wound_array = wound_line.split(',')
# echo wound_array
else
  wound_array = wound_line.scan(/a (?:black-and-blue|severe bruises and swelling around|missing|blinded|swollen|bruised) (?:left|right) eye|old battle scars on(?:his|her) (?:left|right) (?:hand|arm|leg)|mangled (?:left|right) (?:hand|arm|leg)|missing (?:left|right) (?:hand|arm|leg) |deep lacerations across (?:his|her) \w+|deep gashes and serious bleeding (?:on|from|across) (?:his|her) \w+|old battle scars|minor cuts and bruises on (?:his|her) (?:left|right) (?:hand|arm|leg)|a (?:fractured and bleeding|completely severed) (?:left|right) (?:hand|arm|leg)|moderate bleeding from (?:his|her) neck|snapped bones and serious bleeding from the neck|minor bruises on (?:his|her) neck|scar across (?:his|her) neck|some old neck wounds|terrible scars from some serious neck injury|minor (?:bruises|lacerations) about the head|minor cuts and bruises on (?:his|her) (?:chest|back|abdominal area)|severe head trauma and bleeding from the ears|strange case of muscle twitching|case of (?:sporadic|uncontrollable) convulsions|scar across (?:his|her) face|several facial scars|old mutilation wounds about (?:his|her) head|old battle scar across (?:his|her) (?:chest|back|abdominal area)|several painful-looking scars across (?:his|her) (?:chest|back|abdominal area)|terrible, permanent mutilation of (?:his|her) (?:chest|back|abdominal area) muscles|developed slurred speech|constant muscle spasms|a very difficult time with muscle control/)
# echo wound_array
end

wounds = Array.new
wound_array.each { |wound|
  if /(a black-and-blue|a blinded|a swollen|a bruised|deep lacerations across his|deep lacerations across her|cuts and bruises on his|cuts and bruises on her|fractured and bleeding|completely severed|deep gashes and serious bleeding on his|deep gashes and serious bleeding on her|deep gashes and serious bleeding from his|deep gashes and serious bleeding from her|old battle scars on his|old battle scars on her|old battle scar across (?:his|her)|several painful-looking scars across (?:his|her)|terrible, permanent mutilation of (?:his|her)) (?'rightleft'\w+)(?'bodypart' \w+)?/ =~ wound
    bodypart = "#{rightleft.dup} #{bodypart.dup}"
  elsif /moderate bleeding from (his|her) neck|snapped bones and serious bleeding from the neck|minor bruises on (his|her) neck|scar across (?:his|her) neck|some old neck wounds|terrible scars from some serious neck injury/ =~ wound
    bodypart = "neck"
  elsif /minor bruises about the head|minor lacerations about the head|severe head trauma and bleeding from the ears|scar across (?:his|her) face|several facial scars|old mutilation wounds about (?:his|her) head/ =~ wound
    bodypart = "head"
  elsif /strange case of muscle twitching|case of sporadic convulsions|case of uncontrollable convulsions|developed slurred speech|constant muscle spasms|a very difficult time with muscle control/ =~ wound
    bodypart = "nerves"
  else
    next
  end
  wounds.push(bodypart)
}

if !wounds.empty?
  checkSigns
end

to_heal = Array.new
wounds.each { |wound|
  wound = wound.split.join(' ')
  if /(?'leftright'l|r)(?:eft|ight) (?'bPart'arm|hand|leg|eye)/ =~ wound
    to_heal.push(wound)
    if Wounds.send("#{leftright}#{bPart}") == 3
      healdown.call(wound)
    end
    fput "transfer #{@healtarget} #{wound}"

  elsif /abdom/ =~ wound
    to_heal.push('abdomen')
    if Wounds.send("abs") == 3
      healdown.call('abdomen')
    end
    fput "transfer #{@healtarget} abdomen"
    sleep 1
  elsif /nerve/ =~ wound
    to_heal.push('nerves')
    if Wounds.send('nerves') == 3
      healdown.call('nerves')
    end
    fput "transfer #{@healtarget} nerves"
    sleep 1
  elsif /(?'headneck'head|neck)/ =~ wound
    to_heal.push(headneck)
    if Wounds.send(headneck) == 3
      healdown.call(headneck)
    end
    fput "transfer #{@healtarget} #{headneck}"

  elsif /(?'chestback'chest|back)/ =~ wound
    to_heal.push(chestback)
    if Wounds.send(chestback) == 3
      healdown.call(chestback)
    end
    put "transfer #{@healtarget} #{chestback}"

  end
}

bloodline = String.new
PreHP = health?
PostHP = 0
HealedHP = 0
until PreHP == PostHP
  if health? <= 75 or percenthealth < 51
    wait_until { mana?((maxhealth - health?) / 10) }
#     fput "prep 1101"
      fput "cure"
      sleep 3
      waitrt?
      next
  end
  PreHP = health?
# echo PreHP
  fput "transfer #{@healtarget}"
  PostHP = health?
# echo PostHP
  HealedHP = HealedHP + (PreHP - PostHP)
# echo HealedHP
end
if HealedHP > 0
  respond "You healed #{@healtarget} of #{healparts} along with #{HealedHP} hitpoints."
  else
  respond "You healed #{@healtarget} of #{healparts}."
end
while (health?.to_i != 0) and (health?.to_i < maxhealth.to_i)
  cost = (maxhealth - health?) / 10
  unless mana?(cost)
    respond("Insufficient mana, will continue when you have enough...")
    until mana?(cost)
      sleep 1
    end
  end
  fput "cure blood"
  sleep 3
  waitrt?
end
pause 0.3
end
}
Settings[Char.name]['@toggle'] = @toggle
Settings.save
#respond "Healing yourself!"

if @altBehavior == true and !script.vars.empty?
  exit
end

@areaNames = {}
@areaNames["head"]    = "head"
@areaNames["nerves"]  = "nsys"
@areaNames["neck"]    = "neck"
@areaNames["chest"]   = "chest"
@areaNames["abdomen"] = "abs"
@areaNames["rightarm"]  = "rightArm"
@areaNames["leftarm"]   = "leftArm"
@areaNames["rightleg"]  = "rightLeg"
@areaNames["leftleg"]   = "leftLeg"
@areaNames["back"]    = "back"
@areaNames["righthand"] = "rightHand"
@areaNames["lefthand"]  = "leftHand"
@areaNames["righteye"]  = "rightEye"
@areaNames["lefteye"]   = "leftEye"

@areaCost = {}
@areaCost["head"]   = 4
@areaCost["nerves"]   = 3
@areaCost["neck"]   = 4
@areaCost["chest"]    = 5
@areaCost["abdomen"]  = 5
@areaCost["rightarm"] = 2
@areaCost["leftarm"]  = 2
@areaCost["rightleg"] = 2
@areaCost["leftleg"]  = 2
@areaCost["back"]     = 5
@areaCost["righthand"]  = 2
@areaCost["lefthand"] = 2
@areaCost["righteye"] = 5
@areaCost["lefteye"]  = 5


def checkCost (area)
  @areaCost[area]
end


def CheckHealth
  while percenthealth < 90
    wait_while { checkmana < 1 }
    waitrt?
    waitcastrt?
    fput "cure blood"
    pause 3
  end
end

def FinalHeal(location, manaModifier)
  checkSigns
  CheckHealth()
  cLocation = location.to_s.gsub(/(right|left)(.*)/,"\\1 \\2")
  while checkmana < manaModifier
    CheckHealth()
    pause 5
  end

  waitrt?
  waitcastrt?
  fput "cure #{cLocation}"
  pause 3
  end

#@toggle = 'Heal'

def varset(location, type, switch)
#echo location
  mode = ->(key,value) {
  key[/#{location}.#{type}.#{switch}/i]
  }
  item = Settings[Char.name].select(&mode).values
  return(item[0])
end

injuryLevel = 3
scarLevel = 3

def HeadNerveHeal()
  while Scars.head > 1
    while Wounds.head > 0
      if Wounds.head > 1
        FinalHeal('head', (checkCost('head')+5))
      else
        FinalHeal('head', (checkCost('head')))
      end
    end
  FinalHeal('head', (checkCost('head')+9))
  end
  while Scars.nsys > 1
    while Wounds.nsys > 0
      if Wounds.nsys > 1
        FinalHeal('nerves', (checkCost('nerves')+5))
      else
        FinalHeal('nerves', (checkCost('nerves')))
      end
    end
  FinalHeal('nerves', (checkCost('nerves')+9))
  end
end

def finalWcheck(aName, lName, aLevel)
  areaLevel = Wounds.send(lName)
    if aName =~ /head|nerves/ and @HNPriority == true
      HeadNerveHeal()
    end
    if areaLevel == aLevel
      if areaLevel > varset(aName, 'wounds', @toggle) || areaLevel > @allWounds
        if areaLevel > 1
          FinalHeal(aName, (checkCost(aName)+5))
        else
          FinalHeal(aName, (checkCost(aName)))
        end
      end
    end
end

def finalScheck(aName, lName, aLevel)
  areaLevel = Scars.send(lName)
  woundLevel = Wounds.send(lName)
    if areaLevel == aLevel and woundLevel == 0
      if areaLevel > varset(aName, 'scars', @toggle) || areaLevel > @allScars
        if areaLevel > 1
          FinalHeal(aName, (checkCost(aName)+13))
        else
          FinalHeal(aName, (checkCost(aName)+9))
        end
      end
    end
end

until injuryLevel == 0
    @areaNames.each {|name, lichname|
      finalWcheck(name, lichname, injuryLevel)
      }
  injuryLevel = (injuryLevel - 1)

end

until scarLevel == 0
    @areaNames.each {|name, lichname|
      finalScheck(name, lichname, scarLevel)
      }
  scarLevel = (scarLevel - 1)

end
CheckHealth()
if @doneVerb != ""
  fput "#{@doneVerb}"
end
