=begin
  Automated locker moving. 
  If you aren't premie you must give it a speed, as the default is immediate
  
  example: ;uhaul landing teras immediate
  
  Required: Lich 4.3.12
  Tags: lockers, movers, move
  Author: Ondreian
  
=end

if $SAFE > 0
  echo "This script needs to be trusted to work properly. (;trust #{script.name})"
  exit
end

require "ostruct"

class Integer
  def go2
    fput "unhide" if hidden
    start_script "go2", [self, "_disable_confirm_"]
    wait_while { running? "go2" };
  end
end

class String
  def go2
    fput "unhide" if hidden
    start_script "go2", [self, "_disable_confirm_"]
    wait_while { running? "go2" };
  end
end


class Movers

  SPEEDS = OpenStruct.new(
    immediate: 5000,
    express:  2500,
    standard: 1000,
  )

  BANK = "bank"

  ROOMS = OpenStruct.new(
    landing: 8896,
    icemule: 3373,
    fwi: 16146,
    teras: 12539,
    vaalor: 10439,
    illistim: 13250,
    solhaven: 5601,
    riversrest: 10954,
  )

  LOOKUP = {
    "wehnimer's landing" => /landing|wehn/,
    "solhaven"           => /sol/,
    "teras"              => /ter/,
    "ta'vaalor"          => /vaalor/,
    "four winds"         => /mist|fwi|four/,
    "ta'illistim"        => /illi/,
    "river's rest"       => /rr|rest|river/,
    "icemule"            => /mule|imt/,
    "zul logoth"         => /zul|logoth/,
  }
  
  def self.lookup(arg)
    LOOKUP.each_pair.find { |town, pattern| arg =~ pattern }.shift || arg
  end

  def self.closest_mover
    Room.current.find_nearest(ROOMS.to_h.values)
  end

  def self.swap(from, to, speed="immediate")
    starting_room = Room.current.id
    cost = SPEEDS[speed]
    if !cost
      error "unrecognized speed: #{speed}\n  valid speeds: #{SPEEDS.to_h.keys.join(', ')}"
    end
    BANK.go2
    fput "withdraw #{cost}"
    closest_mover.go2
    fput "ask ##{GameObj.npcs.first.id} for move"
    fput "say yes"
    fput "say #{from}"
    fput "say #{to}"
    fput "say #{speed}"
    starting_room.go2
  end

  def self.help
    respond %{
      help:
        ;uhaul <from> <to> <speed=immediate>
    }
    exit
  end

  def self.error(msg)
    respond "\n\n  <<error>>\n\n  #{msg}\n\n"
    help
  end
end

args = script.vars[1..-1].map { |str| str.downcase } || []

Movers.help                                         if args.include?("help")
Movers.error "at most 3 arguments are allowed"      if args.size > 3
Movers.error "<from> and <to> are required options" if args.size < 1
Movers.swap *args.map {|arg| Movers.lookup arg }

