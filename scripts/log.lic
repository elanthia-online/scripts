=begin

  logs the game to lich\logs\<game code>-<char name>\<date>-<number>.log
  starts a new file after 30,000 lines (somewhere around 1mb)

  SYNTAX:  ;log
           ;log --timestamp="%F %T %Z"          - optional timestamps
           ;log --rnum                          - optional show Lich ID on room titles
           ;log --exclude=u7199,288,2300        - optional rooms to exclude logging, supports UIDs via u#
           ;log --lines=50000                   - optional change default(30000) lines to capture before new file started
  EXAMPLE AUTOSTART:
           ;autostart add --global log --timestamp=\"%F %T %Z\" --rnum --exclude=288,2300,u7199 --lines=50000

           log format based on https://apidock.com/ruby/DateTime/strftime

       author: elanthia-online
 contributors: Tillmen, Tysong, Xanlin
         game: gs
      version: 1.0.0
     required: Lich > 5.0.1

  changelog:
    1.0.0 (2025-04-08):
      * Fix --rnum to better match only room titles
      * Add --exclude=288,u7199 support to exclude logging in rooms designated.
      * Add --lines=50000 to change default 30k lines captured before starting new log file
      * Convert to module GameLogger
=end
=begin
    0.0.8 (2024-09-10):
      * Add --rnum support
    0.0.7 (2023-03-31):
      * Rubocop code cleanup
      * Adjust filename to include hours, minutes, seconds
      * Save into subdirectories by year/month
      * Starts a new file when the day changes
      * Add log timestamp CLI option for non-DragonRealms
    0.0.6 (2023-01-23):
      * Update for Ruby v3 compatibility
    0.0.5 (2022-11-24):
      * Remove reference to $SAFE
    0.0.4 (2022-01-10):
      * Making datetime stamps customizeable, and tuneable in a character's yaml.
    0.0.3 (2022-01-04):
      * prepend datetime stamps to logged lines
    0.0.2 (2015-01-13):
      * create log directory if needed
=end

hide_me

unless defined?(Script.current.want_script_output)
  echo 'Your version of Lich is too old for this script.'
  exit
end

unless (Gem::Version.new(RUBY_VERSION) > Gem::Version.new('2.0.0')) || $SAFE == 0
  echo "This script must be trusted to be allowed to write to log files."
  echo "You can trust it with the following command: #{$lich_char}trust #{script.name}"
  exit
end

module GameLogger
  module Opts
    FLAG_PREFIX ||= "--"

    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = nil)
      case args
      when nil
        if Script.current.vars[0].inspect =~ /\\"/
          args = Script.current.vars[0].scan(/[^\s"]*(?<!\\)"(?:\\"|[^"])+(?<!\\)"[^\s]*|(?:\\"|[^"\s])+/).collect { |s| s.gsub(/(?<!\\)"/, '').gsub('\\"', '"') }
        else
          args = Script.current.vars[1..-1]
        end
      end

      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.as_list(key)
      val = to_h.fetch(key.to_sym, [])
      val = [val] if val.is_a?(String)
      return val
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end

  @options = Opts.parse
  def self.main
    if defined?(get_settings)
      settings = get_settings
      stamp_enable = settings.log_timestamp
      stamp_format = settings.log_timestamp_format
    end
    Script.current.want_script_output = true
    Script.current.want_upstream = true

    if @options.timestamp
      stamp_format = @options.timestamp
      stamp_enable = true
    end

    show_room_numbers = false
    if @options.roomnum || @options.rnum
      show_room_numbers = @options.roomnum || @options.rnum
    end

    lines = (@options.lines || 30_000).to_i

    Thread.new {
      begin
        loop {
          Script.current.downstream_buffer.push ">#{upstream_get.sub(/^<c>/, '')}"
        }
      rescue
        echo $!
      end
    }

    started = false
    loop {
      dir = File.join(LICH_DIR, 'logs', "#{XMLData.game}-#{XMLData.name}", Time.now.strftime("%Y"), Time.now.strftime("%m"))
      FileUtils.mkdir_p(dir) unless File.exist?(dir)
      thisdate = Time.now.strftime("%Y-%m-%d")
      filename = File.join(dir, "#{Time.now.strftime("%Y-%m-%d_%H-%M-%S")}.log")
      file = File.open(filename, 'a')
      file.sync = true
      file.puts "#{Time.now.strftime("%Y-%m-%d %H:%M:%S.%L %:z")}\n"
      unless started
        if (Time.now - $login_time) < 30
          file.puts(reget)
          file.puts "<!-- Above contents from reget; full logging now active -->\n"
        end

        echo "Non-XML Logging started, currently logging to #{filename}"
        started = true
      end
      begin
        lines.times {
          line = get
          if @options.exclude
            next if Array(@options.exclude).include?(Room.current.id.to_s) || Array(@options.exclude).include?("u#{XMLData.room_id}")
          end
          if show_room_numbers && line =~ /^#{Regexp.escape(XMLData.room_title)}/
            line.sub!(']') { " - #{Map.current.id}]" }
            line += " (u#{XMLData.room_id})" if XMLData.game =~ /^GS/ && line !~ /\(#{XMLData.room_id}\)/
          end
          unless line =~ /^<(?:push|pop)Stream/
            unless defined?(stamp_enable)
              file.puts line
            else
              if stamp_enable
                file.puts "#{Time.now.strftime(stamp_format)}: #{line}"
              else
                file.puts line
              end
            end
          end
          break if Time.now.strftime("%Y-%m-%d") != thisdate
        }
        file.puts "#{Time.now.strftime("%Y-%m-%d %H:%M:%S.%L %:z")}\n"
      ensure
        begin
          file.close
        rescue
          Lich.log "Can't close file!"
        end
      end
    }
  end
end

GameLogger.main
