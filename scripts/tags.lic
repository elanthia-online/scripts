=begin
  Automates adding/remove/listing Room tags

  *** for adding/removing tags with spaces in the name, you must use quotes ***

  usage:
    ;tags --add [tag1] [tag2]...[tagN]   adds a list of tags to the room
    ;tags --rm  [tag1] [tag2]...[tagN]   removes a list of tags from the room
    ;tags --sense                        attempt to use your survival skill to add missing herbs to a room
    ;tags --ls                           shows all current tags for the room
    ;tags --crawl current                crawl the current area using survival sense
    ;tags --crawl <location>             crawl an area using survival sense, pauses before moving more than 100 rooms
    ;tags --crawl <location> confirm     crawl an area and don't pause when moving more than 100 rooms away
    ;tags --crawl <location> all         crawl an area and don't skip recently sensed rooms
    ;tags --list <location>              list rooms for a location, whether to skip or crawl

  crawl options (can be mixed and matched)
    ;tags --crawl ranger                  # only does rooms that need
    ;tags --crawl climate                 # only does ranger sense for climate/terrain
    ;tags --crawl outside                 # only does outside rooms
    ;tags --crawl noskip                  # doesn't skip rooms already sensed

  single tag operations:
    ;tags + [tag]                        add a single tag, no need to use quotes
    ;tags - [tag]                        remove a single tag, no need to use quotes

  for --add/--rm operations with spaces in the name, you must use quotes
    ;tags --add "small tomato" "onion skin"
    ;tags --rm "small tomato" "onion skin"

  Required: Lich 4.3.12
  Tags: tags
  Author: elanthia-online
  Contibutors: Ondreian, Xanlin
  Version: 1.6.6

=end
=begin
  Version: 1.6.6 (2023-02-08): Xanlin: ignore tag adjustments
  Version: 1.6.5 (2023-02-07): Xanlin: now removes herbs not present (with support for day/night only)
  Version: 1.6.4 (2023-02-02): Xanlin: added 'noskip' option
  Version: 1.6.3 (2023-01-24): Xanlin: updated add_missing_uid to add to Map.uids as well
  Version: 1.6.2 (2023-01-08): Xanlin: added more tags for ignoring
  Version: 1.6.1 (2022-11-12): Xanlin: added 'ranger', 'outside', 'climate' options
  Version: 1.6.0 (2022-11-05): Xanlin: now collects climate and terrain data if you're a ranger
  Version: 1.5.0 (2022-11-04): Xanlin: now collects missing uids while crawling
  Version: 1.4.2 (2022-09-22): Xanlin: added exclusion for tables
  Version: 1.4.1 (2022-09-21): Xanlin: added --api, --list, split crawl into crawl and crawl_rooms, added exclusions/ignore_rooms
  Version: 1.4.0 (2022-09-14): Xanlin: added diff for forage sense
  Version: 1.3.1 (2022-09-12): Xanlin: added uniq and compact to tags
  Version: 1.3.0 (2022-09-12): Xanlin:
    - added planewalker option, just keeps crawling, less messaging.  Still some work to do before adding to usage.
  Version: 1.2.0 (2022-09-09): Xanlin:
    - added pause for traveling over 100 rooms, e.g. 'the grasslands' is both near the Landing, and a location near Ta'Vaalor.
    - added skipping/not skipping sensing rooms that have already been done this month/time of day, helpful if resuming from partial completion
    - when sensed, removes old meta tags for a room with the same time of day
  Version: 1.1.0 (2022-08-05): Xanlin:
    - added forage sense tags, time of day checking

=end
module Tags
  vars = Script.current.vars[1..-1]
  type, *tags = vars

  ADD         = %{--add}
  DIFF        = %{--diff}
  REMOVE      = %{--rm}
  LIST        = %{--ls}
  SENSE       = %{--sense}
  CRAWL       = %{--crawl}
  TIME_OF_DAY = %{--time}
  PLANEWALKER = %{--planewalker}
  ADD_ONE     = %{+}
  REMOVE_ONE  = %{-}
  API         = %{--api}
  LIST_ROOMS  = %{--list}

  #------------------------------------------------------------------------------#
  # ignore tags
  #------------------------------------------------------------------------------#
  def self.log(message,bold=true)
    if message.is_a?(Array)
      message.each{|msg|
        log(msg,bold)
      }
    end
    if bold
      _respond(%{<b>#{message}</b>})
    else
      _respond(message)
    end
  end

  def self.load_map_tags()
    if Map.class_variable_get(:@@tags).empty?
      Tags.log("loading map tags...")
      Map.tags
      Tags.log("loading map tags... done.")
    end
    return true
  end
  self.load_map_tags()

  @herb_list   = ["Elanthian snow rose", "Gosaena's grace dianthus", "Imaera's Lace", "Mularosian whip vine", "acantha leaf", "agave heart", "alder bark", "alligator lily", "aloeas stem", "alpine violet", "amber-hued mushroom", "ambrominas leaf", "angelica root", "arctic brambles", "arctic moss", "areca frond", "auroral starflowers", "ayana berry", "ayana leaf", "ayana lichen", "ayana root", "ayana weed", "ayana'al berry", "ayana'al leaf", "ayana'al lichen", "ayana'al root", "azure iceblossom", "banana leaf", "barley grass", "basal moss", "bay leaf", "bearberries", "bent stick", "black acorn", "black hook mushroom", "black peppercorn", "black slime", "black trafel mushroom", "black vampire lily", "black-tipped wyrm thorn", "blackberries", "blackened moss", "blackgrove root", "blaestonberry blossom", "bleeding heart rose", "bloodthorn stem", "bloodwood twig", "blue and white lantana", "blue mold", "blue moss", "blue passionflower", "blue poppy", "blue trafel mushroom", "blue water lily", "blue whortleberry", "blueberries", "bolmara lichen", "bougainvillea blossom", "branch of acacia", "branch of kerria", "bright blue iceblossom", "bright green iceblossom", "bright pink plumeria", "bright pink protea", "bright red beet", "bright red cranberry", "bright red iceblossom", "bright red teaberry", "broken twig", "brostheras grass", "brown potato", "brown-skinned kiwi", "buckthorn berry", "bunch of wild grapes", "bur-clover root", "cactacae spine", "cactus flower", "calamia fruit", "calamintha blossom", "calamintha flower", "calmintha flower", "canary yellow hibiscus", "cardamom", "cave moss", "cerulean starflowers", "chives", "cinnamon bark", "cinnamon ferns", "cloudberry", "cluster of butterflyweed", "cluster of gorse", "cluster of woad leaves", "coppery rain lily", "coppery red gaura", "coral hibiscus", "coral plumeria", "cordyline leaf", "cothinar flower", "creeping fig vine", "crimson crane flower", "crimson dragonstalk", "crimson heliconia", "crimson hibiscus", "crowberry", "crystalline stalk", "cuctucae berry", "cumin seeds", "daggerstalk mushroom", "daggit root", "dark blue honeyberries", "dark cyan mistbloom", "dark pink plumeria", "dark pink rain lily", "dark purple date", "date palm fronds", "deep plum direbloom", "deep purple shockroot", "dill", "discolored fleshbinder bud", "ear of corn", "earthen root", "ebon drake claw root", "ebon hibiscus", "ebony twig", "edelweiss", "elderberries", "engorged bulb", "ephlox moss", "fairy primrose", "fairy's skirt mushroom", "fennel bulb", "feverfern stalk", "fiddlehead fern", "fiery red iceblossom", "fig", "fire lily", "flaeshorn berry", "flaming violet", "flathead mushroom", "fleshsore bulb", "fountain grass", "fragrant white lily", "fresh basil", "fresh broccoli", "fresh cilantro", "fresh lemongrass", "fresh oregano", "frostflower", "frostweed", "fuzzy peach", "garlic", "genkew mushroom", "giant glowing toadstool", "ginger root", "ginkgo nut", "glowing toadstool", "gok nut", "gold-cored ruby starflowers", "golden apricot", "golden aster", "golden buttercup", "golden flaeshorn berry", "golden heliconia", "golden hook mushroom", "golden poppy", "gorse", "green and red lantana", "green beans", "green cabbage", "green guava", "green lichen", "green mold", "green olive", "green pear", "green pepper", "green tomato", "handful of bearberries", "handful of blueberries", "handful of currants", "handful of elderberries", "handful of huckleberries", "handful of mustard seeds", "handful of oats", "handful of pinenuts", "handful of raspberries", "handful of snowberries", "handful of walnuts", "haphip root", "heath aster", "heavy stick", "honeysuckle vine", "hop flowers", "hosta flower", "huckleberries", "ice blue iceblossom", "ice tulip", "iceblossoms", "inky scorpidium moss", "iris blossom", "ironfern root", "juicy plum", "juniper berry", "karuka nuts", "kylan berry", "lady slipper blossom", "lapis-hued alpestris", "large black toadstool", "large sunflower", "large white gardenia", "lavender heliconia", "lavender iceblossom", "layer of onion skin", "leafy arugula", "leek", "leopard-spotted heliconia", "lettuce", "light blue hydrangea", "light red iceblossom", "lingonberry", "lobster-claw heliconia", "longgrass", "luckbloom blossom", "luminescent blossom", "luminescent green fungus", "manroot stalk", "marallis berry", "mass of congealed slime", "matte black vampire lily", "mezereon bark", "mistweed", "misty pink dreamphlox", "monkey grass", "monstera frond", "moonflower", "moonflowers", "moonlight cactus-bloom", "motherwort", "mountain dryad", "murdroot", "murkweed", "mustard seeds", "nettle leaf", "night mare", "nightbloom blossom", "nightshade berry", "nutmeg", "oak twig", "ocotillo stick", "off-white protea", "oily flameleaf", "old man's beard lichen", "onion skin", "oozing fleshsore bulb", "orange begonia", "orange crane flower", "orange heliconia", "orange pepper", "orange rowanberry", "orange tiger lily", "orange tomato", "orange-yellow starfruit", "orchil lichen", "orris root", "oxblood lily", "pale blue hibiscus", "pale green iceblossom", "pale peach mistbloom", "pale thornberry", "pale violet iceblossom", "pale yellow daffodil", "pandanus twig", "pea pods", "peach iceblossom", "pearly green vine", "pecans", "pennyroyal stem", "pepperthorn root", "perwinkle blue hibiscus", "petrified shadowstalk", "pin cushion protea", "pine cone", "pine needles", "pink and blue lantana", "pink and violet mushroom", "pink begonia", "pink clover blossom", "pink heliconia", "pink hydrangea", "pink iceblossom", "pink mold", "pink muhly grass", "pink ostrich plume", "pink passionflower", "pink peony", "pink peppercorn", "pink petunia", "pink poppy", "pink protea", "pink rain lily", "pink water lily", "plump black mulberries", "pothinir grass", "pristine white plumeria", "purple cabbage", "purple clover blossom", "purple crocus", "purple eggplant", "purple hydrangea", "purple mold", "purple myklian", "purple passion fruit", "purple passionflower", "purple petunia", "purple poppy", "purple potato", "purple-tipped artichoke", "rainbow chard", "rainbow-striped mushroom", "raspberries", "raw almonds", "red begonia", "red cherries", "red clover blossom", "red heliconia", "red lichen", "red lychee", "red mold", "red myklian", "red onion", "red ostrich plume", "red passionflower", "red pepper", "red pincushion moss", "red poppy", "red tomato", "red trafel mushroom", "red vornalite mushroom", "red winterberry", "red-black amaranth", "red-green mango", "reeds", "resurrection fern", "rhubarb", "rockberry", "rose-marrow root", "rotting bile green fleshbulb", "round white eggplant", "russet gaura", "rust orange gaura", "rust scorpidium moss", "saffron alpestris", "sagebrush root", "sanguine velvet martagon lily", "sapphire blue rose", "sassafras leaf", "scallions", "scarlet direbloom", "scarlet heliconia", "shadowlace moss", "shallot", "short stick", "skeletal lace mushroom", "sky-blue delphinuris", "slender twig", "slime-covered grave blossom", "small anemone", "small apple", "small banana", "small branch of acacia", "small carnation", "small coconut", "small daisy", "small dandelion", "small flower", "small green olive", "small lime", "small loganberry", "small peapod", "small primrose", "small pumpkin", "small rose", "small turnip", "small violet", "small wild rose", "snapdragon stalk", "snow lily", "snow pansy", "snow white iceblossom", "snowberries", "soft orange iceblossom", "soft white mushroom", "soft white plumeria", "soft yellow iceblossom", "some acantha leaf", "some alder bark", "some aloeas stem", "some ambrominas leaf", "some angelica root", "some arctic brambles", "some arctic moss", "some barley grass", "some basal moss", "some blackened moss", "some blue moss", "some bolmara lichen", "some brostheras grass", "some bur-clover root", "some cactacae spine", "some calamia fruit", "some cave moss", "some cothinar flower", "some cumin seeds", "some daggit root", "some ephlox moss", "some fetid black slime", "some frostweed", "some glowing green lichen", "some haphip root", "some lettuce", "some longgrass", "some mezereon bark", "some mistweed", "some monkey grass", "some motherwort", "some murkweed", "some nutmeg", "some orchil lichen", "some pennyroyal stem", "some petrified shadowstalk", "some pine needles", "some pothinir grass", "some red lichen", "some reeds", "some rose-marrow root", "some shadowlace moss", "some sovyn clove", "some star anise", "some strigae cactus", "some talneo root", "some thyme", "some torban leaf", "some tree bark", "some tundra grass", "some valerian root", "some wheat grass", "some wild sage", "some wingstem root", "some wiregrass", "some wolifrew lichen", "some woth flower", "some wyrmwood bark", "spear-headed heliconia", "spearmint leaf", "spectral violet dreamphlox", "spider lily", "sponge mushroom", "spore-filled tangerine mushroom", "spotted heart mushroom", "sprig of Imaera's Lace", "sprig of alyssum", "sprig of amaranth", "sprig of bleeding-heart", "sprig of boxwood", "sprig of clematis", "sprig of columbine", "sprig of dill", "sprig of edelweiss", "sprig of foxglove", "sprig of heliotrope", "sprig of hellebore", "sprig of holly", "sprig of ivy", "sprig of jasmine", "sprig of larkspur", "sprig of lavender", "sprig of mistletoe", "sprig of mournbloom", "sprig of rosemary", "sprig of sky-blue delphinuris", "sprig of sneezeweed", "sprig of thanot", "sprig of wild lilac", "sprig of wild phlox", "stalk of bluebells", "stalk of burdock", "stalk of cattail", "stalk of celery", "stalk of chicory", "stalk of drakefern", "stalk of goldenrod", "stalk of monkeyflower", "stalk of tuberose", "stalk of wormwood", "stalks of snakeroot", "star anise", "stargazer lily", "stem of freesia flowers", "stem of verbena", "stick", "sticks", "strand of seaweed", "strigae cactus", "striped heart mushroom", "striped tomato", "sugar cane", "sunburst blossom", "sunflower seeds", "sweet onion", "sweet potato", "sweetfern stalk", "talneo root", "tangerine hibiscus", "tangerine mushroom", "tarweed plant", "teal pincushion moss", "tendril of vinca", "thyme", "tiger lily", "tkaro root", "tobacco leaves", "torban leaf", "traesharm berry", "tree bark", "trollfear mushroom", "trumpet vine tendril", "tundra grass", "turquoise plumeria", "turquoise vine", "twisted black mawflower", "twisted twig", "valerian root", "vanilla bean", "velvet martagon lily", "velvety onyx rose", "vermilion fire lily", "vert drake claw root", "vibrant yellow plumeria", "violet hibiscus", "violet-tipped starflowers", "walnuts", "water chestnut", "wavepetal blossom", "wheat grass", "white alligator lily", "white baneberry", "white begonia", "white clover blossom", "white hook mushroom", "white hydrangea", "white lily", "white mold", "white passionflower", "white peony", "white petunia", "white poppy", "white spider lily", "white water lily", "wide pandanus fronds", "wild beechnut", "wild carrot", "wild chokecherry", "wild gooseberry", "wild grapes", "wild orchid", "wild pansy blossom", "wild pink geranium", "wild sage", "wild spinach", "wild strawberry", "wild tulip", "wingstem root", "winter rose", "wintergreen leaf", "wiregrass", "witchwood twig", "withered black mushroom", "withered deathblossom", "woad leaves", "wolfsbane root", "wolifrew lichen", "wood violet", "woth flower", "wyrm thorn", "wyrmwood bark", "yabathilium fruit", "yellow and red lantana", "yellow clover blossom", "yellow heliconia", "yellow iceblossom", "yellow lemon", "yellow mold", "yellow ostrich plume", "yellow papaya", "yellow passionflower", "yellow pepper", "yellow poppy", "yellow primrose", "yellow scale lichen", "yellow squash", "yellow tomato", "yellow water lily", "yew twig", "zucchini", "black mawflower", "black toadstool", "congealed slime", "fleshbinder bud", "grave blossom", "green fleshbulb", "rye grass", "wintercrisp apple"]
  @night_only  = ["amber-hued mushroom", "auroral starflowers", "black vampire lily", "cerulean starflowers", "fire lily", "gold-cored ruby starflowers", "misty pink dreamphlox", "moonflower", "moonlight cactus-bloom", "nightbloom blossom", "oxblood lily", "skeletal lace mushroom", "spectral violet dreamphlox", "spider lily", "trollfear mushroom", "violet-tipped starflowers", "white hook mushroom"]
  @day_only    = ["golden hook mushroom", "red trafel mushroom", "red vornalite mushroom", "spotted heart mushroom", "striped heart mushroom", "sunburst blossom"]

  @ignore_tags    = [
    'closed',
    'duplicate',
    'gone',
    'meta:latched',
    'meta:che',
    'meta:event',
    'meta:fest',
    'meta:game:GSPlat',
    'meta:game:GSF',
    'meta:game:GST',
    'meta:game:GSIV',
    'meta:locker',
    'meta:locker annex',
    #'meta:maze',
    'meta:jail cell',
    'meta:map:virtual room',
    'meta:mentor',
    'meta:mho',
    'meta:mobile',
    'meta:private home',
    'meta:private property',
    'meta:pay-to-play',
    'meta:quest',
    'meta:society:Council of Light',
    'meta:society:Order of Voln',
    'meta:society:Guardians of Sunfist',
    'meta:storyline',
    'meta:taskroom',
    'meta:transport',
    'meta:transition',
    'meta:trap',
    'meta:underwater',
    'meta:workroom', # cobbling workshop but don't want to use the word workshop
    'missing',
    'no forageables',
    'no-auto-map',
    'private property',
    'rewritten',
    'urchin-hideout'
    ]

  @ignore_tags = (@ignore_tags + Map.tags.find_all{|t| t =~ /^meta:(?:fest|mho|che|prof|gld|gender|locker annex|event|quest)/}).uniq.sort

  @crawl_if_current_tags = ['meta:private property','private property']
  @crawl_if_current_tags = (@crawl_if_current_tags + Map.tags.find_all{|t| t =~ /^meta:(?:fest|mho|che|prof|gld|storyline|mentor|society|quest|trap)/}).uniq.sort

  @ignore_tags.delete("meta:game:#{XMLData.game}")

  if XMLData.game == 'GST'
    @ignore_tags.delete("meta:game:GSIV")
  end
  if defined?(Stats.prof)
    @ignore_tags.delete("meta:prof:#{Stats.prof.downcase}")
  end
  if defined?(Stats.gender)
    @ignore_tags.delete("meta:gender:#{Stats.gender.downcase}")
  end
  if defined?(Stats.race)
    @ignore_tags.delete("meta:race:#{Stats.race.downcase}")
  end
  if defined?(Char.che)
    @ignore_tags.delete("meta:che:#{Char.che}")
    #@ignore_tags.delete("meta:locker annex:#{Char.che}")
  end
  if defined?(Char.mho)
    Char.mho.each{|m| @ignore_tags.delete("meta:mho:#{m}") }
  end
  if defined?(Char.gld)
    @ignore_tags.delete("meta:gld:#{Char.gld.downcase}")
  end

  if defined?(Society.status)
    @ignore_tags.delete("meta:society:#{Society.status}")
  end
  #------------------------------------------------------------------------------#
  @disable_confirm   = false;
  @skip_sensed       = true;
  @ranger_rooms_only = false;
  @ranger_sense_only = false;
  @outside_only      = false;
  @verbose           = true;


  @last_time_of_day = nil;
  @last_time_of_day_tag = nil;

  @script_name = Script.current.name;
  def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
  def self.dothisquiet(command, timeout=5, start_pattern=/.*?/, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = false);result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;

  def self.time_of_day
    h = {
        "after midnight" => "night",
        "morning twilight" => "night",
        "early morning" => "day",
        "mid morning" => "day",
        "afternoon" => "day",
        "late afternoon" => "day",
        "evening twilight" => "night",
        "late evening" => "night",
        }
    daynight = "???"
    pattern = /^Today is/
    #result = dothistimeout "time",3, pattern;
    save_want_downstream = Script.current.want_downstream;
    save_want_downstream_xml = Script.current.want_downstream_xml;
    Script.current.want_downstream = false;
    Script.current.want_downstream_xml = true;
    result = dothisquiet("time", 3, pattern, !@verbose).first
    Script.current.want_downstream_xml = save_want_downstream_xml;
    Script.current.want_downstream = save_want_downstream;

    if result =~ /It is currently (.*?)\./
      c = $1
      daynight = h[c]
    end
    @last_time_of_day = daynight
    return daynight
  end

  def self.time_of_day_tag();
    @last_time_of_day_tag = "meta:forage-sensed:#{self.time_of_day}:#{Time.now.utc.strftime("%Y-%m")}";
    return @last_time_of_day_tag;
  end;

  def self.list()
    Tags.uniq()
    Tags.log("tags: #{Room.current.tags.join(", ")}")
    :ok
  end

  def self.add(*tags)
    tags_to_add = (tags - Map.current.tags)
    if tags_to_add.empty?
      Tags.log(%{#{Script.current.name}: no tags added.})
    else
      Map.current.tags = Map.current.tags + tags_to_add
      Tags.log(%{#{Script.current.name}: tags added to #{Map.current.id}: #{tags_to_add.inspect}})
    end
    :ok
  end

  def self.remove(*tags)
    id = Map.current.id
    tags_removed = tags & Map[id].tags;
    if !tags_removed.empty?
      Map[id].tags = (Map.current.tags - tags_removed)
      _respond
      Tags.log(%{#{Script.current.name}: tags removed from #{id}: #{tags_removed.inspect}})
    end
    :ok
  end

  def self.raise_not_enough_survival()
    raise Exception.new <<-ERROR
      You do not have enough survival for this.
    ERROR
  end

  def self.list_rooms_print(id, note=nil)
     r = Room[id]
     format = "  %-5d  %-9s | %-44s %s"
     format = "  %-5d  %-9s | %s" if note.nil?
     respond format % [id, (r.uid.empty? ? "" : "u#{r.uid.first}"), r.title[0], note.nil? ? "" : "| #{note}" ]
  end
  def self.list_rooms(location)
    location = Room.current.location if location.nil? or location.strip == ""

    room_ids, ignore_room_ids, skip_list, location = self.crawl_rooms(location);
    if (room_ids + ignore_room_ids + skip_list).empty?
      Tags.log("No rooms founds for location: #{location.inspect}.")
    end

    Tags.log("Skipping #{skip_list.size} room(s) because they are already tagged as being sensed for this month and this time of day.")
    if !skip_list.empty?
      skip_list.each { |id| self.list_rooms_print(id) }
    end

    Tags.log("Ignoring #{ignore_room_ids.size} room(s) because they are tagged with at least one of the following: #{@ignore_tags.inspect}.")
    if !ignore_room_ids.empty?
      ignore_room_ids.each { |id| self.list_rooms_print(id, (Map[id].tags & @ignore_tags).empty? ? "Table" : (Map[id].tags & @ignore_tags)) }
    end

    Tags.log("Remaining #{room_ids.size} rooms in #{location.inspect}:")
    if !room_ids.empty?
      room_ids.each { |id| self.list_rooms_print(id) }
    end
  end

  @ranger_sense_pattern = /The indications of the((?<climate> .*?) climate )?(?:and the )?(?:(?<terrain>.*?)(?: terrain | environment | forest )?)?are clearly evident to your seasoned eye\.|You carefully assess your surroundings, but find no new insight to the terrain and climate of the area|You can't do that while maintaining concentration on walking over the water!/
  def self.ranger_sense();
    return nil if Stats.prof != 'Ranger';
    return nil if !Map.current.climate.nil? and !Map.current.terrain.nil? and @skip_sensed == true
    result = dothistimeout "sense",3, @ranger_sense_pattern;
    if result =~ /You carefully assess your surroundings, but find no new insight to the terrain and climate of the area/
      Map.current.climate = 'none' if Map.current.climate.nil?;
      Map.current.terrain = 'none' if Map.current.terrain.nil?;
      Tags.log("climate: #{Map.current.climate}; terrain: #{Map.current.terrain}") if XMLData.name !~ /Xanwen/i
      Tags.log("self.add_climate_terrain(#{Map.current.id},#{Map.current.climate.inspect},#{Map.current.terrain.inspect})") if XMLData.name =~ /Xanwen/i #REMOVEME
    elsif m = @ranger_sense_pattern.match(result);
      climate = m[:climate].strip
      terrain = m[:terrain].strip
      Tags.log("sensed climate: #{climate.inspect} does not match Map[#{Map.current.id}].climate=#{Map.current.climate.inspect}") if Map.current.climate != climate and !Map.current.climate.nil?;
      Tags.log("sensed terrain: #{terrain.inspect} does not match Map[#{Map.current.id}].terrain=#{Map.current.terrain.inspect}") if Map.current.terrain != terrain and !Map.current.terrain.nil?;
      Map.current.climate = climate if Map.current.climate.nil?;
      Map.current.terrain = terrain if Map.current.terrain.nil?;
      Tags.log("climate: #{Map.current.climate}; terrain: #{Map.current.terrain}") if XMLData.name !~ /Xanwen/i
      Tags.log("self.add_climate_terrain(#{Map.current.id},#{Map.current.climate.inspect},#{Map.current.terrain.inspect})") if XMLData.name =~ /Xanwen/i #REMOVEME
      Tags.log("room bug: room does not have terrain") if terrain.nil?
      Tags.log("room bug: room does not have climate") if climate.nil?
    elsif
      Tags.log("ranger_sense failed")
    end
  end

  def self.add_missing_uid();
    return if Map.current.id.nil?
    return if Map.current.uid.include?(XMLData.room_id)
    Map.current.uid << XMLData.room_id if !Map.current.uid.include?(XMLData.room_id)
    Map.uids[XMLData.room_id] = [Map.current.id]  if !Map.uids.key?(XMLData.room_id)
    Map.uids[XMLData.room_id] << [Map.current.id] if !Map.uids[XMLData.room_id].include?(Map.current.id)
    Tags.log("adding uid %s to room %s" % [XMLData.room_id, Map.current.id ])
  end

  def self.crawl_rooms(location)
    room_ids = [];
    skip_list = [];
    ignore_room_ids = [];
    climate_missing = [];
    location = Map.current.location if location == "current";
    if !Map.list.find { |r| r.location.eql?(location) }
      if alt = Map.list.find { |r| r.location =~ /#{location}/i }
        Tags.log("Exact match for #{location.inspect} not found, using #{alt.location.inspect} instead.")
        location = alt.location
      end
    end

    room_ids = Map.list.select {|room|
      room.location.eql?(location) and ((@ranger_rooms_only == false) or (room.climate.nil? or room.terrain.nil?)) and (@outside_only == false or room.paths.first =~ /Obvious paths/)
    }.map(&:id)
    room_ids = room_ids - $festivals - $skip_list if !$festivals.nil? and !$skip_list.nil? #removeme
    room_ids = room_ids - $player_shops.keys if !$player_shops.nil?#removeme

    if !room_ids.empty?
      if @skip_sensed == true;
        # remove already sensed rooms
        skip_tag = self.time_of_day_tag();
        skip_list = Map.list.select{ |r| r.location.eql?(location) and r.tags.include?(skip_tag) }.map(&:id)
        if @ranger_sense_only == true
          skip_list = skip_list + Map.list.select{ |r| r.location.eql?(location) and !r.climate.nil? and !r.terrain.nil? }.map(&:id)
        end
        if skip_list.size > 0;
          #Tags.log("Skipping #{skip_list.size} room(s) because they are already tagged as being sensed for this month and this time of day.")
          room_ids = (room_ids - skip_list)
        end
      end
      @ignore_tags.delete("no forageables") if @ranger_rooms_only
      ignore_room_ids = Map.list.select {|room|
        room.location.eql?(location) and (!(room.tags & @ignore_tags).empty? or room.title[0] =~ / Table\]$/)
      }.map(&:id)
      if @ranger_rooms_only == true;
        climate_missing = Map.list.select{ |r| r.location.eql?(location) and (r.terrain.nil? or r.climate.nil?) and r.paths.any?{|p| p =~ /Obvious paths/} }.map(&:id)
        #(climate_missing & ignore_room_ids).each{ |id| r = Map[id]; respond "#{r.id} #{r.title.first} : #{(r.tags & @ignore_tags).inspect}"}
      end


      room_ids = (room_ids - ignore_room_ids) if !ignore_room_ids.empty?
    end
    return room_ids, ignore_room_ids, skip_list, location;
  end

  def self.crawl(location)
    if location =~ /\bconfirm/i;
      @disable_confirm = true;
      location = location.gsub(/[_ -]*disable[_ -]confirm[_-]/i,'');
    end
    if location.split(' ')[-1] =~ /^[@!-]*all$/i
      location = location.split(' ')[0..-2].join(' ');
      @skip_sensed = false;
      Tags.log("Will include rooms already marked as forage sensed for this month and time of day.")
    end
    raise_not_enough_survival() if Skills.survival < 25;

    location = Room.current.location if location.nil? or location.strip == ""
    room_ids, ignore_room_ids, skip_list, location = self.crawl_rooms(location);

    if room_ids.empty? and skip_list.empty?
      Tags.log("No rooms found for #{location}.")
      return
    elsif room_ids.empty? and (!skip_list.empty? or !ignore_room_ids.empty?)
      Tags.log("No rooms left to crawl for #{location}.")
      return
    elsif !room_ids.empty?
      Tags.log("Skipping #{skip_list.size} room(s) because they are already tagged as being sensed for this month and this time of day.") if !skip_list.empty?
      Tags.log("Ignoring #{ignore_room_ids.size} room(s) because they are tagged with at least one of the following: #{@ignore_tags.inspect}.") if !ignore_room_ids.empty?

      Tags.log("\nGoing to crawl #{room_ids.size} rooms in #{location.inspect} starting in 2 seconds.")
      sleep 2
    end

    until room_ids.empty?
      closest = Room.current.find_nearest(room_ids)
      if Map.current.id.nil?
        fput "out" if XMLData.room_exits.include?('out')
      end
      if closest.nil?
        Tags.log("None of the remaining rooms seem to have a path from here to there.")
        room_ids.each { |id| self.list_rooms_print(id) }
        break
      end
      room_ids.delete(closest)
      if !@disable_confirm == true
        path_length = Room.current.path_to(closest).length
        if Room.current.path_to(closest).length > 100
          Tags.log("There are approximately #{path_length} rooms between you and #{closest}: #{Room[closest].title[0]}")
          Tags.log("\nTo continue, unpause the script.  To abort, kill the script.")
          pause_script
        end
      end
      Script.run("go2", closest.to_s)
      wait_while {Script.running?("go2")}
      Tags.log("unable to reach #{closest}") if Map.current.id != closest.to_i
      next if Map.current.id != closest.to_i
      Tags.sense()
    end
  end

  def self.herbs_not_present(sense_tags)
    if @last_time_of_day == 'night'
      herb_list = @herb_list - @day_only  # don't remove day herbs
    elsif @last_time_of_day == 'day'
      herb_list = @herb_list - @night_only  # don't remove night herbs
    else  # unknown day/night value
      herb_list = @herb_list - @night_only - @day_only # don't remove day or night herbs
    end
    return (Map.current.tags & herb_list) - sense_tags
  end
  
  def self.parse_forage_sense(line)
    sense_tags = []
    if line =~ /Glancing about, you notice/
      sense_tags = line
        .gsub("Glancing about, you notice the immediate area should support specimens of ", "")
        .gsub(", and ", ", ")
        .gsub(".", "")
        .split(", ")
        sense_tags << "meta:forage-sensed"
        sense_tags << self.time_of_day_tag
    elsif line =~ /Glancing about, you doubt that anything interesting could be foraged here|You do not spot any forag/
      sense_tags << "no forageables"
    elsif line =~ /You can't really do that while underwater/
      sense_tags << "meta:underwater"
      sense_tags << "no forageables"
    elsif line =~ /You are a ghost!/
      Tags.log("Oops!  You're dead.  Quitting.")
      exit
    else
      sense_tags << "no forageables"
      Tags.log("#{Script.current.name}: forage_sense: unknown sense result")
    end
    return sense_tags
  end

  def self.forage_sense()
    raise_not_enough_survival() if Skills.survival < 25
    save_want_downstream = Script.current.want_downstream;
    save_want_downstream_xml = Script.current.want_downstream_xml;
    Script.current.want_downstream = false;
    Script.current.want_downstream_xml = true;
    start_pattern = Regexp.union(
      /Glancing about, /,
      /You can't really do that while underwater/,
      /You do not spot any forageables in the area./,
      /You are a ghost!/,
      /You are too distracted by the difficulty of staying alive in these treacherous waters to do that/, # Under The Black Water 13032042
      )
    line = dothisquiet("forage sense",3,start_pattern, !@verbose).first.gsub(/<[^>]*?>/,'')
    Script.current.want_downstream_xml = save_want_downstream_xml;
    Script.current.want_downstream = save_want_downstream;
    return parse_forage_sense(line)
  end

  def self.old_meta()
    self.time_of_day_tag if @last_time_of_day_tag.nil?;
    old_tags =  Map.current.tags.select{ |t| t =~ /meta:forage-sensed:#{@last_time_of_day}/} - [ @last_time_of_day_tag]
    return old_tags
  end

  def self.uniq()
    Room.current.tags.uniq!
    :ok
  end

  def self.sense()
    if !@ranger_sense_only
      sense_tags = Tags.forage_sense()
      Tags.add(*sense_tags)
      
      tags_to_remove = []
      tags_to_remove += Tags.old_meta() + self.herbs_not_present(sense_tags)
      tags_to_remove += ['no forageables'] if !(@herb_list & sense_tags).empty? and Map.current.tags.include?('no forageables');
      Tags.remove(*tags_to_remove)
      
      Tags.uniq()
    end
    Tags.add_missing_uid()
    Tags.ranger_sense()
  end

  def self.location_neighbors(location_from)
    neighbors = []
    rooms = Map.list.select{|r| r if r.location.eql?(location_from) }
    rooms.each{ |r|
      r.wayto.each { |k,v|
        l = Map[k.to_i].location
        if (!l.nil? and l != false and l != location_from );
          neighbors << l if !neighbors.include?(l);
        end
      }
    }
    return neighbors
  end

  @queue = [];
  @visited = [];
  def self.planewalker()
    @verbose = false;
    location = Map.current.location
    @queue << Map.current.location
    while !@queue.empty?
      location = @queue.shift
      @visited << location
      self.crawl(location)
      @queue = (self.location_neighbors(location) | @queue) - @visited - ['the grasslands'];
    end
  end

  @gs_interesting_tags = [ "advguard", "advguard2", "advguild", "advpickup", "alchemist", "armorshop", "bakery", "bank", "bardguild", "boutique", "chronomage", "clericguild", "clericshop", "collectibles", "consignment", "empathguild", "exchange", "fletcher", "forge", "furrier", "gemshop", "general store", "herbalist", "inn", "locksmith pool", "locksmith", "mail", "movers", "npccleric", "npchealer", "pawnshop", "postoffice", "rangerguild", "smokeshop", "sorcererguild", "sunfist", "town", "voln", "warriorguild", "weaponshop", "wizardguild"  ]
  @gs_other_tags = ['urchin-access', 'node','supernode', 'locksmithpool']
  def self.diff()
    sense = self.forage_sense();
    sense.delete_if { |t| t=~ /^meta/i}

    tags = Map.current.tags.dup;
    tags.delete_if { |t| t =~ /^(meta|map|urchin)/i }
    tags = tags - (@ignore_tags - ["no forageables"]) - @gs_interesting_tags - @gs_other_tags
    same = tags & sense
    spoof_some = sense.each_with_object([]){|s,a| a << "some #{s}"}

    not_in_sense = tags - sense - spoof_some
    not_in_tags = sense - tags
    respond "\nIgnoring these tags: #{Map.current.tags.dup - tags}"
    respond "\nForage sense(#{sense.size}): #{sense.sort.inspect}"
    respond "\nIn tags and forage sense (#{same.size}): #{same.inspect}"
    respond "\nNot in forage sense (#{not_in_sense.size}): #{not_in_sense.sort.inspect}"
    respond "\nNot in tags (#{not_in_tags.size}): #{not_in_tags.sort.inspect}"

  end


  case type
  when ADD
    Tags.add(*tags) && Tags.list()
  when REMOVE
    Tags.remove(*tags) && Tags.list()
  when LIST
    Tags.list()
  when ADD_ONE
    Tags.add(tags.join(" "))
  when REMOVE_ONE
    Tags.remove(tags.join(" ")) && Tags.list()
  when SENSE
    @ranger_sense_only = true   if tags.include?('climate')
    @skip_sensed       = false  if tags.include?('noskip')
    Tags.sense()
  when CRAWL
    anchor = Map.current.id
    @ignore_tags = (@ignore_tags - (Map.current.tags & @crawl_if_current_tags)).compact
    @outside_only      = true   if tags.include?('outside')
    @ranger_sense_only = true   if tags.include?('climate')
    @ranger_rooms_only = true   if tags.include?('ranger')
    @skip_sensed       = false  if tags.include?('noskip')
    tags = tags - ['outside','climate', 'ranger','noskip']
    Tags.crawl(*tags.join(" "))
    Script.run('go2',anchor.to_s) if Map.current.id != anchor
  when PLANEWALKER
    @outside_only      = true   if tags.include?('outside')
    @ranger_sense_only = true   if tags.include?('climate')
    @ranger_rooms_only = true   if tags.include?('ranger')
    @skip_sensed       = false  if tags.include?('noskip')
    tags = tags - ['outside','climate', 'ranger','noskip']
    Tags.planewalker()
  when TIME_OF_DAY
    Tags.log(Tags.time_of_day)
  when DIFF
    Tags.diff
  when LIST_ROOMS
    Tags.list_rooms(*tags.join(" "))
  when API
    # nothing
  else
    respond <<-HELP
  usage:
    ;tags --add [tag1] [tag2]...[tagN]   adds a list of tags to the room
    ;tags --rm  [tag1] [tag2]...[tagN]   removes a list of tags from the room
    ;tags --sense                        attempt to use your survival skill to add missing herbs to a room
    ;tags --ls                           shows all current tags for the room
    ;tags --crawl current                crawl the current area using survival sense
    ;tags --crawl <location>             crawl an area using survival sense, pauses before moving more than 100 rooms
    ;tags --crawl <location> confirm     crawl an area and don't pause when moving more than 100 rooms away
    ;tags --crawl <location> all         crawl an area and don't skip recently sensed rooms
    ;tags --list <location>              list rooms for a location, whether to skip or crawl

  crawl options (can be mixed and matched)
    ;tags --crawl ranger                  # only does rooms that have `nil` for climate or terrain
    ;tags --crawl climate                 # only does ranger sense for climate/terrain
    ;tags --crawl outside                 # only does outside rooms
    ;tags --crawl noskip                  # doesn't skip rooms already sensed

  single tag operations:
    ;tags + [tag]                        add a single tag, no need to use quotes
    ;tags - [tag]                        remove a single tag, no need to use quotes

  for --add/--rm operations with spaces in the name, you must use quotes
    ;tags --add "small tomato" "onion skin"
    ;tags --rm "small tomato" "onion skin"
    HELP
  end
end
