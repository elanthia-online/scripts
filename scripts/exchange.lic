=begin
  exchange.lic: Exchanges boxes at the locksmith pool

        author: Deysh
    maintainer: elanthia-online
  contributers: Deysh, Athias
          game: Gemstone
          tags: lockpool,loot
       version: 1.1.1

  v1.1.1 (2021-8-17)
    - Implemented additional empty hand checking
    - Consolidated variable checking
    - Added help section
  v1.1.0 (2021-08-09)
    - Reconciliation of updated versions
    - Added variable for tip_percent
  v1.0.0 (2021-06-02)
    - Original Upload based on exchange used in Shattered
=end

VERSION = '1.1.1'
NAME = script.name

class Exchange
  attr_accessor :lootsack, :gemsack, :mainbank, :return_room, :put_regex, :get_regex , :open_regex, :tip, :type, :containers


  def initialize(parameter)
  
    if parameter =~ /ver/
      if NAME != "exchange"
        sVersion = "This version of ;exchange has been renamed to ;#{NAME}: ver #{VERSION.to_s}"
      else
        sVersion = "The current version of ;#{NAME}: #{VERSION.to_s}"
      end
      msg " "
      msg sVersion
      msg " "
      exit
    end
    
    if parameter =~ /help|setup/
      help() 
      exit
    end
    
    setting_check
         
    #Main Sequence
    some_constants
    required_scripts
    inv_setup
    tip_setup
    bank_setup
 
    go2("locksmith pool")

    check_hands      
    give_boxes
    
    check_hands
    return_boxes 
    
    check_hands
    
    go2(@return_room)
    
  end
  
  def help
    
    will_work = true
    
    @lootsack = (GameObj.inv.find { |obj| obj.noun == UserVars.lootsack })
    
    if @lootsack.id
      lootsack_status = ""
    else
      lootsack_status = "--Needs Fixed"
      will_work = false
    end
    
    @gemsack = (GameObj.inv.find { |obj| obj.noun == UserVars.gemsack })
    
    if @gemsack.id
      gemsack_status = ""
    else
      gemsack_status = "--Needs Fixed"
      will_work = false
    end
    
    
    if UserVars.exchange_tip =~ /([0-9,]+)\s+(\w+)/ 
      @type = $2
      @tip = $1.delete(",").to_i
      tip_issue = true if (@tip > 100 && @type == "percent") || (@tip < 10 && @type == "percent") || @tip < 0 && @type =~ /coin/     
    end
    
    if tip_issue || !UserVars.exchange_tip || @type !~ /coin|percent/ 
      tip_status = "--Needs Fixed"
      will_work = false
    else
      tip_status = ""
    end
    
    if UserVars.mainbank =~ /mist|icemule|landing|solhaven|illistim|vaalor|zul|teras|kraken|bank/
      bank_status = ""
    else
      bank_status = "--Needs Fixed"
      will_work = false
    end
    
    msg ' '
    msg 'Exchange is a basic script to give and return boxes from the locksmith pool'
    msg ' '
    msg 'It will withdrawl coins for a tip based on the exchange_tip variable'
    msg ' ' 
    msg 'Tip can be a percent or coins'
    msg ' '
    msg 'If using a percent   ;vars set exchange_tip=(#) percent'
    msg 'or using coins       ;vars set exchange_tip=(#) coins'
    msg ' '
    msg ' '
    msg 'A default bank can be set or a specific one'
    msg ' '
    msg '  ;vars set mainbank=(my_mainbank)'
    msg 'acceptable locations:'
    msg '      mist = Four Winds Bank'
    msg '   icemule = Icemule Trace Bank'
    msg '   landing = First Elanith Secured Bank'
    msg '  solhaven = Vornavis Bank of Solhaven'
    msg '  illistim = United City-States Bank (Ta\'Illistim)'
    msg '       zul = Bank of Kharag \'doth Dzulthu'
    msg '    vaalor = United City-States Bank (Ta\'Illistim)'
    msg '    kraken = Kraken\'s Fall Bank'
    msg '     teras = Great Bank of Kharam-Dzu'
    #msg '     river = Bank of Torre County`
    msg ' '
    msg '      bank = closest available bank'
    msg ' '
    msg "You'll also need to set your lootsack and gemsack"
    msg ' '
    msg '  ;vars set lootsack=(my_lootsack)'
    msg '  ;vars set gemsack=(my_gemsack)'
    msg ' '
    msg '     Current Settings'
    msg '------------------------------- '
    msg " tip:      #{UserVars.exchange_tip} #{tip_status}"
    msg " bank:     #{UserVars.mainbank}  #{bank_status}"
    msg " lootsack: #{UserVars.lootsack}  #{lootsack_status}"
    msg " gemsack:  #{UserVars.gemsack}   #{gemsack_status}"
    msg ' '
  
    if !will_work
      msg "One or more variables are wrong. The script is NOT likely to work!"
      msg ' '
    else
      msg 'Setting look good. Script should work!'
      msg ' '
    end
  
  end
  
  def setting_check
    #checks to see if all the vars are set and likely to work
    will_work = true
    
    @lootsack = (GameObj.inv.find { |obj| obj.noun == UserVars.lootsack })
    
    if @lootsack.id
      lootsack_status = ""
    else
      lootsack_status = "--Needs Fixed"
      will_work = false
    end
    
    @gemsack = (GameObj.inv.find { |obj| obj.noun == UserVars.gemsack })
    
    if @gemsack.id
      gemsack_status = ""
    else
      gemsack_status = "--Needs Fixed"
      will_work = false
    end
    
    
    if UserVars.exchange_tip =~ /([0-9,]+)\s+(\w+)/ 
      @type = $2
      @tip = $1.delete(",").to_i
      tip_issue = true if (@tip > 100 && @type == "percent") || (@tip < 10 && @type == "percent") || @tip < 1 && @type =~ /coin/     
    end
    
    if tip_issue || !UserVars.exchange_tip || @type !~ /coin|percent/ 
      tip_status = "--Needs Fixed"
      will_work = false
    else
      tip_status = ""
    end
    
    if UserVars.mainbank =~ /mist|icemule|landing|solhaven|illistim|vaalor|zul|teras|kraken|bank/
      bank_status = ""
    else
      bank_status = "--Needs Fixed"
      will_work = false
    end
    
    
    
    if !will_work
      msg ' '
      msg ' '
      msg "One or more variables are wrong."
     
      
      if lootsack_status == "--Needs Fixed" 
        msg ' '
        msg '------------------------------------- '
        msg ' '
        msg " Lootsack current setting: #{UserVars.lootsack}  #{lootsack_status}"
        msg ' '
        msg '   ;vars set lootsack=(my_lootsack)'
        msg ' '
        msg '------------------------------------- '
        msg ' '
      end
      
      if gemsack_status == "--Needs Fixed"
        msg ' '
        msg '------------------------------------- '
        msg ' '
        msg " Gemsack current setting: #{UserVars.gemsack}  #{gemsack_status}"
        msg ' '
        msg '   ;vars set gemsack=(my_gemsack)'
        msg ' '
        msg '------------------------------------- '
        msg ' '
      end
      
      if tip_status == "--Needs Fixed"
        msg ' '
        msg '------------------------------------- '
        msg ' '
        msg " Tip current setting: #{UserVars.exchange_tip} #{tip_status}"
        msg '   Tip can be a percent or coins'
        msg ' '
        msg '   If using a percent   ;vars set exchange_tip=(#) percent'
        msg '   or using coins       ;vars set exchange_tip=(#) coins'
        msg ' '
        msg '------------------------------------- '
        msg ' '
      end
      
      if bank_status == "--Needs Fixed"
        msg ' '
        msg '------------------------------------- '
        msg ' '
        msg " Bank current setting: #{UserVars.mainbank}  #{bank_status}"     
        msg ' '
        msg '   ;vars set mainbank=(my_mainbank)'
        msg '     Acceptable Locations'
        msg '      mist = Four Winds Bank'
        msg '   icemule = Icemule Trace Bank'
        msg '   landing = First Elanith Secured Bank'
        msg '  solhaven = Vornavis Bank of Solhaven'
        msg '  illistim = United City-States Bank (Ta\'Illistim)'
        msg '       zul = Bank of Kharag \'doth Dzulthu'
        msg '    vaalor = United City-States Bank (Ta\'Illistim)'
        msg '    kraken = Kraken\'s Fall Bank'
        msg '     teras = Great Bank of Kharam-Dzu'
        #msg '     river = Bank of Torre County`
        msg ' '
        msg '      bank = closest available bank'
        msg ' '
        msg '------------------------------------- '
        msg ' '
      end
      
      msg " Updating settings to defaults after 20 seconds and running script"
      
      sleep 20
      
      
    end  
    
  end
  
  def some_constants
  
    @return_room = Room.current.id
  
    @put_regex = /^You (?:put|(?:discreetly )?tuck|attach|attempt to shield your|place|.* place|slip|wipe off the blade and sheathe|absent-mindedly drop|carefully add|find an incomplete bundle|untie your drawstring pouch)|That is closed|It's closed|It^The .+ is already a bundle|^Your bundle would be too large if you if you tried to add that|^The .+ is too large to be bundled\.|^As you place your .+ inside your .+, you notice another .+ inside the .+ and carefully arrange the two .+ into a neat bundle\.|If you wish to continue, throw the item away again within fifteen seconds|you feel pleased with yourself at having cleaned up the surrounding area|over your shoulder|two items in that location/
    @get_regex = /^You (?:shield the opening of .*? from view as you |discreetly |carefully |deftly )?(?:remove|draw|grab|reach|slip|tuck|retrieve|already have|unsheathe|detach|swap)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand|^You already have that/ 
    @open_regex = /^You open|^That is already open\.$|^There doesn't seem to be any way to do that\.$|^What were you referring to\?|^I could not find what you were referring to\.|You pull the long strips of leather|With a flick of your wrist/
	
  end

  def required_scripts
  
    required_scripts = ["go2"]

    required_scripts.each { |cur_script|
      unless Script.exists?(cur_script)
        msg("Script #{cur_script} is required, downloading now")
        do_client(";repository download #{cur_script}.lic")
        wait_while { running?('repository') }
        sleep 0.5
      end
    }
 
  end

  def inv_setup
  
    @lootsack = (GameObj.inv.find { |obj| obj.noun == UserVars.lootsack })
    @gemsack = (GameObj.inv.find { |obj| obj.noun == UserVars.gemsack })
   
    @containers = []
    exist =  %r{<a exist=(?:'|")(?<id>.*?)(?:'|") noun=(?:'|")(?<noun>.*?)(?:'|")>(?<name>.*?)</a>}

    lines = quiet_command(
            "inventory containers",
            /You are wearing/					
          )		

    str = lines[0].split(",")

    str.each do |line|
      line.scan(exist).each do |matches| @containers << GameObj.new(*matches) end
    end
  
    if !@lootsack
      temp_stow = []
      stow_exist =  %r{<a exist=(?:'|")(?<id>.*?)(?:'|") noun=(?:'|")(?<noun>.*?)(?:'|")>(?<name>.*?)</a>}
      stow_list = quiet_command(
        "stow list",
        /<output class="mono"\/>/		     
      )
      
      stow_list.each{ |item|       
        item.scan(stow_exist).each do |matches| temp_stow << GameObj.new(*matches) end        
      }
        
      @lootsack = temp_stow[0]  
                  
    end
  
    if !@gemsack
      @gemsack = @lootsack
    end
  
  end

  def tip_setup
  
    if UserVars.exchange_tip =~ /([0-9,]+)\s+(\w+)/ 
      @type = $2
      @tip = $1.delete(",").to_i
      @type = "" if @type == "coins"
    else
      @type = "percent"
      @tip = 10
    end
   
  end

  def bank_setup
  
    userbank = UserVars.mainbank
    
    if !userbank
      userbank = "bank"
    end
  
    #mainbank check
    bank_room = {
      "mist"        => "3672",
      "icemule"     => "3370",
      "landing"     => "400",
      "solhaven"    => "5710",
      "illistim"    => "11",
      "zul"         => "9472",
      "vaalor"      => "3519",
      "teras"       => "1838",
      "bank"        => "bank"
    }
    
    # Updates for Mapdb instance differences
    if XMLData.game =~ /^GSF/
      bank_room["kraken"] = "21541"
    elsif XMLData.game =~ /^GSX/
      bank_room["kraken"] = "27961"
    else
      bank_room["kraken"] = "28870"
    end

    @mainbank = bank_room[userbank]
 
  end

  def have_disk
    disk = nil
    unless disk = GameObj.loot.find { |o| o.name =~ /#{Char.name} (?:disk|coffin)$/ }
      # if there is no disk, look back into the buffer to see if a disk was following recently
      if reget.any? { |line| line =~ /^Your (?:disk|coffin) arrives, following you dutifully\.\r?$/ }
        # if there was a disk, wait for it to arrive
        50.times {
          break if GameObj.loot.any? { |o|
            o.name =~ /#{Char.name} (?:disk|coffin)$/
          }
          sleep 0.1
        }
        # find the disk again
        disk = GameObj.loot.find { |o| o.name =~ /#{Char.name} (?:disk|coffin)$/ }
      end
    end
    
    return disk
  
  end

  def check_hands
  
    return unless checkright || checkleft
   
    disk = have_disk
    
    #trying to free up hands using a disk if holding a box 
    if disk
      hands_right(disk) if GameObj.right_hand.type == "box"
      hands_left(disk) if GameObj.left_hand.type == "box"
    end
    
    #Trying lootsack next
    hands_right(@lootsack) if checkright
    hands_left(@lootsack) if checkleft
      
    #Try all the containers
    @containers.each { |container|
      break if !checkright && !checkleft          
      hands_right(container) if checkright
      hands_left(container) if checkleft    
    }    

    #drop as last resort  
    dothistimeout "drop ##{GameObj.right_hand.id}", 3, /You drop/ if  checkright
    dothistimeout "drop ##{GameObj.left_hand.id}", 3, /You drop/ if  checkleft
   
  end

  def hands_right(container) 
    begin
      result = dothistimeout "put ##{GameObj.right_hand.id} in ##{container.id}", 3, @put_regex if checkright
        if result =~ /That is closed|It's closed/
          dothistimeout "open ##{container.id}", 5, /^You open/
          raise
        end					
    rescue
      retry
    end 
  end
  
  def hands_left(container)
    begin
      result = dothistimeout "put ##{GameObj.left_hand.id} in ##{container.id}", 3, @put_regex if checkleft
        if result =~ /That is closed|It's closed/
          dothistimeout "open ##{container.id}", 5, /^You open/
          raise
        end					
    rescue
      retry
    end 
  end

  def msg(msg)
    if $frontend == 'stormfront' || $frontend == 'profanity' 
      _respond "\<pushBold\/\>#{msg}\<popBold\/\>"
    else 
      _respond "#{msg}"
    end
  end

  def quiet_command(command, start_pattern, end_pattern = /<prompt/, include_end = false, timeout=5)
    result = []
    name = "Exchange:: -#{Time.now.tv_sec}.#{Time.now.tv_usec}-#{Random.rand(10000)}"

    filter = false

    begin
      Timeout::timeout(timeout, Interrupt) {
        DownstreamHook.add(name, proc {|xml|
          if filter
            if xml =~ end_pattern
              DownstreamHook.remove(name)
              filter = false
            else
              # result << xml.rstrip
              next(nil)
            end
          elsif xml =~ start_pattern
            filter = true
            # result << xml.rstrip
            next(nil)
          else
            xml
          end
        })
        status_tags
        fput command

        until (xml = get) =~ start_pattern; end
        result << xml.rstrip
        until (xml = get) =~ end_pattern
          result << xml.rstrip
        end
        if include_end
          result << xml.rstrip
        end
        status_tags
      }
    ensure
      DownstreamHook.remove(name)
    end
    return result
  end

  def check_silver
    silvers = 0

    lines = quiet_command(
      "info",
      /Name: <a exist=.*? noun/
    )

    lines.each do |line|
      next unless line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9,]+)/
      silvers = $1.delete(",").to_i
    end

    return silvers
  end

  def withdraw_silver(amount, starting_room)
    go2(@mainbank)
    fput "withdraw #{amount} silvers"
    
      curr_silver = check_silver
      if curr_silver < amount  #must not have any coin in the bank. Default to 1 coin
        @type = ""
        @tip = 1
      end
    
    go2(starting_room)
  end

  def go2(cur_loc)
    set_locations = {
      "nexus"   => "20239", #GSF
      "cubby"   => "20728", #GSF
      "garrett" => "20727", #GSF
      "fwi"     => "3668",
      "park"    => "288",
    }

    if set_locations.include? cur_loc
      location = set_locations[cur_loc]
    else
      location = cur_loc
    end

    return if Room.current.id == location.to_i or Room.current.tags.include?(location)

    fput "unhide"if hidden? or invisible?
    waitrt?
    waitcastrt?
    Script.run("go2", "#{location.to_s} --disable-confirm", flags = { :quiet => true })
    sleep 0.2
  end

  def in_hand(item)
    if item.class == GameObj
      return true if GameObj.right_hand.id == item.id || GameObj.left_hand.id == item.id
    elsif item.class == Integer
      return true if GameObj.right_hand.id.to_i == item || GameObj.left_hand.id.to_i == item
    else
      return true if GameObj.right_hand.name =~ /#{item}/ || GameObj.left_hand.name =~ /#{item}/
    end
    return false
  end

  def trash_this(item)

    trash = GameObj[/Sarlacc pit|wastebasket|Recycle Bin|barrel|battered casket|wooden crate/]

    if trash
      begin
        result = dothistimeout "put ##{item.id} in ##{trash.id}", 5, /Are you crazy|^You put|As you place|^You need a free hand to pick that up\.|It's closed!|^Your .*? won't fit in .*?\.$|^I could not find what you were referring to\.|^Do you want to put that in or on|If you wish to continue/
          if result =~ /If you wish to continue/
            raise
          end
          fput "drop #{item}" if result =~ /Are you crazy/
      rescue
        retry
      end
    else
      fput "drop #{item}"
    end
    sleep 0.1

    fput "stow right" if checkright
    fput "stow left" if checkleft
    
    fput "drop right" if GameObj.right_hand.type == "box"
    fput "drop left" if GameObj.left_hand.type == "box"
    
  end

  def gather_my_loot(box)

    if box.class == GameObj
      get_it = "get ##{box.id}"
    elsif box.class == Integer
      get_it = "get ##{box}"
    else
      get_it = "get #{box}"
    end

    while !in_hand(box)
      result = dothistimeout "get ##{box.id}", 2, /^You|Get what/
      break if result =~ /^You can't pick that up\.$|Get what?|crumbles and decays away.$|crumbles into a pile of dust!$/
      sleep 0.1
    end

    if in_hand(box) 
      res = dothistimeout("open ##{box.id}", 3, /open|locked/)
      if box.contents.nil?
        dothistimeout("look in ##{box.id}", 3, /^In the/)
        30.times { break if not box.contents.nil?; sleep 0.10 }
      end

      for obj in box.contents
        next if obj.name =~ /doomstone|oblivion quartz|black ora|urglaes fang|steel spring/
        next if obj.type =~ /cursed|junk|food/
        #next if obj.type =~ /clothing|herb/
        #next if obj.name =~ /drake|feras/
        if obj.name =~ /coins/i
          get_result = dothistimeout "get coins from ##{GameObj.right_hand.id}", 5, /^You gather the remaining|^Get what\?/
          echo 'fixme (open_solo coins)' unless get_result =~ /^You gather the remaining/
          waitrt?
        elsif obj.type =~ /gem/
          dothistimeout "_drag ##{obj.id} ##{@gemsack.id}", 3, @put_regex
        else
          dothistimeout "_drag ##{obj.id} ##{@lootsack.id}", 3, @put_regex 
        end
      end 
      trash_this(box) 
    end
    return
  end

  def give_boxes
    boxes = Array.new
    containers = Array.new
    disk = nil
    worker = GameObj[/worker|trickster|Jahck|woman|attendant|gnome|merchant|dwarf/]

    # Get list of containers
    GameObj.inv.each { |item|
      if GameObj.containers[item.id]
        containers.push(item)
      end
    }

    # Get boxes from containers
    containers.each { |bag|
      fput "look in ##{bag}" if bag.contents == nil
      bag.contents.find_all { |obj|
        boxes.push(obj) if obj.type =~ /box/
      }
    }

    # find the disk
    disk = have_disk

    if disk
      # the disk is assumed to be open; fix that here if you want
      # look in the disk if needed
      if disk.contents.nil?
        result = dothistimeout "look in ##{disk.id}", 5, /^In the|There is nothing|That is closed/
        if result =~ /That is closed/
          fput "open ##{disk.id}"
          fput "look in ##{disk.id}"
        end
      end
      
      boxes += disk.contents.to_a.find_all { |obj| obj.type =~ /box/ }
    end

    if worker
      boxpool_full = false
      boxes.each{|box|
        break if boxpool_full == true
        check_hands

        while !in_hand(box)
          result = dothistimeout "get ##{box.id}", 2, @get_regex
          break if result =~ /^You can't pick that up\.$|Get what?|crumbles and decays away.$|crumbles into a pile of dust!$/
          sleep 0.1
        end

        while in_hand(box)
          res = dothistimeout "give ##{worker.id} #{@tip} #{@type}", 3, /You don't have that much|takes your|is already unlocked|is already open|You are requesting a locksmith|You want a locksmith to open|Sorry, we're already holding as many boxes for you as we can\.|try that again with a box in your right hand|take care of that on your own/
          if res =~ /You don't have that much/
            if @tip == 1
              withdraw_silver(1,Room.current.id)
              curr_silver = check_silver
              if check_silver < 1
                msg "You don't have any silver in your bank, skipping box drop off!"
                boxpool_full = true 
              end
            else
              withdraw_silver(10000 - check_silver(),Room.current.id)
            end
          elsif res =~ /is already unlocked|is already open|take care of that on your own/
            fput "open ##{box.id}"
            gather_my_loot(box)
          elsif res =~ /Sorry, we're already holding as many boxes for you as we can\./ 
            check_hands               
            msg "NOTICE: The boxpool is full, you must go to a town locksmith"
            boxpool_full = true          
          elsif res =~ /try that again with a box in your right hand/
            newres = dothistimeout "swap", 3, /You can't swap in your condition!|You don't have anything to swap!/
            if newres =~ /You can't swap in your condition!/
              msg("Your arm is probably missing or something - go figure it out!")
              exit
            elsif newres =~ /You don't have anything to swap!/
              nil
            end
          end
        end
      }
    end
  end

  def return_boxes
    worker = GameObj[/worker|trickster|Jahck|woman|attendant|gnome|merchant|dwarf/]

     loop do
      res = dothistimeout "ask ##{worker.id} for return", 3, /We don't have any boxes|We don't seem to have that box|Alright, here's your/
      # no more boxes left
      if res !~ /Alright, here's your/
        break
      end

      box = nil
      if GameObj.right_hand.type =~ /box/
        box = GameObj.right_hand
      elsif GameObj.left_hand.type =~ /box/
        box = GameObj.left_hand
      else
        msg("failed to find the box you were supposed to get")
        break
      end

      gather_my_loot(box)

      sleep(0.50)
      end
  end
end



Exchange.new(script.vars[1])