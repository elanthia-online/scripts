=begin

  Logs raw XML output to lich\logs\<game code>-<char name>\<date>-<number>.xml
  starts a new file after 30,000 lines (somewhere around 1mb)

  SYNTAX:  ;logxml
           ;logxml --timestamp="%F %T %Z"
           ;autostart add --global logxml --timestamp=\"%F %T %Z\"
           log format based on https://apidock.com/ruby/DateTime/strftime

  Shamelessly stolen and slightly altered (to use XML) from Tillmen's log script.

  Messages from the client will be wrapped in <!-- CLIENT -->...<!-- ENDCLIENT --> tags.

       author: elanthia-online
 contributors: LostRanger, Xanlin, Tysong
         game: gs
      version: 0.5.0 (2023-03-31)

  changelog:
    0.5.0 (2023-03-31):
      * Rubocop code cleanup
      * Adjust filename to include hours, minutes, seconds
      * Save into subdirectories by year/month
      * Starts a new file when the day changes
      * Add log timestamp CLI option for non-DragonRealms
    0.4.1 (2019-12-28):
      * Implement 0.4, correctly.
    0.4 (2019-12-28):
      * ';logxml streams' will now include pushStream and popStream messages.  Note that this may be very, very noisy
        due to room window updates and such.
    0.3 (2017-04-24):
      * fix output including both XML and plaintext from downstream.
    0.2 (2017-04-23):
      * Indicate where full logging started in the log file (as opposed to contents from regetall).  Client data before
        this point can't be fully logged due to Lich not loading the script in time, so yell about it.
      * Use a more configuration-safe mechanism of complaining about not being trusted.  Also, explain why trust is
        needed.
=end

unless defined?(Script.current.want_script_output)
  echo 'Your version of Lich is too old for this script.'
  exit
end

unless (Gem::Version.new(RUBY_VERSION) > Gem::Version.new('2.0.0')) || $SAFE == 0
  echo "This script must be trusted to be allowed to write to log files."
  echo "You can trust it with the following command: #{$lich_char}trust #{script.name}"
  exit
end

hide_me
if defined?(get_settings)
  settings = get_settings
  stamp_enable = settings.log_timestamp
  stamp_format = settings.log_timestamp_format
end
Script.current.want_script_output = false
Script.current.want_upstream = true
Script.current.want_downstream = false
Script.current.want_downstream_xml = true

if Script.current.vars[0] =~ /\-\-timestamp="(.*)"/
  stamp_format = Regexp.last_match[1]
  stamp_enable = true
end

log_streams = Script.current.vars.include?("streams")

Thread.new {
  begin
    loop {
      Script.current.downstream_buffer.push "<!-- CLIENT -->#{upstream_get}<!-- ENDCLIENT -->"
    }
  rescue
    echo $!
  end
}

started = false
loop {
  dir = File.join(LICH_DIR, 'logs', "#{XMLData.game}-#{XMLData.name}", Time.now.strftime("%Y"), Time.now.strftime("%m"))
  FileUtils.mkdir_p(dir) unless File.exist?(dir)
  thisdate = Time.now.strftime("%Y-%m-%d")
  filename = File.join(dir, "#{Time.now.strftime("%Y-%m-%d_%H-%M-%S")}.xml")
  file = File.open(filename, 'a')
  file.sync = true
  file.puts "#{Time.now.strftime("%Y-%m-%d %I:%M%P").sub(/0([0-9]+\:)/) { "#{$1}" }}\n"
  unless started
    if (Time.now - $login_time) < 30
      file.puts(reget)
      file.puts "<!-- Above contents from reget; full logging now active -->\n"
    end

    echo "XML Logging started, currently logging to #{filename}"
    started = true
  end

  begin
    30000.times {
      line = get
      if log_streams or line !~ /^<(?:push|pop)Stream/
        unless defined?(stamp_enable)
          file.puts line
        else
          if stamp_enable
            file.puts "#{Time.now.strftime("#{stamp_format}")}: #{line}"
          else
            file.puts line
          end
        end
      end
      break if Time.now.strftime("%Y-%m-%d") != thisdate
    }
    file.puts "#{Time.now.strftime("%Y-%m-%d %H:%M:%S.%L %:z")}\n"
  ensure
    begin
      file.close
    rescue
      Lich.log "Can't close file!"
    end
  end
}
