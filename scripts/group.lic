=begin
  Group Count & Misc. Script

  SYNTAX - ;group <OPTION>

  Options Include:
    COUNT - count how many people total in group and not
     HOLD - attempt to group EVERYONE not currently in the group
   RANDOM - outputs group list randomized
   THRONE - outputs group list beginning with max of 2 sorcerers and 1 empath,
            randomizing remaining group members, and tails with the group leader
    SPLIT - shows current total of silvers and how it would be split based on group count
            can have two additional options shown below:
            ;group split <#WAYS> <WITHHOLD_AMMOUNT>

          todo: none
        author: elanthia-online
  contributors: Tysong
          name: group
          tags: group, reim, random, silvers, share, utility
       version: 3.2.0
      required: Lich >= 5.5.0

  changelog:
    3.2.0 (2022-11-15)
      Converted to a class to prevent namespace issues
    3.1.0 (2018-06-06)
      Sorted COUNT option lists
    3.0.0 (2017-09-24)
      Added HOLD option to group EVERYONE not in group currently
    2.0.0 (2017-09-21)
      Added SPLIT option and added a few more sorcerers/empaths to list
    1.0.0 (2017-07-19)
      Initial Release
=end

silence_me

class GroupUtil
  List_First  = Array[]
  List_Second = Array[]
  
  def self.groupcheck()
    group_count = 1
    group_members = Array[]
    group_leader = nil
    group_members.push("#{Char.name}")
    results = Lich::Util.quiet_command("group", /is following you\.|is the leader of your group\.|You are not currently in a group\./, /for a list of other options\./)
    results.each { |line|
      if line =~ /^(.*) is the leader of your group./
        group_leader = $1.split.first
        group_members.push($1)
        group_count += 1
      elsif line =~ /^(.*) is following you./
        group_leader = Char.name
        group_members.push($1)
        group_count += 1
      elsif line =~ /^(.*) is also a member of your group./
        group_members.push($1)
        group_count += 1
      elsif line =~ /You are not currently in a group./
        group_leader = Char.name
      end
    }
    return group_members, group_leader, group_count
  end

  def self.count
    non_group_members = Array[]
    group_members, group_leader, group_count = groupcheck()
    echo "Number of group members: #{group_count} of #{GameObj.pcs.count+1} PCs in room."
    echo "Missing #{GameObj.pcs.count.to_i + 1 - group_count.to_i} from group" if GameObj.pcs.count.to_i + 1 != group_count.to_i
    GameObj.pcs.each { |pc|
      non_group_members.push(pc.noun) if !(group_members.include? pc.noun)
    }
    echo "Ungrouped members: #{non_group_members.sort.join(", ")}" if GameObj.pcs.count.to_i + 1 != group_count.to_i
    echo "Grouped Members: #{group_members.sort.join(", ")}" if GameObj.pcs.count.to_i + 1 != group_count.to_i
    exit
  end
  
  def self.hold
    non_group_members = Array[]
    group_members, group_leader, group_count = groupcheck()
    echo "Number of group members: #{group_count} of #{GameObj.pcs.count+1} PCs in room."
    echo "Missing #{GameObj.pcs.count.to_i + 1 - group_count.to_i} from group" if GameObj.pcs.count.to_i + 1 != group_count.to_i
    GameObj.pcs.each { |pc|
      non_group_members.push(pc.noun) if !(group_members.include? pc.noun)
    }
    echo "Ungrouped members: #{non_group_members.sort.join(", ")}" if GameObj.pcs.count.to_i + 1 != group_count.to_i
    non_group_members.each { |member|
      fput "group #{member}"
    }
    exit
  end
  
  def self.random
    group_members, group_leader, group_count = groupcheck()
    echo "Randomized: #{group_members.shuffle!.join(', ')}"
    exit
  end
  
  def self.split(splits = nil, withhold_silvers = nil)
    group_members, group_leader, group_count = groupcheck()
    line = nil
    total_silvers = Lich::Util.silver_count
    echo "Total Silvers: #{total_silvers}"
    if splits
      splits = splits.to_i

      if withhold_silvers
        withhold_silvers = withhold_silvers.to_i
        total_silvers = total_silvers - withhold_silvers
      end

      split_silvers = ((total_silvers) / splits)
      remainder_silvers = ((total_silvers) % splits)
      echo "Withholding #{withhold_silvers}, Leaving #{total_silvers} Silvers To Share" if withhold_silvers		

      if splits != group_count
        echo "Missing #{splits - group_count} People"
        echo "Silvers Split #{splits}-Ways: #{split_silvers}"
        echo "#{total_silvers - (split_silvers * (splits - group_count)) - remainder_silvers} Silvers to Share for the #{group_count} out of #{splits} people here"
      else
        echo "Silvers Split #{splits}-Ways: #{split_silvers}"
      end
		
      echo "With #{remainder_silvers} Silvers Left Over" if remainder_silvers > 0
    else
      remainder_silvers = (total_silvers % group_count)
      echo "Silvers Split #{group_count}-Ways: #{total_silvers / group_count}"
      echo "With #{remainder_silvers} Silvers Left Over" if remainder_silvers > 0
    end
    exit
  end
  
  def self.reim
    group_members, group_leader, group_count = groupcheck()
    group_members.shuffle!
    present_first = group_members & List_First
    present_second = group_members & List_Second
    throne_list = Array[]

    until present_first.empty?
      present_first.shuffle!
      current_name = present_first.shift
      throne_list.push(current_name)
      group_members.delete("#{current_name}")
    end
    if !present_second.empty?
      present_second.shuffle!
      current_name = present_second.shift
      throne_list.push(current_name)
      group_members.delete("#{current_name}")
    end
    until group_members.empty?
      current_name = group_members.shift
      throne_list.push(current_name) if group_leader != current_name
    end
    throne_list.push(group_leader)
    echo "Order for attacking tonight is #{throne_list.join(', ')}"
    exit
  end
  
  def self.help
    respond "    SYNTAX - ;group <OPTION>"
    respond ""
    respond "    Options Include:"
    respond "       COUNT - count how many people total in group"
    respond "        HOLD - attempt to group EVERYONE not currently in the group"
    respond "      RANDOM - outputs group list randomized"
    respond "      THRONE - outputs group list beginning with max of 2 sorcerers and 1 empath,"
    respond "               randomizing remaining group members, and tails with the group leader"
    respond "       SPLIT - shows current total of silvers and how it would be split based on group count"
    respond "               can have two additional options shown below:"
    respond "               ;group split <#WAYS> <WITHHOLD_AMMOUNT>"
    exit
  end

end

case variable[1]
when /^count$/i
  GroupUtil.count
when /^hold$/i
  GroupUtil.hold	
when /^random$/i
  GroupUtil.random
when /^split$/i
  GroupUtil.split(variable[2], variable[3])	
when /^throne|^reim$/i
  GroupUtil.reim
else
  GroupUtil.help if defined?(script.name)
end
