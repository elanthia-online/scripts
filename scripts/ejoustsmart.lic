=begin

This script is a fork and rework of joustsmart2022 done by Elanthia-online to make it more generic
and to provide updates in capabilities.  All original contributors continue to be listed.

This script attempts to improve returns on the joust by recognizing knight behavior patterns.
Four patterns are known as of this version, there appears to be one to two more or the 5th is random.
It starts by assuming a specific path to perfect joust and then adjusts based on results.
There is plenty of randomness to the jousting so keep that in mind.  The behaviors could change,
no guarantees there.

See the help info for options and configurations.

        author: elanthia-online
  contributors: Tovklar, Elkiros, Rjex, Tysong, Dissonance, ChatGPT
          game: Gemstone
          tags: jousting, rumor woods
       version: 2.0.0

Changelog

  v2.0.0 - 4/15/2025
    - Refactored code and made into a module
    - Added support for stopping for XP absorbing
    - Added support for easy changing of faction year and faction names settings
    - Added more detailed help message
  v1.2.1
    - Updated for 2025 bee/bear
  v1.2.0
    - Updated for 2024 beetle/spider
    - Updated to use real ID#s instead of Lich ID#s
    - rubocop cleanup
  v1.1.1
    - Corrected help syntax
  v1.1.0
    - Updated Joustsmart to be year agnostic
=end

module EJoustSmart
  ##########
  # Update Here For Years
  ##########
  FACTION_YEAR = "2025"

  FACTION_1_NAME = "bee"
  FACTION_1_ROOM = 8208002 # Use real room id.  Generally this should not need to be changed.

  FACTION_2_NAME = "bear"
  FACTION_2_ROOM = 8208001 # Use real room id.  Generally this should not need to be changed.

  ##########
  # End Update Here For Years
  ##########

  UserVars.ignore_jousting_xp ||= "yes" # Default to be consistent with previous behavior
  UserVars.stop_jousting ||= "no" # Default to be consistent with previous behavior

  RPS = { "left" => "right", "center" => "left", "right" => "center" }

  MODEL1 = {
    "centerleft" => "left", "centerright" => "left",
    "leftcenter" => "right", "leftright" => "right",
    "rightleft" => "center", "rightcenter" => "center"
  }

  MODEL2 = {
    "centerleft" => "center", "centerright" => "left",
    "leftcenter" => "right", "leftright" => "left",
    "rightleft" => "center", "rightcenter" => "right"
  }

  MODEL3 = {
    "centerleft" => "left", "centerright" => "left",
    "leftcenter" => "left", "leftright" => "left",
    "rightleft" => "center", "rightcenter" => "left"
  }

  class Joust
    attr_accessor :knight_mode, :model_found, :randoming, :score, :count

    def initialize
      reset
    end

    def reset
      @knight_mode = MODEL1
      @model_found = false
      @randoming = false
      @score = 0
      @count = 0
    end

    def knight_logic(lm, lm2, lm3, lkm, lkm2, lkm3)
      if lkm == lkm2 && lkm2 == lkm3
        return RPS[lkm]
      elsif @score == 1
        return lm
      elsif @model_found
        if @score == 2 && !@randoming
          return RPS[@knight_mode[lm + lkm]]
        elsif switch_model?(MODEL3, lm2, lkm2, lm3, lkm3, lkm)
          @knight_mode = MODEL3
          return RPS[@knight_mode[lm + lkm]]
        elsif switch_model?(MODEL2, lm2, lkm2, lm3, lkm3, lkm)
          @knight_mode = MODEL2
          return RPS[@knight_mode[lm + lkm]]
        elsif switch_model?(MODEL1, lm2, lkm2, lm3, lkm3, lkm)
          @knight_mode = MODEL1
          return RPS[@knight_mode[lm + lkm]]
        else
          @randoming = true
          return %w[left center right].sample
        end
      else
        if detect_model?(MODEL2, lm2, lkm2)
          @knight_mode = MODEL2
          @model_found = true
        elsif detect_model?(MODEL3, lm2, lkm2)
          @knight_mode = MODEL3
          @model_found = true
        elsif detect_model?(MODEL1, lm2, lkm2)
          @knight_mode = MODEL1
          @model_found = true
        end

        return RPS[@knight_mode[lm + lkm]]
      end
    end

    private

    def switch_model?(model, lm2, lkm2, lm3, lkm3, lkm)
      @knight_mode != model && model[lm2 + lkm2] == lkm && model[lm3 + lkm3] == lkm2
    end

    def detect_model?(model, lm2, lkm2)
      model[lm2 + lkm2] && @score < 2
    end
  end

  module_function

  def tourney_loop(faction)
    joust = Joust.new

    loop do
      # First thing we should do is see if we have more markers left, because if we don't the rest doesn't matter!
      if dothistimeout("look at my marker", 2, /Bearer entitled to entry into Rumor Woods./) == nil
        respond "You are out of markers!"
        exit
      end

      # Waiting to absorb XP
      if UserVars.ignore_jousting_xp != "yes"
        while percentmind > 90
          echo "******* Mind #{percentmind}%; over 90%.  Waiting 30 seconds..."
          sleep 30
        end
      end

      # Travel to the correct room, try upto 5 times before giving up
      travelRetry = 0
      while Room.current.id != Room[Map.ids_from_uid(faction).first].id
        Script.run("go2", "u#{faction}", quiet: true)

        travelRetry += 1

        if travelRetry > 5
          respond "Unable to get to the #{faction} room, exiting."
          exit
        end
      end

      # Check if we have a marker and get it if we do
      unless dothistimeout("get marker", 2, /You remove a|You already have that/) =~ /You remove a|You already have that/
        if checkright != "marker" && checkleft != "marker"
          echo "Out of markers!"
          exit
        end
      end

      moves = { current: "left", prev1: "left", prev2: "left" }
      knight_moves = { current: "unknown", prev1: "unknown", prev2: "unknown" }

      joust.reset

      # Start the process
      fput "go entry table"
      if !Vars.inv.nil?
        fput "put my marker in my #{Vars.inv}"
      else
        fput "stow my marker"
      end

      fput "glance"
      pause 2

      if !(checkleft.nil? && checkright.nil?)
        echo "Empty your hands! Make sure you have a lootsack set too."
        exit
      end

      dothis "look in paddock", /In the enclosed paddock/
      GameObj.loot.find { |obj| obj.name =~ /paddock/ }.contents.find { |obj|
        fput "get #{obj.noun} from paddock"
      }

      dothis "look on rack", /On the large weapon rack you see/
      GameObj.loot.find { |obj| obj.name =~ /rack/ }.contents.find { |obj|
        fput "get #{obj.noun} from rack"
      }

      fput "look on display", /On the shield display you see/
      GameObj.loot.find { |obj| obj.name =~ /display/ }.contents.find { |obj|
        fput "get #{obj.noun} from display"
      }

      fput "go entry table"
      waitfor "Tourney"
      fput "shout"

      loop do
        result = waitfor("AIM LEFT, AIM CENTER, or AIM RIGHT", "A jousting attendant says", /appears to be aiming.+?to the (right|left|center) of your/)
        if (match = result.to_s.match(/appears to be aiming.+?to the (right|left|center) of your/))
          temp_score = waitfor(/A jousting herald announces.+?(0|1|2)/).match(/A jousting herald announces.+?(0|1|2)/)[1].to_i
          joust.score = temp_score

          moves[:prev2] = moves[:prev1]
          moves[:prev1] = moves[:current]
          knight_moves[:prev2] = knight_moves[:prev1]
          knight_moves[:prev1] = knight_moves[:current]
          knight_moves[:current] = match[1]

          moves[:current] = joust.knight_logic(moves[:current], moves[:prev1], moves[:prev2],
                                               knight_moves[:current], knight_moves[:prev1], knight_moves[:prev2])
        elsif result =~ /AIM LEFT, AIM CENTER, or AIM RIGHT/
          fput "aim #{moves[:current]}"
          joust.count += 1
        else
          fput "open my pouch"
          fput "look in my pouch"
          pause 2
          fput "empty my pouch in my #{Vars.lootsack}"
          pause 1 # a slight lag here will cause the script to break and empty usually if not always has RT
          waitrt?
          fput "drop my pouch"
          pause 2
          break
        end
      end

      # Check if we're going to keep going or if we're told to stop
      if UserVars.stop_jousting == "yes"
        echo "Var stop_jousting set to yes, resetting to no and exiting."
        UserVars.stop_jousting = "no"
        exit
      end
    end
  end

  def self.show_help
    respond "** ** ** Jousting ** ** **"
    respond "** ** Version: #{(Script.list.find { |x| x.name == Script.current.name }.inspect)[/version: (\d+\.\d+\.\d+)/i, 1]} ** **"
    respond ""
    respond "Jousting has two factions.  For #{FACTION_YEAR} the factions are #{FACTION_1_NAME} and #{FACTION_2_NAME}}."
    respond "USAGE: '#{$lich_char}#{Script.current.name} #{FACTION_1_NAME.downcase}' or '#{$lich_char}#{Script.current.name} #{FACTION_2_NAME.downcase}'"
    respond ""
    respond "If #{FACTION_YEAR} is not the current year, please update the script."
    respond ""
    respond "To stop the script from doing another run after this one:  "
    respond "   #{$lich_char}vars set stop_jousting=yes"
    respond "this gets auto-reset to no after the run finishes as the script exits."
    respond
    respond "By default the script will run endlessly until you run out of markers."
    respond "You can set it to wait until your mind is less than 90% by:"
    respond "   #{$lich_char}vars set ignore_jousting_xp=no"
    respond "   or #{$lich_char}#{Script.current.name} absorb_xp_first"
    respond "You can set it to ignore your mind state by:"
    respond "   #{$lich_char}vars set ignore_jousting_xp=yes"
    respond "   or #{$lich_char}#{Script.current.name} ignore_jousting_xp"
    respond ""
    respond "You may set where you want to store your marker by setting:"
    respond "   #{$lich_char}vars set inv=<container>"
    respond "if you leave this unset, the marker will be stowed."
    respond ""
    respond "Prizes will be placed in your lootsack: #{Vars.lootsack}"
    respond "if you want to change that, then: "
    respond "   #{$lich_char}vars set lootsack=<container>"
  end

  if Script.current.vars[1].downcase == FACTION_1_NAME.downcase
    self.tourney_loop(FACTION_1_ROOM)
  elsif Script.current.vars[1].downcase == FACTION_2_NAME.downcase
    self.tourney_loop(FACTION_2_ROOM)
  elsif Script.current.vars[1].downcase =~ /help/
    self.show_help
  elsif Script.current.vars[1].downcase =~ /ignore_jousting_xp/
    UserVars.ignore_jousting_xp = "yes"
    respond "Jousting will continue and XP status will be ignored."
  elsif Script.current.vars[1].downcase =~ /absorb_xp_first/
    UserVars.ignore_jousting_xp = "no"
    respond "XP will be absorbed before continuing jousting."
  else
    self.show_help
  end
end
