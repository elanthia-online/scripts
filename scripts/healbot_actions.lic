# quiet
=begin

  healbot_actions.lic: Companion script to healbot_core - maintains collection of commands

        author: Elanthia-Online
  contributors: Athias
          game: Gemstone
          tags: utility, shattered, automated
       version: 1.2.0
      required: Lich >= 4.6.58
        source: https://github.com/elanthia-online/scripts

  notes:
    This script is intended to be completely automated
    AFK scripting a violation of ToS, and this script is only intended for use in Shattered

  Healbot Actions:
     eatbread - eats mana bread if needed
    givebread - give mana bread to (character)
     healdown - healwounds until they are rank 1 or less
     sendmana - send mana to (character)
     transfer - transfer wounds from (character)

=end

# hide_me
# silence_me

before_dying { DownstreamHook.remove("hb_appraise") }

# Variables
hb_command = script.vars[1]
hb_target = script.vars[2]
healbot_actions = ["eatbread", "givebread", "healdown", "sendmana", "transfer", "waggleme"]

# Set default Variables
if !UserVars.healbot
  echo "No healbot variables - Initializing new"
  UserVars.healbot = Hash.new
  UserVars.healbot = {
    "custom_bread"   => "manna bread",
    "enable_buffs"   => false,          # Enable buffing true = on
    "enable_msgs"    => true,           # Enable messaging true = on
    "enable_include" => false,          # Use include list true = on, false = use exclude list
    "list_include"   => ['Athias'],
    "list_exclude"   => ['Drasik'],
    "text_buffing"   => "Buffs incoming!",
    "text_eatbread"  => "I'm hungry!",
    "text_givebread" => "Here's some mana bread!",
    "text_healdown"  => "I need to heal down a bit",
    "text_lowmana"   => "I'm running low on mana",
    "text_transfer"  => "You are healed!",
  }
end

# exclude_test
if UserVars.healbot['enable_include'] == true
  if UserVars.healbot['list_include'].include?(hb_target)
    echo "hb_actions: #{hb_target} approved"
  else
    echo "hb_actions: #{hb_target} not on include list"
    exit
  end
elsif UserVars.healbot['list_exclude'].include?(hb_target)
  echo "hb_actions: #{hb_target} on exclude list"
  exit
end

# Commands Class
#
# defines all of the commands that
class Commands
  ####################
  # command eatbread #
  ####################

  def eatbread(_character)
    if checkright != nil
      if checkleft != nil
        if GameObj.left_hand.noun =~ /bread|biscuit/
          fput "drop left"
        else
          respond "*****"
          respond "* ERROR: Holding multiple items, please check"
          respond "*****"
          exit
        end
      end
    end
    if Spell[203].affordable?
      res = dothistimeout "prep 203", 2, /Manna spell/
      unless res =~ /Manna spell/
        exit
      end

      # messaging
      fput "'#{UserVars.healbot['text_eatbread']}" if UserVars.healbot['enable_msgs']

      res = dothistimeout "summon #{UserVars.healbot['custom_bread']}", 2, /then falls into your left hand.|then falls into your right hand./
      if res =~ /then falls into your left hand./
        # cur_bread = GameObj.left_hand.noun
        until checkleft == nil
          dothistimeout "eat my #{GameObj.left_hand.noun}", 2, /You take a bite of your/
          sleep 0.2
        end
      elsif res =~ /then falls into your right hand./
        # cur_bread = GameObj.right_hand.noun
        until checkright == nil
          dothistimeout "eat my #{GameObj.right_hand.noun}", 2, /You take a bite of your/
          sleep 0.2
        end
      else
        exit
      end
    end
  end

  #####################
  # command givebread #
  #####################

  def givebread(character)
    if checkright != nil
      if checkleft != nil
        if GameObj.left_hand.noun =~ /bread|biscuit|crackers/
          fput "drop left"
        else
          respond "*****"
          respond "* ERROR: Holding multiple items, please check"
          respond "*****"
          exit
        end
      end
    end

    if Spell[203].affordable?

      res = dothistimeout "prep 203", 2, /Manna spell/
      unless res =~ /Manna spell/
        exit
      end

      res = dothistimeout "summon #{UserVars.healbot['custom_bread']}", 2, /then falls into your left hand\.|then falls into your right hand\./
      if res =~ /then falls into your left hand\./
        cur_bread = GameObj.left_hand.noun
        cur_hand = "left"
      elsif res =~ /then falls into your right hand\./
        cur_bread = GameObj.right_hand.noun
        cur_hand = "right"
      else
        exit
      end

      fput "say ::#{character} #{UserVars.healbot['text_givebread']}" if UserVars.healbot['enable_msgs']
      accepted = dothistimeout "give my #{cur_bread} to #{character}", 4, /has accepted your offer and is now holding/
      if !accepted
        fput "cancel"
        fput "put #{cur_hand} in fissure"
      end
    end
  end

  ####################
  # command healdown #
  ####################

  def healdown(_character)
    # flavor messaging
    fput "'#{UserVars.healbot['text_healdown']}" if UserVars.healbot['enable_msgs']
    dothistimeout "release", 2, /You don't have a prepared spell to release!|You feel the magic of your spell rush away from you./

    leave_minors = ["neck", "chest", "back", "abdomen", "right leg", "left leg", "right arm", "right leg"]

    cure_wound = proc { |loc|
      if loc =~ /right/
        loc = loc.gsub(/(?<=[a-z])(?=[A-Z])/, ' ')
      elsif loc =~ /left/
        loc = loc.gsub(/(?<=[a-z])(?=[A-Z])/, ' ')
      elsif loc =~ /nsys/
        loc = "nerves"
      end
      if mana < 20
        fput "tap"
        wait_until { mana > 20 }
      end
      dothistimeout "cure #{loc}", 3, /Repair...|There is nothing to heal!/
      sleep 0.2
      waitrt?
      waitcastrt?
    }
    XMLData.injuries.keys.each { |location|
      if XMLData.injuries[location]["wound"] > 2
        until XMLData.injuries[location]["wound"] <= 2
          cure_wound.call(location)
        end
      end
      if XMLData.injuries[location]["wound"] > 1
        until XMLData.injuries[location]["wound"] <= 1
          cure_wound.call(location)
        end
      end
      if !leave_minors.include?(location)
        until XMLData.injuries[location]["wound"] == 0
          cure_wound.call(location)
        end
      end
      if XMLData.injuries[location]["scar"] > 2
        until XMLData.injuries[location]["scar"] <= 2
          cure_wound.call(location)
        end
      end
      if XMLData.injuries[location]["scar"] > 1
        until XMLData.injuries[location]["scar"] <= 1
          cure_wound.call(location)
        end
      end
      if !leave_minors.include?(location)
        until XMLData.injuries[location]["scar"] == 0
          cure_wound.call(location)
        end
      end
    }

    until health == maxhealth
      cure_wound.call("blood")
    end
  end

  ####################
  # command sendmana #
  ####################

  def sendmana(character)
    cur_mana = checkmana
    if checkpcs.include?(character)
      if (cur_mana.to_i >= 100)
        fput "send 100 #{character}"
      else
        fput "say ::#{character} #{UserVars.healbot['text_lowmana']}" if UserVars.healbot['enable_msgs']
      end
    end
  end

  ####################
  # command transfer #
  ####################

  def transfer(character)
    # Downstream Hook for scanning
    appraisal_done = false
    appraisal = Array.new
    action = proc { |server_string|
      if /^\s*You take a quick appraisal of <a exist="-\d+" noun=".*">\w+<\/a> and find that <a exist="-\d+" noun=".*">(?:he|she)<\/a> has (?'a_wounds'..*)\./ =~ server_string
        appraisal.push(a_wounds)
        nil
      elsif /^\s*<a exist="-\d+" noun=".*">(?:He|She)<\/a> has (?'a_scars'..*)\./ =~ server_string
        if Skills.mltransference >= 50
          appraisal.push(a_scars)
        end
        nil
      elsif /^\s*<a exist="-\d+" noun=".*">(?:He|She)<\/a> is bleeding(..*)\./ =~ server_string
        nil
      elsif /^\s*Appraise what\?/i =~ server_string
        appraisal.push(server_string)
        nil
      elsif /APPRAISE \[player \| creature \| object\]|APPRAISE GROUP|Usage:/ =~ server_string
        nil
      elsif /You'll have to hold/ =~ server_string
        appraisal_done = true
      # This line is a catch-all for being unable to appraise someone
      elsif /APPRAISE TARGET|is busy juggling weapons\.|is busy performing\.|If you are going to do something, do something to help\!/ =~ server_string
        appraisal.push("Appraise what")
        appraisal_done = true
        DownstreamHook.remove("hb_appraise")
        nil
      elsif !appraisal.empty? and server_string =~ /<prompt/
        appraisal_done = true
        DownstreamHook.remove("hb_appraise")
        nil
      else
        server_string
      end
    }
    DownstreamHook.add("hb_appraise", action)
    fput "appraise #{character}"
    wait_until { appraisal_done }
    DownstreamHook.remove("hb_appraise")

    # appraisal formatting
    appraisal_line = appraisal.join(", ").to_s
    appraisal_line = appraisal_line.gsub(/arm and/, "arm, ").gsub(/\<d cmd.*?\>/, "").gsub(/<\/d.*?>/, "")

    # No wounds
    if appraisal_line =~ /Appraise what/
      echo "hb_actions:transfer: No person found"
      exit
    end
    if appraisal_line =~ /no apparent injuries|no apparent wounds\z/
      echo "hb_actions:transfer: No injuries"
      exit
    end
    # format
    if appraisal_line.include?(",")
      appraisal_array = appraisal_line.split(',')
    else
      appraisal_array = appraisal_line.scan(/a (?:black-and-blue|severe bruises and swelling around|missing|blinded|swollen|bruised) (?:left|right) eye|old battle scars on(?:his|her) (?:left|right) (?:hand|arm|leg)|mangled (?:left|right) (?:hand|arm|leg)|missing (?:left|right) (?:hand|arm|leg) |deep lacerations across (?:his|her) \w+|deep gashes and serious bleeding (?:on|from|across) (?:his|her) \w+|old battle scars|minor cuts and bruises on (?:his|her) (?:left|right) (?:hand|arm|leg)|a (?:fractured and bleeding|completely severed) (?:left|right) (?:hand|arm|leg)|moderate bleeding from (?:his|her) neck|snapped bones and serious bleeding from the neck|minor bruises on (?:his|her) neck|scar across (?:his|her) neck|some old neck wounds|terrible scars from some serious neck injury|minor (?:bruises|lacerations) about the head|minor cuts and bruises on (?:his|her) (?:chest|back|abdominal area)|severe head trauma and bleeding from the ears|strange case of muscle twitching|case of (?:sporadic|uncontrollable) convulsions|scar across (?:his|her) face|several facial scars|old mutilation wounds about (?:his|her) head|old battle scar across (?:his|her) (?:chest|back|abdominal area)|several painful-looking scars across (?:his|her) (?:chest|back|abdominal area)|terrible, permanent mutilation of (?:his|her) (?:chest|back|abdominal area) muscles|developed slurred speech|constant muscle spasms|a very difficult time with muscle control/)
    end

    transfer_list = Array.new
    appraisal_array.each { |wound|
      if /(?:a black-and-blue|severe bruises and swelling around|a missing|a blinded|a swollen|a bruised|deep lacerations across his|deep lacerations across her|cuts and bruises on his|cuts and bruises on her|fractured and bleeding|completely severed|deep gashes and serious bleeding on his|deep gashes and serious bleeding on her|deep gashes and serious bleeding from his|deep gashes and serious bleeding from her|old battle scars on his|old battle scars on her|old battle scar across (?:his|her)|several painful-looking scars across (?:his|her)|terrible, permanent mutilation of (?:his|her)) (?'rightleft'\w+)(?'bodypart' \w+)?/ =~ wound
        bodypart = "#{rightleft.dup}#{bodypart.dup}"
      elsif /moderate bleeding from (his|her) neck|snapped bones and serious bleeding from the neck|minor bruises on (his|her) neck|scar across (?:his|her) neck|some old neck wounds|terrible scars from some serious neck injury/ =~ wound
        bodypart = "neck"
      elsif /minor bruises about the head|minor lacerations about the head|severe head trauma and bleeding from the ears|scar across (?:his|her) face|several facial scars|old mutilation wounds about (?:his|her) head/ =~ wound
        bodypart = "head"
      elsif /strange case of muscle twitching|case of sporadic convulsions|case of uncontrollable convulsions|developed slurred speech|constant muscle spasms|a very difficult time with muscle control/ =~ wound
        bodypart = "nerves"
      else
        next
      end
      if bodypart =~ /abdominal/
        bodypart = "abdomen"
      end
      transfer_list.push(bodypart)
    }

    # just in case
    if transfer_list.empty?
      echo "hb_actions:transfer: Nothing to transfer or person missing"
      exit
    else
      transfer_list.push('blood')
    end

    transfer_done = false
    transfer_injuries = proc {
      transfer_list.uniq.each { |wound|
        tricky = dothistimeout "transfer #{character} #{wound}", 3, /meets with your standards of conduct|gradually fades|Transfer from whom\?|You must heal your own,|You strain to do the transfer, but it doesn't work|You draw the minor wound afflicting|does not appear to be suffering from a lack of blood\.|Your connection to your spirit with \w+ is too weak to act on/
        if tricky =~ /meets with your standards of conduct|Your connection to your spirit with/
          put "transfer #{character} #{wound}"
        elsif tricky =~ /You must heal your own/
          Script.run('heal_down')
          break
        elsif tricky =~ /Transfer from whom\?|Your connection to your spirit with \w+ is too weak to act on/
          break
        end
        sleep 0.1
      }
      transfer_done = true
    }

    until transfer_done || !checkpcs.include?(character)
      transfer_injuries.call
      if checkpcs.include?(character)
        fput "say ::#{character} #{UserVars.healbot['text_transfer']}" if UserVars.healbot['enable_msgs']
      end
    end
  end

  ####################
  # command waggleme #
  ####################

  def waggleme(character)
    if !UserVars.healbot['enable_buffs']
      echo "hb_actions: buffing disabled"
      exit
    end

    buff_list = nil
    buff_cost = nil
    buff_spells = ["101", "103", "107", "202"]

    buff_spells.each { |cur_spell|
      if Spell[cur_spell].known?
        if !buff_list
          buff_list = cur_spell
          buff_cost = cur_spell.split(//).last(2).join.to_i
        else
          buff_list = buff_list + "," + cur_spell
          buff_cost = buff_cost + cur_spell.split(//).last(2).join.to_i
        end
      end
    }

    if ((checkmana - buff_cost) * 100 / maxmana) >= 50 && (character != checkname)
      fput "say ::#{character} #{UserVars.healbot['text_buffing']}" if UserVars.healbot['enable_msgs']
      start_script "waggle", ["--cast-list=#{buff_list}", "--start-at=10", "--stop-at=20", "--stop-before=250", "--skip-jerks=off", "#{character}"]
    else
      fput "say ::#{character} #{UserVars.healbot['text_lowmana']}" if UserVars.healbot['enable_msgs']
    end
  end

  # End of healbot_commands
end

hb_commands = Commands.new

# Make sure RT is observed first
waitrt?
waitcastrt?

# Run the script
if hb_command && hb_target
  if healbot_actions.include?(hb_command)
    hb_commands.send(hb_command, hb_target)
  else
    respond "*****"
    respond "*"
    respond "* ERROR: Healbot command does not exist"
    respond "*"
    respond "* hb_command: #{hb_command}"
    respond "* hb_target: #{hb_target}"
    respond "*"
    respond "*****"
  end
else
  respond "*****"
  respond "*"
  respond "* ERROR: Healbot action or target not defined"
  respond "*"
  respond "* hb_command: #{hb_command}"
  respond "* hb_target: #{hb_target}"
  respond "*"
  respond "*****"
end
