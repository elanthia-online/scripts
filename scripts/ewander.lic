=begin

  Moves around by selecting the adjacent room that was visited least recently.

  Stops in a room only if:
    there is a live, targetable npc in the room
    there are no characters in the room that aren't in your group
    there is no disk in the room that belongs to someone not in your group

  Use   ;ewander add              and
          ;ewander remove           to set up boundaries to keep you in your hunting area.
  Use   ;ewander delay <number>   to set the movement delay
  Use   ;ewander <npc1> <npc2>    to stop only for specific npcs.
  Use   ;ewander <pc>             to stop for another specific character.
  Use   ;ewander                  to stop for any targetable npcs.

   author: elanthia-online
     game: Gemstone
     tags: movement
 required: Lich >= 5.11.0
  version: 1.0.0

  changelog:
    1.0.0 (2025-03-19):
      - initial fork of wander.lic
=end
=begin
  changelog:
    0.6 (2015-04-11):
      better wandering for the Elemental Confluence
    0.5 (2015-04-09):
      fix searching for people
    0.4 (2015-04-05):
      fix disk check
    0.3 (2015-03-05):
      added support for the Elemental Confluence
    0.2 (2013-12-04):
      added delay setting
      allow adding/deleting multiple room ids at once

=end

CharSettings['boundary']     ||= Array.new
CharSettings['untargetable'] ||= Array.new
CharSettings['targetable']   ||= Array.new
CharSettings['delay']        ||= 1.0
$wander_rooms                ||= Array.new
dirs                           = ['north', 'northeast', 'east', 'southeast', 'south', 'southwest', 'west', 'northwest']
reverse_dir                    = { 'north' => 'south', 'northeast' => 'southwest', 'east' => 'west', 'southeast' => 'northwest', 'south' => 'north', 'southwest' => 'northeast', 'west' => 'east', 'northwest' => 'southeast' }
# fixme: room numbers are for Prime only
hot_confluence_rooms           = [23282, 23283, 23284, 23285, 23286, 23287, 23288, 23289, 23290, 23291, 23292, 23293, 23294, 23295, 23296, 23297, 23298, 23299, 23300, 23301, 23302, 23303, 23329, 23330, 23331, 23332, 23333, 23334]

wander = proc {
  if (checkroom == '[Elemental Confluence]') and (XMLData.game == 'GSIV')
    $mapdb_confluence_wayto ||= Hash.new
    begin
      start_room = Room.current
      if $mapdb_confluence_wayto[start_room.id].nil?
        raise "Restarting" if Room.current != start_room
        $mapdb_confluence_wayto[start_room.id] = Hash.new
        XMLData.room_exits.each { |d| $mapdb_confluence_wayto[start_room.id][d] = nil }
      end
      if ($mapdb_confluence_wayto[start_room.id].keys != XMLData.room_exits)
        raise "Restarting" if Room.current != start_room
        $mapdb_confluence_wayto = Hash.new
        raise "Restarting"
      end
      dir = $mapdb_confluence_wayto[start_room.id].keys.find { |d| $mapdb_confluence_wayto[start_room.id][d].nil? }
      if dir.nil?
        dir = $mapdb_confluence_wayto[start_room.id].keys.find { |d| not $wander_rooms.include?($mapdb_confluence_wayto[start_room.id][d]) }
      end
      if dir.nil?
        next_id = $wander_rooms.find { |i| $mapdb_confluence_wayto[start_room.id].values.include?(i) }
        dir = $mapdb_confluence_wayto[start_room.id].keys.find { |d| $mapdb_confluence_wayto[start_room.id][d] == next_id }
      end
      if dir.nil?
        dir = XMLData.room_exits[rand(XMLData.room_exits.length)]
      end
      r = move dir.dup
      if r == false
        # maze probably changed and XMLData.room_exits is wrong
        status_tags
        result = dothistimeout 'look', 5, /<compass>/
        status_tags
        options = result.scan(/<dir value=\"(.*?)\"/).flatten
        move options[rand(options.length)]
      else
        end_room = Room.current
        $wander_rooms.delete(end_room.id)
        $wander_rooms.push(end_room.id)
        $mapdb_confluence_wayto[start_room.id][dir] = end_room.id
        if hot_confluence_rooms.include?(end_room.id)
          if GameObj.loot.any? { |o| o.name == 'point of elemental tranquility' }
            $mapdb_confluence_hot_tranquility = end_room.id
          elsif $mapdb_confluence_hot_tranquility == end_room.id
            $mapdb_confluence_hot_tranquility = nil
          end
          if GameObj.loot.any? { |o| o.name == 'gaping bottomless pit' }
            $mapdb_confluence_hot_pit = end_room.id
          elsif $mapdb_confluence_hot_pit == end_room.id
            $mapdb_confluence_hot_pit = nil
          end
        else
          if GameObj.loot.any? { |o| o.name == 'point of elemental tranquility' }
            $mapdb_confluence_cold_tranquility = end_room.id
          elsif $mapdb_confluence_cold_tranquility == end_room.id
            $mapdb_confluence_cold_tranquility = nil
          end
          if GameObj.loot.any? { |o| o.name == 'gaping bottomless pit' }
            $mapdb_confluence_cold_pit = end_room.id
          elsif $mapdb_confluence_cold_pit == end_room.id
            $mapdb_confluence_cold_pit = nil
          end
        end
      end
    rescue
      retry
    end
  elsif checkroom == '[Elemental Confluence]'
    if $mapdb_confluence_last_dir.nil?
      $mapdb_confluence_last_dir = XMLData.room_exits[rand(XMLData.room_exits.length)]
      result = move $mapdb_confluence_last_dir
    else
      i = dirs.index(reverse_dir[$mapdb_confluence_last_dir])
      8.times {
        i += 1
        i = i % 8
        if XMLData.room_exits.include?(dirs[i])
          $mapdb_confluence_last_dir = dirs[i]
          break
        end
      }
      result = move $mapdb_confluence_last_dir
    end
    waitrt?
    if result == false
      # maze probably changed and XMLData.room_exits is wrong
      status_tags
      result = dothistimeout 'look', 5, /<compass>/
      status_tags
      options = result.scan(/<dir value="(.*?)"/).flatten
      $mapdb_confluence_last_dir = options[rand(options.length)]
      move $mapdb_confluence_last_dir
    end
  else
    room = Room.current
    next_room_options = room.wayto.keys - CharSettings['boundary']
    next_room_options.delete_if { |room_id| (room.timeto[room_id].class == Proc) and room.timeto[room_id].call.nil? }
    next_room = next_room_options.find_all { |w_r| not $wander_rooms.include?(w_r) }
    if next_room.empty?
      next_room = $wander_rooms.find { |w_r| next_room_options.include?(w_r) }
    else
      next_room = next_room[rand(next_room.length)]
    end
    $wander_rooms.delete(next_room)
    $wander_rooms.push(next_room)
    way = room.wayto[next_room]
    wait_while { ($loot_grab_list.length.to_i > 0) or $loot_working }
    if way.class == String
      move(way)
    else
      way.call
    end
  end
}

if script.vars[1] =~ /help/i
  output = "\n"
  output.concat ";ewander add              adds the current room to the boundary list\n"
  output.concat ";ewander add <room id>    adds the given room id to the boundary list\n"
  output.concat ";ewander rem              deletes the current room to the boundary list\n"
  output.concat ";ewander rem <room id>    deletes the given room id to the boundary list\n"
  output.concat ";ewander clear            clears the boundary list and npc info\n"
  output.concat ";ewander delay <seconds>  sets the delay before moving to the next room\n"
  output.concat ";ewander list             shows saved boundaries and npc info\n"
  output.concat ";ewander <npc1> <npc2>    wanders around, stopping only for the given npcs\n"
  output.concat ";ewander                  wanders around, stopping only for targetable npcs\n"
  output.concat "\n"
  respond output
elsif script.vars[1] =~ /^add$|^set$/i
  if script.vars[2]
    for var in script.vars[2..-1]
      if var =~ /^[0-9]+$/
        CharSettings['boundary'].push(var)
        echo "room #{var} has been added to the boundary list"
      else
        echo "ignoring #{var}: not a room id"
      end
    end
  elsif (room = Room.current)
    CharSettings['boundary'].push(room.id.to_s)
    echo "this room (#{room.id}) has been added to the boundary list"
  else
    echo 'error: current room is uknown'
  end
elsif script.vars[1] =~ /^del(?:ete)?$|^rem(?:ove)?$/i
  if script.vars[2]
    for var in script.vars[2..-1]
      if var =~ /^[0-9]+$/
        if CharSettings['boundary'].delete(var)
          echo "room #{var} has been removed from the boundary list"
        else
          echo "room #{var} was not found in the boundary list"
        end
      else
        echo "ignoring #{var}: not a room id"
      end
    end
  elsif (room = Room.current)
    if CharSettings['boundary'].delete(room.id.to_s)
      echo "this room (#{room.id}) has been removed from the boundary list"
    else
      echo "this room (#{room.id}) was not found in the boundary list"
    end
  else
    echo 'current room is uknown'
  end
elsif (script.vars[1] =~ /^delay$/i) and (script.vars[2] =~ /^[0-9\.]+$/)
  CharSettings['delay'] = script.vars[2].to_f
  echo "movement delay is now #{CharSettings['delay']}"
elsif script.vars[1] =~ /^list$/i
  output = "\n"
  if CharSettings['boundary'].empty?
    output.concat "   boundaries: none\n"
  else
    output.concat "   boundaries:\n"
    for boundary in CharSettings['boundary']
      output.concat "      #{boundary.to_s.rjust(5)}   #{Room[boundary].title.first}\n"
    end
  end
  output.concat "\n"
  if CharSettings['targetable'].empty?
    output.concat "   targetable npcs: none\n"
  else
    output.concat "   targetable npcs: #{CharSettings['targetable'].join(', ')}\n"
  end
  output.concat "\n"
  if CharSettings['untargetable'].empty?
    output.concat "   untargetable npcs: none\n"
  else
    output.concat "   untargetable npcs: #{CharSettings['untargetable'].join(', ')}\n"
  end
  output.concat "\n"
  respond output
elsif script.vars[1] =~ /^clear$/i
  CharSettings['boundary'] = Array.new
  CharSettings['untargetable'] = Array.new
  CharSettings['targetable'] = Array.new
  respond 'done'
elsif script.vars.empty?
  loop {
    wander.call
    start_npcs = npcs = GameObj.targets
    npcs.delete_if { |npc| CharSettings['untargetable'].include?(npc.name) }
    if !Claim.mine?
      sleep CharSettings['delay']
    elsif npcs.any? { |npc| CharSettings['targetable'].include?(npc.name) }
      break
    else
      clear
      target_result = dothistimeout('target random', 5, /^Could not find a valid target\.$|^You are now targeting/)
      if target_result =~ /^You are now targeting \w+ (.*)\.$/
        target = $1
        CharSettings['targetable'].push(target) unless CharSettings['targetable'].include?(target)
        break
      elsif target_result == 'Could not find a valid target.'
        if GameObj.targets == start_npcs
          npcs.each { |npc| CharSettings['untargetable'].push(npc.name) unless CharSettings['untargetable'].include?(npc.name) }
        end
        sleep CharSettings['delay']
      end
    end
  }
else
  loop {
    wander.call
    if GameObj.pcs.any? { |pc| pc.noun =~ /#{script.vars[1..-1].join('|')}/i }
      break
    elsif !Claim.mine?
      sleep CharSettings['delay']
    elsif GameObj.npcs.any? { |npc| (npc.status != 'dead') and npc.name =~ /#{script.vars[1..-1].join('|')}/ }
      break
    else
      sleep CharSettings['delay']
    end
  }
end
