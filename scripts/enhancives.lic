=begin
  enhancives - Elanthia Online's enhancive item charge tracker.
  Tracks and monitors your enhancives - warns you if any enhancive falls below a threshold you set.
  No more panicking that you might miss your warning on your crumbly enhancive's one charge remaining.

  Options include:
    * Chosing your own threshold level.
    * Seeing a report that shows the charges of all enhancives held / worn.
    * Optionally saving your enhancives' state to generate a history (no more frequently than daily).
    * Seeing your enhancives' state over time (day over day, week over week, etc.)

      author: elanthia-online
      game: Gemstone
      tags: core, mechanics, utility
      required: Lich > 5.6.2
      version: 0.0.1 experimental

  changelog:
    v 0.0.1 experimental (2024-07-11)
      * released for testing and feedback

=end

# later this module will be moved to the lich core library.  For now, it is here to facilitate testing.
# load it if you ain't got it.
# require File.join(LIB_DIR, 'enhancives.rb') unless defined? Enhancives.report
# module defs that will move to lib

module Games
  module Gemstone
    module Enhancives
      extend self # I'ma hear about this one. . .

      @enhancive_rx = %r[\s+(?:an?)? .*? noun=\"(?<noun>[\w]+)\">(?<name>[\w\s\-]+)<\/a>.*?\((?:<pushBold\/>)?(?<current>\d+)(?:<popBold\/>)?\/(?<max>\d+) charges\)]i
      @no_enhancive_rx = %r[^You are not (?:holding|wearing)]
      @first_run_detected = false

      def db_read
        @settings = DB_Store.read("enhancives") # first run DB_Store will generate an empty hash if nothing is present
        case @settings
        when {}, @settings[:threshold].nil?
          @first_run_detected = true
          @threshold = 5
          @settings[:threshold] = @threshold
          DB_Store.save("enhancives", @settings)
        else
          @threshold = @settings[:threshold]
        end
      end

      def init
        @enhancive_items = []
        @no_enhancive_found = false
        holding_pattern = 0
        enhancive_items = Lich::Util.issue_command('inventory enhancive list', /You are/, silent: true, quiet: true)
        enhancive_items.each do |returned_line|
          if (results = returned_line.match(@enhancive_rx).named_captures.transform_keys(&:to_sym))
            @enhancive_items.push results
          elsif (results = returned_line.match(@no_enhancive_rx))
            holding_pattern += 1 if results.string =~ /not holding/ or results.string =~ /not wearing/
          end
          if holding_pattern == 2
            @no_enhancive_found = true
          end
        end
        @enhancive_items.sort_by! { |k| k[:noun] }
      end

      def reset! # get fresh everything
        db_read
        init
      end

      def rescan! # get fresh enhancive status - used when recharging, or swapping enhancives around
        init
      end

      # TEST METHOD FOR enhancives.rb AND critranks.rb - no sense in carrying the libraries if the script isn't running
      def unload! # script died, zero out stuff
        @enhancive_items = []
        Enhancives.instance_methods.each do |method| # this was the reason for 'extend self', to get instance methods
          Enhancives.undef_method method
        end
        Games::Gemstone.send :remove_const, :Enhancives # get rid of the Ruby namespace table entry
        $LOADED_FEATURES.delete_if { |remove_ref| remove_ref == File.join(SCRIPT_DIR, 'enhancives.rb') } # must also remove
        _respond; _respond '[Enhancives: ' + monsterbold_start + 'Your Enhancives module has been unloaded.  To restart, run the script.' + monsterbold_end + ']'
      end

      def threshold?
        @settings[:threshold]
      end

      def threshold(num = 5)
        new_setting(num)
      end

      def first_run?
        @first_run_detected
      end

      def no_enhancive_found?
        @no_enhancive_found
      end

      def enhancive_items?
        @enhancive_items
      end

      def get_setting # largely for testing, may not be needed for production
        result = DB_Store.read("enhancive")
        _respond Enhancives.msg('You currently have a threshold of ' + result[:threshold].to_s + ' charges.')
      end

      def new_setting(new_setting)
        unless @threshold == new_setting
          @threshold = new_setting
          @settings[:threshold] = @threshold
          DB_Store.save('enhancive', @settings)
        else
          _respond Enhancives.msg('Your current threshold of ' + @threshold.to_s + ' is unchanged.')
        end
      end

      def report(item = 'all') # could be expanded as needed (historical tracks?) - useful after a recharge with rescan!
        case item
        when 'all'
          show_all
        when 'history'
          show_history
        else
          show_item(item)
        end
      end

      def show_all # only standard output to avoid wall of color and to keep table columns aligned
        e_report = Terminal::Table.new  :headings => ['Noun', 'Name', 'Charges', ' Max ', 'Recharge'],
                                        :style    => { :all_separators => false }
        @enhancive_items.each { |item|
          e_report.add_row [item[:noun], item[:name], item[:current], item[:max], " * Yes * "] if item[:current].to_i <= @threshold
          e_report.add_row [item[:noun], item[:name], item[:current], item[:max], "No"] unless item[:current].to_i <= @threshold
        }
        e_report.align_column 2, :right; e_report.align_column 3, :right; e_report.align_column 4, :center
        _respond Enhancives.msg('Your requested enhancives status report:')
        Lich::Messaging.mono(e_report.to_s)
      end

      def show_item(item)
        results = @enhancive_items.find_all { |x| x[:noun] == item }
        results.each do |line|
          _respond Enhancives.msg("Your " + line[:name] + " has " + line[:current] + " remaining charges.") unless results.empty?
        end
        _respond Enhancives.msg("Could not find your item with the noun " + item + "!") if results.empty?
      end

      # This is the monitor method - checking this as shown in loop below prevents panic of 1 charge remaining
      # only return names of the enhancives that do not meet threshold requirements
      def detect_charges(desired = 5)
        results = @enhancive_items.select { |x| x[:current].to_i <= desired }
        # noun, name, current, max
        results.map { |x| x.values[1] }
      end

      def msg(msg)
        string = ''
        string << '[Enhancives: ' + monsterbold_start + msg.to_s + monsterbold_end + ']'
        return string
      end

      # These are the history methods that will allow users to track over time.  Recommended timing once a week.
      # Do we need to enforce this through settings, or just let users go nuts?  As designed, no more than once a day.
      def add_history(new_history)
        @history_enhancives = DB_Store.read('ehistory')
        @converted = new_history.map { |r| [r[:name], r.except(:name)] }.to_h
        @converted.each do |k, _v|
          @converted[k].reject! { |v| v == :noun } # no history relevance
          @converted[k].reject! { |v| v == :max } # no history relevance
          @converted[k][:dates] = { Time.now.strftime('%m/%d') => @converted[k][:current] }
          @converted[k].reject! { |v| v == :current } # no longer has relevance
        end
        unless @history_enhancives.empty? # has prior history saved
          @history_enhancives.each do |k, v|
            case @converted.has_key?(k)
            when true
              v[:dates].merge! @converted[k][:dates]
            when false
              # item record in history, not present in current
              v[:dates].merge! (Time.now.strftime('%m/%d')) => "Gone" # item record in history, not present in current
            end
          end
        else # no prior history saved
          @history_enhancives.merge! @converted
        end
        @converted.each do |k, v| # check for new additions
          case @history_enhancives.has_key?(k)
          when true # iterate when key present
            :noop
          when false # found new items!
            temp = { k => v }
            @history_enhancives.merge! temp # add item to history
          end
        end
        # this simply saves any new history - nothing is shown / returned at this point to the user
        DB_Store.save('ehistory', @history_enhancives)
      end

      def save_history
        add_history(enhancive_items?)
        @settings[:last_saved] = Time.now
      end

      def show_history
        # with thanks to Tysong for the Terminal::Table dynamic columns method!
        @history_enhancives = DB_Store.read('ehistory')
        unless @history_enhancives.empty?
          @dates = []
          @history_enhancives.each do |_k, v|
            v[:dates].each { |a, _b|
              @dates.push(a).uniq!.sort!
            }
          end
          headings = ["Name"] + @dates
          rows = []
          @history_enhancives.map { |h, k|
            data_set = []
            data_set.push(h)
            @dates.each { |date| data_set.push(k[:dates][date]) }
            rows.push(data_set)
          }
          table = Terminal::Table.new(headings: headings, rows: rows)
          @dates.count.times do |counter|
            table.align_column(counter + 1, :right)
          end
          Lich::Messaging.mono(table.to_s)
        else
          _respond Enhancives.msg('You have NO enhancive history!')
        end
      end

      def help
        _respond msg('Welcome to the Enhancives Tracker!') if @first_run_detected
        _respond 'There is one setting you may want to adjust to be alerted if an enhancive item is below that threshold.'
        _respond 'To change the default setting of 5 simply enter in the game command line the following command where NUM is the desired threshold for alerting.'
        _respond '     ;e Enhancives.threshold(NUM)'; _respond
        _respond 'You can verify your current threshold setting anytime by entering the following command.'
        _respond '     ;e echo Enhancives.threshold?'; _respond
        _respond 'When you swap or recharge items, after you are done with all the activities, you can update the current enhancive records for continued monitoring by entering the following command.'
        _respond '     ;e Enhansives.rescan!'; _respond
        _respond 'You may also find useful the following commands:'
        _respond '     ;e Enhancives.report'
        _respond '     ;e Enhancives.show_item(\'item noun\')'; _respond
        _respond 'The script is presently set to check your enhancives once every hour.  More frequently than on hour is not really necessary, as charges do not deplete that fast.'
        _respond 'In addition, you can also track your enhancive charge history.  Given the limited amount of screen space available, you should probably only do this once a week, or once a month.  Enter the following commands.'
        _respond '     ;e Enhancives.save_history   <<- this will save your history after at least one day has passed.'
        _respond '     ;e Enhancives.report(\'history\')   <<- this will show your historical charges'; _respond
        _respond 'Enjoy!'
      end
      # scripts are responsible for starting / initing module
    end
  end
end
# end module defs for library

# this is the start of the script, separate from the library above.
# the script owns start up and tear down
Enhancives.db_read
Enhancives.init
# clear up libraries before exiting unless game wide exit detected
before_dying {
  Enhancives.save_history
  Enhancives.unload! unless $_CLIENTBUFFER_.any? { |cmd| cmd =~ /^(?:\[.*?\])?(?:<c>)?(?:quit|exit)/i }
}
# first run, show helpful information
Enhancives.help if Enhancives.first_run?
# main
loop do
  tracking_threshold = Enhancives.threshold?
  tracking = Enhancives.detect_charges(tracking_threshold)
  sleep 0.1
  _respond Enhancives.msg('You do not seem to have any enhancive items held or worn.') if Enhancives.no_enhancive_found?
  _respond Enhancives.msg('Everything seems in order with your enhancives.') if tracking.empty? and not Enhancives.no_enhancive_found?
  _respond # not useless white space for old eyes
  unless tracking.empty?
    tracking.each do |line|
      _respond Enhancives.msg('Your ' + line + ' is below your threshold!')
    end
  end
  sleep 1.hour # production check hourly for changes to charges
  Enhancives.rescan! # check to see if there are any changes
end # main
