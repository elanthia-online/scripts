=begin
MyFletch, by DintarL.

MyFletch is designed to skill fletching to 500 without losing any artisan skill experience.

Run ";MyFletch Setup" and set all of your variables before attempting to run the script.
The script will run in every major town other than Zul Logoth and Ta'Vaalor.
Your containers may be the same, if you want them to be.  They can also be different.

Please adhere to Policy 18 and do not run this while AFK.  Thank you. 

=end

settings          = CharSettings.to_hash

setup = proc {
  gtk_globals = Hash.new
  gtk_locals = Hash.new

  window = window_action = nil

  Gtk.queue {
#   ttips = Gtk::Tooltips.new.enable
    ttips_text = {
      'Ftrashcan' => "The noun of the trash can in the room in which you want to fletch.",
      'Fsmallblade' => "The noun of the dagger/small blade you intend to use for fletching.",
      'Fsbladecont' => "The container for the dagger/small blade you intend to use for fletching.",
      'Fshaftcont' => "The container for prepared shafts.",
      'Fwoodcont' => "The container for limbs of wood.",
      'Faxeblade' => "The noun of the axe you intend to use for fletching.",
      'Fabladecont' => "The container for the axe you intend to use for fletching.",
      'Fexpamt' => "When you want to rest.  7=Fried, 6=Numbed, 5=Becoming Numbed, 4=Muddled.",
      'Fexpsaver' => "Check this if you want to have MyFletch stop when your mind is too full, so you don't waste Artisan experience."
    }

    gtk_globals['Ftrashcan'] = Gtk::Entry.new; gtk_globals['Ftrashcan'].text = (UserVars.Ftrashcan ||= "")
    gtk_globals['Fsmallblade'] = Gtk::Entry.new; gtk_globals['Fsmallblade'].text = (UserVars.Fsmallblade ||= "")
    gtk_globals['Fsbladecont'] = Gtk::Entry.new; gtk_globals['Fsbladecont'].text = (UserVars.Fsbladecont ||= "")
    gtk_globals['Fshaftcont'] = Gtk::Entry.new; gtk_globals['Fshaftcont'].text = (UserVars.Fshaftcont ||= "")
    gtk_globals['Fwoodcont'] = Gtk::Entry.new; gtk_globals['Fwoodcont'].text = (UserVars.Fwoodcont ||= "")
    gtk_globals['Faxeblade'] = Gtk::Entry.new; gtk_globals['Faxeblade'].text = (UserVars.Faxeblade ||= "")
    gtk_globals['Fabladecont'] = Gtk::Entry.new; gtk_globals['Fabladecont'].text = (UserVars.Fabladecont ||= "")
    gtk_globals['Fexpamt'] = Gtk::Entry.new; gtk_globals['Fexpamt'].text = (UserVars.Fexpamt ||= "")
    gtk_locals['Fexpsaver'] = Gtk::CheckButton.new('(?) Allow Mind to Clear'); gtk_locals['Fexpsaver'].active = (settings['Fexpsaver'] ||= false)

    # Add tooltips
    ttips_text.each_pair { |widget,tip|
      if widget = gtk_globals[widget] || gtk_locals[widget]
        widget.set_tooltip_text(tip).has_tooltip = true
      end
    }

  # Primary Window
    window = Gtk::Window.new
    window.title = "MyFletch Configuration for #{Char.name}"
    window.border_width = 3
    window.resizable = true
    window.resize(450, 300)

    nb = Gtk::Notebook.new.set_show_border(true)

  # Page 1 - General Settings

    vb_pg1 = Gtk::Box.new(:vertical, 1).set_border_width(3)

    vb_pg1_1 = Gtk::Box.new(:vertical, 1).set_border_width(3)
    fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<big><b>MyFletch Settings</b></big>'))
    fr_pg1_1.add(vb_pg1_1)
    vb_pg1.pack_start(fr_pg1_1, :expand => false, :fill => false, :padding => 0)

    lbl = Gtk::Label.new.set_markup("MyFletch Settings for #{Char.name}:")
    lbl.set_wrap(true).set_width_request(600).set_padding(0,10)
    vb_pg1_1.pack_start(lbl, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Dagger/Small Blade: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Fsmallblade'], :expand => false, :fill => false, :padding => 0)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Small Blade Container: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Fsbladecont'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Axe: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Faxeblade'], :expand => false, :fill => false, :padding => 0)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Axe Container: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Fabladecont'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Shaft Container: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Fshaftcont'], :expand => false, :fill => false, :padding => 0)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Limb Container: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Fwoodcont'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Trash Can: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Ftrashcan'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(Gtk::Alignment.new(0,0,0,1).add(gtk_locals['Fexpsaver'].set_width_request(180)), :expand => false, :fill => false, :padding => 0)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Mind State to Start Rest: ')).set_width_request(130))
    hb.pack_start(gtk_globals['Fexpamt'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    lbl = Gtk::Label.new.set_markup("")
    lbl.set_wrap(true).set_width_request(600).set_padding(0,0)
    vb_pg1_1.pack_start(lbl, :expand => false, :fill => false, :padding => 0)

    lbl = Gtk::Label.new.set_markup("Containers are not required to be different, but all variables listed must be defined.")
    lbl.set_wrap(true).set_width_request(600).set_padding(0,0)
    vb_pg1_1.pack_start(lbl, :expand => false, :fill => false, :padding => 0)

    nb.append_page(vb_pg1,Gtk::Label.new('MyFletch Settings'))

    lbl = Gtk::Label.new.set_markup("")
    lbl.set_wrap(true).set_width_request(600).set_padding(0,0)
    vb_pg1_1.pack_start(lbl, :expand => false, :fill => false, :padding => 0)

  #Save/Close Buttons

    hb_saveclose = Gtk::Box.new(:horizontal)
    save = Gtk::Button.new(:label => '_Save')
    close = Gtk::Button.new(:label => 'E_xit')

    save.signal_connect('clicked') { window_action = :save }
    close.signal_connect('clicked') { window_action = :done }

    hb_saveclose.pack_start(save, :expand => false, :fill => false, :padding => 0)
    hb_saveclose.pack_start(close, :expand => false, :fill => false, :padding => 0)

  #Box for Save/Close Buttons

    vb_main = Gtk::Box.new(:vertical, 5)
    vb_main.border_width = 3

    vb_main.pack_start(nb, :expand => false, :fill => false, :padding => 0)
    vb_main.pack_start(Gtk::Alignment.new(1,0,0,0).add(hb_saveclose), :expand => false, :fill => false, :padding => 0)

    window.signal_connect('delete_event') { respond window.allocation.width; window_action = :exit }

    window.add(vb_main)
    window.show_all
    window.keep_above = true # On windows keep_above is required AFTER show_all
  }

  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
  undo_before_dying
  Gtk.queue { window.destroy }

  clean_entry = proc { |entry|
    entry.text = entry.text.strip
    if entry.text.empty?
      entry.text = ""
    end

    entry.text
  }

  if window_action == :save
    gtk_globals.each_pair { |option,widget|
      if widget.class == Gtk::CheckButton
        UserVars.change(option,widget.active?,:char)
      elsif widget.class == Gtk::Entry
        UserVars.change(option,clean_entry.call(widget),:char)
      else
        echo "error: unknown global widget #{option} [#{widget.class}]"
      end
    }

    gtk_locals.each_pair { |option,widget|
      if widget.class == Gtk::CheckButton
        settings[option] = widget.active?
      elsif widget.class == Gtk::Entry
        settings[option] = clean_entry.call(widget)
      else
        echo "error: unknown local widget #{option} [#{widget.class}]"
      end
    }

    echo 'settings saved'
  else
    echo 'closed without saving'
  end
}

if script.vars[1] =~  /^setup$/i
  setup.call
end

exit unless script.vars[1].nil?

def message(text)
  string = ''
  if $fake_stormfront then string.concat("\034GSL\r\n ") else string.concat("<pushBold\/>") end
  if( text.index('\n') )
    text.split('\n').each { |line| string.concat("#{line}") }
  else
    string.concat(text)
  end
  if $fake_stormfront then string.concat("\034GSM\r\n ") else string.concat("<popBold\/>") end
  puts string
end

unless UserVars.Ftrashcan
  message("")
  message("MyFletch says: You do not appear to have your variables set.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Ftrashcan == ""
  message("")
  message("MyFletch says: You do not appear to have a trash can set.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Fsmallblade == ""
  message("")
  message("MyFletch says: You do not appear to have a small blade set.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Faxeblade == ""
  message("")
  message("MyFletch says: You do not appear to have an axe set.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Fsbladecont == ""
  message("")
  message("MyFletch says: You do not appear to have a container set for your small blade.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Fabladecont == ""
  message("")
  message("MyFletch says: You do not appear to have a container set for your axe.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Fwoodcont == ""
  message("")
  message("MyFletch says: You do not appear to have a container set for your limbs of wood.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

if UserVars.Fshaftcont == ""
  message("")
  message("MyFletch says: You do not appear to have a container set for your arrow shafts.  Please run ;MyFletch setup and enter your variables.")
  message("")
  exit
end

@trashhere = 0
GameObj.loot.each{|i|
  if i.noun.include?("#{UserVars.Ftrashcan}")
    @trashhere += 1
  end
}
GameObj.room_desc.each{|i|
  if i.noun.include?("#{UserVars.Ftrashcan}")
    @trashhere += 1
  end
}
if @trashhere == 0
  message("")
  message("MyFletch says: Could not find your specified trash can.  Please fix the variable or move to your correct starting room.")
  message("")
  exit
end

rightbreak = proc{
  fput("stow ##{@righthand}")
  before_dying{
    multifput("stow right") if GameObj.right_hand.id
    fput("get ##{@righthand}")
  }
}
leftbreak = proc{
  fput("stow ##{@lefthand}")
  before_dying{
    fput("stow left") if GameObj.left_hand.id
    fput("get ##{@lefthand}")
    if GameObj.right_hand.id == @lefthand.to_i
      fput("swap")
    end
  }
}

if GameObj.right_hand.id
  @righthand = GameObj.right_hand.id
  rightbreak.call
else
  @righthand = 'nil'
end
if GameObj.left_hand.id
  @lefthand = GameObj.left_hand.id
  leftbreak.call
else
  @lefthand = 'nil'
end

@usedconts = Array.new
fput("look in my #{UserVars.Fabladecont}")
@usedconts.push("#{UserVars.Fabladecont}")
unless @usedconts.include?("#{UserVars.Fsbladecont}")
  fput("look in my #{UserVars.Fsbladecont}")
  @usedconts.push("#{UserVars.Fsbladecont}")
end
unless @usedconts.include?("#{UserVars.Fshaftcont}")
  fput("look in my #{UserVars.Fshaftcont}")
  @usedconts.push("#{UserVars.Fshaftcont}")
end
fput("look in my #{UserVars.Fwoodcont}") unless @usedconts.include?("#{UserVars.Fwoodcont}")

@havesmallblade = 0
GameObj[UserVars.Fsbladecont].contents.each{|i|
  if i.noun == "#{UserVars.Fsmallblade}"
    @havesmallblade += 1
  end
}
if @havesmallblade == 0
  message("")
  message("MyFletch says: Could not find your small blade.  Please fix the variable or move the specified item to the correct container.")
  message("")
  exit
end

@haveaxe = 0
GameObj[UserVars.Fabladecont].contents.each{|i|
  if i.noun == "#{UserVars.Faxeblade}"
    @haveaxe += 1
  end
}
if @haveaxe == 0
  message("")
  message("MyFletch says: Could not find your axe.  Please fix the variable or move the specified item to the correct container.")
  message("")
  exit
end

@room = Room.current.id
@shaft = 0
@lwood = 0

Thread.new{
  toggle_upstream
  articheck = proc{
    action = proc{|server_string|
      if server_string =~ /^That was a little easier/
        result = dothistimeout(
          "artisan skill",
          3,
          /fletching, you are a Master/i
        )
        if result =~ /fletching, you are a Master/i
          message("")
          message("MyFletch says: Congratulations on Mastering fletching!")
          message("")
          exit
        end
      end
      server_string
    }
    DownstreamHook.add("#{script.name}_articheck", action)
  }
  articheck.call
  before_dying{DownstreamHook.remove("#{script.name}_articheck")}
  loop{
    command = upstream_get
  }
}

expcheck = proc{
  if UserVars.Fexpamt == ""
    if checkmind(5)
      message("")
      message("MyFletch says: Allowing mind to clear.")
      message("")
      wait_while{checkmind(5)}
      message("")
      message("MyFletch says: Mind is under the threshold.  Continuing.")
      message("")
    end
  else
    if checkmind(UserVars.Fexpamt)
      message("")
      message("MyFletch says: Allowing mind to clear.")
      message("")
      wait_while{checkmind(UserVars.Fexpamt)}
      message("")
      message("MyFletch says: Mind is under the threshold.  Continuing.")
      message("")
    end
  end
}

goto = proc{|rm|
  wait_while{running?("go2")}
  start_script("go2",[rm.to_s,"_disable_confirm_"])
  wait_while{running?("go2")}
}
locater = proc{
  @ordernum = 0
  if Room.current.location =~ /River|Illistim|Solhaven|Landing/
    @ordernum = '40'
  end
  if Room.current.location =~ /Icemule Trace/
    @ordernum = '48'
  end
  if Room.current.location =~ /Kharam/
    @ordernum = '49'
  end
  if Room.current.location =~ /Mist Harbor/
    @ordernum = '50'
  end
  if Room.current.location =~ /Zul Logoth|Vaalor/
    message("")
    message("MyFletch says: The town you are in either does not have a fletcher or does not sell limbs of wood.")
    message("")
    exit
  end
}

getmaterials = proc{
  if GameObj.left_hand.noun =~ /#{UserVars.Fsmallblade}/
    fput("put my #{UserVars.Fsmallblade} in my #{UserVars.Fsbladecont}")
  end
  goto.call('bank')
  fput("withdraw 500")
  goto.call('fletcher')
  if @ordernum == 0
    locater.call
  end
  10.times{
    multifput("order #{@ordernum}","buy")
    wait_until{GameObj.right_hand.id}
    fput("put wood in my #{UserVars.Fwoodcont}")
  }
  goto.call('bank')
  fput("deposit all")
  goto.call(@room)
}

chopwood = proc{
  if GameObj.left_hand.noun =~ /#{UserVars.Fsmallblade}/
    fput("put my #{UserVars.Fsmallblade} in my #{UserVars.Fsbladecont}")
  end
  multifput("get #{UserVars.Faxeblade} from my #{UserVars.Fabladecont}","get wood from my #{UserVars.Fwoodcont}","cut arrow shaft from my wood")
  sleep 1
  waitrt?
  multifput("put my #{UserVars.Faxeblade} in my #{UserVars.Fabladecont}","put my shafts in my #{UserVars.Fshaftcont}")
}

arrowmake = proc{
  goto.call(@room) unless Room.current.id == @room.to_i
  fput("sit") if !sitting?
  multifput("get #{UserVars.Fsmallblade} from my #{UserVars.Fsbladecont}","swap") if !GameObj.left_hand.id
  fput("get 1 shaft from my #{UserVars.Fshaftcont}")
  wait_until{GameObj.right_hand.id}
  fput("cut my shaft with my #{UserVars.Fsmallblade}")
  sleep 1
  if settings['Fexpsaver']
    expcheck.call
  end
  waitrt?
  if GameObj.right_hand.id
    2.times{fput("cut nocks in my shaft with my #{UserVars.Fsmallblade}")}
    sleep 1
    if settings['Fexpsaver']
      expcheck.call
    end
    waitrt?
  end
  if GameObj.right_hand.id
    fput("put my shaft in #{UserVars.Ftrashcan}")
  end
}

locater.call
loop{
  GameObj[UserVars.Fshaftcont].contents.each{|i|
    if i.noun =~ /shaft/
      @shaft += 1
    end
  }
  GameObj[UserVars.Fwoodcont].contents.each{|i|
    if i.noun =~ /wood/
      @lwood += 1
    end
  }
  if @shaft == 0
    if @lwood == 0
      getmaterials.call
    else
      chopwood.call
    end
  else
    if settings['Fexpsaver']
      expcheck.call
    end
    arrowmake.call
  end
  @shaft = 0
  @lwood = 0
}
