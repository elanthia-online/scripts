=begin

  This script exists to backup several primary files used by lich.

    Usage: #{$lich_char}jbackup help

  Thoughts for future changees:
    * upload the backup to another source via FTP, SFTP, etc.
    * save a maximum given number of backups and delete anything additional.

        author: elanthia-online
  contributors: Jahadeem, Tysong
      required: Lich > 5.0.0
       version: 0.2.3
          game: All
          tags: backup, back up, lich, files, copy

  0.0.1 (2019-09-14): Initial Version
  0.0.2 (2019-09-15): QOL updates
  0.0.3 (2019-09-16): Added safe script trust information.
    Prepended all output with script name.
  0.0.4 (2019-09-18): Added detection for invdb.lic to backup inv.db3
  0.1.0 (2019-09-19): Changed invdb.lic detection to Scripts.exists?
    Added ability to add, remove, & list files to backup.
  0.1.1 (2019-09-19): Bug fixes.
  0.2.0 (2019-09-30): Backups made with this version on will be put in a jbackup folder under your lich folder.
    Inside folders will be date and time coded with the associated backup date and time.
  0.2.1 (2019-09-30): Fixed bug where not running init caused no backups.
    Changed all output to catch and output all at once at script exit.
  0.2.2 (2023-01-23): Update for Ruby v3 compatibility
  0.2.3 (2023-03-15): Rubocop cleanup
    Fix unnecessary creation of backup folders when running add, remove, init, list, reset, help commands

=end

output = ""

require 'fileutils'

if Script.current.vars.empty?
  backupFolder = File.join(LICH_DIR, "jbackup")
  if not File.exist?(backupFolder)
    output.concat "[#{Script.current.name}] Missing #{backupFolder}\n"
    if FileUtils.mkdir_p backupFolder
      output.concat "[#{Script.current.name}] Created #{backupFolder}\n"
    else
      output.concat "[#{Script.current.name}] Cannot Create #{backupFolder}\n"
      respond output
      exit
    end
  end
  if not File.directory?(backupFolder)
    output.concat "[#{Script.current.name}] #{backupFolder} IS NOT A FOLDER!\n"
    respond output
    exit
  end
  backupTime = Time.new.strftime("%Y%m%d-%H%M%S")
  thisBackupFolder = File.join(backupFolder, backupTime)
  if not File.exist?(thisBackupFolder)
    if FileUtils.mkdir_p thisBackupFolder
      output.concat "[#{Script.current.name}] Created #{thisBackupFolder}\n"
    else
      output.concat "[#{Script.current.name}] Cannot Create #{thisBackupFolder}\n"
      respond output
      exit
    end
  end
end

backupFiles = ['data/alias.db3', 'data/entry.dat', 'data/lich.db3']
backupList = File.join(LICH_DIR, 'data', 'jbackup.txt')
if Script.current.vars[1].downcase == 'add'
  if not File.exist?(backupList)
    output.concat "[#{Script.current.name}] Missing datafile #{$clean_lich_char}#{Script.current.name}\n"
    output.concat "[#{Script.current.name}] Run: #{$clean_lich_char}#{Script.current.name} init\n"
    respond output
    exit
  end
  if not Script.current.vars[2]
    output.concat "[#{Script.current.name}] Missing backup item to add.\n"
    respond output
    exit
  end
  if not File.exist?("#{$lich_dir}#{Script.current.vars[2]}")
    output.concat "[#{Script.current.name}] Item does not exist to backup: #{$lich_dir}#{Script.current.vars[2]}\n"
    respond output
    exit
  end
  output.concat "[#{Script.current.name}] Adding to backup list: #{Script.current.vars[2]}\n"
  backupListFile = File.open(backupList);
  backupFiles = backupListFile.readlines.map(&:chomp)
  backupListFile.close
  backupFiles.each do |file|
    if file.include? Script.current.vars[2]
      output.concat "[#{Script.current.name}] Already in backup list, file not added.\n"
      respond output
      exit
    end
  end
  File.write(backupList, "#{Script.current.vars[2]}\n", mode: "a")
  respond output
  exit
elsif Script.current.vars[1].downcase == 'list'
  if File.exist?(backupList)
    backupListFile = File.open(backupList);
    backupFiles = backupListFile.readlines.map(&:chomp)
    backupListFile.close
  end
  output.concat "[#{Script.current.name}] Backing up files in #{$lich_dir}\n"
  backupFiles.each do |file|
    output.concat "[#{Script.current.name}] #{file}\n"
  end
elsif Script.current.vars[1].downcase == 'reset'
  output.concat "[#{Script.current.name}] Resetting backup list\n"
  if Script.exists?("invdb.lic")
    output.concat "[#{Script.current.name}] Detected invdb.lic..."
    backupFiles.push("data/inv.db3")
  end
  backupListFile = File.open(backupList, "w");
  backupListFile.close
  backupFiles.each do |file|
    File.write(backupList, "#{file}\n", mode: "a")
  end
  respond output
  exit
elsif Script.current.vars[1].downcase == 'remove'
  if not File.exist?(backupList)
    output.concat "[#{Script.current.name}] Missing datafile #{$clean_lich_char}#{Script.current.name}\n"
    respond output
    exit
  end
  if not Script.current.vars[2]
    output.concat "[#{Script.current.name}] Missing backup item to remove.\n"
    respond output
    exit
  end
  output.concat "[#{Script.current.name}] Removing from backup list: #{Script.current.vars[2]}\n"
  backupListFile = File.open(backupList);
  backupFiles = backupListFile.readlines.map(&:chomp)
  backupListFile.close
  File.open(backupList, "w")
  backupFiles.each do |file|
    unless file.include? Script.current.vars[2]
      File.write(backupList, "#{file}\n", mode: "a")
    end
  end
  respond output
  exit
elsif Script.current.vars[1].downcase == 'init'
  if File.exist?(backupList)
    output.concat "[#{Script.current.name}] Already initiated.\n"
    output.concat "[#{Script.current.name}] If you want to reset then do #{$clean_lich_char}#{Script.current.name} reset\n"
    respond output
    exit
  end
  output.concat "[#{Script.current.name}] Initiating backup list\n"
  if Script.exists?("invdb.lic")
    output.concat "[#{Script.current.name}] Detected invdb.lic..."
    backupFiles.push("data/inv.db3")
  end
  backupListFile = File.open(backupList, "w");
  backupListFile.close
  backupFiles.each do |file|
    File.write(backupList, "#{file}\n", mode: "a")
  end
  respond output
  exit
elsif Script.current.vars[1].downcase == 'help'
  output.concat "[#{Script.current.name}] This script exists to backup several primary files used by lich.\n"
  output.concat "[#{Script.current.name}] By default this script backs up: alias.db3, entry.dat, lich.db3, and inv.db3\n"
  output.concat "[#{Script.current.name}] This script requires trust.\n"
  output.concat "[#{Script.current.name}] \n"
  output.concat "[#{Script.current.name}] Please remember to clean out old backups on ocassion by hand.\n"
  output.concat "[#{Script.current.name}] \n"
  output.concat "[#{Script.current.name}] usage:\n"
  output.concat "[#{Script.current.name}] \n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name}                 Backup Files\n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name} add <file>      Add file to backup list.\n"
  output.concat "[#{Script.current.name}]        You must specify the directory/folder under you lich home/root.\n"
  output.concat "[#{Script.current.name}]        Example: #{$clean_lich_char}#{Script.current.name} add scripts/jbackup.lic\n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name} init            Initiate new backup list.\n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name} list            List files in backup list.\n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name} remove <file>   Remove file to backup list.\n"
  output.concat "[#{Script.current.name}]        Example: #{$clean_lich_char}#{Script.current.name} remove jbackup\n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name} reset           Reset backup list to default.\n"
  output.concat "[#{Script.current.name}]   #{$clean_lich_char}#{Script.current.name} help            This help menu.\n"
  output.concat "[#{Script.current.name}] \n"
  respond output
  exit
else
  if File.exist?(backupList)
    backupListFile = File.open(backupList);
    backupFiles = backupListFile.readlines.map(&:chomp)
    backupListFile.close
  else
    output.concat "[#{Script.current.name}] Backup list missing -- using default.\n"
    output.concat "[#{Script.current.name}] To add or remove from the backup list please initiate the script first by doing #{$clean_lich_char}#{Script.current.name} init\n"
    if Script.exists?("invdb.lic")
      output.concat "[#{Script.current.name}] Detected invdb.lic..."
      backupFiles.push("data/inv.db3")
    end
  end
  backupFiles.each do |file|
    baseDir = File.dirname(file)
    checkBackupFolder = File.join(thisBackupFolder, baseDir)
    if not File.exist?(checkBackupFolder)
      if FileUtils.mkdir_p checkBackupFolder
        output.concat "[#{Script.current.name}] Created #{checkBackupFolder}\n"
      else
        output.concat "[#{Script.current.name}] Cannot Create #{checkBackupFolder}\n"
        output.concat "[#{Script.current.name}] Backup Failure: #{fullfile}\n"
        next
      end
    end
    fullfile = File.join(LICH_DIR, file)
    if File.exist?(fullfile)
      if File.exist?(fullfile)
        sizeOrig = File.size(fullfile)
        backupfullfile = File.join(thisBackupFolder, file)
        FileUtils.copy_file(fullfile, backupfullfile)
        sizeBackup = File.size(backupfullfile)
        if (sizeOrig == sizeBackup)
          output.concat "[#{Script.current.name}] Backup Success: #{fullfile} to #{backupfullfile}\n"
        else
          output.concat "[#{Script.current.name}] Backup Size Mismatch: #{fullfile} to #{backupfullfile}\n"
        end
      else
        output.concat "[#{Script.current.name}] ERROR: Not a file: #{fullfile}\n"
      end
    else
      output.concat "[#{Script.current.name}] ERROR: Does not exist: #{fullfile}\n"
    end
  end
end
respond output
exit
