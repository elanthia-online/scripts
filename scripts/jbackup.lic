=begin

	This script exists to backup several primary files used by lich.

	Thoughts for future changees:
		* upload the backup to another source via FTP, SFTP, etc.
		* save a maximum given number of backups and delete anything additional.
		* Move list of files to backup into jbackup folder

	Author: Richard A. Secor (rsecor@rsecor.com) AKA Jahadeem
	Author Website: https://www.jahadeem.com/gsiv/
	required: Lich > 5.0.0
	Version: 0.2.2
	Date Created: 2019-09-14
	Date Updated: 2019-09-30
	
	game: All
	tags: backup, back up, lich, files, copy
	Usage: #{$lich_char}jbackup

	0.0.1 (2019-09-14): Initial Version
	0.0.2 (2019-09-15): QOL updates
	0.0.3 (2019-09-16): Added safe script trust information.
		Prepended all output with script name.
	0.0.4 (2019-09-18): Added detection for invdb.lic to backup inv.db3
	0.1.0 (2019-09-19): Changed invdb.lic detection to Scripts.exists?
		Added ability to add, remove, & list files to backup.
	0.1.1 (2019-09-19): Bug fixes.
	0.2.0 (2019-09-30): Backups made with this version on will be put in a jbackup folder under your lich folder.
		Inside folders will be date and time coded with the associated backup date and time.
	0.2.1 (2019-09-30): Fixed bug where not running init caused no backups.
		Changed all output to catch and output all at once at script exit.
	0.2.2 (2023-01-23): Update for Ruby v3 compatibility

=end

output = ""

require 'fileutils'
backupFolder = "#{$lich_dir}jbackup"
if not File.exist?(backupFolder)
	output.concat "[#{script.name}] Missing #{backupFolder}\n"
	if FileUtils.mkdir_p backupFolder
		output.concat "[#{script.name}] Created #{backupFolder}\n"
	else
		output.concat "[#{script.name}] Cannot Create #{backupFolder}\n"
		respond output
		exit
	end
end
if not File.directory?(backupFolder)
	output.concat "[#{script.name}] #{backupFolder} IS NOT A FOLDER!\n"
	respond output
	exit
end
backupTime = Time.new.strftime("%Y%m%d-%H%M%S")
thisBackupFolder = "#{backupFolder}/#{backupTime}"
if not File.exist?(thisBackupFolder)
	if FileUtils.mkdir_p thisBackupFolder
		output.concat "[#{script.name}] Created #{thisBackupFolder}\n"
	else
		output.concat "[#{script.name}] Cannot Create #{thisBackupFolder}\n"
		respond output
		exit
	end
end

backupFiles = [ 'data/alias.db3' , 'data/entry.dat' , 'data/lich.db3' ]
backupList = "#{$lich_dir}data/jbackup.txt"
if script.vars[ 1 ].downcase == 'add'
	if not File.exist?(backupList)
		output.concat "[#{script.name}] Missing datafile #{$clean_lich_char}#{script.name}\n"
		output.concat "[#{script.name}] Run: #{$clean_lich_char}#{script.name} init\n"
		respond output
		exit
	end
	if not script.vars[ 2 ] 
		output.concat "[#{script.name}] Missing backup item to add.\n"
		respond output
		exit
	end
	if not File.exist?("#{$lich_dir}#{script.vars[2]}")
		output.concat "[#{script.name}] Item does not exist to backup: #{$lich_dir}#{script.vars[2]}\n"
		respond output
		exit
	end
	output.concat "[#{script.name}] Adding to backup list\n"
	backupListFile = File.open(backupList);
	backupFiles = backupListFile.readlines.map(&:chomp)
	backupListFile.close
	backupFiles.each do |file|
		if file.include? script.vars[ 2 ]
			output.concat "[#{script.name}] Already in backup list: #{script.vars[ 2 ]}\n"
			respond output
			exit
		end
	end
	File.write(backupList,"#{script.vars[ 2 ]}\n",mode: "a")
	respond output
	exit 
elsif script.vars[1].downcase == 'list'
	if File.exist?(backupList)
		backupListFile = File.open(backupList);
		backupFiles = backupListFile.readlines.map(&:chomp)
		backupListFile.close
	end
	output.concat "[#{script.name}] Backing up files in #{$lich_dir}\n"
	backupFiles.each do |file|
		output.concat "[#{script.name}] #{file}\n"
	end
elsif script.vars[1].downcase == 'reset' 
	output.concat "[#{script.name}] Resetting backup list\n"
	if Script.exists?("invdb.lic")
		output.concat "[#{script.name}] Detected invdb.lic..."
		backupFiles.push("data/inv.db3")
	end
	backupListFile = File.open(backupList,"w");
	backupListFile.close
	backupFiles.each do |file|
		File.write(backupList,"#{file}\n",mode: "a")
	end
	respond output
	exit 
elsif script.vars[1].downcase == 'remove'
	if not File.exist?(backupList)
		output.concat "[#{script.name}] Missing datafile #{$clean_lich_char}#{script.name}\n"
		respond output
		exit
	end
	if not script.vars[ 2 ] 
		output.concat "[#{script.name}] Missing backup item to remove.\n"
		respond output
		exit
	end
	output.concat "[#{script.name}] Removing from backup list\n"
	backupListFile = File.open(backupList);
	backupFiles = backupListFile.readlines.map(&:chomp)
	backupListFile.close
	backupListFile = File.open(backupList,"w");
	backupFiles.each do |file|
		if not file.include? script.vars[ 2 ]
			File.write(backupList,"#{file}\n",mode: "a")
		end
	end
	respond output
	exit 
elsif script.vars[1].downcase == 'init'
	if File.exist?(backupList)
		output.concat "[#{script.name}] Already initiated.\n"
		output.concat "[#{script.name}] If you want to reset then do #{$clean_lich_char}#{script.name} reset\n"
		respond output
		exit
	end
	output.concat "[#{script.name}] Initiating backup list\n"
	if Script.exists?("invdb.lic")
		output.concat "[#{script.name}] Detected invdb.lic..."
		backupFiles.push("data/inv.db3")
	end
	backupListFile = File.open(backupList,"w");
	backupListFile.close
	backupFiles.each do |file|
		File.write(backupList,"#{file}\n",mode: "a")
	end
	respond output
	exit 
elsif script.vars[1].downcase == 'help'
	output.concat "[#{script.name}] This script exists to backup several primary files used by lich.\n"
	output.concat "[#{script.name}] By default this script backs up: alias.db3, entry.dat, lich.db3, and inv.db3\n"
	output.concat "[#{script.name}] This script requires trust.\n"
	output.concat "[#{script.name}] \n"
	output.concat "[#{script.name}] Please remember to clean out old backups on ocassion by hand.\n"
	output.concat "[#{script.name}] \n"
	output.concat "[#{script.name}] usage:\n"
	output.concat "[#{script.name}] \n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name}                 Backup Files\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} add <file>      Add file to backup list.\n"
	output.concat "[#{script.name}]        You must specify the directory/folder under you lich home/root.\n"
	output.concat "[#{script.name}]        Example: #{$clean_lich_char}#{script.name} add scripts/jbackup.lic\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} init            Initiate new backup list.\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} list            List files in backup list.\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} remove <file>   Remove file to backup list.\n"
	output.concat "[#{script.name}]        Example: #{$clean_lich_char}#{script.name} remove jbackup\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} reset           Reset backup list to default.\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} help            This help menu.\n"
	output.concat "[#{script.name}] \n"
	respond output
	exit
elsif script.vars[ 1 ].downcase == 'add'
	File.write(script.vars[ 2 ],"#{file}\n",mode: "a")
else
	if File.exist?(backupList)
		backupListFile = File.open(backupList);
		backupFiles = backupListFile.readlines.map(&:chomp)
		backupListFile.close
	else
		output.concat "[#{script.name}] Backup list missing -- using default.\n"
		output.concat "[#{script.name}] To add or remove from the backup list please initiate the script first by doing #{$clean_lich_char}#{script.name} init\n"
		if Script.exists?("invdb.lic")
			output.concat "[#{script.name}] Detected invdb.lic..."
			backupFiles.push("data/inv.db3")
		end
	end
	backupFiles.each do |file|
		baseDir = File.dirname(file)
		checkBackupFolder = "#{thisBackupFolder}/#{baseDir}"
		if not File.exist?(checkBackupFolder)
			if FileUtils.mkdir_p checkBackupFolder
				output.concat "[#{script.name}] Created #{checkBackupFolder}\n"
			else
				output.concat "[#{script.name}] Cannot Create #{checkBackupFolder}\n"
				output.concat "[#{script.name}] Backup Failure: #{fullfile}\n"
				next
			end
		end
		fullfile = "#{$lich_dir}#{file}"
		if File.exist?(fullfile)
			if File.exist?(fullfile)
				sizeOrig = File.size(fullfile)
				backupfullfile = "#{thisBackupFolder}/#{file}"
				FileUtils.copy_file(fullfile,backupfullfile)
				sizeBackup = File.size(backupfullfile)
				if ( sizeOrig == sizeBackup )
					output.concat "[#{script.name}] Backup Success: #{fullfile} to #{backupfullfile}\n"
				else
					output.concat "[#{script.name}] Backup Size Mismatch: #{fullfile} to #{backupfullfile}\n"
				end
			else
				output.concat "[#{script.name}] ERROR: Not a file: #{fullfile}\n"
			end
		else
			output.concat "[#{script.name}] ERROR: Does not exist: #{fullfile}\n"
		end	
	end
end
respond output
exit
