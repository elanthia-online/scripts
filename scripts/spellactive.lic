=begin
    Keeps spells active. This script can be used in place of
    sigils/signs and will keep any spell in the list active.

      Usage: ;spellactive help

         author: elanthia-online
   contributors: spiffyjr, Tysong
           game: Gemstone
           tags: spells, magic, active
        version: 1.3.1

  Version Control:
    Major_change.feature_addition.bugfix

    1.3.1 (2023-01-25)
      Add check for cooldown for short duration buffs
      Update unable to cast regex for sigils and symbols
    1.3.0 (2022-07-18)
      Added nocast rooms.
    1.2.1 (2022-05-07)
      Fixed barkskin. Will not check for cooldown.
    1.2.0 (2022-04-10)
      Fix for beacon of courage
    1.1 (2021-10-11)
      updates to support new cmans  
    1.0 (unknown date)
      Initial release
=end

script.want_downstream = false
clear

settings = CharSettings.to_hash
settings['power'] = true if settings['power'].nil?                        
settings['spells'] ||= Array.new
settings['nocast'] ||= Array.new

get_spell = proc { |input|
  input.gsub!(/^\w+\s/, '')
  spell = Spell[input]
  if not spell
    echo "Could not find spell: " + input.to_s
    exit
  end
  spell
}

case script.vars[1]
  when /^add$/i
    if script.vars[2].nil?
      echo "You're doing it wrong"
      exit
    end

    spell = get_spell.call(script.vars[0])

    if settings['spells'].include?(spell.num)
      echo "You are already keeping #{spell.name} active"
      exit
    end

    if not spell.known? || (CMan.known?(spell.name) if spell.circle == '96') || (Spell[1608].known? if spell.num == 1699)
      echo "You do not know #{spell.name}"
      exit
    end

    settings['spells'].push(spell.num)
    echo "Added #{spell.name}"
  when /^(?:delete|del|remove|rem)$/i
    if script.vars[2].nil?
      echo "You're doing it wrong"
      exit
    end

    spell = get_spell.call(script.vars[0])

    if not settings['spells'].include?(spell.num)
      echo "You are not keeping #{spell.name} active"
      exit
    end

    settings['spells'].delete(spell.num)
    echo "Removed #{spell.name}"
  when /^nocast$/i
    if script.vars[2].nil?
      echo "You're doing it wrong"
      exit
  end
    case script.vars[2]
    when /^add$/i
      if script.vars[3].nil?
      echo "You're doing it wrong"
      exit
    end
    
    if settings['nocast'].include?(script.vars[3])
      echo "You are already not casting in room #{script.vars[3]}"
      exit
    end
    
    settings['nocast'].push(script.vars[3])
    echo "added #{script.vars[3]} to nocast list"
    when /^(?:delete|del|remove|rem)$/i
      if script.vars[3].nil?
      echo "You're doing it wrong"
      exit
    end
    
    if not settings['nocast'].include?(script.vars[3])
      echo "You are already not casting in room #{script.vars[3]}"
      exit
    end
    
    settings['nocast'].delete(script.vars[3])
    echo "removed #{script.vars[3]} from nocast list"
    when /^clear$/i
    settings['nocast'] = nil
    echo "cleared nocast rooms"
    exit
  end  
  when /^list$/i
    echo "Spell list"
    settings['spells'].sort.each { |spell| echo sprintf '%4d: %s', spell, Spell[spell].name }
  echo "Nocast rooms"
  settings['nocast'].sort.each { |room| echo sprintf '%4d: %s', room, Room[room].title }
  when /^power$/i
    if settings['power'] == true
    settings['power'] = false
    echo "Don't use Sigil of Power when mana is 25 below max"
  elsif settings['power'] == false
    settings['power'] = true
    echo "Use Sigil of Power when mana is 25 below max"
  end
  exit
  when /^(?:help|\?)$/
    echo "Spell Active Help"
    echo sprintf '%10s      %s', 'add [num|name]', 'add a spell to the list'
    echo sprintf '%10s      %s', 'del [num|name]', 'delete a spell from the list'
    echo sprintf '%10s      %s', 'nocast add [num]', 'add a room to the nocast list'
    echo sprintf '%10s      %s', 'nocast del [num]', 'delete a room from the nocast list'
    echo sprintf '%10s      %s', 'nocast clear', 'delete all rooms from the nocast list'
    echo sprintf '%2s      %s', 'power', 'toggle usage of sigil of power'
    echo sprintf '%2s      %s', 'list', 'list spells you are keeping active'
end

exit unless script.vars[1].nil?

loop {
  wait_while { dead? }
  settings['spells'].each { |spell|
  wait_while { settings['nocast'].include?(Room.current.id.to_s) }
    spell = Spell[spell]

    unless ( spell.active? || (Lich::Util.normalize_lookup('Buffs', spell.name) if spell.circle == '96') )
      next if (spell.num == 605 && Effects::Cooldowns.active?("Barkskin"))
      next if [140, 211, 215, 219, 240, 919, 1619, 1650].include?(spell.num) && Effects::Cooldowns.active?(spell.name)
      wait_while { muckled? or (checkprep != 'None') }
      waitcastrt?
      waitrt?

      # Allow Beacon of Courage to be kept up by recasting Defense of the Faithful
      spell = Spell[1608] if spell.num == 1699

      # Stagger signs that use spirit (thanks Tillmen!)
      spirit_count = 0;
      [Spell['Sign of Swords'], Spell['Sign of Shields'], Spell['Sign of Dissipation']].each { |sn|
        spirit_count += 1 if sn.active? and (sn.time_per - sn.timeleft) < 3
      }

      # Logic for casting spells
      if ( (spell.affordable? and spell.known? and (spell.spirit_cost.zero? or (percentspirit > 75 and spirit_count < 2))) || (CMan.available?(spell.name) if spell.circle == '96') )
        next if (spell.name == 'Sign of Clotting' and Spell['Sign of Staunching'].active?)

        was_hidden = hidden?
        if [606, 640].include?(spell.num)
          if !Spell[625].active? and Spell[625].affordable?
            Spell[625].cast
          end

          next
        end

        # only cast certain things in the presence of an enemy
        if (spell.num == 506 or spell.name =~ /^Sigil of (?:Minor|Major) (?:Bane|Protection)/) and GameObj.npcs.find_all { |npc| npc.type !~ /passive/ }.nil?
          next
        end
       
        script.want_downstream = true
        result = spell.cast 
        if result =~ /The power from your (?:sign|sigil|symbol) dissipates into the air\.|Your magic fizzles ineffectually\./
          room_count = XMLData.room_count
          wait_while { room_count == XMLData.room_count }
        end

        script.want_downstream = false
        clear

        fput "hide" if was_hidden and !hidden?
      end
    end

    # Sigil of Power
    if (maxmana - checkmana) > 25 and Spell['Sigil of Power'].known? and Spell['Sigil of Power'].affordable? && settings['power']
      waitcastrt?
      waitrt?

      script.want_downstream = true
      fput "sigil of power"
      script.want_downstream = false
      sleep(1)
    end
  }

  sleep(1)
}
