=begin
 
              author: Elanthia-Online
			  Original Author: Glaves
               game: Gemstone
               tags: locksmith, pool, locksmith pool, picking, boxes, loot, locksmith
           required: Lich > 5.0.1
            version: 2.1.4
 
 Box pool script

 Original work done by Glaves, but now maintained via elanthia-online
 If you find any bugs please report them to the Gemstone Scripting Discord Channel

 **Change Log**
 1.00 - initial release
 1.01 - Added RR waste bin
 1.02 - added Icemule (Boss) NPC
 1.03 - Added plinite support
 1.04 - Added very basic disk logic (you still need a box in your inventory to trigger the initial deposit, but it will check your disk while at the pool)
 1.05 - Removed the need for Foreach, added better disk logic, fixed wastebins
 1.06 - Added Solhaven NPC
 1.07 - Fixed wastebin in Solhaven, added plucking for plinites
 1.08 - Updated Plinite handling logic
 1.09 - Should have the RT issue fixed - Thank you Lostranger
 1.10 - Updated the disk logic - Reverted change to RT back to a dumber hard pause
 1.11 - Added the ability to only run the looting portion of the script ;PoolParty loot
 1.12 - Props to Licel - Added a help menu, you can now set your tip ;poolparty tip ## - LICEL!
 1.13 - Fixed syntax with new Tip setting feature
 1.14 - Added a check to make sure you have your lootsack set
 1.15 - Added the ability to toggle waiting for a disk ;Poolparty skipdiskwait to toggle- Licel
 1.16 - Fixed plinites being put in the wastebin - Thank you Sentral!
 1.17 - Added Zul Logoth
 1.18 - Added Canister to trashbins - Sped up looting a bit
 1.19 - Fixed issue with the flippable coins
 1.20 - Shout to Selfane - Added ability to toggle between percentage or flat tip - Selfane
 1.21 - Added SETTINGS - Check your current settings ;poolparty settings
 1.22 - Fixed a Typo!, oops.
 1.23 - Changed Vars to regex for case insensitive
 1.24 - Will now open lootsack before running logic - Shout out to Gidion for the suggestion!
 1.25 - Apparently using regex for the vars was bad.  i fixed it
 1.26 - Had to move where/when the script opens your lootsack so it wasn't annoying while changing settings
 1.27 - Added logic for items left in boxes before trashing
 1.28 - fixed not defaulting to percentage based tip
 1.29 - Fixed an issue with the flat/silver thing not working right - Selfane
 1.30 - Ooops - But i fixed it
 1.31 - Added a check for a full l ootsack
 1.32 - Fixed wandering gnome npc issue on FWI - Shout to Lieo for catching the bug!
 1.32 - Added check another check for loot still in boxes
 1.33 - FIXED!!!!  The stupid shit with peoples disks/names matching inside the regex and then trying to use it as a wastebin
 1.34 - Attempting to speed things up a bit
 2.00 - Rewrite - Steel Talon - See Poolparty help - REQUIRES ABOVE RUBY 2.0 (Update your ruby people)
 2.01 - Fixed the library not downloading/loading issue
 2.02 - Moved to Elanthia Online
 2.03 - Fixed commas in INFO
 2.04 - Changed Helper module to Helper to not conflict with shared library
 2.05 - Code cleanup.  Hand sanity check for boxes.
 2.06 - Fixed issue with not waiting for disk during deposit
 2.07 - Fixed script specific scoping
        Fixed issue with tip-type incorrectly erroring out
        Added ability to pass in amount of boxes to loot via ;poolparty loot num  EG ;poolparty loot 5
        Reworked internal errors to provide a better experience.
        Reworked all Oleani code to now match the new Oleani scoping
 2.08 - minor typo fix for Oleani::Support constant
 2.09 - Fix for missing PoolParty namespace in caught exceptions
 2.10 - Fixed a bug where scanboxes would exit out prematurely
        Fixed a typo in the root rescue
        Added code to better handle looting unknown boxes
        Fixed non-recognized boxes not being moved to your lootsack
 2.11 - Added the option to look into each box before dumping it
        Fixed error when attempting to hand in an already unlocked box
 2.12 - Add trickster to list of pool boss names (Icemule update)
 2.13	Updated Oleani version to account for inventory verb changes
 2.14	Add loot option to loot boxes to match stow list before dumping in default container



=end

begin
  raise "Oleani is missing" unless Script.exists? "oleani-lib.lic"
  load 'scripts/oleani-lib.lic'
  raise "Oleani version is out of date" if Oleani::version < Gem::Version.new('1.0')
rescue => error
  echo error.message
  echo "Downloading Oleani-lib.lic"
  do_client(";repository download oleani-lib.lic")
  wait_while {running?('repository')}
  retry if Script.exists? "oleani-lib.lic"
  echo "Some how a core script is missing.  Don't know what happened."
  exit
end
begin
  raise "Slop command processor is missing" unless Script.exists? "slop-lib.lic"
  load 'scripts/slop-lib.lic'
rescue => error
  echo error.message
  echo "Downloading Slop-lib.lic"
  do_client(";repository download slop-lib.lic")
  wait_while {running?('repository')}
  retry if Script.exists? "slop-lib.lic"
  echo "Some how a core script is missing.  Don't know what happened."
  exit
end

if defined?(GameObj.type_data)
  GameObj.load_data if GameObj.type_data.empty? or GameObj.type_data.nil?
  if GameObj.type_data.nil?
    wait_while {running?('repository')}
    start_script 'repository', ['download', 'gameobj-data.xml']
    wait_while {running?('repository')}
    GameObj.load_data
    exit if GameObj.type_data.nil?
  end
end

module PoolParty
  # Cleanup and move to Oleani later
  class LocksmithPool
    include Oleani::Support

    attr_accessor :count

    error :MissingNPC, "Unable to locate the locksmith pool npc"
    error :FullPool, "The locksmith pool is full.  Please clear some boxes and rerun poolparty."
    error :NotEnoughSilver, "!! You do not appear to have enough silver on you !!"
    error :NotaBox
    error :BoxNotEmpty, "Box does not appear to be empty."
    error :NoTrashBin, "Could not find a trashbin"
    error :Overloaded, "You are overloaded."
    error :AlreadyOpenBox, "Box to hand in is already unlocked"
    error :NoBoxes


    def initialize
      @count = 0

      build_commands
    end


    def build_commands
      # Notes:
      # Return: An object that contains @success, @raw_return, and @exception
      #
      # timeout is the command timeout
      # whiny causes any exception to be rethrown
      # success causes the return value to be true if matched
      # failure causes the return value to be false if matched
      # nomatch causes an exception and return value to be false if nothing else matches
      #
      @deposit_command = Oleani::Command.create("give %{npc} %{tip}") do |cmd|
        cmd.timeout = 4
        cmd.whiny = true

        cmd.success /^You want a locksmith to open/
        cmd.failure /doesn't appear to be a box\./, NotaBox
        cmd.failure /is already open/, AlreadyOpenBox
        cmd.failure /we're already holding as many boxes for you as we can/, FullPool
        cmd.nomatch "Something has gone wrong that we can not process.  Please retry poolparty"
      end


      @confirm_deposit = Oleani::Command.create("give %{npc} %{tip}") do |cmd|
        cmd.timeout = 4
        cmd.whiny = true
        cmd.success /Your tip .*? has been recorded/
        cmd.failure /You don't have that much on you/, NotEnoughSilver
      end

      @confirm_deposit_test = Oleani::Command.create("give %{npc} %{tip}") do |cmd|
        cmd.timeout = 4
        cmd.whiny = true
        cmd.success /Your tip .*? has been recorded/
        cmd.failure /You don't have that much on you/ do |args|
          echo "#{args[:npc]} - #{args[:tip]}"
          pause_script
        end
      end

      @retrieve_box = Oleani::Command.create("ask %{npc} about return") do |cmd|
        cmd.timeout = 4

        # Will raise exceptions automatically if whiny is set to true.
        cmd.whiny = true
        cmd.failure /We don't have any boxes ready for you\./, NoBoxes
        cmd.failure /You'll need an empty hand to do that\./, Overloaded
        cmd.failure /You need to lighten your load first\./, Overloaded
        cmd.success /Alright, here's your/

        cmd.nomatch "SuperFailure"
      end

      @trash_box = Oleani::Command.create("put #%{id} in %{bin}") do |cmd|
        cmd.timeout = 4
        cmd.whiny = true

        cmd.success /you feel pleased with yourself at having cleaned up the surrounding area\./
        cmd.failure /There appears to be an item or items attached to the container/, BoxNotEmpty
        cmd.nomatch BoxNotEmpty
      end
    end

    # Note: Three possible states, success, failure, or exception.
    # Returns: true or false
    def trash_box(box)
      bin = get_bin

      raise NoTrashBin if bin.nil? || bin.empty?

      @trash_box.run(id: box.id, bin: bin)
    end

    # Note: Based off of the original Glaves script
    # Should revisit at some point to see if there is a better way.
    def get_bin
      trash_list = ["barrel", "bin", "wastebasket", "trashcan", "bucket", "wooden crate", "iron barrel", "canister", "wastebin"]

      bin = trash_list.find {|x| Room.current.description.to_s =~ /#{x}/}

      bin = GameObj.loot.find {|t|

        t.name =~ /\bbarrel|\bbin|\bwastebasket|\btrashcan|\bbucket|\bcanister|\bwastebin/ && t.noun != "disk"

      } if bin.nil? || bin.empty?

      bin
    end

    def deposit_right_hand(tip)
      npc = get_pool_master

      raise MissingNPC if npc.nil?

      @deposit_command.run(npc: npc, tip: tip)
      @confirm_deposit.run(npc: npc, tip: tip)
    end

    # Note: Based off of the original Glaves script
    # Should revisit at some point to see if there is a better way.
    def get_pool_master
      GameObj.npcs.find {|npc|
        if Room.current.id != 17589
          npc.noun =~ /[Gg]nome|[Ww]oman|[Aa]ttendant|[Mm]erchant|[Ww]orker|[Bb]oss|[Jj]ahck|[Dd]warf|[Tt]rickster/
        else
          npc.noun =~ /attendant/
        end
      }
    end

    def retrieve_box

      npc = get_pool_master

      # Situations where someone messed with the locksmith pool NPC
      raise MissingNPC if npc.nil?

      @retrieve_box.run(npc: npc)
      Oleani::Objects::Box.wrap(GameObj.right_hand)
    end

  end
end

# UI code
module PoolParty

end

module PoolParty
  VERSION = "2.1.4"

  def self.version
    Gem::Version.new(VERSION)
  end

  class Config
    #include Oleani::Record

    attr_reader :tip_type, :withdraw_amount, :start_room, :deposit_all, :skip_disk_wait,
                :tip_amount, :loot_command, :options, :look_in_box

    def self.assertbool(value, msg)
      raise ArgumentError.new(msg) if value.downcase.strip != ~/true|false/
    end

    def toggle_skip_disk_wait
      CharSettings['skip_disk_wait'] = !@skip_disk_wait

      @skip_disk_wait = CharSettings['skip_disk_wait']
    end

    def toggle_deposit_all
      CharSettings['deposit_all'] = !@deposit_all

      @deposit_all = CharSettings['deposit_all']
    end

    def toggle_look_in_box
      CharSettings['look_in_box'] = !@look_in_box

      @look_in_box = CharSettings['look_in_box']
    end

    def toggle_loot_command
      CharSettings['loot_command'] = !@loot_command

      @loot_command = CharSettings['loot_command']
    end


    def initialize(start_room)
      @start_room = start_room
      @look_in_box = CharSettings['look_in_box'] ||= false
      @loot_command = CharSettings['loot_command'] ||= false
      @tip_amount = CharSettings['tip_amount'] ||= "25"
      @tip_type = CharSettings['tip_type'] ||= "percent"
      @skip_disk_wait = CharSettings['skip_disk_wait'] ||= false
      @withdraw_amount = CharSettings['withdraw_amount'] ||= 10000
      @deposit_all = CharSettings['deposit_all'] ||= false
    end


    def tip_amount=(amount)
      CharSettings['tip_amount'] = amount
      @tip_amount = CharSettings['tip_amount']
    end

    def withdraw_amount=(amount)
      CharSettings['withdraw_amount'] = amount
      @withdraw_amount = CharSettings['withdraw_amount']
    end

    def tip_type=(type)
      cleaned_type = type.downcase.strip.downcase

      unless cleaned_type =~ /percent|silver/
        raise ArgumentError.new("Tip Type argument exception: Only PERCENT or SILVER is allowed")
      end

      CharSettings['tip_type'] = cleaned_type

      @tip_type = CharSettings['tip_type']
    end

  end

  @config = Config.new(Room.current)

  def self.config
    @config
  end
end

module PoolParty

  # Note: Sometimes lich freaks out and tries to store your hands in every container.
  def self.clear_hands
    Oleani::Retriable::retry_with(
        attempts: 2,
        pausescript: true) {
      multifput "sheath", "stow all"
      empty_hands

      raise "Unable to clear your hands.  Make sure you have room." unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?
    }
  end

  def self.validate_prereqs
    raise "**lootsack has not been set, set it with** @@;vars set lootsack=container@@" if UserVars.lootsack.nil? or UserVars.lootsack.empty?

    lootsack = Oleani::Helpers.find_sack
    raise "**We could not find the specified loot sack.  Please validate #{UserVars.lootsack} is still valid**" if lootsack.nil? || lootsack.empty?

    fput "open ##{lootsack.id}"

  end

  def self.deposit(script)
    Oleani::IO.send("** [Starting Deposit] **")

    tip = "#{@config.tip_amount} #{@config.tip_type == "percent" ? @config.tip_type : " "}"

    deposit = Deposit.new(script, tip)
    begin
      unless deposit.scan_for_boxes
        Oleani::IO.send("\n!!~~ We could not find any boxes to deposit ~~!!\n")
        exit
      end

      current_silvers = Oleani::Helpers.check_silvers

      Oleani::Helpers.withdraw(@config.withdraw_amount - current_silvers) if current_silvers < @config.withdraw_amount

      current_silvers = Oleani::Helpers.check_silvers

      if current_silvers < (@config.withdraw_amount)

        msg = <<~MSG
          !! [NOTICE]  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [NOTICE] !!
          You do not have the minimum withdraw amount of `#{@config.withdraw_amount}` available.
          You do currently have `#{current_silvers}` on you.
          If you wish to proceed anyways then type: @@;unpause poolparty@@
          Else type: @@;kill poolparty@@
        MSG

        Oleani::IO.send(msg)

        pause_script
      end

      Oleani::Transit.to("locksmith pool").go

      deposit.run

      current_silvers = Oleani::Helpers.check_silvers

      Oleani::Helpers.deposit_silver(current_silvers) if current_silvers > 0

    ensure
      Oleani::IO.send("**  You deposited #{deposit.success_count} box(es) into the system. **")
      if deposit.failed_boxes.length.positive?
        Oleani::IO.send("@@  Unable to deposit #{deposit.failed_boxes.length} box(es) into the system. @@")
        Oleani::IO.send("@@  List of boxes you couldn't deposit: @@")
        deposit.failed_boxes.each do |box|
          Oleani::IO.send("@@    #{box} @@")
        end
      end
      Oleani::IO.send("** [Ending Deposit] **")
    end
  end

  def self.loot(count = 100)
    Oleani::IO.send("** [Starting Loot] **")

    Oleani::Transit.to("locksmith pool").go

    begin
      Loot.new(Oleani::Helpers.find_sack, count).run

      current_silvers = Oleani::Helpers.check_silvers

      Oleani::Helpers.deposit_silver(current_silvers) if current_silvers > 0
    ensure
      Oleani::IO.send("** [Ending Loot] **")
    end
  end
end

module PoolParty
  class Loot
    attr_reader :count

    def initialize(lootsack, max = 100)
      @pool = LocksmithPool.new
      @lootsack = lootsack
      @max = max
      @count = 0
      @config = PoolParty.config
    end

    def loot_box(box, override = false)
      # For unknown situations
      if override
        fput "open ##{box.id}"
      else
        box.open
      end

      box.loot_coins

      box.look_in if @config.look_in_box

      box.loot if @config.loot_command

      box.empty_into(@lootsack)

      if box.type == "box"
        @pool.trash_box(box)
      else
        box.move_to(@lootsack)
      end
    end

    def run
      attempts = 0

      begin
        PoolParty.clear_hands

        while @count < @max && (box = @pool.retrieve_box)

          if box.noun == "core"
            box.move_to(lootsack)
          elsif box.type == "box" || box.type == "plinite"
            loot_box(box)
          else
            # Ok, we got something back from the Poolmaster
            Oleani::IO.send("**We received an unknown type of box that Gameobj does not understand**")
            Oleani::IO.send("**After looting it will be in your lootsack in case it's valuable**")
            sleep 2
            loot_box(box, true)
          end

          PoolParty.clear_hands

          attempts = 0
          @count += 1
        end
      rescue LocksmithPool::NoBoxes
        Oleani::IO.send("**Pool has no more boxes for us.**")
        pause 2
      rescue => e
        echo e.message
        pause_script
        attempts += 1
        retry if attempts < 2
      end
    end
  end

  class Deposit
    attr_reader :success_count, :failed_boxes

    def initialize(script, tip)
      @script = script
      @tip = tip
      @pool = LocksmithPool.new
      @success_count = 0
      @failed_boxes = []
      @config = PoolParty.config
    end

    def get_box(box)
      Timeout::timeout(4) {
        fput "get ##{box.id}"
        wait_until { GameObj.right_hand&.id == box.id }
      }

      GameObj.right_hand
    end

    # Finish filling out the exceptions
    def deposit_box
      attempts = 0
      begin
        @pool.deposit_right_hand(@tip)
      rescue LocksmithPool::NotEnoughSilver
        Oleani::IO.send("**Did not have enough silver to deposit box.**")
        Oleani::IO.send("**Pausing Poolparty!**")
        Oleani::IO.send("**If you want poolparty retrieve more silver from the bank then ;unpause poolparty **")
        Oleani::IO.send("**Else ;kill poolparty**")
        pause_script

        Oleani::Transit.return_after {
          current_silvers = Oleani::Helpers.check_silvers
          Oleani::Helpers.withdraw(@config.withdraw_amount - current_silvers) if current_silvers < @config.withdraw_amount.withdraw_amount
        }
        attempts += 1
        retry if attempts < 2

        false
      rescue LocksmithPool::AlreadyOpenBox
        @failed_boxes << GameObj.right_hand.full_name

        Oleani::IO.send("**This box is already open.**")
        Oleani::IO.send("**Putting it away for now.**")

        Oleani::Objects::Box.wrap(GameObj.right_hand).move_to(Oleani::Helpers.find_sack)

        false
      end
    end

    def run

      if GameObj.right_hand.type == "box"
        deposit_box
      end

      if GameObj.left_hand.type == "box"
        fput "swap"
        deposit_box
      end

      Oleani::Helpers.check_for_disk unless @config.skip_disk_wait

      @matcher.container_contents.each {|_, boxes|
        boxes.each {|box|
          PoolParty.clear_hands

          next if get_box(box).nil?

          @success_count += 1 if deposit_box
        }
      }
    end

    def scan_for_boxes
      downstream = @script.want_downstream = false
      downstream_xml = @script.want_downstream_xml = true

      @script.want_downstream = false
      @script.want_downstream_xml = true

      @matcher = Oleani::ItemMatcher.new

      @matcher.item_filter = proc {|item|
        item.type.split(',').find {|t| t =~ /box/} || item.noun == "plinite"
      }

      @matcher.ingest_inventory

      unless @config.skip_disk_wait
        disk = Oleani::Helpers.check_for_disk
        @matcher.ingest_from_name("##{disk.id}") unless disk.nil?
      end

      @matcher.finalize

      @script.want_downstream = downstream
      @script.want_downstream_xml = downstream_xml

      @matcher.total_items > 0 || GameObj.right_hand.type == "box" || GameObj.left_hand.type == "box"
    end

  end
end

optsx = Slop.new strict: true do

  banner "**PoolParty:[Version:#{PoolParty.version}]** **Usage:** `;poolparty` [options] command"

  on 'skip-disk-wait', "Toggle skip disk checking,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.skip_disk_wait.to_s.upcase}`]" do |opt, args|
    PoolParty.config.toggle_skip_disk_wait

    Oleani::IO.send("**You have chosen to not wait for a disk.**") if PoolParty.config.skip_disk_wait
    Oleani::IO.send("**You have chosen to wait for a disk.**") unless PoolParty.config.skip_disk_wait
  end

  on 'deposit-all', "Toggle deposit all silver when done,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.deposit_all.to_s.upcase}`]" do |opt, args|

    PoolParty.config.toggle_deposit_all

    if PoolParty.config.deposit_all
      Oleani::IO.send("**You have chosen to deposit all silvers when finished.**")
    else
      Oleani::IO.send("**You have chosen to** !!NOT!! **deposit all silvers when finished.**")
    end
  end

  on 'look-in-box', "Look in boxes prior to dumping them into containers,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.look_in_box.to_s.upcase}`]" do |opt, args|
    PoolParty.config.toggle_look_in_box

    if PoolParty.config.look_in_box
      Oleani::IO.send("**You have chosen to look in boxes before dumping their contents.**")
    else
      Oleani::IO.send("**You have chosen to** !!NOT!! **look in boxes before dumping their contents.**")
    end
  end

  on 'loot-command', "Loot boxes prior to dumping them into containers,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.loot_command.to_s.upcase}`]" do |opt, args|
    PoolParty.config.toggle_loot_command

    if PoolParty.config.loot_command
      Oleani::IO.send("**You have chosen to loot boxes before dumping their contents.**")
    else
      Oleani::IO.send("**You have chosen to** !!NOT!! **loot boxes before dumping their contents.**")
    end
  end

  on 'withdraw-amount=', "Set amount to withdraw before depositing boxes,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.withdraw_amount}`]", as: Integer do |opt, args|
    raise ArgumentError.new("Withdraw amount must be above 0") if opt <= 0
    Oleani::IO.send("**You will now withdraw #{opt} silvers.**")
    PoolParty.config.withdraw_amount = opt
  end

  on 'tip-amount=', "Set amount to tip,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.tip_amount}]`", as: Integer do |opt, args|
    raise ArgumentError.new("Tip must be above 0") if opt <= 0
    Oleani::IO.send("**Tip amount set to #{opt}**")
    PoolParty.config.tip_amount = opt
  end

  on 'tip-type=', "Set tip type - Can be either PERCENT or SILVER,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.tip_type.to_s.upcase}`]" do |opt, args|
    Oleani::IO.send("**Tip type set to #{opt}**")
    PoolParty.config.tip_type = opt
  end

  run do |opts, args|

    bob = optsx.to_hash.delete_if {|key, value|
      value.nil?
    }

    exit if bob.length > 0
    PoolParty.validate_prereqs
    Oleani::Transit.return_after {
      PoolParty.deposit(script)
      PoolParty.loot
    }
  end

  command 'loot' do
    description 'Grab boxes from the locksmith pool'

    run do |opts, args|


      count = args.first.to_i <= 0 ? 100 : args.first.to_i

      PoolParty.validate_prereqs
      Oleani::Transit.return_after {
        PoolParty.loot(count)
      }
    end
  end

  command 'deposit' do
    description 'Deposits boxes into the pool only'

    run do
      PoolParty.validate_prereqs
      Oleani::Transit.return_after {
        PoolParty.deposit(script)
      }
    end
  end

  command 'help' do
    description 'Show this page'

    run do
      Oleani::IO.send(optsx.to_s)
    end
  end

end

begin
  optsx.parse(script.vars.drop(1))
rescue PoolParty::LocksmithPool::NotaBox
  Oleani::IO.send("**Something has gone horribly wrong.  We apparently tried to deposit a non-box.**")
  Oleani::IO.send("**Please take a second and see what went wrong and rerun poolparty**")
rescue PoolParty::LocksmithPool::FullPool
  Oleani::IO.send("**Locksmith pool is full.  Please drain boxes and rerun poolparty**")
rescue PoolParty::LocksmithPool::MissingNPC
  Oleani::IO.send("**Could not find the locksmith NPC.**")
rescue ArgumentError, StandardError => ex
  Oleani::IO.send("!!*FATAL ERROR HAS HAPPENED*!!")
  Oleani::IO.send("!! #{ex.message} !!")
end
