=begin
  automated chronomage day pass usage
  between IMT & WL

  example: 
    ;portkey
    ;portkey bank
  
  Required: Lich 4.3.12
  Tags: lockers, movers, move
  Author: Ondreian
  
=end

[Fixnum, String, Symbol].each do |klass|
  unless klass.method_defined?(:go2)
    klass.send(:define_method, :go2) do
      Script.run("go2", self.to_s)
    end
  end
end

room_klass = Room.current.class
unless room_klass.method_defined?(:go2)
  room_klass.send(:define_method, :go2) do
    self.id.go2
  end
end

module Portkey
  module ContainerCache
    module Query
      MatchAttrs = -> thing, attrs {
        attrs.select do |method, val| thing.send(method).eql?(val) end
          .size.eql?(attrs.keys.size)
      }
    end
    
    EXIST         =  %r{<a exist=(?:'|")(?<id>.*?)(?:'|") noun=(?:'|")(?<noun>.*?)(?:'|")>(?<name>.*?)</a>}
    START_INV     = %{You are currently wearing and carrying:}
    END_INV       = %{displayed.)}
    @containers ||= []
    
    def self.refresh()
      begin
        @containers = []
        Script.current.want_downstream_xml = true
        fput "inv full containers"
        in_inv = false
        while line = get
          in_inv = true if line.include?(START_INV)
          next unless in_inv
          line.scan(EXIST).each do |matches| @containers << GameObj.new(*matches) end
          break if line.include?(END_INV)
        end
      ensure
        Script.current.want_downstream_xml = false
      end
    end
  
    def self.fetch()
      refresh() if @containers.empty?
      @containers
    end

    def self.find(**attrs)
      fetch.find do |container| Query::MatchAttrs.(container, attrs) end
    end
  
    def self.scan()
      fetch.each do |container|
        fput "look in ##{container.id}" if GameObj.containers[container.id].nil?
      end
    end

    def self.find_container_of(**attrs)
      fetch.find do |container| 
        fput "look in ##{container.id}" if GameObj.containers[container.id].nil?
        not container.contents.find do |item| Query::MatchAttrs.(item, attrs) end.nil?
      end
    end

    def self.method_missing(method, *args, &block)
      fetch.send(method, *args, &block)
    end
  end
end

module Portkey
  module Outcomes
    WITHDRAW = %r{carefully records|through the books}
    BOUGHT   = %r{quickly hands}
    TELEPORT = %r{whirlwind of color subsides}
    EXPIRED  = %r{pass is expired|not valid for departures}
    TOSSED   = %r{As you let go}
    POOR     = %r{don't have enough}
  end
  ##
  ## interact with a pass
  ##
  class Pass
    attr_reader :pass
    def initialize(pass)
      @pass = pass
    end

    def run(cmd, outcome)
      dothistimeout(cmd, 5, outcome)
    end

    def held?
      [GameObj.left_hand, GameObj.right_hand].map(&:id).include?(@pass.id)
    end

    def fetch
      unless held?
        empty_hands
        fput "get ##{@pass.id}" 
      end
      yield
      empty_right_hand
      fill_hands
      self
    end

    def use
      fetch do
        result = run("raise ##{@pass.id}", 
          Regexp.union(Outcomes::TELEPORT, Outcomes::EXPIRED))
        case result
        when Outcomes::TELEPORT
          # silence is golden
        when Outcomes::EXPIRED
          run("drop ##{@pass.id}", Outcomes::TOSSED)
          return :buy
        else
          raise Exception.new "unhandled outcome"
        end
      end
    end
  end
  ##
  ## what a chronomage pass looks like
  ##
  PASS_NAME = %{Chronomage day pass}.freeze
  ##
  ## valid depart annexes
  ##
  DEPARTURES = %w{8635 15619}.freeze
  ##
  ## 
  ##
  def self.find_pass()
    container = ContainerCache.find_container_of(name: PASS_NAME)
    return false if container.nil?
    return [container, 
      container.contents.to_a.find do |item| 
        ContainerCache::Query::MatchAttrs.(item, name: PASS_NAME) end]
  end

  def self.find_nearest_annex
    Room[Room.current.find_nearest(DEPARTURES)]
  end

  def self.opposite
    location = Room.current.location.downcase
    return "wehnimer's landing" if location.include?("mule")
    return "icemule"            if location.include?("landing")
    raise Exception.new %{unhandled location\n\t#{location}}
  end

  def self.buy_pass
    :bank.go2
    case (result = fput "withdraw 5000", 5, Outcomes::WITHDRAW)
    when Outcomes::POOR
      raise Exception.new %{insufficient funds}
    else
      :chronomage.go2
      npc = GameObj.npcs.find do |o| o.name =~ /halfling|clerk/ end
      2.times do fput "ask ##{npc.id} for #{opposite}" end
    end
    empty_hands
    find_pass
  end

  def self.main()
    wait_while do Script.running?("go2") end
    (container, pass) = (find_pass or buy_pass)
    fput "unhide" if hidden?
    find_nearest_annex.go2
    result = Pass.new(pass).use
    return run() if result.eql?(:buy)
    exit if Script.current.vars.empty?
    Script.current.vars.last.go2
  end

  Portkey.main()
end