=begin
  simuprizebundle.lic - A Lich script to bundle all the Rumor Woods prizes that can be bundled.

        author: elanthia-online
  contributors: Dissonance, Tysong, Jervil
          game: Gemstone
          tags: utility, rumor woods
       version: 1.0.0

  Changelog:
    v1.0.0 (2025-04-21)
      - Script created
=end

module SimuPrizeBundle
  BUNDLEABLE_PRIZES ||= [
    /^(?:Adventurer's Guild voucher pack)$/,
    /^(?:blue feather-shaped charm)$/,
    /^(?:Elanthian Guilds voucher pack)$/,
    /^(?:small glowing orb)$/,
    /^(?:squat jar of pallid grey salve)$/,
    /^(?:tall jar of pallid grey salve)$/,
    /^(?:potent blue-green potion)$/,
    /^(?:swirling yellow-green potion)$/,
    /^(?:twisting blue-green potion)$/,
    /^(?:light yellow note|stack of light yellow notes)$/,
    /^(?:bright orange note|stack of bright orange notes)$/,
    /^(?:deep black note|stack of deep black notes)$/,
    /^(?:pale pink note|stack of pale pink notes)$/,
    /^(?:light pink note|stack of light pink notes)$/,
    /^(?:bright pink note|stack of bright pink notes)$/,
    /^(?:vivid pink note|stack of vivid pink notes)$/,
    /^(?:pale blue note|stack of pale blue notes)$/,
    /^(?:light blue note|stack of light blue notes)$/,
    /^(?:bright blue note|stack of bright blue notes)$/,
    /^(?:vivid blue note|stack of vivid blue notes)$/,
  ]

  def self.populate_containers
    GameObj.inv.each do |item|
      next if GameObj.containers.keys.include?(item.id) && item.contents.is_a?(Array)
      next if item.type =~ /jewelry|weapon|armor|uncommon/
      next if item.type.nil?

      # Still here? Assume the container is closed and open it
      lines = Lich::Util.issue_command("open ##{item.id}", /<exposeContainer|That is already open|<container|There doesn't seem to be any way to do that.|You/, usexml: true, silent: true, quiet: true)
      next if lines.any? { |l| l =~ /There doesn't seem to be any way to do that./ }

      # check out whats inside
      lines = Lich::Util.issue_command("look in ##{item.id}", /<exposeContainer|<dialogData|<container|you glance|There is nothing|You see a|/i, usexml: true, silent: true, quiet: true)
      next if lines.any? { |l| l =~ /You glance|There is nothing/i }

      20.times {
        break if GameObj.containers.keys.include?(item.id) && item.contents.is_a?(Array)
        sleep 0.1
      }
    end
  end

  def self.main
    empty_hands
    populate_containers

    BUNDLEABLE_PRIZES.each do |thing|
      all_found = []
      first_container = nil
      GameObj.inv.each { |inv|
        if (valid_container = GameObj.containers[inv.id])
          things_found = valid_container.find_all { |item| item.name =~ thing }.flatten
          unless things_found.empty?
            all_found << things_found
            first_container = inv.id if first_container.nil?
          end
        end
      }
      if all_found.flatten.count > 1
        all_found.flatten.each { |item|
          unless (checkleft.nil? || checkright.nil?) && !first_container.nil?
            echo "left hand: #{checkleft} right hand: #{checkright}"
            fput("_drag ##{GameObj.right_hand.id} ##{first_container}") if GameObj.right_hand.id
          end
          fput("get ##{item.id}")
          20.times do
            break if GameObj.left_hand.id == item.id || GameObj.right_hand.id == item.id
            sleep(0.1)
          end
          unless item.name =~ /potion/
            fput("bundle") unless checkleft.nil? || checkright.nil?
          else
            fput("pour my first potion in my second potion") unless checkleft.nil? || checkright.nil?
          end
        }
        unless first_container.nil?
          fput("_drag ##{GameObj.left_hand.id} ##{first_container}") if GameObj.left_hand.id
          fput("_drag ##{GameObj.right_hand.id} ##{first_container}") if GameObj.right_hand.id
        end
      end
    end

    fill_hands
  end
end

SimuPrizeBundle.main
