=begin
    EG Guidebook Companion
    Reads and outputs a more friendly formatted display.
    Please have guidebook on you and readable (stored in an open container)

    SYNTAX:
         ;guidebook            - Shows both merchants and raffles
         ;guidebook m(erchant) - Shows only merchants
         ;guidebook r(affle)   - Shows only raffles

         todo: unsure
       author: elanthia-online
 contributors: Tysong
         name: guidebook
         tags: eg, ebon gate, ebon, guidebook, guide, merchant, raffle
      version: 1.0.5
      website: https://github.com/elanthia-online/scripts/

	changelog:
        1.0.5 (2022-10-18)
            Regex updates for more things
        1.0.4 (2022-10-18)
            Added error handling for missing terminal-table gem
            Added display of additional go2 room# matches incase multiple
        1.0.3 (2022-10-18)
            Add handling for guidebook not on epilogue or not found/unreadable.
        1.0.2 (2022-10-18)
            Add line breaks for long raffle descriptions.
            Added Totals to merchant and raffle listings.
            Added clickable ;go2 links for PnC clients.
        1.0.1 (2022-10-17)
            Regex updates
        1.0.0 (2022-10-17)
            Initial release

=end

begin
  require 'terminal-table'
rescue LoadError
  respond "You need to have the 'terminal-table' gem installed"
  respond "Please install it with the following command: gem install terminal-table"
  respond "Via your computer's local terminal/shell"
  exit
end

guidebook_merchants = {}
guidebook_raffles   = {}

regex_merchant = /#\d+\s+(?<name>[\w\s,'.]+?)   \s+(?<room>[\w\s,'.-]+?)  \s+<d cmd='whisper my guidebook service \d+ \d+ \d+'>\[Shop Entrance\] <\/d>(?<details>.*)/
regex_raffle   = /#\d+\s+(?<name>\w+)\s+(?<room>[\w\s,'.-]+?)  \s+(?<datetime>\d+\/\d+\/\d+ \d+:\d+:\d+) (?<zone>\w+)\s+(?<cost>[\d,]+)/

guidebook_output = Lich::Util.quiet_command_xml("read guidebook", /<output class="mono"\/>|You can't do that\./, /<prompt/, true, 5, true)

if guidebook_output.to_s =~ /You can't do that./ || guidebook_output.to_s !~ /Epilogue/
  respond "You need to have an EG guidebook on your character and in a location/container that makes it readable."
  respond "Also please have the guidebook flipped to Chapter 14, the epilogue."
  exit
end

guidebook_output.each_with_index { |line, index|
  if line =~ regex_merchant
    guidebook_merchants[index] = (line.match(regex_merchant).named_captures)
  elsif line =~ regex_raffle
    raffle = (line.match(regex_raffle).named_captures)
    raffle["description"] = guidebook_output[index+1]
    raffle["datetime"] = DateTime.strptime(raffle["datetime"], "%m/%d/%Y %H:%M:%S")
    guidebook_raffles[index] = raffle
  end
}

if (variable[1].downcase =~ /^m/ || variable[1].downcase !~ /^r/)
  if guidebook_merchants.count == 0
    respond "No merchants working currently!"
  else
    headers = %i[Merchant Room Go2 Details]
    table_rows = []
    guidebook_merchants.each { |index, merchant|
      raffle_go2 = Map.list.find_all { |room|
        room.title.find { |title| title =~ /#{merchant["room"]}/ }
      }
      raffle_go2_ids = []
      raffle_go2.each { |r|
        raffle_go2_ids.push(r.id)
      }
      table_rows.push([merchant["name"], merchant["room"], raffle_go2_ids.join(", "), merchant["details"]])
    }
    table_rows.push(:separator)
    table_rows.push([{:value => "Total of #{guidebook_merchants.count} Merchant(s)", :colspan => 4}])
    table = Terminal::Table.new(
      headings: headers,
      rows: table_rows
    )
    table = table.to_s
    if table =~ /\n\|([\w\s\|]+)\|\n/
      header = $1
      headerbold = Lich::Messaging.monsterbold(header)
      table = table.gsub(header, headerbold)
    end
    loop {
      if table =~ /[|,] (\d\d\d\d\d)/
        go2_cmd = $1
        go2_cmdbold = "<d cmd=';go2 #{go2_cmd}'>" + Lich::Messaging.monsterbold(go2_cmd) + "</d>"
        table = table.gsub(go2_cmd, go2_cmdbold)
      else
        break
      end
    }
    _respond "<output class=\"mono\"/>\n" + table + "\n<output class=\"\"/>"
  end
end

if (variable[1].downcase !~ /^m/ || variable[1].downcase =~ /^r/)
  if guidebook_raffles.count == 0
    respond "No raffles currently!"
  else
    guidebook_raffles = guidebook_raffles.sort_by{ |a, b| b["datetime"] }
    headers = %i[Room Go2 DateTime Cost]
    table_rows = []
    guidebook_raffles.each { |index, raffle|
      raffle_go2 = Map.list.find_all { |room|
        room.title.find { |title| title =~ /#{raffle["room"]}/ }
      }
      raffle_go2_ids = []
      raffle_go2.each { |r|
        raffle_go2_ids.push(r.id)
      }
      table_rows.push([raffle["room"], raffle_go2_ids.join(", "), raffle["datetime"].strftime("%m/%d/%Y %I:%M %p"), raffle["cost"]])
      table_rows.push([{:value => raffle["description"].scan(/.{1,90}/).join("\n"), :colspan => 4}])
      table_rows.push(:separator)
    }
    table_rows.push([{:value => "Total of #{guidebook_raffles.count} Raffle(s)", :colspan => 4}])
    table = Terminal::Table.new(
      headings: headers,
      rows: table_rows
    )
    table = table.to_s
    if table =~ /\n\|([\w\s\|]+)\|\n/
      header = $1
      headerbold = Lich::Messaging.monsterbold(header)
      table = table.gsub(header, headerbold)
    end
    loop {
      if table =~ /[|,] (\d\d\d\d\d)/
        go2_cmd = $1
        go2_cmdbold = "<d cmd=';go2 #{go2_cmd}'>" + Lich::Messaging.monsterbold(go2_cmd) + "</d>"
        table = table.gsub(go2_cmd, go2_cmdbold)
      else
        break
      end
    }
    _respond "<output class=\"mono\"/>\n" + table + "\n<output class=\"\"/>"
  end
end
