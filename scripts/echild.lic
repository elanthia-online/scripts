=begin

  Escorts a child to the nearest guard.

  Run this script after finding the child to escort, and while in the same room as the child.

  USAGE:
    ;echild
    or
    ;echild roomnumber

  You must also have the script move2.lic (preferred) or step2.lic to operate!

    maintainer: elanthia-online
  contributors: Drafix, Catrania, Kaldonis, Kalros, Hazado, Tysong, Xanlin
          name: echild
          game: Gemstone
          tags: escort, child, advguild, adventurer guild, guild
       version: 1.20.3

  2025-05-23 - 1.20.3
    - fix for detecting familiars incorrectly
  2025-01-19 - 1.20.2
    - fix for constant redefinition Ruby warnings
  2024-09-12 - 1.20.1
    - convert to use RealID instead of LichID
  2024-08-07 - 1.20.0
    - add customizable, always use, disabler option via --disabler=617
    - convert min_mana, use_disablers to CharSettings instead of Settings
  2024-07-06 - 1.19.1
    - bugfix in Maaghara routine for climb failure
    - order spells by actual mana cost calc'd from Spell and not by the number of the spell
    - allow for usage of move2.lic usage instead of step2.lic
  2024-03-12 - 1.19.0
    - add CLI option to disable disablers via ;echild nodisablers
    - modify ;echild list to now also trigger for help. expand output to show current settings
  2024-02-25 - 1.18.11
    - return child to correct location with manual ask of child
  2024-02-15 - 1.18.10
    - bug in standing for Maaghara routine
  2023-07-08 - 1.18.9
    - rubocop cleanup
    - add Atoll creatures to 706 Mind Jolt exclusion
  2023-02-23 - 1.18.8
    - Bugfix for Ruby v3.x compatibility
=end

=begin
Old Changelog:
2023-02-23 - 1.18.8 - Bugfix for Ruby v3.x compatibility
2022-11-03 - 1.18.7 - Kill Song of Peace on exit
2022-09-21 - 1.18.6 - Xanlin: removed Atoll code because fixed in GS now
2022-09-20 - 1.18.5 - Xanlin: added a second check looking for the child
2022-09-03 - 1.18.4 - Xanlin: better check for 9716
2022-09-03 - 1.18.3 - Xanlin: fixed nil? typo, added 9716 check for can cast, skip wound check on script start
2022-09-01 - 1.18.2 - Xanlin: moved killswitch to fix error
2022-08-25 - 1.18.1 - FarFigNewGut: fixed advguard2 typo
2022-08-15 - 1.17.0 - Xanlin: moved into module, updated can_cast debuff list
2022-08-09 - 1.16.0 - Xanlin: custom proc for Maaghara
  - custom proc for Atoll
  - added global $child_last_seen
  - removed final pause if not Drafix, etc.
  - added test mode where you can sub an npc, like a familiar for testing --test:owl
  - added check for being able to cast before running potentially unnecessary justice check
2022-05-27 - 1.15.0 - Updated to support KF rapids and guard and rebaselined as echild
2020-06-15 - 1.14 filter ghosts from 501
2020-06-08 - 1.13 fix mult-target filtering bug
2020-06-07 - 1.12 filter 410 for specific critters, allow 504 to be multi-target if airlore > 20
2020-05-21 - 1.11 add monk spells, move sanctuary to multi-target section only, add lullabye
2020-05-20 - 1.9 hide justice check - ugh you guys suck
2020-05-20 - 1.10 fix filtering of spells
2020-05-15 - 1.8 Don't e-wave in town, use the cheapest spell mana-wise, and prefer 213/1011 as it works for all critters
2017-10-12 - Fix min mana comparison issue
2017-10-05 - Fix RR for being retarded and putting the npc in the room description
2017-09-09 - Added min mana setting and fixed the checking of untargettable npcs
           - To enable minimum mana setting use the command below:
             ;echild mana 50
2016-09-18 - I'm back bitches!
2016-05-17 - will now deliver child to whatever guard is closest to room you specify, ;echild 228 for landing guards
2016-05-11 - Hazado added specific child tracking, No more losing your child when someone elses child is there!
           - Kalros removed as maintainer
           - Kaldonis added as maintainer
2015-11-04 - Fixed purser in RR
2015-07-06 - Rewrote some more parts of it to make it work with vaalor guards.
           - Fixed a loop problem for choosing the alternate rooms twice
2015-07-03 - Rewrote parts of the script to simplify and make it work with Pinefar v1.3!
2015-06-25 - Fix alternate drop off spot
2015-06-01 - added pause back in
2015-05-19 - Drafix took over maintaining this piece of fail from Jeril's grubby paws
           - added recognizing of passive critters
           - added dropping off child to nearest guard
           - prevented script from using seeking
2015-02-19 - Drafix removed as maintainer
           - Kalros added as maintainer
2012-12-10 - made it cast 213 correctly as a disabling spell  (was trying to cast 213 AT critters before...I didn't know you couldnt!)  thanks to Velfi for pointing it out.
           - also fixed the purser bug.  sorry about that...it thought everyone was in RR when they weren't.
2012-05-18 - made it work in RR....wasn't seeing the purser properly.
2012-04-17 - added Vaalor.
2011-06-04 - you people never tell me when shit is broken....I tried to fix a few things...hope i didnt make it worse.  LET ME KNOW
           - should go to helgas for landing guard and back to gate if it just missed him again
           - added Teras
2010-12-16 - and onward: bug fixes
2010-11-06 - added disabling spells for when there are NPCs present (but no PCs)...can change by adding/removing/reordering numbers from list. (line 13)
2010-03-28 - i noticed sometimes it was prepping ewave when only the kid was present; these 'false positives' should be fixed now
2010-03-07 - disabling spells will now only be cast when targetable NPCs are in the room.  no more ewaving the Fleet Captain
2010-02-19 - added illistim and disabled automatic reward collection
=end

module EChild
  #------------------------------------------------------------------------------#
  # settings
  #------------------------------------------------------------------------------#
  if File.exist?(File.join(SCRIPT_DIR, "move2.lic"))
    step_script = "move2"
  elsif File.exist?(File.join(SCRIPT_DIR, "step2.lic"))
    step_script = "step2"
  else
    echo "A supplemental movement script is required and is missing."
    echo "Either download move2.lic (preferred) or step2.lic"
    echo "Exiting!"
    exit
  end

  Settings['untargetable'] ||= Array.new
  CharSettings['min_mana'] ||= 0
  CharSettings['use_disablers'] ||= true
  CharSettings['custom_disabler'] ||= false
  stop_1011 = false

  if Script.current.vars[0] =~ /list|help/
    echo "Current Disabler Usage: #{CharSettings['use_disablers']}"
    echo "Current Minium mana to reserve: #{CharSettings['min_mana']}"
    echo "Current Forced Disabler: #{CharSettings['custom_disabler']}"
    echo "Current untargetables: #{Settings['untargetable'].join(', ')}"
    echo "To modify this list, use one of the following:"
    echo "   ;echild clear - clears entire untargetable list"
    echo "   ;echild remove <target1> <target2> <target3> <etc> - clears targets from list"
    echo "   ;echiled nodisable    - disables usage of disablers"
    echo "   ;echiled --disabler=<NUM>   - forces use of specific disabler, set to 0, nil, false to turn off"
    exit
  elsif Script.current.vars[0] =~ /clear/
    Settings['untargetable'] = Array.new
    exit
  elsif Script.current.vars[0] =~ /remove/
    echo Settings['untargetable'].delete(Script.current.vars[2..-1].join(' '))
    exit
  elsif Script.current.vars[0] =~ /mana/
    CharSettings['min_mana'] = Script.current.vars[2].to_i
    echo "Minimum mana to reserve: #{CharSettings['min_mana']}"
    exit
  elsif Script.current.vars[0] =~ /nodisable/
    CharSettings['use_disablers'] = !CharSettings['use_disablers']
    echo "Disablers Usage now set to #{CharSettings['use_disablers']}"
    exit
  end
  if Script.current.vars[0] =~ /--disabler[:=](\d+|false|nil)\b/i
    if ['nil', 'false', '0'].include?($1)
      CharSettings['custom_disabler'] = false
    else
      CharSettings['custom_disabler'] = $1.to_i
    end
  end

  #------------------------------------------------------------------------------#
  # go2 settings
  #------------------------------------------------------------------------------#
  seeking = $go2_use_seeking
  $go2_use_seeking = false
  #------------------------------------------------------------------------------#
  # justice check
  #------------------------------------------------------------------------------#
  before_dying {
    DownstreamHook.remove("#{Script.current.name}_check_justice")
    $go2_use_seeking = seeking
    if stop_1011
      waitrt?
      fput 'stop 1011'
    end
  }
  def self.check_justice
    justice = nil
    action = proc { |server_string|
      if server_string =~ /^You sense that your surroundings are calm|^There is no justice/
        justice = (server_string =~ /You sense that your surroundings are calm/ ? true : false)
        nil
      else
        server_string
      end
    }
    DownstreamHook.add("#{Script.current.name}_check_justice", action)
    put 'justice status'
    until !justice.nil?
      sleep 0.01
    end
    DownstreamHook.remove("#{Script.current.name}_check_justice")
    return justice
  end

  #------------------------------------------------------------------------------#
  # helper method to determine if we can cast
  #------------------------------------------------------------------------------#
  def self.echild_can_cast
    return false if stunned? or dead?
    wounds_prevent_cast = false
    if Spell[9716].active?
      wounds_prevent_cast = (
        [Wounds.head, Scars.head, Wounds.leftEye, Scars.leftEye, Wounds.rightEye, Scars.rightEye, Wounds.nsys, Scars.nsys].max > 2
      )
    end
    if !Spell[9716].active?
      wounds_prevent_cast = (
        [Wounds.head, Scars.head, Wounds.leftEye, Scars.leftEye, Wounds.rightEye, Scars.rightEye, Wounds.nsys, Scars.nsys].max > 1 or
        [Wounds.leftArm, Wounds.leftHand, Wounds.rightArm, Wounds.rightHand, Scars.leftArm, Scars.leftHand, Scars.rightArm, Scars.rightHand].max > 2 or
        [Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max > 1 or
        [Wounds.rightArm, Wounds.rightHand, Scars.leftArm, Scars.leftHand].max > 1
      )
    end
    return false if wounds_prevent_cast
    # need effect names for "Terrified", "Unconscious", "Staggered", and whatever else I'm missing
    debuffs = ["Bind", "Corrupt Essence", "Calm", "Mind Jolt", "Net", "Silenced", "Sleep", "Web"]
    debuffs_prevent_cast = !(Effects::Debuffs.to_h.keys & debuffs).empty?
    return false if debuffs_prevent_cast
    return true
  end
  #------------------------------------------------------------------------------#
  # disablers
  #------------------------------------------------------------------------------#
  DISABLERS ||= [
    { :num => 135,  :town_safe => false, :single_target => false },
    { :num => 201,  :town_safe => true,  :single_target => true },
    { :num => 213,  :town_safe => true,  :single_target => false },
    { :num => 316,  :town_safe => false, :single_target => false },
    { :num => 410,  :town_safe => false, :single_target => false },
    { :num => 501,  :town_safe => true,  :single_target => true },
    { :num => 504,  :town_safe => true,  :single_target => Skills.elair >= 20 ? false : true },
    { :num => 505,  :town_safe => true,  :single_target => true },
    { :num => 519,  :town_safe => true,  :single_target => true },
    { :num => 619,  :town_safe => false, :single_target => false },
    { :num => 706,  :town_safe => true,  :single_target => true },
    { :num => 709,  :town_safe => false, :single_target => false },
    { :num => 912,  :town_safe => true,  :single_target => false },
    { :num => 1005, :town_safe => true,  :single_target => true },
    { :num => 1011, :town_safe => true,  :single_target => false },
    { :num => 1207, :town_safe => true,  :single_target => true },
    { :num => 1219, :town_safe => false, :single_target => false },
    { :num => 1608, :town_safe => false, :single_target => false },
  ]

  def self.find_best_disabler(skip_can_cast = false)
    return nil if self.echild_can_cast == false and skip_can_cast == false
    # find all eligible spells
    candidates = DISABLERS.find_all { |disabler|
      spell = Spell[disabler[:num]]
      spell.known? and spell.affordable? and ((mana - spell.mana_cost) >= CharSettings['min_mana'].to_i)
    }
    return nil if (candidates.nil? or candidates.empty?) # no justice check if no disablers
    return { :num => CharSettings['custom_disabler'] } if CharSettings['custom_disabler'].is_a?(Integer) && Spell[CharSettings['custom_disabler']].known? && Spell[CharSettings['custom_disabler']].affordable?
    # filter spells that are safe in town if you're in town
    justice = self.check_justice
    if justice
      candidates = candidates.find_all { |disabler|
        disabler[:town_safe] == true
      }
    end

    # filter out single target spells if more than 1 target
    npcs = GameObj.targets.find_all { |npc| !Settings['untargetable'].include?(npc.name) and npc.status !~ /dead|prone|lying down|stunned|sleeping|webbed|calm|sitting|frozen/ }
    if npcs.size > 1
      candidates = candidates.find_all { |i| !i[:single_target] }

      # multi target filtering section
      candidates = candidates.find_all { |i| i[:num] != 410 } if GameObj.npcs.any? { |i| i.name =~ /\b(?:glacei|wraith|elemental|cold guardian)\b/ }

      # pick the preferred sanctuary spells - regardless of cost
      preferred = candidates.find { |i| i[:num].to_s =~ /213|1011/ }
      return preferred unless preferred.nil?
    else
      npc = npcs[0]
      # single target filtering section
      candidates = candidates.find_all { |i| i[:num] != 501 } if npc.name =~ /\b(?:glacei|corpse|wraith|elemental|ghost)\b/
      candidates = candidates.find_all { |i| i[:num] != 505 } if npc.name =~ /\b(?:glacei|elemental|wraith)\b/
      candidates = candidates.find_all { |i| i[:num] != 410 } if npc.name =~ /\b(?:glacei|griffin|grifflet|elemental)\b/
      candidates = candidates.find_all { |i| i[:num] != 709 } if npc.name =~ /\b(?:glacei|griffin|grifflet|elemental)\b/
      candidates = candidates.find_all { |i| i[:num] != 706 } if npc.name =~ /\b(?:glacei|construct|elemental|brawler|protector|psionicist|fanatic)\b/
      candidates = candidates.find_all { |i| i[:num] != 201 } if npc.name =~ /\b(?:grimswarm|construct)\b/
    end

    # order spells with least mana cost
    candidates = candidates.sort { |a, b|
      (Spell[a[:num]].mana_cost) <=> (Spell[b[:num]].mana_cost)
    }

    return candidates.first
  end

  if CharSettings['use_disablers']
    can_cast_disabler = (find_best_disabler(true) != nil)
    echo "Note: No disablers known" if can_cast_disabler == false
  else
    can_cast_disabler = false
  end
  #------------------------------------------------------------------------------#
  # child
  #------------------------------------------------------------------------------#
  child = nil
  $child_last_seen = nil

  if Script.current.vars[0] =~ /--test[:=]([^ ]+)\b/
    npc_noun = $1
    echo "testing #{npc_noun}"
    test_npc = nil
    GameObj.npcs.each { |n|
      if n.noun == npc_noun
        child = n.id
        test_npc = n
        break
      end
    }
    $child_last_seen = Map.current.id
    respond test_npc.inspect
  else
    GameObj.npcs.each { |n|
      if n.noun =~ /child/i
        child = n.id
        break
      end
    }
    $child_last_seen = Map.current.id if !child.nil?
  end

  if child.nil?
    echo "child not found, waiting a few"
    timeout = Time.now + 5
    while (child.nil? and timeout > Time.now)
      GameObj.npcs.each { |n|
        if n.noun =~ /child/i
          child = n.id
          break
        end
      }
      sleep 0.1
    end
    if child.nil?
      echo "child not found, quitting"
      exit
    end
  end
  #------------------------------------------------------------------------------#
  # dropoff_points
  #------------------------------------------------------------------------------#

  advguard = Map.current.find_all_nearest_by_tag("advguard")
  advguard2 = Map.current.find_all_nearest_by_tag("advguard2")
  dropoff_points = advguard | advguard2 | [Map.ids_from_uid(4564003).first, Map.ids_from_uid(4564004).first, Map.ids_from_uid(4564010).first, Map.ids_from_uid(4564005).first, Map.ids_from_uid(4564011).first, Map.ids_from_uid(4564008).first, Map.ids_from_uid(4564006).first, Map.ids_from_uid(4564007).first, Map.ids_from_uid(4564013).first, Map.ids_from_uid(4564014).first, Map.ids_from_uid(4564009).first]

  child_homes = {
    "Icemule Trace"        => Map.ids_from_uid(4042150).first,
    "Kharam Dzu"           => Map.ids_from_uid(3001025).first,
    "Kraken's Fall"        => Map.ids_from_uid(7118221).first,
    "Mist Harbor"          => Map.ids_from_uid(3201029).first,
    "the County of Torre"  => Map.ids_from_uid(2101008).first,  # River's Rest
    "Vornavis"             => Map.ids_from_uid(4209030).first,  # Solhaven
    "Ta'Illistim"          => Map.ids_from_uid(13100042).first,
    "Ta'Vaalor"            => Map.ids_from_uid(14100047).first,
    "Wehnimer's Landing"   => Map.ids_from_uid(7120).first,
    "Kharag 'doth Dzulthu" => Map.ids_from_uid(13006016).first, # Zul Logoth
  }

  reportee = 'sergeant|guard|purser|Belle|Luthrek'
  if Script.current.vars[0] =~ /(u?\d+)/
    place = Map[$1].find_nearest(dropoff_points)
  else
    child_response = /The child says, "Please, take me home to ([^!]+?)!"/
    line = dothistimeout 'ask child about destination', 5, child_response
    if line =~ child_response
      if child_homes.include?($1)
        place = Map[child_homes[$1]].find_nearest(dropoff_points)
      else
        _respond Lich::Messaging.monsterbold("missing child_homes entry for [#{$1}], please report to elanthia-online.")
        place = Map.current.find_nearest(dropoff_points)
      end
    else
      place = Map.current.find_nearest(dropoff_points)
    end
  end

  dropoff_points.delete(place)
  original_place = place
  #------------------------------------------------------------------------------#
  # kill switch
  #------------------------------------------------------------------------------#
  Watchfor.new(/^\[You have failed your current Adventurer's Guild task\.\]/) {
    Script.start('go2', "#{original_place}")
    Script.self.kill
  }
  #------------------------------------------------------------------------------#
  # Maaghara Labyrinth
  #------------------------------------------------------------------------------#
  maaghara_exits = {
    Map.ids_from_uid(13022005).first => Map.ids_from_uid(13022015).first,
    Map.ids_from_uid(13022025).first => Map.ids_from_uid(13022015).first,
    Map.ids_from_uid(13022015).first => Map.ids_from_uid(13022035).first,
    Map.ids_from_uid(13022035).first => Map.ids_from_uid(13022045).first,
    Map.ids_from_uid(13022045).first => Map.ids_from_uid(13022005).first
  }
  maaghara_move_pattern_success = /rootlike tendrils as thick as your thumb snake out and encircle/
  maaghara_move_pattern_fail    = /seem to be any way to do that at the moment/
  maaghara_move_pattern_retry   = /You step into the root, but can see no way to climb the slippery tendrils inside\.  After a moment, you step back out\./
  maaghara_move_patterns = Regexp.union(maaghara_move_pattern_success, maaghara_move_pattern_fail, maaghara_move_pattern_retry)
  maaghara_move = proc {
    maaghara_counter = 0
    loop do
      break if maaghara_counter == 3
      move_result = dothistimeout "go root", 3, maaghara_move_patterns
      if maaghara_move_pattern_success.match(move_result)
        # restore original destination
        place = original_place
        wait_while { Map.current.id != Map.ids_from_uid(13021008).first }
        until standing? do
          fput 'stand'
          waitrt?
        end
        break
      elsif maaghara_move_pattern_fail.match(move_result)
        # set destination to next way out
        place = maaghara_exits[Map.current.id] if maaghara_exits.key?(Map.current.id)
        break
      elsif maaghara_move_pattern_retry.match(move_result)
        sleep(1) # climb check failed, wait a second to retry
        next
      elsif move_result.nil?
        echo "maaghara_move failed"
        maaghara_counter += 1
      end
    end
  }

  #------------------------------------------------------------------------------#
  # loop
  #------------------------------------------------------------------------------#
  child_no_wait = []

  loop do
    loop do
      maaghara_move.call() if maaghara_exits.key?(Map.current.id)
      if Map.current.id != place
        thatroom = Map.current.id
        waitrt?
        Script.run(step_script, "#{place}")
        wait_while { running?(step_script) }
        wait_until { thatroom != Map.current.id }
        waitrt?
        if GameObj.targets.any? and !checkpcs and GameObj.targets.any? { |npc| !Settings['untargetable'].include?(npc.name) } and !(GameObj.npcs.any? { |npc| npc.name =~ /#{reportee}/i } or GameObj.room_desc.any? { |i| i.name =~ /purser/ })
          unless GameObj.npcs.size == 1 and GameObj.npcs.find { |npc| npc.id == child }
            if can_cast_disabler
              found = false
              put "target random"
              while (line = get)
                if line =~ /Could not find a valid target\./
                  unless GameObj.npcs.nil?
                    Settings['untargetable'].push(*GameObj.npcs.map { |i| i.name })
                    Settings['untargetable'] = Settings['untargetable'].uniq
                  end
                  break
                elsif line =~ /You are now targeting/
                  found = true
                  break
                end
              end
              if found
                candidate_spell = find_best_disabler
                unless candidate_spell.nil?
                  spell = Spell[candidate_spell[:num]]
                  if spell.num == 1011
                    stop_1011 = true
                    fput "spell active"
                    if spell.active?
                      fput "renew 1011"
                    else
                      spell.cast
                    end
                  else
                    spell.cast
                  end
                end
              end
            end
          end
        end

        thisroom = Map.current.id
        timeout = Time.now + 5
        wait_until { GameObj.npcs.find { |npc| npc.id == child } or (Time.now > timeout and child_no_wait.include?(Room.current.id)) or thisroom != Room.current.id }
        $child_last_seen = Map.current.id if GameObj.npcs.find { |creature| creature.id == child }
        if Map.current.id != place
          waitrt?
          redo
        else
          waitrt?
          break
        end
      else
        break
      end
    end

    if Map.current.id == place and !npc = [GameObj.npcs.find { |creature| creature.name =~ /#{reportee}/i }, GameObj.room_desc.find { |i| i.name =~ /#{reportee}/ }].find { |i| i }
      place = Map.current.find_nearest(dropoff_points)
      dropoff_points.delete(place)
    else
      fput "ask ##{npc.id} about bounty"
      $child_last_seen = nil
      break
    end
  end
end
