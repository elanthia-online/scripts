=begin

  Escorts a child to the nearest guard.

  Run this script after finding the child to escort, and while in the same room as the child.
  
  USAGE:  
    ;echild 
    or 
    ;echild roomnumber

  You must also have the script "step2.lic."

    maintainer: elanthia-online
  contributers: Drafix, Catrania, Kaldonis, Kalros, Hazado, Tysong, Xanlin
          name: echild
          game: Gemstone
          tags: escort, child, advguild, adventurer guild, guild
       version: 1.18.8
       
  2023-02-23 - 1.18.8 - Bugfix for Ruby v3.x compatibility
=end

=begin
Old Changelog:
2023-02-23 - 1.18.8 - Bugfix for Ruby v3.x compatibility
2022-11-03 - 1.18.7 - Kill Song of Peace on exit
2022-09-21 - 1.18.6 - Xanlin: removed Atoll code because fixed in GS now
2022-09-20 - 1.18.5 - Xanlin: added a second check looking for the child
2022-09-03 - 1.18.4 - Xanlin: better check for 9716
2022-09-03 - 1.18.3 - Xanlin: fixed nil? typo, added 9716 check for can cast, skip wound check on script start
2022-09-01 - 1.18.2 - Xanlin: moved killswitch to fix error
2022-08-25 - 1.18.1 - FarFigNewGut: fixed advguard2 typo
2022-08-15 - 1.17.0 - Xanlin: moved into module, updated can_cast debuff list
2022-08-09 - 1.16.0 - Xanlin: custom proc for Maaghara; 
  - custom proc for Atoll; 
  - added global $child_last_seen;
  - removed final pause if not Drafix, etc.
  - added test mode where you can sub an npc, like a familiar for testing --test:owl
  - added check for being able to cast before running potentially unnecessary justice check
2022-05-27 - 1.15.0 - Updated to support KF rapids and guard and rebaselined as echild
2020-06-15 - 1.14 filter ghosts from 501
2020-06-08 - 1.13 fix mult-target filtering bug
2020-06-07 - 1.12 filter 410 for specific critters, allow 504 to be multi-target if airlore > 20
2020-05-21 - 1.11 add monk spells, move sanctuary to multi-target section only, add lullabye
2020-05-20 - 1.9 hide justice check - ugh you guys suck
2020-05-20 - 1.10 fix filtering of spells
2020-05-15 - 1.8 Don't e-wave in town, use the cheapest spell mana-wise, and prefer 213/1011 as it works for all critters
2017-10-12 - Fix min mana comparison issue
2017-10-05 - Fix RR for being retarded and putting the npc in the room description
2017-09-09 - Added min mana setting and fixed the checking of untargettable npcs
           - To enable minimum mana setting use the command below:
             ;echild mana 50
2016-09-18 - I'm back bitches!
2016-05-17 - will now deliver child to whatever guard is closest to room you specify, ;echild 228 for landing guards
2016-05-11 - Hazado added specific child tracking, No more losing your child when someone elses child is there!
           - Kalros removed as maintainer
           - Kaldonis added as maintainer
2015-11-04 - Fixed purser in RR
2015-07-06 - Rewrote some more parts of it to make it work with vaalor guards.
           - Fixed a loop problem for choosing the alternate rooms twice
2015-07-03 - Rewrote parts of the script to simplify and make it work with Pinefar v1.3!
2015-06-25 - Fix alternate drop off spot
2015-06-01 - added pause back in
2015-05-19 - Drafix took over maintaining this piece of fail from Jeril's grubby paws
           - added recognizing of passive critters
           - added dropping off child to nearest guard
           - prevented script from using seeking
2015-02-19 - Drafix removed as maintainer
           - Kalros added as maintainer
2012-12-10 - made it cast 213 correctly as a disabling spell  (was trying to cast 213 AT critters before...I didn't know you couldnt!)  thanks to Velfi for pointing it out.
           - also fixed the purser bug.  sorry about that...it thought everyone was in RR when they weren't.
2012-05-18 - made it work in RR....wasn't seeing the purser properly.
2012-04-17 - added Vaalor.
2011-06-04 - you people never tell me when shit is broken....I tried to fix a few things...hope i didnt make it worse.  LET ME KNOW
           - should go to helgas for landing guard and back to gate if it just missed him again
           - added Teras
2010-12-16 - and onward: bug fixes
2010-11-06 - added disabling spells for when there are NPCs present (but no PCs)...can change by adding/removing/reordering numbers from list. (line 13)
2010-03-28 - i noticed sometimes it was prepping ewave when only the kid was present; these 'false positives' should be fixed now
2010-03-07 - disabling spells will now only be cast when targetable NPCs are in the room.  no more ewaving the Fleet Captain
2010-02-19 - added illistim and disabled automatic reward collection
=end

module EChild
  #------------------------------------------------------------------------------#
  # settings
  #------------------------------------------------------------------------------#
  Settings['untargetable'] ||= Array.new
  Settings['min_mana'] ||= 0
  stop_1011 = false;

  if Script.current.vars[0] =~ /list/
    echo Settings['untargetable'].inspect
    exit
  elsif Script.current.vars[0] =~ /clear/
    Settings['untargetable'] = Array.new
    exit
  elsif Script.current.vars[0] =~ /remove/
    echo Settings['untargetable'].delete(Script.current.vars[2..-1].join(' '))
    exit
  elsif Script.current.vars[0] =~ /mana/
    Settings['min_mana'] = Script.current.vars[2].to_i
    echo "Minimum mana to reserve: #{Settings['min_mana']}"
    exit
  end
  #------------------------------------------------------------------------------#
  # go2 settings
  #------------------------------------------------------------------------------#
  seeking = $go2_use_seeking
  $go2_use_seeking = false
  #------------------------------------------------------------------------------#
  # justice check
  #------------------------------------------------------------------------------#
  before_dying{DownstreamHook.remove("#{Script.current.name}_check_justice");$go2_use_seeking = seeking;(waitrt?;fput 'stop 1011') if stop_1011;}
  def self.check_justice();
    justice = nil
    action = proc { |server_string|
      if server_string =~ /^You sense that your surroundings are calm|^There is no justice/
        justice = (server_string =~ /You sense that your surroundings are calm/ ? true : false);
        nil
      else
        server_string
      end
     }
    DownstreamHook.add("#{Script.current.name}_check_justice", action)
    put 'justice status'
    until !justice.nil?; sleep 0.01 end;
    DownstreamHook.remove("#{Script.current.name}_check_justice")
    return justice;
  end
  #------------------------------------------------------------------------------#
  # helper method to determine if we can cast
  #------------------------------------------------------------------------------#
  def self.echild_can_cast();
    return false if stunned? or dead?;
    wounds_prevent_cast = false;
    if Spell[9716].active?;
      wounds_prevent_cast = (
        [Wounds.head, Scars.head, Wounds.leftEye, Scars.leftEye, Wounds.rightEye, Scars.rightEye, Wounds.nsys, Scars.nsys].max > 2
      )
    end
    if !Spell[9716].active?;
      wounds_prevent_cast = (
        [Wounds.head, Scars.head, Wounds.leftEye, Scars.leftEye, Wounds.rightEye, Scars.rightEye, Wounds.nsys, Scars.nsys].max > 1  or
        [Wounds.leftArm, Wounds.leftHand, Wounds.rightArm, Wounds.rightHand, Scars.leftArm, Scars.leftHand, Scars.rightArm, Scars.rightHand].max > 2 or
        [Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max > 1 or
        [Wounds.rightArm, Wounds.rightHand, Scars.leftArm, Scars.leftHand].max > 1 
      )
    end
    return false if wounds_prevent_cast;
    # need effect names for "Terrified", "Unconscious", "Staggered", and whatever else I'm missing
    debuffs = ["Bind", "Corrupt Essence", "Calm", "Mind Jolt", "Net", "Silenced", "Sleep", "Web" ]
    debuffs_prevent_cast = !(Effects::Debuffs.to_h.keys & debuffs).empty?
    return false if debuffs_prevent_cast;
    return true;
  end;
  #------------------------------------------------------------------------------#
  # disablers
  #------------------------------------------------------------------------------#
  DISABLERS = [
    {:num => 135,  :town_safe => false, :single_target => false},
    {:num => 201,  :town_safe => true,  :single_target => true},
    {:num => 213,  :town_safe => true,  :single_target => false},
    {:num => 316,  :town_safe => false, :single_target => false},
    {:num => 410,  :town_safe => false, :single_target => false},
    {:num => 501,  :town_safe => true,  :single_target => true},
    {:num => 504,  :town_safe => true,  :single_target => Skills.elair >= 20 ? false: true},
    {:num => 505,  :town_safe => true,  :single_target => true},
    {:num => 519,  :town_safe => true,  :single_target => true},
    {:num => 619,  :town_safe => false, :single_target => false},
    {:num => 706,  :town_safe => true,  :single_target => true},
    {:num => 709,  :town_safe => false, :single_target => false},
    {:num => 912,  :town_safe => true,  :single_target => false},
    {:num => 1005, :town_safe => true,  :single_target => true},
    {:num => 1011, :town_safe => true,  :single_target => false},
    {:num => 1207, :town_safe => true,  :single_target => true},
    {:num => 1219, :town_safe => false, :single_target => false},
    {:num => 1608, :town_safe => false, :single_target => false},
  ]

  def self.find_best_disabler(skip_can_cast = false);
    return nil if self.echild_can_cast == false and skip_can_cast == false; 
    # find all eligible spells
    candidates = DISABLERS.find_all{|disabler|
      spell = Spell[disabler[:num]]
      spell.known? and spell.affordable? and ((mana - spell.mana_cost) >= Settings['min_mana'].to_i)
    }
    return nil if (candidates.nil? or candidates.empty?); # no justice check if no disablers
    # filter spells that are safe in town if you're in town
    justice = self.check_justice;
    if justice
      candidates = candidates.find_all{|disabler|
        disabler[:town_safe] == true
      }
    end

    # filter out single target spells if more than 1 target
    npcs = GameObj.targets.find_all{ |npc| !Settings['untargetable'].include?(npc.name) and npc.status !~ /dead|prone|lying down|stunned|sleeping|webbed|calm|sitting|frozen/}
    if npcs.size > 1
      candidates = candidates.find_all{|i| !i[:single_target]}

      # multi target filtering section
      candidates = candidates.find_all{|i| i[:num] != 410} if GameObj.npcs.any?{|i| i.name =~ /glacei|wraith|elemental|cold guardian/}

      # pick the preferred sanctuary spells - regardless of cost
      preferred = candidates.find{|i| i[:num].to_s =~ /213|1011/}
      return preferred unless preferred.nil?
    else
      npc = npcs[0]
      # single target filtering section
      candidates = candidates.find_all{|i| i[:num] != 501} if npc.name =~ /glacei|corpse|wraith|elemental|ghost/
      candidates = candidates.find_all{|i| i[:num] != 505} if npc.name =~ /glacei|elemental|wraith/
      candidates = candidates.find_all{|i| i[:num] != 410} if npc.name =~ /glacei|griffin|grifflet|elemental/
      candidates = candidates.find_all{|i| i[:num] != 709} if npc.name =~ /glacei|griffin|grifflet|elemental/
      candidates = candidates.find_all{|i| i[:num] != 706} if npc.name =~ /glacei|construct|elemental/
      candidates = candidates.find_all{|i| i[:num] != 201} if npc.name =~ /grimswarm|construct/
    end

    # order spells with least mana cost
    candidates = candidates.sort{|a,b|
      (a[:num] % 100) <=> (b[:num] % 100)
    }

    return candidates.first
  end

  can_cast_disabler = (find_best_disabler(true) != nil);
  echo "Note: No disablers known" if can_cast_disabler == false;
  #------------------------------------------------------------------------------#
  # child
  #------------------------------------------------------------------------------#
  child = nil;
  $child_last_seen = nil;

  if Script.current.vars[0] =~ /--test[:=]([^ ]+)\b/
    npc_noun = $1;
    echo "testing #{npc_noun}"
    test_npc = nil;
    GameObj.npcs.each{ |n| if n.noun == npc_noun; child = n.id;test_npc = n;break;end;}
    $child_last_seen = Map.current.id;
    respond test_npc.inspect
  else
    GameObj.npcs.each{ |n| if n.noun =~ /child/i; child = n.id;break;end;}
    $child_last_seen = Map.current.id if !child.nil?;
  end

  if child.nil?;
    echo "child not found, waiting a few";
    timeout = Time.now + 5
    while (child.nil? and timeout > Time.now)
      GameObj.npcs.each{ |n| if n.noun =~ /child/i; child = n.id;break;end;}
      sleep 0.1
    end
    if child.nil? 
      echo "child not found, quitting";
      exit;
    end
  end;
  #------------------------------------------------------------------------------#
  # dropoff_points
  #------------------------------------------------------------------------------#
  dropoff_points = advguard = advguard2 = [];

  advguard = Map.current.find_all_nearest_by_tag("advguard");
  advguard2 = Map.current.find_all_nearest_by_tag("advguard2");
  dropoff_points = advguard | advguard2 | [2777, 2778, 2782, 2779, 2780, 2781, 2783, 2784, 2785, 2786, 2787];

  reportee = 'sergeant|guard|purser|Belle|Luthrek'
  if Script.current.vars[0] =~ /(u?\d+)/
    place = Room[$1].find_nearest(dropoff_points)
  else
    place = Map.current.find_nearest(dropoff_points)
  end
  dropoff_points.delete(place)
  original_place = place;
  #------------------------------------------------------------------------------#
  # kill switch
  #------------------------------------------------------------------------------#
  Watchfor.new (/^\[You have failed your current Adventurer's Guild task\.\]/){
    Script.start('go2',"#{original_place}");
    Script.self.kill;
  }
  #------------------------------------------------------------------------------#
  # Maaghara Labyrinth
  #------------------------------------------------------------------------------#
  maaghara_exits = { 9823 => 9818, 9823 => 9808, 9808 => 9818, 9818 => 9788, 9788 => 9784, 9784 => 9823 };
  maaghara_move_pattern_success = /rootlike tendrils as thick as your thumb snake out and encircle/;
  maaghara_move_pattern_fail    = /seem to be any way to do that at the moment/;
  maaghara_move_patterns = Regexp.union(maaghara_move_pattern_success, maaghara_move_pattern_fail);
  maaghara_move = proc {
    3.times {
      move_result = dothistimeout "go root",3, maaghara_move_patterns;
      if maaghara_move_pattern_success.match(move_result);
        # restore original destination
        place = original_place;
        wait_while {Map.current.id != 9734};
        (fput 'stand';waitrt?) until standing?;
        break;
      elsif maaghara_move_pattern_fail.match(move_result);
        # set destination to next way out
        place = maaghara_exits[Map.current.id] if maaghara_exits.key?(Map.current.id);
        break;
      elsif move_result.nil?;
        echo "maaghara_move failed";
      end;
    }
  }

  #------------------------------------------------------------------------------#
  # loop
  #------------------------------------------------------------------------------#
  child_no_wait = [];

  1.times {
    loop {
      maaghara_move.call() if maaghara_exits.key?(Map.current.id);
      if Map.current.id != place
        thatroom = Map.current.id
        waitrt?
        start_script 'step2', ["#{place}"]
        wait_while{running?('step2')}
        wait_until{ thatroom != Map.current.id }
        waitrt?
        if GameObj.npcs.size != nil and !checkpcs and GameObj.npcs.any?{ |npc| npc.type !~ /passive npc/ or !Settings['untargetable'].include?(npc.name)} and !(GameObj.npcs.any?{ |npc| npc.name =~ /#{reportee}/i} or GameObj.room_desc.any?{|i| i.name =~ /purser/})
          unless GameObj.npcs.size == 1 and GameObj.npcs.find{ |npc| npc.id == child }
            if can_cast_disabler
              found = false
              put "target random"
              while line = get
                if line =~ /Could not find a valid target\./
                  unless GameObj.npcs.nil?
                    Settings['untargetable'].push(*GameObj.npcs.map{|i| i.name})
                    Settings['untargetable'] = Settings['untargetable'].uniq
                  end
                  break
                elsif line =~/You are now targeting/
                  found = true
                  break
                end
              end
              if found
                candidate_spell = find_best_disabler
                unless candidate_spell.nil?
                  spell = Spell[candidate_spell[:num]]
                  if spell.num == 1011
                    stop_1011 = true
                    fput "spell active"
                    if spell.active?
                      fput "renew 1011"
                    else
                      spell.cast
                    end
                  else
                    spell.cast
                  end
                end
              end
            end
          end
        end
        
        thisroom = Map.current.id;
        timeout = Time.now + 5;
        wait_until{GameObj.npcs.find{ |npc| npc.id == child } or (Time.now > timeout and child_no_wait.include?(Room.current.id)) or thisroom != Room.current.id};
        $child_last_seen = Map.current.id if GameObj.npcs.find{ |npc| npc.id == child };
        if Map.current.id != place
          waitrt?
          redo
        else
          waitrt?
          break
        end
      else
        break
      end
    }

    if Map.current.id == place and !npc=[GameObj.npcs.find{ |npc| npc.name =~ /#{reportee}/i }, GameObj.room_desc.find{|i| i.name =~ /#{reportee}/}].find{|i| i}
      place = Map.current.find_nearest(dropoff_points)
      dropoff_points.delete(place)
      redo
    else
      fput "ask ##{npc.id} about bounty"
      $child_last_seen = nil;
    end
  }
end;
