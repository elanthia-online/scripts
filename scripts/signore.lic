=begin
  Society power manager that responds to anti-magic rooms

  usage:
    ;signore setup            launches the GUI
    ;signore room:list        lists all rooms currently tagged as anti-magic
    ;signore room:rm  <num>   the anti-magic tag from room <num>

    maintainer: elanthia-online
  contributors: Ondreian, Dissonance
          game: Gemstone
          tags: col, Signore, sunfist, voln, society, society powers
      required: Lich > 5.0x
       version: 0.8.1
        Source: https://github.com/elanthia-online/jinx
    Alt Source: https://github.com/elanthia-online/lich-5

   Version Control:
  changelog:
    2-18-2017         Settings now only exist per character
    8-15-2017         Signore now waits to cast while go2 is running
    2-23-2019  v0.4   Fix using Gtk.queue for Windows
    2-24-2019  v0.5   add Sigil of Concentration
    8-21-2021  v0.6 	Updated to support GTK3
    6-05-2023  v0.7 	fix for new Infomon library Lich 5.7.0, rubocop cleanup
    5-07-2025  v0.8 	change CharSettings.save to Settings.save
    7-16-2025  v0.8.1 make sure signore setup window opens on top
                      fix missing sigil of mending
                      fix crash when script is killed with setup window open.
                      restored sign of clotting to the list of available powers

=end

@help = "
;signore setup            launches the GUI
;signore room:list        lists all rooms currently tagged as anti-magic
;signore room:rm  <num>   the anti-magic tag from room <num>
"

class Try
  attr_accessor :result, :task

  def self.of(&task)
    proc { Try.new task }
  end

  def initialize(&task)
    @task = task
    run!
  end

  private def run!
    begin
      result = @task.call
      # handle recursives
      if result.class == Try
        @result = result.result
      else
        @result = result
      end
    rescue StandardError => e
      @result = e
    end
  end

  def failed?
    [StandardError, NameError].include? @result.class
  end

  def success?
    !failed?
  end
end

module Signore
  @avail_list = [
    # CoL
    Spell[9903],  # Sign of Warding
    Spell[9904],  # Sign of Striking
    Spell[9905],  # Sign of Clotting
    Spell[9906],  # Sign of Thought
    Spell[9907],  # Sign of Defending
    Spell[9908],  # Sign of Smiting
    Spell[9909],  # Sign of Staunching
    Spell[9910],  # Sign of Deflection
    Spell[9912],  # Sign of Swords
    Spell[9913],  # Sign of Shields
    Spell[9914],  # Sign of Dissipation
    # Voln
    Spell[9805],  # Symbol of Courage
    Spell[9806],  # Symbol of Protection
    Spell[9816],  # Symbol of Supremacy
    # GoS
    Spell[9704],  # Sigil of Resolve
    Spell[9705],  # Sigil of Minor Bane
    Spell[9707],  # Sigil of Defense
    Spell[9708],  # Sigil of Offense
    Spell[9710],  # Sigil of Minor Protection
    Spell[9711],  # Sigil of Focus
    Spell[9713],  # Sigil of Mending
    Spell[9714],  # Sigil of Concentration
    Spell[9715],  # Sigil of Major Bane
    Spell[9716],  # Sigil of Determination
    Spell[9719],  # Sigil of Major Protection
  ]

  @main       = Script.current
  @punishment = Spell[9012]
  @antimagic  = /^The power from your sign dissipates into the air.$/
  @success    = Regexp.union(
    /^You flex your muscles with renewed vigor!$/,
    /^You grip your (.*?) with renewed vigor!$/,
    /^Your veins throb and your blood sings.$/,
    /^Magic flows towards you, but does not reach you.$/,
    /^You feel magical energies distort and flow around you.$/,
    /^Your dancing fingers weave a web of protection around you!$/,
    /^Repeating the sign has no effect!/,
    /^Your hypnotic gesture makes your mind receptive to the thoughts/,
    /^You feel more courageous.$/,
    /^You feel a layer of protection surround you.$/,
    /.*surrounds you.$/,
    /^You begin to focus sharply upon the task at hand/,
    /^A faint blue glow surrounds your hands, subtly guiding your movements./,
    /You feel your mind and body gird themselves against magical interference/,
    /^As you concentrate on your sigil/,
    /^You feel infused with a collective knowledge on the undead and their weaknesses.$/
  )

  @berserk = /^You cannot do that while berserking.$/

  ##
  ## @brief      makes the GTK thread join the Script thread
  ##             for the writing to the db
  ##
  def self.in_main_thread
    original_thread_group = Thread.current.group
    if original_thread_group != @main.thread_group
      unless @main.thread_group.list.include?(Thread.current)
        @main.thread_group.add Thread.current
      end
    end
    res = Try.new { yield }
    if original_thread_group != @main.thread_group
      original_thread_group.add Thread.current
    end
    res
  end

  def self.soulless?(power)
    [Spell[9913], Spell[9914]].include?(power) && percentspirit < 80
  end

  def self.punished?
    @punishment.active?
  end

  def self.available
    @avail_list.select { |spell| spell.known? }
  end

  def self.save(key, state)
    in_main_thread {
      CharSettings[key.to_s] = state
      Settings.save
    }
  end

  def self.active?(key)
    in_main_thread {
      CharSettings[key.to_s] || false
    }.result
  end

  def self.toggle(power)
    save power, !active?(power)
  end

  def self.add_anti_magic_room(num)
    unless Settings[:antimagic_rooms].include?(num)
      _respond "#{$monsterboldstart}adding #{num} as antimagic#{$monsterboldend}"
      _respond Settings[:antimagic_rooms].join(", ")
      list = Settings[:antimagic_rooms]
      list.push num
      Settings[:antimagic_rooms] = list
      Settings.save
    end
  end

  def self.reset_anti_magic_rooms!
    Settings[:antimagic_rooms] = []
    Settings.save
  end

  def self.berserk_timeout!
    wait_until {
      while (line = get)
        break if line =~ /The redness fades from the world and you begin to breathe harder./
      end
      true
    }
  end

  def self.cast(power)
    return if soulless?(power)
    ##
    ## prevent go2 typeahead errors
    ##
    wait_while do Script.running?("go2") end

    if power.affordable? && active?(power) && !power.active? && !antimagic_room?
      result = dothistimeout(power.to_s, 5,
                             Regexp.union(@antimagic, @success))
      case result
      when @success   then true
      when @antimagic then Signore.add_anti_magic_room(Room.current.id)
      when @berserk   then berserk_timeout!
      else
        until get do sleep(1) end
        sleep(1) # game is responsive again
      end
    end
  end

  def self.antimagic_room?
    Settings[:antimagic_rooms].include?(Room.current.id)
  end

  def self.cast!
    available
      .select { |power| !power.active? }
      .each { |power| cast power }
  end

  def self.gtk_active
    Gtk::Version::STRING.chr
  end
end

Settings[:antimagic_rooms] ||= []

module Gui
  class Toggle < Gtk::CheckButton
    attr_accessor :power, :parent

    def initialize(power, parent)
      @power = power
      super @power.to_s
      self.active = Signore.active?(@power)

      signal_connect("clicked") {
        if on_clicked.failed?
          respond "Signore.error >> " + on_clicked.result.message
        end
      }
      parent.add self
    end

    def on_clicked
      power = @power
      Try.new { Signore.toggle power }
    end
  end

  class Menu < Gtk::Window
    attr_accessor :toggles, :layout, :closed

    def initialize(toggleables)
      super :toplevel
      @closed = false
      @layout = Gtk::Box.new(:vertical, 0) if Signore.gtk_active == '3'
      @layout = Gtk::VBox.new(false, 0) if Signore.gtk_active == '2'
      set_title "Signore::Setup"
      set_border_width 10

      toggleables.each { |toggleable| Toggle.new(toggleable, @layout) }

      signal_connect("destroy") { on_quit_clicked }

      add @layout

      show_all
      present
    end

    def closed?
      @closed
    end

    def on_quit_clicked
      @closed = true
    end
  end
end

wait_while do
  Script.running?("repository")
end

Signore.add_anti_magic_room(2642)

if Signore.available.empty?
  respond "[signore.error] you do not know any societal powers..."
  exit
end

if script.vars.include?("room:list")
  respond "antimagic rooms: #{Settings[:antimagic_rooms].join(", ")}"
  exit
end

if script.vars.include?("room:reset")
  Signore.reset_anti_magic_rooms!
  respond "reset all antimagic rooms"
  exit
end

if script.vars.include?("room:rm")
  to_delete = script.vars[2]
  if to_delete.nil?
    respond "you must pass a room to delete"
    exit
  end
  Settings[:antimagic_rooms] = Settings[:antimagic_rooms].reject { |id|
    id == to_delete.to_i
  }
  Settings.save
  respond "antimagic rooms: #{Settings[:antimagic_rooms].join(", ")}"
  exit
end

if script.vars.include?("setup") || script.vars.include?("options")
  @signore_window = nil
  Gtk.queue    { @signore_window = Gui::Menu.new Signore.available }
  wait_while   { @signore_window.nil? }

  cleanup = proc do
    if @signore_window && @signore_window.visible?
      Gtk.queue { @signore_window.destroy rescue nil }
    end
  end

  before_dying(&cleanup)
  at_exit(&cleanup) # this is required to ensure that if the script is killed with the window open, it doesn't hang lich

  # Use a timeout to prevent infinite lock if script is killed
  start = Time.now
  while !$signore_window.closed?
    break if !Script.running?(Script.current.name) # script killed, break out
    sleep 0.1
    break if Time.now - start > 5 # 5 second failsafe
  end

  Script.current.clear_exit_procs
end

if Signore.punished?
  respond "--- you are currently under PUNISHMENT ---"
  exit
end

if running? "repository"
  echo "waiting for repository service..."
  wait_while { running? "repository" }
end

unless Script.running?("infomon") || defined?(Infomon)
  echo "waiting for infomon service..."
  wait_until { running? "infomon" }
end

loop {
  exit if dead?
  Signore.cast!
  sleep 0.1
}
