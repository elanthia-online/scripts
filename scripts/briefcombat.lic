=begin
    Dramatically shortens most combat text.
    Designed for use in big group combat (cough REIM cough) or invasions to manage the spam and screen scroll.
    USAGE:
        ;briefcombat [self|You] [player] [-x]
        ;briefcombat                - default settings
        ;briefcombat -x             - extreme settings; will completely silence searches, remove cast descriptions (might interfere with GameObj? not sure)
        ;briefcombat self           - default settings, exclude your self
        ;briefcombat You            - Same as self
        ;briefcombat self Player1 Player2  - exclude yourself, Player1 and Player2 actions from being shortened
        ;briefcombat -x self        - extreme settings, but excluding yourself
        

     author: Daedeus (updates by Tysong/Ragz)
       name: briefcombat
       tags: brief, briefcombat, condensing, condense, combat, squelch
    version: 0.0.8

    changelog:
        0.0.8 (2020-06-01)
            Fixed 917 so it's identified properly instead of being lumped with 635
        0.0.7 (2020-05-14)
            Added parameter options:
                -x        Extreme mode, will squelch searches and spell messaging.
                [player]  Added ability to not shorten actions by specific players
            Removed spell number to improve immersion
            Now retains a little bit of spell cast color, for immersion
              - This can be disabled with the "-x" parameter
            Improve handling of bard song weaving
            Fixed a known issue, now (more) accurately counts kills and status effects
            Added indentation to kill / stunned counts
        0.0.6 (2020-05-05)
            Revert 0.0.5 changes and added a bunch of new code
            Detection of most common AOE spells, and more aggressive shortening of their text
            when no damage is dealt, will preserve last message.  This allows most buffs (117, 515, etc) to show correctly.
            Hopefully improved detection of 709 arms decaying
        0.0.5 (2020-05-01)
            fix for additional condensing of various casting
            fix to now show player deaths (previously would squelch/hide)
        0.0.4 (2017-05-15)
            added a 50ms sleep so GameObj can update npc status,
            increasing reliability of status effects
        0.0.3 (2017-04-16)
            add catch for polearms
        0.0.2 (unknown)
            cleaned up some comments, unused code
        0.0.1 (unknown)
            initial release
=end

$BC_EXTREME = script.vars.include? "-x"

if $BC_EXTREME
    echo "Extreme mode!  Will more aggressively shorten non-essential text, at the cost of immersion." 
    script.vars.delete "-x"
else
    echo "Standard mode!  Run with -x parameter for Extreme mode." 
end

$BC_EXCLUDE = script.vars[1..script.vars.length];
_self = $BC_EXCLUDE.index("self")
_you = $BC_EXCLUDE.index("you")
$BC_EXCLUDE[_self] = "You" if _self > -1
$BC_EXCLUDE[_you] = "You" if _you > -1

if $BC_EXCLUDE.length > 0
    echo "Will exclude actions by #{$BC_EXCLUDE.join(',')}"
end

$debug = false
put 'set MonsterBold On' #required for monster recognition

#  if detected it will compress the subsequent combat messaging
#  for casters it's probably gesture/channel.
pc_or_you = '<a exist="(-\d+)" noun="\w+">\w+<\/a>|You'
verbs = ['gestures? at',
         'gestures?\.',
         'channels? at',
         '(?:hurl|fire|swing|thrust)s? an? [\w \-\']+ at',
         'swings? an? [\w \-\']+ at',
         'thrusts?(?: with)? a [\w \-\']+ at',
         'continues to sing a disruptive song',
         'draws an intricately glowing pattern in the air before',
         'skillfully begins to weave another verse into (?:.*) harmony',
         'voice carries the power of thunder as (?:.*) calls out an angry incantation in an unknown language',
         '(?:.*) directing the sound of (?:.*) voice at',
         'punches?(?: with)? an? [\w \-\']+ at',         
         '(?:make a precise )?attempts? to (?:punch|jab|grapple|kick)']

target = '<pushBold\/>(.*)<popBold\/>' #npc targets are in bold thanks to MonsterBold setting

$StatusEffects = {
    "stunned" => /stunned|strength of holy incantation/,
    "frozen" => /freezes|encased in a thick block of ice|stops all movement/,
    "knockdown" => /falls over|(?:dragged|knocked|down) to the (?:\w+)/,
    "sympathized" => /eyes begin to glow purple/,
    "pinned" => /pins? (?:.*) to the/,
    "buffeted" => /buffeted by/,
    "dead" => /tries to crawl away on the (?:ground|floor) but|
               rolls over on the (?:ground|floor) and goes still|
               body falls to the (?:ground|floor) as it is consumed by ethereal flame|
               crashes to the (?:ground|floor)|
               grows dim as s?he falls to the (?:ground|floor)|
               falls to the (ground|floor) motionless/x
}

# Had to add death detection in REIM because for some reason GameObj detection was unreliable -
# either the scrolling is too fast for GameObj to update, or it doesn't recognize some of the death strings

$combat_regex = /(#{pc_or_you}) (#{verbs.join('|')})(?: (#{target}))?/

n = -1
$compressing = false
$compressed = nil
$compress_last = nil
$compress_you_last = nil
$targets_damage = nil
$target = nil
$targets_last_message = nil
$targets_status = nil
$is_no_target = false
$is_buff = false
$shorteningSearch = false 
$is_self = false

def SpellName(id)
    if id == "709"
        return "Grasp of the Grave" #because Spell[709].name returns "Quake"
    else
        return Spell[id].name
    end
end

$compressing_spell_guess = nil
def begin_compress(s, targetstr)
    targetstr =~ /<a exist="(\d+)"/
    targetid = $1
    $is_no_target = targetid.nil?
    
    $miss_message = ' is unaffected'
    $prev_message = nil
    
    unless $compressing
        $compressing = true
        $compressing_spell_guess = nil
        $compressing_spell_guess = 9811 if s =~ /draws an intricately glowing pattern in the air before/
        $spell_cast_string = nil
        #$compressing_mstrike = s.include? "looks determined and focused"
        $compressing_better_action_message = nil
        $targets_damage = Hash.new
        $targets_last_message = Hash.new
        $targets_status = Hash.new
        $compress_you_last = nil
        $compress_last = nil
        $is_buff = false
        
        $compressed = Array.new    
        $compressed.push(s.chomp)
        $target = nil

        unless targetid.nil?
            $target = targetid
            $targets_damage[targetid] = 0 if #begin counting damage
            $targets_last_message[targetid] = s
            #echo "lastmsg: #{s}"
        end 
    end
end

def end_compress(s)
    $compressing = false
    num_targets = $targets_damage.length

    #if we identified the AOE spell, we can add some detail
    unless $compressing_spell_guess.nil?
        if $compressing_spell_guess == "ball"
            $compressed[0] = $compressing_better_action_message
        else
            if $is_self
                literal = "cast #{SpellName($compressing_spell_guess)}" #(#{$compressing_spell_guess})
                $compressed[0] = $compressed[0].gsub(/gesture/, literal)
            else
                if $compressing_spell_guess == 1030
                    literal = "weaves #{SpellName($compressing_spell_guess)}" #(#{$compressing_spell_guess})
                    $compressed[0] = $compressed[0].gsub(/skillfully begins to weave another verse/, literal)
                else
                    literal = "casts #{SpellName($compressing_spell_guess)}" #(#{$compressing_spell_guess})
                    $compressed[0] = $compressed[0].gsub(/gestures/, literal)
                end
            end
        end
    end

    #if we have better messaging to retain "game feel", we'll use it
    unless $spell_cast_string.nil? || $BC_EXTREME
        $compressed.push($spell_cast_string)
    end

    if num_targets == 0
        #echo "scs: #{$spell_cast_string}, last: #{$compress_last}, cyl: #{$compress_you_last}, c: #{$compressed}, s: #{s}"
        if $spell_cast_string.nil?
            $compressed.push($compress_last) 
        elsif !$compress_you_last.nil?
            $compressed.push($compress_you_last)
        end
    elsif $is_no_target
        $compressed[0] += " #{num_targets} targets affected."
    elsif num_targets > 1
        $compressed[0].chop! #remove punctuation mark
        $compressed[0] += " and 1 other." if num_targets == 2
        $compressed[0] += " and #{num_targets-1} others." if num_targets > 2
    end

    #tiny sleep to allow GameObj to update npcs in memory
    sleep 0.05

    if num_targets > 0 #!$compressing_spell_guess.nil? && num_targets > 0
        #echo "Spell guess is #{$compressing_spell_guess}"
        #aoe attack spell
        num_stunned = 0
        num_knockdown = 0
        num_frozen = 0
        num_confused = 0
        num_dead = 0
        num_sympathized = 0
        num_pinned = 0
        num_buffeted = 0
        total_damage = 0
        killed = Array.new
        $targets_damage.each { |targetid, damage| 
            targ = GameObj.npcs.find{ |i| i.id == targetid}
            num_dead += 1 if targ.status =~ /dead|gone/
            killed.push(targetid)
            total_damage += damage
        }

        $targets_status.each { |targetid, statusArr| 
            num_stunned += 1 if statusArr.any? "stunned"
            
            if statusArr.any? "knockdown"
                num_knockdown += 1 
            elsif statusArr.any? "buffeted"
                num_buffeted += 1 
            end
            num_frozen += 1 if statusArr.any? "frozen"
            num_pinned += 1 if statusArr.any? "pinned"
            num_sympathized += 1 if statusArr.any? "sympathized"
            num_dead += 1 if statusArr.any?("dead") && killed.include?(targetid)
        }

        if num_dead + num_stunned + num_knockdown + num_sympathized + num_frozen + num_confused + num_pinned + num_buffeted + total_damage == 0
            #echo "Possible buff spell, last was #{$compress_last}"
            #probably a buff spell or something else, just send the previous message
            $compressed.push($compress_last) if $spell_cast_string.nil?
        else
            str = []
            str.push "#{num_dead} targets <pushBold/>KILLED<popBold/>" if num_dead > 0
            str.push "#{num_knockdown} targets knocked down" if num_knockdown > 0
            str.push "#{num_stunned} targets stunned" if num_stunned > 0 #&& $compressing_spell_guess !~ /709|512|410/
            str.push "#{num_frozen} targets frozen" if num_frozen > 0
            str.push "#{num_sympathized} targets sympathized" if num_sympathized > 0
            str.push "#{num_pinned} targets pinned" if num_pinned > 0
            str.push "#{num_buffeted} targets buffeted" if num_buffeted > 0
            str.push "#{total_damage} damage dealt" if total_damage > 0
            $compressed.push("  ... #{str.join(', ')}!") if str.length > 0
        end
    elsif false #num_targets > 0
        #OLDER BLOCK OF CODE NO LONGER USED AS OF MAY 2020!
        $targets_damage.each { |targetid,damage| 
            targ = GameObj.npcs.find{ |i| i.id == targetid}
            str = "A <pushBold/><a exist=\"#{targ.id}\">#{targ.name}</a><popBold/> "
            
            str.concat "takes #{damage} damage and " if damage > 0
            
            if targ.status =~ /dead|gone/
                str.concat "is <pushBold/>DEAD!<popBold/>!"
            else
                if !$targets_status[targetid].nil? && $targets_status[targetid].any?
                    str.concat 'is '
                    #target acquired a status (stunned, proned, etc)
                    str.concat $targets_status[targetid].join(' and ')
                    str.concat '!'
                elsif damage > 0
                    #no status acquired, target not dead, damage only
                    str.sub!(/ and /, '!')
                else
                    #no damage, no status, probably a miss or something this script doesn't check
                    if $targets_last_message[targetid] =~ /(close|clean) miss/ && $targets_damage.length > 1
                        str.concat "is missed." #when more than one target, "A clean miss!" is too ambiguous
                    elsif 
                        $targets_last_message[targetid] =~ /Warded off!/ && $targets_damage.length > 1
                        str.concat "wards off the spell." #when more than one target, "Warded off!" is too ambiguous
                    else
                        if $targets_last_message[targetid].length > 0
                            str = $targets_last_message[targetid]
                        else 
                            str.concat "is unaffected."
                        end
                    end
                end
            end

            $compressed.push(str)
        }
    end

    $compressed.push(s) #add the prompt
    result = $compressed.join("\n")
    return result
end

def compress(s)
    return if s =~ /Cast Roundtime/
    $compress_last = s
    $compress_you_last = s if s =~ /You/

    s.chomp!
    checkstatus = proc { |s, targetid|
        $StatusEffects.each { |status, regex|
            if s =~ regex
                $targets_status[$target] = Array.new if $targets_status[$target].nil?
                $targets_status[$target].push(status)
            end
        }
    }

    if s =~ /(\d+) points of damage/
        #assume the last target took the damage
        $targets_damage[$target] += $1.to_i
    elsif s =~ /<a exist="(\d+)"/
        #game messaging indicates a possible target change
        $target = $1 if GameObj.npcs.any? {|npc| npc.id == $1} #set $target to the new target's id
        $targets_damage[$target] = 0 unless $targets_damage.has_key?($target)
        checkstatus.call s

        $targets_last_message[$target] = s
    elsif s !~ /Cast Roundtime|Forcing stance down|appears to gain succour|Feeling nervous yet|A hit|Warding failed/
        #this will catch "A clean miss" or 'Warded Off'.... probably
        $targets_last_message[$target] = s
    elsif s =~ /CS:|AS:|UAF:/
        #just numbers
    else
        #unknown string
        checkstatus.call s
    end

    if s =~ /arms snatch viciously|grotesque limbs/
        $compressing_spell_guess = '709'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /dark ethereal (waves|sphere)/
        $compressing_spell_guess = '410'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /(?:waves?|sphere) of .* (?:expands|moves)/
        #sphere of formless black ripples expands outward
        #A wave of crimson ethereal ripples moves outward from Treeva.
        $compressing_spell_guess = '435'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /radiant burst of light/
        $compressing_spell_guess = '135'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /multitude of sharp pieces of debris splinter off from underfoot|The surroundings advance upon/
        #You hear and feel a resounding low thrumming sound just as a multitude of sharp pieces of debris splinter off from underfoot, savagely assailing the area
        $compressing_spell_guess = '635'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /debris explodes from the ground beneath/
        $compressing_spell_guess = '917'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /An airy mist rolls into the (?:area|room)/
        $compressing_spell_guess = '512'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /force of the sonic vibrations/
        $compressing_spell_guess = '1030'
    elsif s =~ /eyes begin to glow purple/ #possible other eye colors
        $compressing_spell_guess = '1120'
    elsif s =~ /A nebulous haze shimmers into view around/
        $compressing_spell_guess - '1115'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /(?:hurl|fire|hurtles forth)s? an? [\w \-\']+ at/
        $compressing_spell_guess = 'ball'
        $compressing_better_action_message = s
    elsif s =~ /hand before it takes the shape of an ethereal chain of keys|A cold mist drifts in, blanketing the area|thunderous din echoes all around as the very earth shudders beneath/
        #there are possibly many more 335 spell messaging that I am not aware of
        $compressing_spell_guess = '335'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /utters a pious chant (.*) Suddenly a divine force radiates out from/
        $compressing_spell_guess = '1618'
        $spell_cast_string = s if $spell_cast_string.nil?
    elsif s =~ /an invisible force guides|considerably more powerful|feel the magic surge through you/
        #$is_buff = true
    end

end

#the main enchilada - this method gets attached to the DownstreamHook, s = the string from the server
def brief(s)

    no_self_spells = proc{ |s|
        if s =~ /(<castTime value='\d+'\/>)/;
          return s[0,$~.end(0)]
        elsif s =~ /<spell exist='spell'>([\w ']+)<\/spell>/
          return $&
        end

        return nil if s =~ /Your spell(song)? is ready\.|You gesture\.|Cast Roundtime \d Seconds.?/
    }

    no_roundtime = proc { |s|
        return nil if s =~ /Roundtime:/
    }
    no_709_decay = proc { |s|
        return nil if s =~ /briefly before decaying into dust./
    }
    no_mstrike_prep = proc { |s| 
        return nil if s =~ /In a breathtaking display of ability and combat mastery|spins about looking mighty stirred up|looks determined and focused/
    }
    no_get_arrow = proc { |s|
        return nil if s =~ /removes a single(.*)from/
    }
    no_arrow_nock = proc { |s| 
        return nil if s =~ /nocks? an?/
    }

    no_self_search = proc{ |s|
        if s =~ /You search the <pushBold\/>|<pushBold\/>.*<popBold\/> (had nothing of interest|didn't carry any silver|had nothing else of value)/
            return nil 
        end
    }
    
    shorten_searches = proc{ |s| 
        #<a exist="-10425992" noun="Tziporah">Tziporah</a> searches <pushBold/>an <a exist="117327336" noun="commoner">ethereal commoner</a><popBold/>.
        if s =~ /(<a exist="(?:-\d+)" noun="\w+">\w+<\/a>) searches (<pushBold\/>.*<popBold\/>)/
            $shorteningSearch = true 
            return s unless $BC_EXTREME
            return nil
        end
    }

    if $shorteningSearch #if we are in the middle of search action
        if s =~ /<prompt/ #a new prompt indicates the search is finished for one mob
            #echo "search done: #{s}"
            $shorteningSearch = false
            #return s unless $BC_EXTREME
            return nil
        else
            #echo "not a prompt, squelching search: #{s}"
            return nil #squelch the search message
        end
    end

    #proc that compresses combat messaging for your personal targeted attacks
    compress_combat = proc{ |s|
        if s =~ $combat_regex
            target_string = $4
            $is_self = $1 == 'You'
            
            begin_compress(s, target_string) # if is_pc
            #echo "beginning compress on: #{s}"
            
            return nil
        end
    }

    if $compressing
        return end_compress(s) if s =~ /<prompt/

        compress(s)
        return nil
    end

    if !$BC_EXCLUDE.nil? && $BC_EXCLUDE.any? { |x| s.include? x }
        return s
    end
    
    #main code
    no_roundtime.call s #squelch any mention of roundtime

    compress_combat.call s
    no_self_spells.call s unless $BC_EXCLUDE.include? "You"
    no_self_search.call s
    shorten_searches.call s
    no_mstrike_prep.call s
    no_709_decay.call s
    no_get_arrow.call s
    no_arrow_nock.call s

    s
end

DownstreamHook.add('brief', proc{ |s| brief(s) })
before_dying{DownstreamHook.remove('brief')}
while n!=0;sleep 1;end
exit
