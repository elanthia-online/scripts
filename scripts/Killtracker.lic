=begin
  Tracks Gemstones and Dust

  ;autostart add --global killtracker

  ;killtracker help

  Killtracker is now able to submit your finds to an external tracker located at:
  https://docs.google.com/spreadsheets/d/1IOLs8AGRR45Kr6Y9nz6CXlMVBKYR7cHLaz0jjAbjMv0
  ;killtracker submit finds - toggles submitting finds to googlesheets.

        author: Alastir
  contributors: Nisugi
          game: Gemstone
          tags: hunting, combat, tracking, gemstones, jewels, dust, klocks, data
       version: 2.3

Change Log:
  v2.3
    - convert old string to int on load
    - added way to backdate weekly reset
  v2.2
    - cross character eligibilty tracking ;kt eligible
    - save data every 5 min (people crash a lot?)
  v2.1
    - added way to correct weekly/montly found count
    - added commas to large numbers
    - migrate old dust search count to new format
    - indicate how many weeks to show with gemstone report ;kt gemstone report 4
  v2.0
    - added monthly/weekly gemstone tracking
    - added weekly dust tracking
    - corrected report outputs
    - option to submit finds to external spreadsheet
=end

no_kill_all
no_pause_all

module Killtracker
  ['yaml', 'terminal-table', 'time', 'rubygems', 'rubygems/dependency_installer', 'net/http', 'json', 'digest'].each(&method(:require))

  installer = Gem::DependencyInstaller.new({ :user_install => true, :document => nil })
  installed_gems = Gem::Specification.map { |gem| gem.name }.sort.uniq

  begin
    unless installed_gems.include?('tzinfo')
      echo "Installing missing ruby gem 'tzinfo' now, please wait!"
      installer.install('tzinfo')
      echo "Done installing 'tzinfo' gem!"
    end
    unless installed_gems.include?('tzinfo-data')
      echo "Installing missing ruby gem 'tzinfo-data' now, please wait!"
      installer.install('tzinfo-data')
      echo "Done installing 'tzinfo-data' gem!"
    end
    require 'tzinfo'
  rescue
    echo "Required Ruby gems failed to install: tzinfo & tzinfo-data"
    echo "Please install the above gem(s) to run ;#{Script.current.name}"
    exit
  end

  @filename = File.join(DATA_DIR, XMLData.game, Char.name, "Killtracker.yaml")
  if File.exist?(@filename)
    $killtracker = YAML.load_file(@filename)
  end
  $killtracker                              ||= {}
  $killtracker[:creature]                   ||= "none"
  $killtracker[:ascension_searches]         ||= 0
  $killtracker[:weekly_ascension_searches]  ||= 0
  $killtracker[:searches_since_jewel]       ||= 0
  $killtracker[:searches_since_dust]        ||= 0
  $killtracker[:jewel_found]                ||= {}
  $killtracker[:dust_found]                 ||= {}
  $killtracker[:none_found]                 ||= {}
  $killtracker[:silent]                       = true if $killtracker[:silent].nil?
  $killtracker[:monthly_gemstones]          ||= 0
  $killtracker[:weekly_gemstone]            ||= 0
  $killtracker[:weekly_dust]                ||= 0
  $killtracker[:last_month_reset]           ||= TZInfo::Timezone.get("America/New_York").now.month
  $killtracker[:last_week_reset]            ||= 0
  $killtracker[:cached_reset_time]          ||= 0

  # migrate legacy dust count to newer format
  if $killtracker[:dust_found]
    $killtracker[:dust_found].each do |_, ev|
      if ev.key?(:searches)
        ev[:searches_since] = ev.delete(:searches)
      end
    end
  end
  # fix my other mistake of saving to string .. can pull these out in a week or two.
  if $killtracker[:jewel_found]
    $killtracker[:jewel_found].each do |_, ev|
      if ev.key?(:searches_week)
        ev[:searches_week] = ev[:searches_week].to_i
      end
    end
  end

  def self.save(force = false)
    @old_data       ||= Marshal.load(Marshal.dump($killtracker))
    @next_save_time ||= 0

    unless force
      return if @old_data == $killtracker
      return if Time.now.to_i <= @next_save_time
    end

    File.write(@filename, $killtracker.to_yaml)
    @next_save_time = Time.now.to_i + 300
    @old_data = Marshal.load(Marshal.dump($killtracker))
  end

  def self.help
    respond("")
    respond(";kt announce           - To watch kills increment in the speech window")
    respond(";kt announce msg       - Alternate between two announce messages")
    respond(";kt summary            - summary for the week")
    respond(";kt eligible           - show cross character eligibility")
    respond(";kt gemstones report   - find report broken down by week")
    respond(";kt jewel report       - find report of all jewels")
    respond(";kt dust report        - find report of all dust")
    respond(";kt fix find count     - fixes monthly/weekly gemstone count in summary")
    respond(";kt save               - force search data to be saved to file")
    respond("")
    respond(";kt submit finds       - Pushes jewel and dust find to google sheets.")
    respond("   https://docs.google.com/spreadsheets/d/1IOLs8AGRR45Kr6Y9nz6CXlMVBKYR7cHLaz0jjAbjMv0")
  end

  def self.dust_report
    tz     = TZInfo::Timezone.get("America/New_York")
    events = $killtracker[:dust_found].sort_by { |key, _| key.to_i }

    rows = events.map do |key, ev|
      time_str = tz.to_local(Time.at(key.to_i)).strftime("%m/%d %H:%M:%S")
      searches = (ev[:searches_week] || 0).with_commas
      creature = ev[:creature] || ""
      room     = ev[:room] || ""
      name     = ev[:name] || ""
      [time_str, searches, creature, room, name]
    end

    title = "Detailed Dust Report: #{$killtracker[:dust_found].size} Dust over #{$killtracker[:ascension_searches]} Searches"
    table = Terminal::Table.new(
      title: title,
      headings: ["Time", "Searches", "Creature", "Room", "Name"],
      rows: rows
    )

    respond table.to_s
  end

  def self.jewel_report
    tz     = TZInfo::Timezone.get("America/New_York")
    events = $killtracker[:jewel_found].sort_by { |key, _| key.to_i }

    total_searches_for_gems = events.map { |_, ev| ev[:searches_week].to_i }
                                    .sum

    rows = events.map do |key, ev|
      time_str = tz.to_local(Time.at(key.to_i)).strftime("%m/%d %H:%M:%S")
      searches = (ev[:searches_week] || 0).with_commas
      creature = ev[:creature] || ""
      room     = ev[:room] || ""
      name     = ev[:name] || ""
      [time_str, searches, creature, room, name]
    end

    title = "Detailed Jewel Report: #{$killtracker[:jewel_found].size} Jewels over #{total_searches_for_gems} Searches"
    table = Terminal::Table.new(
      title: title,
      headings: ["Time", "Searches", "Creature", "Room", "Name"],
      rows: rows
    )

    respond table.to_s
  end

  def self.summary_report
    # overall counts
    gems_total      = $killtracker[:jewel_found].size
    dust_total      = $killtracker[:dust_found].size

    # weekly/monthly buckets
    weekly_searches = $killtracker[:weekly_ascension_searches]
    gems_this_week  = $killtracker[:weekly_gemstone] || 0
    dust_this_week  = $killtracker[:weekly_dust]     || 0
    gems_this_month = $killtracker[:monthly_gemstones] || 0

    # since‐last counters
    since_last_gem  = $killtracker[:searches_since_jewel]
    since_last_dust = $killtracker[:searches_since_dust]

    # compute sum of searches_week across all gem events
    total_searches_for_gems = $killtracker[:jewel_found].values
                                                        .map { |ev| ev[:searches_week].to_i }
                                                        .sum

    # compute sum of searches_week across all dust events
    total_searches_for_dust = $killtracker[:dust_found].values
                                                       .map { |ev| ev[:searches_week].to_i }
                                                       .sum

    # averages
    avg_per_gem  = gems_total > 0 ? (total_searches_for_gems.to_f  / gems_total).round : 0
    avg_per_dust = dust_total > 0 ? (total_searches_for_dust.to_f  / dust_total).round : 0

    # remaining gems this month (max 3)
    remaining_gems = [0, 3 - gems_this_month].max

    rows = [
      ["Searches This Week", weekly_searches.with_commas],
      [],
      ["Gemstones Found (all)", gems_total.with_commas],
      [" This Week", gems_this_week],
      [" This Month", gems_this_month],
      [" Avg Searches/Gem", avg_per_gem.with_commas],
      [" Remaining Gems", remaining_gems],
      [],
      ["Dust Found (all)", dust_total.with_commas],
      [" This Week", dust_this_week],
      [" Avg Searches/Dust", avg_per_dust.with_commas],
      [],
      ["Since Last Gem", since_last_gem.with_commas],
      ["Since Last Dust", since_last_dust.with_commas],
    ]

    table = Terminal::Table.new(
      title: "Killtracker Summary",
      headings: ["Metric", "Count"],
      rows: rows
    )

    respond table.to_s
  end

  def self.gemstones_report(weeks_back = nil)
    tz = TZInfo::Timezone.get("America/New_York")

    combined = []
    $killtracker[:jewel_found].each do |key, ev|
      combined << ev.merge(
        timestamp: key.to_i,
        type: "Gemstone",
        since: ev[:searches_since]
      )
    end
    $killtracker[:dust_found].each do |key, ev|
      combined << ev.merge(
        timestamp: key.to_i,
        type: "Dust",
        since: ev[:searches_since]
      )
    end
    $killtracker[:none_found].each do |key, ev|
      combined << ev.merge(
        timestamp: key.to_i,
        type: "None",
        since: ev[:searches_since]
      )
    end

    events_by_week = combined.group_by do |ev|
      tz.to_local(Time.at(ev[:timestamp])).strftime("%U").to_i
    end
    current_week = tz.to_local(Time.now).strftime("%U").to_i

    if weeks_back
      start_week = [0, current_week - (weeks_back - 1)].max
      allowed_weeks = (start_week..current_week).to_a
    else
      allowed_weeks = events_by_week.keys
    end

    events_by_week.select { |wk, _| allowed_weeks.include?(wk) }
                  .sort
                  .each do |week_number, events|
      if week_number == current_week
        weekly_count = $killtracker[:weekly_ascension_searches]
      else
        weekly_count = ($killtracker[:weekly_counts] && $killtracker[:weekly_counts][:"week_#{week_number}_ascension_searches"]) || 0
      end
      next if weekly_count == 0

      title = "Week #{week_number} Gemstone Search Report: #{weekly_count.with_commas} Searches"
      rows = events.sort_by { |ev| ev[:timestamp] }.map do |ev|
        time_str = tz.to_local(Time.at(ev[:timestamp])).strftime("%m/%d %H:%M:%S")
        [
          time_str, # Time
          ev[:type], # Type
          (ev[:searches_week] || 0).with_commas, # Searches so far that week at event
          (ev[:since] || 0).with_commas, # Searches since last find
          ev[:creature], # Creature
          ev[:name] # Name
        ]
      end

      table = Terminal::Table.new(
        title: title,
        headings: ["Time", "Type", "Week", "Since", "Creature", "Name"],
        rows: rows
      )
      respond table.to_s
    end
  end

  def self.eligibility_report(sort_key = nil)
    update_eligibility
    prof_mode = sort_key&.match?(/^(?:prof|profession)$/i)
    if prof_mode
      groups = @jewel_eligibility.values.group_by { |stats| stats[:profession] }
      rows = groups.map do |prof, stats_list|
        wk = stats_list.sum { |s| s[:weekly_gemstone].to_i }
        mo = stats_list.sum { |s| s[:monthly_gemstones].to_i }
        eligible = !(mo == 3 || wk == 1) ? "Yes" : "No"
        [prof, eligible, wk, mo]
      end
      title    = "Jewel Eligibility Across Characters (by profession)"
      headings = ["Prof", "Eligible", "Week", "Month"]
    else
      rows = @jewel_eligibility.map do |char, stats|
        wk = stats[:weekly_gemstone].to_i
        mo = stats[:monthly_gemstones].to_i
        eligible = !(mo == 3 || wk == 1) ? "Yes" : "No"
        [char, stats[:profession], eligible, wk, mo]
      end
      title    = "Jewel Eligibility Across Characters"
      headings = ["Name", "Prof", "Eligible", "Week", "Month"]
    end
    rows.sort_by! { |r| r[0].downcase }

    table = Terminal::Table.new(
      title: title,
      headings: headings,
      rows: rows
    )
    respond table.to_s
  end

  CMD_QUEUE = Queue.new
  REPORT_QUEUE = Queue.new
  DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
  UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"
  HOOK_CMD_RX = %r{^(?:<c>)?;(?:#{Script.current.name}|kt) (?:(.*))?$}i

  SEARCH_CREATURE = %r{You search the <pushBold/><a exist="\d+" noun="[^"]+">(?<creature>[^<]+)</a><popBold/>.}
  SEARCH_MUG      = %r{Taking advantage of the scuffle, you roughly pat (?:<.+?>)?the (?:<.+?>)?(?<creature>[-A-Za-z ]+)(?:<.+?>)? down for hidden valuables!}
  EVIL_EYE_FLEE = %r{The <pushBold/><a exist="\d+" noun="[^"]+">(?<creature>[^<]+)</a><popBold/> turns and runs screaming into the distance, never to be seen again.}

  FOUND_DUST = %r{<pushBold/>You notice a scintillating mote of gemstone dust on the ground and gather it quickly.}
  FOUND_GEMSTONE = %r{<pushBold/> \*\* A glint of light catches your eye, and you notice an? <a exist="\d+" noun="\w+">(?<name>[^<]+)</a> at your feet! \*\*}
  ASCENSION_CREATURES = Regexp.union(
    %r{armored battle mastodon},
    %r{black valravn},
    %r{boreal undansormr},
    %r{crimson angargeist},
    %r{fork-tongued wendigo},
    %r{giant warg},
    %r{gigas berserker},
    %r{gigas disciple},
    %r{gigas shield-maiden},
    %r{gigas skald},
    %r{gold-bristled hinterboar},
    %r{gorefrost golem},
    %r{halfling bloodspeaker},
    %r{halfling cannibal},
    %r{reptilian mutant},
    %r{sanguine ooze\b},
    %r{shadow-cloaked draugr},
    %r{winged disir},
    %r{basalt grotesque},
    %r{death knight},
    %r{mist-wreathed banshee},
    %r{patrician vampire},
    %r{phantasmic conjurer},
    %r{skeletal dreadsteed},
    %r{tatterdemalion ghast},
    %r{hive thrall},
    %r{kiramon broodtender},
    %r{kiramon myrmidon},
    %r{kiramon stalker},
    %r{kiramon strandweaver},
    %r{kresh ravager}
  )

  def self.update_eligibility
    # need to load from file each time to prevent over writing data
    @eligibility_file = File.join(DATA_DIR, XMLData.game, "jewel_eligibility.yaml")
    if File.exist?(@eligibility_file)
      @jewel_eligibility = YAML.load_file(@eligibility_file) || {}
    else
      @jewel_eligibility = {}
    end
    @jewel_eligibility[Char.name] = {
      profession: Stats.prof,
      weekly_gemstone: $killtracker[:weekly_gemstone] || 0,
      monthly_gemstones: $killtracker[:monthly_gemstones] || 0,
    }
    File.write(@eligibility_file, @jewel_eligibility.to_yaml)
  end

  def self.backfill_counters
    tz = TZInfo::Timezone.get("America/New_York")
    now = tz.now
    current_week  = now.strftime("%U").to_i
    current_month = now.month

    $killtracker[:weekly_gemstone]   = 0
    $killtracker[:monthly_gemstones] = 0
    $killtracker[:weekly_dust]       = 0

    $killtracker[:jewel_found].each_key do |key|
      ts    = key.to_i
      local = tz.to_local(Time.at(ts))

      $killtracker[:weekly_gemstone]   += 1 if local.strftime("%U").to_i == current_week
      $killtracker[:monthly_gemstones] += 1 if local.month == current_month
    end

    $killtracker[:dust_found].each_key do |key|
      ts    = key.to_i
      local = tz.to_local(Time.at(ts))
      $killtracker[:weekly_dust] += 1 if local.strftime("%U").to_i == current_week
    end
    update_eligibility
  end

  def self.send_to_sheet(ev_type, key)
    case ev_type
    when "dust"
      ev = $killtracker[:dust_found][key]
    when "jewel"
      ev = $killtracker[:jewel_found][key]
    end
    return unless ev

    uri = URI("https://script.google.com/macros/s/AKfycbyltG_Eax1-CY4n1isy9U_ZRlKxD93Ai5XQqbF78Wq-4tIqtFirLjbVcgrd13T59e6z/exec")

    user_id = Digest::SHA256.hexdigest([Char.name, Stats.race, Stats.prof].join('|'))

    req = Net::HTTP::Post.new(uri.request_uri, 'Content-Type' => 'application/json')
    req.body = {
      timestamp: key.to_i,
      type: ev_type,
      searches_week: ev[:searches_week],
      searches_since: ev[:searches_since],
      creature: ev[:creature],
      room: ev[:room],
      name: ev[:name],
      user: user_id
    }.to_json

    res = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
      http.request(req)
    end
    echo "→ GoogleSheets responded #{res.code}: #{res.body}"
    res.code.to_i
  rescue => e
    # catch network / JSON errors
    echo "!! send_to_sheet error: #{e.class}: #{e.message}"
  end

  def self.send_all_finds
    respond("Sending found jewels...")
    $killtracker[:jewel_found].each { |j| send_to_sheet("jewel", j.first) }
    respond("Sending found dust...")
    $killtracker[:dust_found].each { |d| send_to_sheet("dust", d.first) }
    respond("Sending complete.")
    respond("View the data at: https://docs.google.com/spreadsheets/d/1IOLs8AGRR45Kr6Y9nz6CXlMVBKYR7cHLaz0jjAbjMv0")
    respond("")
    respond("Please note, this is a special command and should only be ran once.")
    respond("To continue submitting finds going forward please enable the feature: ;kt submit finds")
  end

  def self.get_next_reset_local_time
    eastern = TZInfo::Timezone.get('America/New_York')
    now_est = eastern.now
    last_sunday_midnight_est = eastern.local_time(now_est.year, now_est.month, now_est.day, 0, 0, 0) - (now_est.wday * 86400)
    next_reset_est = last_sunday_midnight_est + (7 * 86400)
    $killtracker[:cached_reset_time] = next_reset_est.to_i
  end

  def self.maybe_reset_weekly_counter
    get_next_reset_local_time if $killtracker[:cached_reset_time] == 0
    eastern = TZInfo::Timezone.get("America/New_York")
    $killtracker[:weekly_counts] ||= {}
    while Time.now.to_i >= $killtracker[:cached_reset_time] && ($killtracker[:last_week_reset] == 0 || $killtracker[:last_week_reset] < $killtracker[:cached_reset_time])
      finished_week = eastern.to_local(Time.at($killtracker[:cached_reset_time] - 7 * 86400)).strftime("%U").to_i
      # determine remaing searches on week since last find
      total_this_week = $killtracker[:weekly_ascension_searches]
      gap = total_this_week - ($killtracker[:last_weekly_event_searches] || 0)
      key = $killtracker[:cached_reset_time].to_s
      $killtracker[:found_none][key] = {
        searches_since: gap,
        searches_week: total_this_week,
        creature: "none",
        room: "none",
        name: "Final searches of the week with no find"
      }
      $killtracker[:weekly_counts][:"week_#{finished_week}_ascension_searches"] = $killtracker[:weekly_ascension_searches]
      $killtracker[:weekly_counts][:"week_#{finished_week}_dust"] = $killtracker[:weekly_dust]
      $killtracker[:weekly_counts][:"week_#{finished_week}_gemstone"] = $killtracker[:weekly_gemstone]
      $killtracker[:weekly_ascension_searches] = 0
      $killtracker[:weekly_gemstone] = 0
      $killtracker[:weekly_dust] = 0
      $killtracker[:last_week_reset] = $killtracker[:cached_reset_time]
      get_next_reset_local_time
    end
  end

  def self.maybe_reset_monthly_counter
    est = TZInfo::Timezone.get("America/New_York")
    current_month = est.now.month
    if current_month != $killtracker[:last_month_reset]
      $killtracker[:monthly_gemstones] = 0
      $killtracker[:last_month_reset] = current_month
    end
  end

  def self.back_date_reset
    $killtracker[:cached_reset_time] = $killtracker[:cached_reset_time] - 7 * 86400
    $killtracker[:last_week_reset] = 0
    maybe_reset_weekly_counter
  end

  def self.parse_downstream(line)
    case line
    when FOUND_GEMSTONE
      key = Time.now.to_i.to_s
      name = Regexp.last_match[:name]
      room = Room.current.id
      $killtracker[:monthly_gemstones] += 1
      $killtracker[:weekly_gemstone] += 1
      $killtracker[:jewel_found][key] = {
        searches_since: $killtracker[:searches_since_jewel],
        searches_week: $killtracker[:weekly_ascension_searches],
        name: name,
        room: room,
        creature: $killtracker[:creature],
        on_the_month: $killtracker[:monthly_gemstones]
      }
      report = ['found gemstone', $killtracker[:creature], $killtracker[:weekly_ascension_searches], $killtracker[:searches_since_jewel]]
      $killtracker[:searches_since_jewel] = 0
      $killtracker[:last_weekly_event_searches] = $killtracker[:weekly_ascension_searches]
      REPORT_QUEUE.push(report)
      REPORT_QUEUE.push(["send jewel report", key]) if $killtracker[:submit_finds]

    when FOUND_DUST
      key = Time.now.to_i.to_s
      room = Room.current.id
      $killtracker[:weekly_dust] += 1
      $killtracker[:dust_found][key] = {
        searches_since: $killtracker[:searches_since_dust],
        searches_week: $killtracker[:weekly_ascension_searches],
        name: "gemstone dust",
        room: room,
        creature: $killtracker[:creature]
      }
      report = ['found dust', $killtracker[:creature], $killtracker[:weekly_ascension_searches], $killtracker[:searches_since_dust]]
      $killtracker[:searches_since_dust] = 0
      $killtracker[:last_weekly_event_searches] = $killtracker[:weekly_ascension_searches]
      REPORT_QUEUE.push(report)
      REPORT_QUEUE.push(["send dust report", key]) if $killtracker[:submit_finds]

    when SEARCH_CREATURE, SEARCH_MUG, EVIL_EYE_FLEE
      maybe_reset_weekly_counter
      maybe_reset_monthly_counter
      name = Regexp.last_match[:creature]
      $killtracker[:creature] = name
      if ASCENSION_CREATURES.match?(name)
        $killtracker[:weekly_ascension_searches] += 1
        $killtracker[:searches_since_jewel] += 1
        $killtracker[:searches_since_dust] += 1
        report = ["search report", name, $killtracker[:weekly_ascension_searches], $killtracker[:searches_since_dust], $killtracker[:searches_since_jewel]]
        REPORT_QUEUE.push(report) unless $killtracker[:silent]
      end
    end
    line
  end

  def self.parse_upstream(command)
    case command
    when HOOK_CMD_RX
      CMD_QUEUE.push($1)
      nil
    else
      command
    end
  end

  DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc do |server_string| parse_downstream(server_string) end)
  UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command| parse_upstream(command) end)
  before_dying { File.write(@filename, $killtracker.to_yaml); DownstreamHook.remove(DOWNSTREAM_HOOK_ID); UpstreamHook.remove(UPSTREAM_HOOK_ID) }

  save(true)
  maybe_reset_weekly_counter
  maybe_reset_monthly_counter
  update_eligibility

  CMD_QUEUE.push(Script.current.vars[0]) unless Script.current.vars[0].nil?

  loop do
    unless REPORT_QUEUE.empty?
      report = REPORT_QUEUE.pop
      next if report.nil?
      case report[0]
      when "search report"
        _, creature, week, dust, jewel = report
        Lich::Messaging.stream_window("Searches: (#{week}) - (#{creature})", "speech") if $killtracker[:announce_msg]
        Lich::Messaging.stream_window("Searches: (#{week}) - (#{creature}) - Since last Dust: (#{dust})  Since last Jewel: (#{jewel})", "speech") if !$killtracker[:announce_msg]
        save
      when "found dust"
        _, creature, week, dust = report
        Lich::Messaging.stream_window("Found dust after #{week} searches. (#{creature}) - Since last Dust: (#{dust})", "speech")
        save
      when "found gemstone"
        _, creature, week, jewel = report
        Lich::Messaging.stream_window("Found a gemstone in #{week} searches. (#{creature}) - Since last Jewel: (#{jewel})", "speech")
        save
        update_eligibility
      when /send dust report/
        send_to_sheet("dust", report[1])
      when /send jewel report/
        send_to_sheet("jewel", report[1])
      end
    end

    unless CMD_QUEUE.empty?
      command = CMD_QUEUE.pop
      return if command.nil?
      case command
      when /help/
        Killtracker.help
      when /save/
        Killtracker.save(true)
        respond("Killtracker data saved to file.")
      when /jewel report/
        Killtracker.jewel_report
      when /dust report/
        Killtracker.dust_report
      when /gemstones? report(?:\s+(\d+))?$/
        weeks = $1 ? $1.to_i : nil
        Killtracker.gemstones_report(weeks)
      when /summary/
        Killtracker.summary_report
      when /send all finds/
        Killtracker.send_all_finds
      when /fix find count/
        Killtracker.backfill_counters
      when /back date reset/
        Killtracker.back_date_reset
      when /(?:eligible|eligibility)(?:\s+(\w+))?/
        sort_key = $1&.downcase
        Killtracker.eligibility_report(sort_key)
      when /announce$/
        $killtracker[:silent] = !$killtracker[:silent] # toggle setting
        msg = $killtracker[:silent] ? 'Reporting only upon a find.' : 'Reporting after each kill.'
        respond(msg)
      when /announce msg/
        $killtracker[:announce_msg] ||= false
        $killtracker[:announce_msg] = !$killtracker[:announce_msg]
        msg = $killtracker[:announce_msg] ? 'Announce shows total search count.' : 'Announce shows searches since last find'
        respond(msg)
      when /submit finds/
        $killtracker[:submit_finds] ||= false
        $killtracker[:submit_finds] = !$killtracker[:submit_finds]
        msg = $killtracker[:submit_finds] ? 'Sending finds to external spreadsheet' : 'NOT sending finds to external spreadsheet'
        respond(msg)
      end
    end
    sleep(0.25)
  end
end
