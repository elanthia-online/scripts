=begin
  Tracks searches and notable finds in real time.

  ;autostart add --global killtracker

  while the script is running enter ;killtracker <command> or ;kt <command>
  ;killtracker announce     - To watch kills increment in the speech window.
  ;killtracker announce msg - Alternate between two announce messages.
  ;killtracker summary
  ;killtracker gemstones report
  ;killtracker jewel report
  ;killtracker dust report

  It will announce when a gemstone is found to the Wrayth speech window.

        author: Alastir
  contributors: Nisugi
          game: Gemstone
          tags: hunting, combat, tracking, gemstones, jewels, dust, klocks, data
       version: 1.1

Change Log:
  v1.1 (2025-03-24)
    - typo fixes .. repsond doesn't work for some reason
    - attempts to install tzinfo, tzinfo-data gems if not present
  v1.0 (2025-03-23)
    - release
=end

no_kill_all
no_pause_all

module Killtracker
  ['yaml', 'terminal-table', 'time', 'rubygems', 'rubygems/dependency_installer'].each(&method(:require))

  installer = Gem::DependencyInstaller.new({ :user_install => true, :document => nil })
  installed_gems = Gem::Specification.map { |gem| gem.name }.sort.uniq

  begin
    unless installed_gems.include?('tzinfo')
      echo "Installing missing ruby gem 'tzinfo' now, please wait!"
      installer.install('tzinfo')
      echo "Done installing 'tzinfo' gem!"
    end
    unless installed_gems.include?('tzinfo-data')
      echo "Installing missing ruby gem 'tzinfo-data' now, please wait!"
      installer.install('tzinfo-data')
      echo "Done installing 'tzinfo-data' gem!"
    end
    require 'tzinfo'
  rescue
    echo "Required Ruby gems failed to install: tzinfo & tzinfo-data"
    echo "Please install the above gem(s) to run ;#{Script.current.name}"
    exit
  end

  @filename = File.join(DATA_DIR, XMLData.game, Char.name, "Killtracker.yaml")
  if File.exist?(@filename)
    $killtracker = YAML.load_file(@filename, permitted_classes: [Time, Symbol])
  end
  $killtracker                              ||= {}
  $killtracker[:creature]                   ||= "none"
  $killtracker[:total_searches]             ||= 0
  $killtracker[:ascension_searches]         ||= 0
  $killtracker[:weekly_ascension_searches]  ||= 0
  $killtracker[:mutant_searches]            ||= 0
  $killtracker[:searches_since_jewel]       ||= 0
  $killtracker[:searches_since_dust]        ||= 0
  $killtracker[:searches_since_idol]        ||= 0
  $killtracker[:searches_since_lock_key]    ||= 0
  $killtracker[:searches_since_feeder]      ||= 0
  $killtracker[:searches_since_legendary]   ||= 0
  $killtracker[:jewel_found]                ||= {}
  $killtracker[:dust_found]                 ||= {}
  $killtracker[:idol_found]                 ||= {}
  $killtracker[:lock_key_found]             ||= {}
  $killtracker[:feeder_found]               ||= {}
  $killtracker[:legendary_found]            ||= {}
  $killtracker[:silent]                     ||= true
  $killtracker[:last_week_reset]            ||= nil
  $killtracker[:cached_reset_time]          ||= nil
  File.write(@filename, $killtracker.to_yaml)

  def self.help
    respond("")
    respond(";killtracker announce     - To watch kills increment in the speech window.")
    respond(";killtracker announce msg - Alternate between two announce messages.")
    respond(";killtracker summary")
    respond(";killtracker gemstones report")
    respond(";killtracker jewel report")
    respond(";killtracker dust report")
    respond("")
  end

  def self.get_next_reset_local_time
    eastern = TZInfo::Timezone.get('America/New_York')
    now_est = eastern.now
    last_sunday_midnight_est = eastern.local_time(now_est.year, now_est.month, now_est.day, 0, 0, 0) - (now_est.wday * 86400)
    next_reset_est = last_sunday_midnight_est + (7 * 86400)
    next_reset_est.to_i
  end

  $killtracker[:cached_reset_time] ||= get_next_reset_local_time

  def self.maybe_reset_weekly_counter
    eastern = TZInfo::Timezone.get("America/New_York")
    $killtracker[:weekly_counts] ||= {}
    while Time.now.to_i >= $killtracker[:cached_reset_time] && ($killtracker[:last_week_reset].nil? || $killtracker[:last_week_reset] < $cached_reset_time)
      finished_week = eastern.to_local(Time.at($killtracker[:cached_reset_time] - 7 * 86400)).strftime("%U").to_i
      $killtracker[:weekly_counts][:"week_#{finished_week}_ascension_searches"] = $killtracker[:weekly_ascension_searches]
      $killtracker[:weekly_ascension_searches] = 0
      $killtracker[:last_week_reset] = $killtracker[:cached_reset_time]
      $killtracker[:cached_reset_time] += 7 * 86400
    end
  end

  def self.pluralize(word, count)
    count == 1 ? word : word + "s"
  end

  def self.detailed_report(event_type)
    events = $killtracker[event_type] || {}
    sorted_keys = events.keys.sort_by(&:to_i)

    if event_type =~ /jewel|dust/
      title = "Detailed #{event_type.to_s.split('_').first.capitalize} Event Log Over #{$killtracker[:ascension_searches]} Searches"
    else
      title = "Detailed #{event_type.to_s.split('_').first.capitalize} Event Log Over #{$killtracker[:total_searches]} Searches"
    end
    if event_type =~ /idol/
      title = "Detailed #{event_type.to_s.split('_').first.capitalize} Event Log Over #{$killtracker[:mutant_searches]} Mutant Searches"
    end

    # Set up headings based on event type
    if event_type =~ /jewel/
      headings = ["Time", "Since", "Week", "Creature", "Name"]
    else
      headings = ["Time", "Searches", "Creature", "Name"]
    end

    rows = sorted_keys.map do |key|
      event = events[key]
      time = Time.at(key.to_i)
      formatted_time = time.strftime("%m/%d %H:%M:%S")

      if event_type =~ /jewel/
        [
          formatted_time,
          event[:searches_since] || 0,
          event[:searches_week]  || 0,
          event[:creature]       || "",
          event[:name]           || ""
        ]
      else
        [
          formatted_time,
          event[:searches]       || 0,
          event[:creature]       || "",
          event[:name]           || ""
        ]
      end
    end

    table = Terminal::Table.new :title => title, :headings => headings, :rows => rows
    respond table.to_s
  end

  def self.summary_report
    groups = {
      "Gemstones & Dust" => [
        { key: :jewel_found,     label: "Gemstone",  since: :searches_since_jewel },
        { key: :dust_found,      label: "Dust",      since: :searches_since_dust },
        { key: :idol_found,      label: "Idol",      since: :searches_since_idol }
      ],
      "Lockbox & Key"    => [
        { key: :lock_key_found,  label: "Lock&Key",  since: :searches_since_lock_key }
      ],
      "Legendary"        => [
        { key: :legendary_found, label: "Legendary", since: :searches_since_legendary }
      ],
      "Feeder"           => [
        { key: :feeder_found,    label: "Feeder",    since: :searches_since_feeder }
      ]
    }

    groups.each do |group_name, events|
      group_total = events.sum { |evt| ($killtracker[evt[:key]] || {}).size }
      next if group_total == 0

      respond "   === #{group_name} ==="
      if group_name == "Gemstones & Dust"
        asc_searches  = $killtracker[:ascension_searches] || 0
        weekly_asc    = $killtracker[:weekly_ascension_searches] || 0
        respond " #{format('%6d', asc_searches)}: Total Ascension Searches"
        respond " #{format('%6d', weekly_asc)}: Weekly Ascension Searches"
      end

      events.each do |evt|
        event_hash = $killtracker[evt[:key]] || {}
        count = event_hash.size
        next if count == 0

        if group_name == "Gemstones & Dust"
          avg = count > 0 ? ($killtracker[:ascension_searches].to_f / count) : 0
        else
          search_counts = event_hash.values.map { |data| data[:searches].to_i }
          avg = count > 0 ? search_counts.sum.to_f / count : 0
        end

        since = $killtracker[evt[:since]] || 0
        found_label = pluralize(evt[:label], count)

        respond " #{format('%6d', count)}: #{found_label} Found"
        respond " #{format('%6d', since)}: Since last #{evt[:label]}"
        respond " #{format('%6d', avg.to_i)}: Avg per #{evt[:label]}"
        respond ""
      end
      respond ""
    end
  end

  def self.gemstones_report
    combined_events = []

    $killtracker[:jewel_found].each do |key, event|
      combined_events << event.merge({ timestamp: key.to_i, type: "Jewel" })
    end

    $killtracker[:dust_found].each do |key, event|
      combined_events << event.merge({ timestamp: key.to_i, type: "Dust" })
    end

    eastern = TZInfo::Timezone.get("America/New_York")

    events_by_week = combined_events.group_by do |event|
      eastern.to_local(Time.at(event[:timestamp])).strftime("%U").to_i
    end

    current_week = eastern.to_local(Time.now).strftime("%U").to_i

    events_by_week.sort.each do |week_number, events|
      sorted_events = events.sort_by { |event| event[:timestamp] }
      rows = sorted_events.map do |event|
        event_time = eastern.to_local(Time.at(event[:timestamp]))
        formatted_time = event_time.strftime("%m/%d %H:%M:%S")
        searches = (event[:type] == "Jewel") ? (event[:searches_since] || 0) : (event[:searches] || 0)
        [
          formatted_time,
          event[:type],
          searches,
          event[:creature] || "N/A",
          event[:room] || "N/A",
          event[:name] || ""
        ]
      end

      if week_number == current_week
        weekly_count = $killtracker[:weekly_ascension_searches]
      else
        weekly_count = ($killtracker[:weekly_counts] && $killtracker[:weekly_counts][:"week_#{week_number}_ascension_searches"]) || 0
      end

      title = "Week #{week_number} Gemstone Search Report: #{weekly_count} Searches"
      table = Terminal::Table.new title: title,
                                  headings: ["Time", "Type", "Searches", "Creature", "Room", "Name"],
                                  rows: rows

      respond table.to_s
    end
  end

  CMD_QUEUE = Queue.new
  REPORT_QUEUE = Queue.new
  DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
  UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"
  HOOK_CMD_RX = %r{^(?:<c>)?;(?:#{Script.current.name}|kt) (?:(.*))?$}i

  SEARCH_CREATURE = %r{You search the <pushBold/><a exist="\d+" noun="[^"]+">(?<creature>[^<]+)</a><popBold/>.}
  EVIL_EYE_FLEE = %r{The <pushBold/><a exist="\d+" noun="[^"]+">(?<creature>[^<]+)</a><popBold/> turns and runs screaming into the distance, never to be seen again.}
  FEEDER_ITEM = %r{\*\*\* A glint of light draws your attention to your latest find! \*\*\*}
  LEGENDARY_ITEM = %r{A prismatic display of color tints the air around you and arcs away, heralding your discovery of a legendary treasure!}
  LOCK_KEY = %r{A <a exist="\d+" noun="[^"]+">(?<name>[^<]+)</a> appears on the ground!}
  GEMSTONE_DUST = %r{<pushBold/>You notice a scintillating mote of gemstone dust on the ground and gather it quickly.}
  GEMSTONE_JEWEL = %r{<pushBold/> \*\* A glint of light catches your eye, and you notice an? <a exist="\d+" noun="\w+">(?<name>[^<]+)</a> at your feet! \*\*}
  DRACONIC_IDOL = %r{While rifling through <pushBold/>the <a exist="\d+" noun="mutant">mutant's</a><popBold/> belongings, you find a <a exist="\d+" noun="idol">(?<name>silver-veined black draconic idol)</a> wrapped carefully in rags as if it were a precious trinket.}
  ASCENSION_CREATURES = Regexp.union(
    %r{armored battle mastodon},
    %r{black valravn},
    %r{boreal undansormr},
    %r{crimson angargeist},
    %r{fork-tongued wendigo},
    %r{giant warg},
    %r{gigas berserker},
    %r{gigas disciple},
    %r{gigas shield-maiden},
    %r{gigas skald},
    %r{gold-bristled hinterboar},
    %r{gorefrost golem},
    %r{halfling bloodspeaker},
    %r{halfling cannibal},
    %r{reptilian mutant},
    %r{sanguine ooze},
    %r{shadow-cloaked draugr},
    %r{winged disir},
    %r{basalt grotesque},
    %r{death knight},
    %r{mist-wreathed banshee},
    %r{patrician vampire},
    %r{phantasmic conjurer},
    %r{skeletal dreadsteed},
    %r{tatterdemalion ghast},
    %r{hive thrall},
    %r{kiramon broodtender},
    %r{kiramon myrmidon},
    %r{kiramon stalker},
    %r{kiramon strandweaver},
    %r{kresh ravager}
  )

  def self.parse_downstream(line)
    case line
    when GEMSTONE_JEWEL
      key = Time.now.to_i.to_s
      name = Regexp.last_match[:name]
      room = Room.current.id
      $killtracker[:jewel_found][key] = { searches_since: $killtracker[:searches_since_jewel], searches_week: $killtracker[:weekly_ascension_searches], name: name, room: room, creature: $killtracker[:creature] }
      report = "jewel_found_#{$killtracker[:creature]}:#{$killtracker[:searches_since_jewel]}:#{$killtracker[:weekly_ascension_searches]}"
      $killtracker[:searches_since_jewel] = 0
      REPORT_QUEUE.push(report)

    when GEMSTONE_DUST
      key = Time.now.to_i.to_s
      room = Room.current.id
      $killtracker[:dust_found][key] = { searches: $killtracker[:searches_since_dust], name: "gemstone dust", room: room, creature: $killtracker[:creature] }
      report = "dust_found_#{$killtracker[:creature]}:#{$killtracker[:searches_since_dust]}"
      $killtracker[:searches_since_dust] = 0
      REPORT_QUEUE.push(report)

    when DRACONIC_IDOL
      key = Time.now.to_i.to_s
      room = Room.current.id
      $killtracker[:idol_found][key] = { searches: $killtracker[:searches_since_idol], name: "silver-veined black draconic idol", room: room, creature: $killtracker[:creature] }
      report = "idol_found_#{$killtracker[:creature]}:#{$killtracker[:searches_since_idol]}"
      $killtracker[:searches_since_idol] = 0
      REPORT_QUEUE.push(report)

    when LOCK_KEY
      key = Time.now.to_i.to_s
      name = Regexp.last_match[:name]
      room = Room.current.id
      $killtracker[:lock_key_found][key] = { searches: $killtracker[:searches_since_lock_key], name: name, room: room, creature: $killtracker[:creature] }
      report = "lock_key_found_#{$killtracker[:creature]}:#{$killtracker[:searches_since_lock_key]}"
      $killtracker[:searches_since_lock_key] = 0
      REPORT_QUEUE.push(report)

    when FEEDER_ITEM
      key = Time.now.to_i.to_s
      room = Room.current.id
      $killtracker[:feeder_found][key] = { searches: $killtracker[:searches_since_feeder], room: room, creature: $killtracker[:creature] }
      report = "feeder_found_#{$killtracker[:creature]}:#{$killtracker[:searches_since_feeder]}"
      $killtracker[:searches_since_feeder] = 0
      REPORT_QUEUE.push(report)

    when LEGENDARY_ITEM
      key = Time.now.to_i.to_s
      room = Room.current.id
      $killtracker[:feeder_found][key] = { searches: $killtracker[:searches_since_legendary], room: room, creature: $killtracker[:creature] }
      report = "legendary_found_#{$killtracker[:creature]}:#{$killtracker[:searches_since_legendary]}"
      $killtracker[:searches_since_legendary] = 0
      REPORT_QUEUE.push(report)

    when SEARCH_CREATURE, EVIL_EYE_FLEE
      maybe_reset_weekly_counter
      name = Regexp.last_match[:creature]
      $killtracker[:creature] = name
      report = nil
      if ASCENSION_CREATURES.match?(name)
        $killtracker[:ascension_searches] += 1
        $killtracker[:weekly_ascension_searches] += 1
        $killtracker[:searches_since_jewel] += 1
        $killtracker[:searches_since_dust] += 1
        if name =~ /mutant/
          $killtracker[:searches_since_idol] += 1 if name =~ /mutant/
          $killtracker[:mutant_searches] += 1 if name =~ /mutant/
        end
        report = "search_report_#{name}:#{$killtracker[:weekly_ascension_searches]}:#{$killtracker[:searches_since_jewel]}:#{$killtracker[:searches_since_dust]}" unless $killtracker[:silent]
      end
      $killtracker[:total_searches] += 1
      $killtracker[:searches_since_lock_key] += 1
      $killtracker[:searches_since_feeder] += 1
      $killtracker[:searches_since_legendary] += 1
      REPORT_QUEUE.push(report) unless $killtracker[:silent]
    end
    line
  end

  def self.parse_upstream(command)
    case command
    when HOOK_CMD_RX
      CMD_QUEUE.push($1)
      nil
    else
      command
    end
  end

  DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc do |server_string| parse_downstream(server_string) end)
  UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command| parse_upstream(command) end)
  before_dying { DownstreamHook.remove(DOWNSTREAM_HOOK_ID); UpstreamHook.remove(UPSTREAM_HOOK_ID); File.write(@filename, $killtracker.to_yaml) }

  loop do
    unless REPORT_QUEUE.empty?
      report = REPORT_QUEUE.pop
      next if report.nil?
      case report
      when /^search_report/
        creature, count, jewel, dust = report.gsub("search_report_", "").split(":")
        Lich::Messaging.stream_window("Kills: (#{count}) - (#{creature})", "speech") if $killtracker[:announce_msg]
        Lich::Messaging.stream_window("Kills since last Jewel: (#{jewel}) Dust: (#{dust}) - (#{creature})", "speech") if !$killtracker[:announce_msg]
      when /dust_found/
        Lich::Messaging.stream_window("Found dust after #{report.gsub("dust_found_", "")} kills.", "speech")
      when /jewel_found/
        Lich::Messaging.stream_window("Found a gemstone in #{report.gsub("jewel_found_", "")} kills.", "speech")
      end
    end

    unless CMD_QUEUE.empty?
      command = CMD_QUEUE.pop
      return if command.nil?
      case command
      when /help/
        Killtracker.help
      when /jewel report/
        Killtracker.detailed_report(:jewel_found)
      when /dust report/
        Killtracker.detailed_report(:dust_found)
      when /gemstones? report/
        Killtracker.gemstones_report
      when /idol report/
        Killtracker.detailed_report(:idol_found)
      when /klock report/
        Killtracker.detailed_report(:lock_key_found)
      when /feeder report/
        Killtracker.detailed_report(:feeder_found)
      when /legendary report/
        Killtracker.detailed_report(:legendary_found)
      when /summary/
        Killtracker.summary_report
      when /announce$/
        $killtracker[:silent] = !$killtracker[:silent] # toggle setting
        msg = $killtracker[:silent] ? 'Reporting only upon a find.' : 'Reporting after each kill.'
        Lich::Messaging.stream_window(msg, "speech")
      when /announce msg/
        $killtracker[:announce_msg] ||= false
        $killtracker[:announce_msg] = !$killtracker[:announce_msg]
        msg = $killtracker[:announce_msg] ? 'Announce shows total search count.' : 'Announce shows searches since last find'
        Lich::Messaging.stream_window(msg, "speech")
      end
    end
    sleep(0.25)
  end
end
