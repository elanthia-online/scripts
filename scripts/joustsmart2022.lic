=begin

This script attempts to improve returns on the joust by recognizing knight behavior patterns. Four patterns are known as of this version, there appears to be one to two more or the 5th is random.

It starts by assuming a specific path to perfect joust and then adjusts based on results. There is plenty of randomness to the jousting so keep that in mind.

The behaviors could change, no guarantees there.

You can ";vars set interrupt=yes" to interrupt the script before the start of another run. Set to "no" to use again. 


	author: Elanthia-online
    Orignal authors: Tovklar (with fix by Elkiros) based on original by Rjex
      game: Gemstone
      tags: jousting
   version: 1.0
   
Changelog

Version 1.0
	Updated for 2022
   
=end


#rock paper scissors mapping
$rps = {"left" => "right","center" => "left", "right" => "center"}
#modeling 2 behaviors of knights key last player move and last knight move, value next knight move, may be a third model, data incomplete
$model1 = {"centerleft" => "left", "centerright" => "left", "leftcenter" => "right", "leftright" => "right", "rightleft" => "center", "rightcenter" => "center"}
$model2 = {"centerleft" => "center", "centerright" => "left", "leftcenter" => "right", "leftright" => "left", "rightleft" => "center", "rightcenter" => "right"}
$model3 = {"centerleft" => "left", "centerright" => "left", "leftcenter" => "left", "leftright" => "left", "rightleft" => "center", "rightcenter" => "left"}

$knightMode = $model1
$modelFound = false
$randoming = false
$score = 0
$count = 0

def knight_logic (lm, lm2, lm3, lkm, lkm2, lkm3)

    if lkm == lkm2 && lkm2 == lkm3
    #attempt to handle 5 in a row knights
        return $rps[lkm]
    elsif $score == 1
    #assume ties will be random and there's not much to do about it"
        return lm
    elsif $modelFound
        if $score == 2 &&  !$randoming
            #keep going with pattern if winning
            return $rps[$knightMode[lm+lkm]]
        elsif $knightMode != $model3 && $model3[lm2+lkm2] == lkm && $model3[lm3+lkm3] == lkm2
           #pattern miss, running another check starting from 3 to to 1 using more data
           $knightMode = $model3
           return $rps[$knightMode[lm+lkm]]
        elsif $knightMode != $model2 && $model2[lm2+lkm2] == lkm && $model2[lm3+lkm3] == lkm2
            $knightMode = $model2
            return $rps[$knightMode[lm+lkm]]
        elsif $knightMode != $model1 && $model1[lm2+lkm2] == lkm && $model1[lm3+lkm3] == lkm2
            $knightMode = $model1
            return $rps[$knightMode[lm+lkm]]
        else
            #no pattern found might as well random
            $randoming = true
            return ["left","center","right"].sample
        end
    else
        #check pattern if possible no need to switch if its working
        if $model2[lm2+lkm2] == lkm && $score < 2
           $knightMode = $model2
           $modelFound = true
           return $rps[$knightMode[lm+lkm]]
        elsif $model3[lm2+lkm2] == lkm && $score < 2
            $knightMode = $model3
            $modelFound = true
            return $rps[$knightMode[lm+lkm]]
        elsif $model1[lm2+lkm2] == lkm && $score < 2
            $knightMode = $model1
            $modelFound = true
            return $rps[$knightMode[lm+lkm]]
        else
            #if nothing else keep with model 1
            return $rps[$model1[lm+lkm]]
        end
    end
end

def tournyLoop (faction)

    loop do
        if UserVars.interrupt == "yes"
            echo "Var interrupt set to yes, exiting."
            exit
        end
        Script.run("go2", faction.to_s,:quiet => true) if Room.current.id != faction
        result = dothistimeout "get marker", 2, /You remove a|You already have that/
        if result !~ /You remove a|You already have that/
            if (checkright != "marker" and checkleft != "marker")
                echo "out of markers!"
                exit
            end
        end
        
        nextMove = "left"
        lastMove = "left"
        lastMove2 = "left"
        lastMove3 = "left"
        lastKnightMove = "unknown"
        lastKnightMove2 = "unknown"
        lastKnightMove3 = "unknown"
        $knightMode = $model1
        $modelFound = false
        $randoming = false
        $score = 0
        $count = 0
    
        fput "go entry table"
        if !Vars.inv.nil?
            fput "put my marker in my #{Vars.inv}"
        else
            fput "stow my marker"
        end
    
        fput "glance"
        pause 2
        if !(checkleft.nil? and checkright.nil?)
            echo "Empty your hands! Make sure you have a lootsack set too."
            exit
        end
    
        dothis "look in paddock", /In the enclosed paddock/
        GameObj.loot.find { |obj| obj.name =~ /paddock/ }.contents.find { |obj| 	
            fput "get #{obj.noun} from paddock"
        }
    
        dothis "look on rack", /On the large weapon rack you see/
        GameObj.loot.find { |obj| obj.name =~ /rack/ }.contents.find { |obj| 	
            fput "get #{obj.noun} from rack"
        }
    
        fput "look on display", /On the shield display you see/
        GameObj.loot.find { |obj| obj.name =~ /display/ }.contents.find { |obj| 	
            fput "get #{obj.noun} from display"
        }
    
        fput "go entry table"
        waitfor "Tourney"
        fput "shout"
        
        loop do
            result = waitfor "AIM LEFT, AIM CENTER, or AIM RIGHT","A jousting attendant says",/appears to be aiming.+?to the (right|left|center) of your/
            if result =~ /right|center|left/
                result = result.to_s.match /appears to be aiming.+?to the (right|left|center) of your/
                tempScore = waitfor /A jousting herald announces.+?(0|1|2)/
                tempScore = tempScore.match /A jousting herald announces.+?(0|1|2)/
                $score = tempScore[1].to_i
                lastMove3 = lastMove2
                lastMove2 = lastMove
                lastMove = nextMove
                lastKnightMove3 = lastKnightMove2
                lastKnightMove2 = lastKnightMove
                lastKnightMove = result[1].to_s
                nextMove = knight_logic(lastMove, lastMove2, lastMove3, lastKnightMove, lastKnightMove2, lastKnightMove3).to_s
            elsif result =~ /AIM LEFT, AIM CENTER, or AIM RIGHT/
                fput "aim " + nextMove
                $count = $count + 1
            else
                fput "open my pouch"
                fput "empty my pouch in my #{Vars.lootsack}"
                pause 3
                waitrt?
                fput "drop my pouch"
				pause 10
                break
            end
        end
    end 
end

if script.vars[1].downcase =~ /gryphon/
    tournyLoop(28062)
elsif script.vars[1].downcase =~ /dragon/
    tournyLoop(28062)
elsif script.vars[1].downcase =~ /unicorn/
    tournyLoop(28041)
else:ske
    echo "Please use 'joustsmart unicorn' or 'joustsmart dragon' to choose your faction."
end