=begin
  Lets you know how many 'spell ranks' worth of defensive buffs you can safely wear in Spellburst areas.
  Uses different assumptions and calculations than Gibreficul's venerable burst_calc script and its forks.
  Instead of mana, it uses magic ranks and level to determine how many spell ranks you can wear per level.
  Assumes foreign spells cost 3x the spell's rank and untrained native spells are 1.5x floored.

  Wearable spell ranks based on average magical ranks per level thresholds with diminishing returns:
   1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20...
  140, 210, 257, 292, 320, 343, 363, 381, 397, 411, 423, 435, 446, 456, 465, 474, 482, 490, 497, 504...

        author: elanthia-online
  contributors: Omnirus, Tysong
          game: Gemstone
          tags: spellburst, magic, utility, buffs
       version: 1.0.0
      required: Lich >= 5.7.0

  Version Control:
    Major_change.feature_addition.bugfix
  v1.0.0  (2025-03-07)
    - Initial release, possible inclusion into core Lich5 in the future
=end

require 'terminal-table'

module Spellburst
  def self.debug
    display(true)
  end

  def self.info
    display(false)
  end

  def self.danger
    return (ranks > max_ranks)
  end

  def self.safe
    return !danger
  end

  def self.total_magical_ranks
    return Skills.arcanesymbols + Skills.magicitemuse + Skills.spellaiming + Skills.harnesspower +
           Skills.emc + Skills.smc + Skills.mmc +
           Skills.elair + Skills.elearth + Skills.elfire + Skills.elwater +
           Skills.slblessings + Skills.slreligion + Skills.slsummoning +
           Skills.sldemonology + Skills.slnecromancy +
           Skills.mldivination + Skills.mlmanipulation + Skills.mltelepathy + Skills.mltransference + Skills.mltransformation
  end

  def self.calculate_diminishing_returns(debug = false, rate = 0.95, lower_bounds = 1, upper_bounds = total_magical_ranks / Stats.level)
    fail("upper_bounds must be >= lower_bounds | called by #{caller[0]}") unless upper_bounds >= lower_bounds
    diminishing_return, running_total = 0, 0
    lower_bounds.upto(upper_bounds) { |tier|
      diminishing_return = ((tier * rate)**(-1)).round(4)
      running_total += diminishing_return.round(4)
      respond "Tier: #{tier}, ((#{Stats.level} * #{running_total} [+#{diminishing_return}]) * 4) / 3 = #{((Stats.level * running_total) * 1.3333).floor()}" if debug
    }
    return running_total, diminishing_return
  end

  def self.max_ranks(debug = false)
    spell_ranks_allowed = total_magical_ranks
    (spell_ranks_allowed_per_level, _ = calculate_diminishing_returns(debug); spell_ranks_allowed = ((Stats.level * spell_ranks_allowed_per_level) * 1.3333).floor()) if total_magical_ranks >= Stats.level
    return spell_ranks_allowed
  end

  def self.ranks(debug = false)
    return spells(debug).values.sum
  end

  def self.spells(debug = false)
    outside_spells_worn = Hash.new
    XMLData.active_spells.each { |x, _y|
      (respond "Skipped unrecognized spell:  #{x}" if debug; next) if !Spell[x].num
      (respond "Excluded spell #{Spell[x].num}" if debug; next) if is_spell_excluded(Spell[x].num)
      outside_spells_worn[Spell[x].num] = cost(Spell[x].num)
    }
    respond outside_spells_worn if debug
    return outside_spells_worn
  end

  def self.cost(spell)
    unless spell.class == Spell || spell.class == Integer || spell.class == String
      fail("Need to pass a Spell, Integer, or String | called by #{caller[0]}")
    end
    spell = Spell[spell] if spell.class == Integer || spell.class == String
    return "???" if !spell.num
    return 0 if is_spell_excluded(spell)
    spell_rank = spell.num.to_i % 100
    spell_rank_cost = spell_rank * 3 # 3x for foreign spells.  1.5x floored for untrained native spells.
    spell_rank_cost = (spell_rank * 1.5).floor() if is_spell_native(spell)
    return spell_rank_cost
  end

  def self.is_spell_excluded(spell)
    unless spell.class == Spell || spell.class == Integer || spell.class == String
      fail("Need to pass a Spell, Integer, or String | called by #{caller[0]}")
    end
    spell = Spell[spell] if spell.class == Integer || spell.class == String
    return true unless spell.num # Unrecognized spell.
    return true if spell.known? # Player knows this spell.
    return true if spell.type == "attack" # Offensive/combat spells.
    return true if spell.circle.to_i >= 17 # Arcane circle, Lost Arts, Society abilities, Curse effects, etc.
    return true if spell.circle.to_i == 10 # Bard group songs.
    return true if spell.num.to_s =~ /211|215|219/ && spell.timeleft <= 2 # Major Spiritual group spells.
    return true if spell.num.to_s =~ /307|310|317/ # Cleric group spells.
    return true if spell.num.to_i == 318 # Raise Dead.
    return true if spell.num.to_i == 620 # Ranger group spell, Resist Nature.
    return true if spell.num.to_i == 735 # Ensorcell flares.
    return true if spell.num.to_i == 1125 # Empath group spell, Troll's Blood.
    return true if spell.num.to_s =~ /1213|1216/ # Monk group spells, Mind over Body and Focus Barrier.
    return true if spell.num.to_s =~ /1605|1609|1613|1617|1618|1699/ # Paladin group spells.
    return true if spell.num.to_i == 1640 # Divine Word.
    return false
  end

  def self.is_spell_native(spell)
    unless spell.class == Spell || spell.class == Integer || spell.class == String
      fail("Need to pass a Spell, Integer, or String | called by #{caller[0]}")
    end
    spell = Spell[spell] if spell.class == Integer || spell.class == String
    return true if (spell.circle.to_i == 1 && Stats.profession =~ /Cleric|Empath|Monk|Paladin|Rogue|Sorcerer|Warrior/) ||
                   (spell.circle.to_i == 2 && Stats.profession =~ /Cleric|Empath/) ||
                   (spell.circle.to_i == 3 && Stats.profession =~ /Cleric/) ||
                   (spell.circle.to_i == 4 && Stats.profession =~ /Bard|Rogue|Sorcerer|Warrior|Wizard/) ||
                   (spell.circle.to_i == 5 && Stats.profession =~ /Wizard/) ||
                   (spell.circle.to_i == 6 && Stats.profession =~ /Ranger/) ||
                   (spell.circle.to_i == 7 && Stats.profession =~ /Sorcerer/) ||
                   (spell.circle.to_i == 8 && Stats.profession =~ /Empath/) ||
                   (spell.circle.to_i == 9 && Stats.profession =~ /Wizard/) ||
                   (spell.circle.to_i == 10 && Stats.profession =~ /Bard/) ||
                   (spell.circle.to_i == 11 && Stats.profession =~ /Empath/) ||
                   (spell.circle.to_i == 12 && Stats.profession =~ /Monk|Savant/) ||
                   (spell.circle.to_i == 13 && Stats.profession =~ /Savant/) ||
                   (spell.circle.to_i == 14 && Stats.profession =~ /Savant/) ||
                   (spell.circle.to_i == 16 && Stats.profession =~ /Paladin/)
    return false
  end

  def self.is_spell_safe(spell)
    unless spell.class == Spell || spell.class == Integer || spell.class == String
      fail("Need to pass a Spell, Integer, or String | called by #{caller[0]}")
    end
    spell = Spell[spell] if spell.class == Integer || spell.class == String
    return true if spell.active? && !danger
    return true if ranks + cost(spell) <= max_ranks
    return false
  end

  def self.display(debug = false)
    table_rows, magic_ranks = [], total_magical_ranks
    table_rows.push(["Total magical ranks trained", magic_ranks.to_s.rjust(4)])
    table_rows.push(["Average magical ranks per level", (magic_ranks / Stats.level).to_s.rjust(4)])
    if (magic_ranks < Stats.level)
      table_rows.push(["Spell ranks allowed per rank", "1".rjust(4)])
      table_rows.push(["Spell ranks allowed per level", (magic_ranks / Stats.level.to_f).round(4)])
    else
      spell_ranks_allowed_per_level, diminishing_return = calculate_diminishing_returns(debug)
      table_rows.push(["Diminishing returns from avg", diminishing_return])
      table_rows.push(["Spell ranks allowed per level", spell_ranks_allowed_per_level])
    end
    table_rows.push(:separator)
    table_rows.push(["CURRENT OUTSIDE SPELLS WORN", " COST"])
    table_rows.push(:separator)
    spells(debug).each { |spell, rank_cost|
      table_rows.push(["#{Spell[spell].name} (#{Spell[spell].num})", rank_cost.to_s.rjust(4)])
    }
    table_rows.push(:separator)
    table_rows.push(["Total spell ranks worn", ranks.to_s.rjust(4)])
    table_rows.push(["Total allowed spell ranks", max_ranks.to_s.rjust(4)])
    table_rows.push(:separator)
    if danger
      table_rows.push(["DANGER!  Ranks you are OVER", (ranks - max_ranks).to_s.rjust(4)])
    else
      table_rows.push(["SAFE!  Ranks you are UNDER", (max_ranks - ranks).to_s.rjust(4)])
    end
    table = Terminal::Table.new(title: "SPELLBURST INFORMATION", rows: table_rows)
    Lich::Messaging.mono(table.to_s)
  end
end

case Script.current.vars[1]
when /debug/i
  Spellburst.debug
when /cost/i
  echo("#{Script.current.vars[2]} cost: #{Spellburst.cost(Script.current.vars[2])}")
when /safe/i
  echo("#{Script.current.vars[2]} safe? #{Spellburst.is_spell_safe(Script.current.vars[2])}")
else
  Spellburst.info
end
