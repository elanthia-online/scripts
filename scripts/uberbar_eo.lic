=begin

  Based off uberbarv_d, which was a fork of uberbarv, which was a fork of uberbar
  Integrates with ;bank or ;ledger script to display Silver gained during day (optional)
  Integrates with ;bank or ;hud_bounty scrip to display Bounty points gained (optional)

          author: elanthia-online
    contributors: Dantax, Tysong, Gibreficul, Bait, Xanlin, Khazaann, Dissonance
            game: gemstone
            tags: uberbar, bar, uber, vitals, paperdoll
         version: 2.0.1
        required: Lich >= 5.11.0

  Help Contribute: https://github.com/elanthia-online/scripts

  Version Control:
    Major_change.feature_addition.bugfix
  v2.0.1 (2025-07-04)
    - allow for empath resource to work
  v2.0.0 (2025-04-28)
    - converted to module
    - made various bars/txt togglable display
    - made exp/resource check a customizable interval
    - add support for ledger.lic (daily silver) and hud_bounty.lic (current session bounty points)
    - convert evals into sends for security
  v1.2.1 (2025-04-28)
    - % capped should now update as well
  v1.2.0 (2025-04-28)
    - Added rogue to conditional display of resources
    - Tweaked % capped to display correctly for empaths
  v1.1.1 (2025-04-27)
    - Missed some depreciated calls, fixed them.
  v1.1.0 (2025-04-27)
    - Replace depreciated calls with new Char. class data
    - Added % capped bar.
    - Updated minimum lich required to be slightly newer based on Char class rewrite
  v1.0.3 (2024-11-05)
    - Add Rogue to resource tracking
  v1.0.2 (2024-07-13)
    - Add Paladin to resource tracking
  v1.0.1 (2024-05-01)
    - Change Char.level to Stats.level
  v1.0.0 (2024-03-10)
    - initial release and forking from uberbarv_d version 2.1

=end

no_kill_all
no_pause_all
hide_me
silence_me

unless ['stormfront', 'wrayth'].include?($frontend)
  respond ""
  respond " Thank you for your interest in UberBar"
  respond " This version is specific to the Wrayth frontend"
  respond " There is a Wizard (GTK) version on the repository"
  respond ""
  respond " ;repo download uberbarwiz"
  respond ""
  respond " Closing now"
  respond ""
  exit
end

# Check version of Lich for compatibility
lich_gem_requires = '5.11.0'

if Gem::Version.new(LICH_VERSION) < Gem::Version.new(lich_gem_requires)
  if $frontend == 'stormfront' || $frontend == 'profanity'
    _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "Script:#{script.name} now requires a newer version of Lich(#{lich_gem_requires}+) to run." + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "Please update to a newer version." + "\<\/preset\>"
    _respond ""
    _respond "\<preset id=\"thought\"\>" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION)}" + "\<\/preset\>"
    _respond "\<preset id=\"thought\"\>" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation" + "\<\/preset\>"
    _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
  else
    _respond "##" + "########################################"
    _respond ">" + "Script:#{script.name} now requires a newer version of Lich(#{lich_gem_requires}+) to run."
    _respond ">" + "Please update to a newer version."
    _respond ">" + ""
    _respond ">" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION)}"
    _respond ">" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation"
    _respond "##" + "########################################"
  end
  exit
end

wait_while { XMLData.next_level_text !~ /(experience|until next level)/ or !XMLData.next_level_value.integer? }

module UberBarEO
  module Opts
    FLAG_PREFIX ||= "--"

    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.as_list(key)
      val = to_h.fetch(key.to_sym, [])
      val = [val] if val.is_a?(String)
      return val
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end

  @options = Opts.parse
  @fix_option = { 'on' => true, 'true' => true, 'yes' => true, 'off' => false, 'false' => false, 'no' => false }
  @settings = CharSettings[:settings] || {}
  @settings["display-silver"]        = true  if @settings["display-silver"].nil?
  @settings["display-bounty"]        = true  if @settings["display-bounty"].nil?
  @settings["display-room"]          = true  if @settings["display-room"].nil?
  @settings["display-favor"]         = true  if @settings["display-favor"].nil?
  @settings["display-atp"]           = true  if @settings["display-atp"].nil?
  @settings["display-tp"]            = true  if @settings["display-tp"].nil?
  @settings["display-fxp"]           = true  if @settings["display-fxp"].nil?
  @settings["display-resources"]     = true  if @settings["display-resources"].nil?
  @settings["display-percentcap"]    = true  if @settings["display-percentcap"].nil?
  @settings["display-loudxp"]        = false if @settings["display-loudxp"].nil?
  @settings["display-debug"]         = false if @settings["display-debug"].nil?
  @settings["silent-check-interval"] = 120   if @settings["silent-check-interval"].nil?

  before_dying {
    puts("<closeDialog id='UberBar'/>")
    CharSettings[:settings] = @settings
  }

  def self.ubWoundsFullDis()
    displayw = ""
    areas = [["nsys", "nerves"], ["leftArm", "left arm"], ["rightArm", "right arm"], ["rightLeg", "right leg"], ["leftLeg", "left leg"], ["head", "head"], ["rightFoot", "right foot"], ["leftFoot", "left foot"], ["rightHand", "right hand"], ["leftHand", "left hand"], ["rightEye", "right eye"], ["leftEye", "left eye"], ["back", "back"], ["neck", "neck"], ["chest", "chest"], ["abdomen", "abdomen"]]
    areas.each do |area|
      if Wounds.send(area[0]) > 0 and area[0] == "nsys" then displayw += "<image id='#{area[0]}' name='Nsys#{Wounds.send(area[0])}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
      elsif Scars.send(area[0]) > 0 and area[0] == "nsys" then displayw += "<image id='#{area[0]}' name='Nsys#{Scars.send(area[0])}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
      elsif Wounds.send(area[0]) > 0 then displayw += "<image id='#{area[0]}' name='Injury#{Wounds.send(area[0])}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
      elsif Scars.send(area[0]) > 0 then displayw += "<image id='#{area[0]}' name='Scar#{Scars.send(area[0])}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
      elsif Wounds.send(area[0]) == 0 then displayw += "<image id='#{area[0]}' name='#{area[0]}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
      elsif Scars.send(area[0]) == 0 then displayw += "<image id='#{area[0]}' name='#{area[0]}' cmd='cure #{area[1]}' tooltip='cure #{area[1]}' height='0' width='0'/>"
      end
    end
    return displayw
  end

  def self.ubWoundsChangeDis(location)
    areas = { "nsys" => "nerves", "leftArm" => "left arm", "rightArm" => "right arm", "rightLeg" => "right leg", "leftLeg" => "left leg", "head" => "head", "rightFoot" => "right foot", "leftFoot" => "left foot", "rightHand" => "right hand", "leftHand" => "left hand", "rightEye" => "right eye", "leftEye" => "left eye", "back" => "back", "neck" => "neck", "chest" => "chest", "abdomen" => "abdomen", }
    displayw = ""
    if Wounds.send(location) > 0 and location == "nsys"
      displayw = "<image id='#{location}' name='Nsys#{Wounds.send(location)}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
    elsif Scars.send(location) > 0 and location == "nsys"
      displayw = "<image id='#{location}' name='Nsys#{Scars.send(location)}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
    elsif Wounds.send(location) > 0
      displayw = "<image id='#{location}' name='Injury#{Wounds.send(location)}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
    elsif Scars.send(location) > 0
      displayw = "<image id='#{location}' name='Scar#{Scars.send(location)}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
    else
      displayw = "<image id='#{location}' name='#{location}' cmd='cure #{areas[location]}' tooltip='cure #{areas[location]}' height='0' width='0'/>"
    end
    return displayw
  end

  def self.ubWoundsMash()
    [
      ((Wounds.nsys * 10) + Scars.nsys),
      ((Wounds.leftArm * 10) + Scars.leftArm),
      ((Wounds.rightArm * 10) + Scars.rightArm),
      ((Wounds.rightLeg * 10) + Scars.rightLeg),
      ((Wounds.leftLeg * 10) + Scars.leftLeg),
      ((Wounds.head * 10) + Scars.head),
      ((Wounds.rightFoot * 10) + Scars.rightFoot),
      ((Wounds.leftFoot * 10) + Scars.leftFoot),
      ((Wounds.rightHand * 10) + Scars.rightHand),
      ((Wounds.leftHand * 10) + Scars.leftHand),
      ((Wounds.rightEye * 10) + Scars.rightEye),
      ((Wounds.leftEye * 10) + Scars.leftEye),
      ((Wounds.back * 10) + Scars.back),
      ((Wounds.neck * 10) + Scars.neck),
      ((Wounds.chest * 10) + Scars.chest),
      ((Wounds.abdomen * 10) + Scars.abdomen),
    ]
  end

  def self.add_commas(num)
    num.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
  end

  def self.profession_resource_available?
    case Stats.prof
    when 'Bard'
      Spell[1030].known?
    when 'Cleric'
      Spell[330].known?
    when 'Empath'
      Spell[1135].known?
    when 'Monk'
      Stats.level >= 20
    when 'Paladin'
      Spell[1620].known?
    when 'Ranger'
      Spell[620].known?
    when 'Rogue'
      Stats.level >= 20
    when 'Sorcerer'
      Spell[735].known?
    when 'Warrior'
      Stats.level >= 20
    when 'Wizard'
      Spell[925].known?
    end
  end

  def self.bounty_points
    if defined?(BountyHUD)
      pts = BountyHUD.metadata.dig(:earned, :recent)
      pts.is_a?(Numeric) ? pts : 0
    elsif UserVars.bank_bounty_per_day
      pts = UserVars.bank_bounty_per_day
      pts.is_a?(Numeric) ? pts : 0
    else
      0
    end
  end

  def self.daily_silvers
    if defined?(Ledger)
      silver = Ledger::Character.daily
      silver.is_a?(Numeric) ? silver : 0
    elsif UserVars.bank_silver_per_day
      silver = UserVars.bank_silver_per_day
      silver.is_a?(Numeric) ? silver : 0
    else
      0
    end
  end

  def self.set_vars
    unless @options.to_h.empty?
      Lich::Messaging.mono(Lich::Messaging.xml_encode("#{Script.current.name} vars detected, attempting to set settings now:"))
      @options.to_h.each { |key, value|
        case key.to_s
        when /^display-(?:silver|bounty|room|favor|atp|tp|fxp|resources|percentcap|loudxp|debug)$/
          Lich::Messaging.mono(Lich::Messaging.xml_encode("  #{key} changing from #{@settings[key.to_s]} to #{@fix_option[value]}"))
          @settings[key.to_s] = @fix_option[value.to_s.downcase]
        when /^silent-check-interval$/
          Lich::Messaging.mono(Lich::Messaging.xml_encode("  #{key} changing from #{@settings[key.to_s]} to #{value}"))
          @settings[key.to_s] = value.to_i
        else
          raise("You started #{Script.current.name} with an invalid command line option: #{key}
                 Please see #{$lich_char}#{Script.current.name} help
                 For proper CLI options.")
        end
      }
    end
  end

  def self.main
    asc_tps = 0
    asc_exp = 0
    asc_pulse = 0
    asc_next = 50000
    ascTime = 0
    ascTotal = 0

    xpnFirstTime = 0
    nowTime = Time.now - 1
    xpnNLT = xpnCur = xpnOld = xpnCap = xpnValue = xpnText = xpnHour = xpnLast = xpnTotal = oldBank = oldBounty = oldFavor = 0
    oldRM = oldHP = oldMP = oldST = oldSP = oldXP = oldMD = oldSN = oldEN = oldIN = nil
    oldWO = ubWoundsMash()
    areas = ["nsys", "leftArm", "rightArm", "rightLeg", "leftLeg", "head", "rightFoot", "leftFoot", "rightHand", "leftHand", "rightEye", "leftEye", "back", "neck", "chest", "abdomen"]
    capped = false
    firstpulse = true
    capped = true if Stats.level == 100
    buffx = 3
    buffy = 3
    sizebx = 186
    sizerx = 100
    sizey = 15

    time = Time.new
    UserVars.uberbar_xp_history = Hash.new if UserVars.uberbar_xp_history.nil?
    UserVars.uberbar_date = time - 3600 * 24 if UserVars.uberbar_date.nil?

    if time.hour > 5 && UserVars.uberbar_day != time.day && UserVars.uberbar_xp_per_day != 0
      UserVars.uberbar_xp_history[UserVars.uberbar_date.to_date] = UserVars.uberbar_xp_per_day
      UserVars.uberbar_xp_per_day = 0
      UserVars.uberbar_day = time.day
      UserVars.uberbar_date = time
    end

    ub_top_anchor_left = nil
    ub_top_anchor_right = nil
    ub_bottom_anchor = nil

    ublineloggl = lambda { ub_top_anchor_left = 'ublog'; "<label id='ublog'    value='Today:'      justify='4'  anchor_left='ubinjury'  align='n'    top='#{buffy + 2}' left='5' height='#{sizey}' width='#{sizerx / 2}'/>" }
    ublineloggv = lambda { ub_top_anchor_right = 'ublogv'; "<label id='ublogv'    value='#{UserVars.uberbar_xp_per_day}'    justify='6'  anchor_left='ublog'  align='n'    top='#{buffy + 2}' left='0' height='#{sizey}' width='#{sizerx / 2}'/>" }

    anchor_ublinehourl = nil
    ublinehourl = lambda { anchor_ublinehourl = ub_top_anchor_left unless anchor_ublinehourl; ub_top_anchor_left = 'ubhour'; "<label id='ubhour'   value='AVG/Hr:'      justify='4'  anchor_left='ubinjury'  anchor_top='#{anchor_ublinehourl}'  top='#{buffy}' left='5' height='#{sizey}' width='#{sizerx / 2}'/>" }
    anchor_ublinehourv = nil
    ublinehourv = lambda { anchor_ublinehourv = ub_top_anchor_right unless anchor_ublinehourv; ub_top_anchor_right = 'ubhourv'; "<label id='ubhourv'    value='#{xpnHour}'    justify='6'  anchor_left='ubhour'  anchor_top='#{anchor_ublinehourv}'  top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx / 2}'/>" }

    anchor_ublinelastl = nil
    ublinelastl = lambda { anchor_ublinelastl = ub_top_anchor_left unless anchor_ublinelastl; ub_top_anchor_left = 'ublast'; "<label id='ublast'   value='Pulse:'      justify='4'  anchor_left='ubinjury'  anchor_top='#{anchor_ublinelastl}'  top='#{buffy}' left='5' height='#{sizey}' width='#{sizerx / 2}'/>" }
    anchor_ublinelastv = nil
    ublinelastv = lambda { anchor_ublinelastv = ub_top_anchor_right unless anchor_ublinelastv; ub_top_anchor_right = 'ublastv'; "<label id='ublastv'    value='#{xpnLast + asc_pulse}'    justify='6'  anchor_left='ublast'  anchor_top='#{anchor_ublinelastv}'  top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx / 2}'/>" }

    anchor_ublinerooml = nil
    ublinerooml = lambda { return "" unless @settings['display-room']; anchor_ublinerooml = ub_top_anchor_left unless anchor_ublinerooml; ub_top_anchor_left = 'ubroom'; "<label id='ubroom'    value='Room:'      justify='4'  anchor_left='ubinjury'  anchor_top='#{anchor_ublinerooml}'  top='#{buffy + 2}' left='5' height='#{sizey}' width='#{sizerx / 2}'/>" }
    anchor_ublineroomv = nil
    ublineroomv = lambda { return "" unless @settings['display-room']; anchor_ublineroomv = ub_top_anchor_right unless anchor_ublineroomv; ub_top_anchor_right = 'ubroomv'; "<label id='ubroomv'    value='#{Room.current.id}'  justify='6'  anchor_left='ubroom'  anchor_top='#{anchor_ublineroomv}'  top='#{buffy + 2}' left='0' height='#{sizey}' width='#{sizerx / 2}'/>" }

    anchor_ublinesilvl = nil
    ublinesilvl = lambda { return "" unless @settings['display-silver']; anchor_ublinesilvl = ub_top_anchor_left unless anchor_ublinesilvl; ub_top_anchor_left = 'ubsil'; "<label id='ubsil'    value='Silver:'      justify='4'  anchor_left='ubinjury'  anchor_top='#{anchor_ublinesilvl}'  top='#{buffy + 2}' left='5' height='#{sizey}' width='#{sizerx / 2}'/>" }
    anchor_ublinesilvv = nil
    ublinesilvv = lambda { return "" unless @settings['display-silver']; anchor_ublinesilvv = ub_top_anchor_right unless anchor_ublinesilvv; ub_top_anchor_right = 'ubsilv'; "<label id='ubsilv'    value='#{add_commas(daily_silvers)}'  justify='6'  anchor_left='ubsil'  anchor_top='#{anchor_ublinesilvv}'  top='#{buffy + 2}' left='0' height='#{sizey}' width='#{sizerx / 2}'/>" }

    anchor_ublinebountyl = nil
    ublinebountyl = lambda { return "" unless @settings['display-bounty']; anchor_ublinebountyl = ub_top_anchor_left unless anchor_ublinebountyl; ub_top_anchor_left = 'ubbounty'; "<label id='ubbounty'  value='Bounty:'      justify='4'  anchor_left='ubinjury'  anchor_top='#{anchor_ublinebountyl}'  top='#{buffy + 2}' left='5' height='#{sizey}' width='#{sizerx / 2}'/>" }
    anchor_ublinebountyv = nil
    ublinebountyv = lambda { return "" unless @settings['display-bounty']; anchor_ublinebountyv = ub_top_anchor_right unless anchor_ublinebountyv; ub_top_anchor_right = 'ubbountyv'; "<label id='ubbountyv'    value='#{add_commas(bounty_points)}'  justify='6'  anchor_left='ubbounty'  anchor_top='#{anchor_ublinebountyv}'  top='#{buffy + 2}' left='0' height='#{sizey}' width='#{sizerx / 2}'/>" }

    ublinebars  = lambda { "<image id='ubbars'    name='PanelBackground'    justify='4'  anchor_left='ubinjury'  align='n'    top='#{buffy}' left='5' height='120' width='0'/>" }
    ublineheal  = lambda { "<skin id='ubheal' name='healthBar' controls='health'    anchor_left='ubinjury'  anchor_top='ubbars'      top='#{buffy}' left='#{buffx + 1}' width='0' height='#{sizey}'/><progressBar id='health'    value='#{Char.percent_health}'  text='#{Char.health}/#{Char.max_health}'  customText='t' anchor_left='ubinjury' anchor_top='ubbars'  top='#{buffy}' left='#{buffx + 1}' width='#{sizerx}' height='#{sizey}'/>" }
    ublinemana  = lambda { "<skin id='ubmana' name='manaBar' controls='mana'    anchor_left='ubinjury'  anchor_top='ubheal'      top='#{buffy}' left='#{buffx}' width='0' height='#{sizey}'/><progressBar id='mana'    value='#{Char.percent_mana}'    text='#{Char.mana}/#{Char.max_mana}'  customText='t' anchor_left='ubinjury' anchor_top='health'  top='#{buffy}' left='#{buffx + 1}' width='#{sizerx}' height='#{sizey}'/>" }
    ublinestam  = lambda { "<skin id='ubstam' name='staminaBar' controls='stamina'    anchor_left='ubinjury'  anchor_top='ubmana'      top='#{buffy}' left='#{buffx + 1}' width='0' height='#{sizey}'/><progressBar id='stamina'  value='#{Char.percent_stamina}'  text='#{Char.stamina}/#{Char.max_stamina}'  customText='t' anchor_left='ubinjury' anchor_top='mana'    top='#{buffy}' left='#{buffx + 1}' width='#{sizerx}' height='#{sizey}'/>" }
    ublinespir  = lambda { ub_bottom_anchor = 'ubspir'; "<skin id='ubspir' name='spiritBar' controls='spirit'    anchor_left='ubinjury'  anchor_top='ubstam'      top='#{buffy}' left='#{buffx + 1}' width='0' height='#{sizey}'/><progressBar id='spirit'    value='#{Char.percent_spirit}'  text='#{Char.spirit}/#{Char.max_spirit}'  customText='t' anchor_left='ubinjury' anchor_top='stamina'  top='#{buffy}' left='#{buffx + 1}' width='#{sizerx}' height='#{sizey}'/>" }

    ublinefavorl = lambda { return "" unless @settings['display-favor']; "<label id='ubfavor'    value='Favor'  anchor_top='ubinjury'  top='#{buffy + 2}' left='0' height='#{sizey}' width='#{sizerx}'/>" }
    ublinefavorv = lambda { return "" unless @settings['display-favor']; "<label id='ubfavorv'    value='#{add_commas(Resources.voln_favor)}'  anchor_top='ubfavor'  top='#{buffy}' left='0' height='#{sizey}' width='#{sizerx}'/>" }

    anchor_ublineascnext = nil
    ublineascnext = lambda { return "" unless @settings['display-atp']; anchor_ublineascnext = ub_bottom_anchor unless anchor_ublineascnext; ub_bottom_anchor = 'ubascnext'; "<progressBar id='ubascnext'  value='#{100.0 - (asc_next.to_f / 50000.0 * 100)}'      text='#{asc_next} until next ATP [ #{asc_tps} ]'        anchor_top='#{anchor_ublineascnext}'  top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>" }

    anchor_ublinenext = nil
    ublinenext = lambda { return "" unless @settings['display-tp']; anchor_ublinenext = ub_bottom_anchor unless anchor_ublinenext; ub_bottom_anchor = 'ubnext'; "<progressBar id='ubnext'  value='#{xpnValue}'      text='#{xpnText}'        anchor_top='#{anchor_ublinenext}'  top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>" }

    anchor_ublinemind = nil
    ublinemind = lambda { anchor_ublinemind = ub_bottom_anchor unless anchor_ublinemind; ub_bottom_anchor = 'ubmind'; "<progressBar id='ubmind'  value='#{XMLData.mind_value}'    text='#{XMLData.mind_text}#{@settings['display-fxp'] ? " (#{Experience.fxp_current}/#{Experience.fxp_max})" : ""}' customText='t'  anchor_top='#{anchor_ublinemind}'  top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>" }

    anchor_ublinestan = nil
    ublinestan = lambda { anchor_ublinestan = ub_bottom_anchor unless anchor_ublinestan; ub_bottom_anchor = 'ubstnc'; "<progressBar id='ubstnc'  value='#{XMLData.stance_value}'  text='#{XMLData.stance_text}'      anchor_top='#{anchor_ublinestan}'  top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>" }

    anchor_ublineencm = nil
    ublineencm = lambda { anchor_ublineencm = ub_bottom_anchor unless anchor_ublineencm; ub_bottom_anchor = 'ubencm'; "<progressBar id='ubencm'  value='#{XMLData.encumbrance_value}'  text='#{XMLData.encumbrance_text}'    anchor_top='#{anchor_ublineencm}'  top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>" }

    anchor_ublineresource = nil
    ublineresource  = lambda { return "" unless @settings['display-resources']; anchor_ublineresource = ub_bottom_anchor unless anchor_ublineresource; "<progressBar id='ubresource_cur'  value='#{(Resources.weekly.to_f / 50_000.to_f) * 100}'  text='#{add_commas(Resources.weekly)}/#{add_commas(50_000)}'  anchor_top='#{anchor_ublineresource}'   top='#{buffy}' left='#{buffx}' width='#{sizebx / 2 - buffx}' height='#{sizey}'/>" }
    ublineresource2 = lambda { return "" unless @settings['display-resources']; ub_bottom_anchor = 'ubresource_cur'; "<progressBar id='ubresource_total'  value='#{(Resources.total.to_f / 200_000.to_f) * 100}'  text='#{add_commas(Resources.total)}/#{add_commas(200_000)}'    anchor_top='#{anchor_ublineresource}' anchor_left='ubresource_cur'  top='#{buffy}' left='#{buffx}' width='#{sizebx / 2}' height='#{sizey}'/>" }

    anchor_ublinepcapped = nil
    ublinepcapped = lambda { return "" unless @settings['display-percentcap']; anchor_ublinepcapped = ub_bottom_anchor unless anchor_ublinepcapped; ub_bottom_anchor = 'ubpcapped'; "<progressBar id='ubpcapped'  value='#{((Stats.exp).fdiv(7_572_500) * 100).round(2)}'  text='#{((Stats.exp).fdiv(7_572_500) * 100).round(2)} % Capped'    anchor_top='#{anchor_ublinepcapped}'  top='#{buffy}' left='#{buffx}' width='#{sizebx}' height='#{sizey}'/>" }

    openLines = [
      "<closeDialog id='UberBar'/>",
      "<openDialog type='dynamic' id='UberBar' title='#{Char.name}'s Uberbar' target='UberBar' location='main' height='282' width='190' resident='true'>",
      "<dialogData id='UberBar' clear='t'>",
      "<skin id='ubinjury' name='InjuriesPanel' controls='nsys,leftArm,rightArm,rightLeg,leftLeg,head,rightFoot,leftFoot,rightHand,leftHand,rightEye,leftEye,back,neck,chest,abdomen' top='5' left='5' width='100' height='150' align='nw'/>"
    ]
    tosend = openLines.join
    tosend += ubWoundsFullDis()
    openLines = [ublineloggl.call, ublinehourl.call, ublinelastl.call, ublinerooml.call, ublinesilvl.call, ublinebountyl.call, ublineloggv.call, ublinehourv.call, ublinelastv.call, ublineroomv.call, ublinesilvv.call, ublinebountyv.call, ublinebars.call, ublineheal.call, ublinemana.call, ublinestam.call, ublinespir.call, ublineascnext.call, ublinenext.call, ublinemind.call, ublinestan.call, ublineencm.call, ublinepcapped.call]
    if Society.status =~ /Voln/
      openLines += [ublinefavorl.call, ublinefavorv.call]
    end
    if profession_resource_available?
      openLines += [ublineresource.call, ublineresource2.call]
    end
    tosend += openLines.join
    tosend += "</dialogData></openDialog>"

    puts(tosend)

    loop {
      wait_while { (oldHP == Char.health and oldMP == Char.mana and oldST == Char.stamina and oldSP == Char.spirit and oldXP == XMLData.next_level_text and oldMD == XMLData.mind_text and oldSN == XMLData.stance_text and oldEN == XMLData.encumbrance_text and oldIN == XMLData.injuries.to_s and ((oldRM == Room.current.id and !checkgrouped) or checkgrouped) and Time.now - nowTime < 5) or Script.running?('go2') }
      # echo "Time diff: #{Time.now - nowTime}"
      nowTime = Time.now
      doLines = "<dialogData id='UberBar'>"

      if oldHP != Char.health then echo "updated health" if @settings["debug"]; oldHP = Char.health; doLines += ublineheal.call end
      if oldMP != Char.mana then echo "updated mana" if @settings["debug"]; ascTime = 0 if oldMP < Char.mana; oldMP = Char.mana; doLines += ublinemana.call end
      if oldST != Char.stamina then echo "updated stamina" if @settings["debug"]; oldST = Char.stamina; doLines += ublinestam.call end
      if oldSP != Char.spirit then echo "updated spirit" if @settings["debug"]; oldSP = Char.spirit; doLines += ublinespir.call end
      if oldMD != XMLData.mind_text then echo "updated mind" if @settings["debug"]; oldMD = XMLData.mind_text; ascTime = 0; doLines += ublinemind.call end
      if oldSN != XMLData.stance_text then echo "updated stance" if @settings["debug"]; oldSN = XMLData.stance_text; doLines += ublinestan.call end
      if oldEN != XMLData.encumbrance_text  then echo "updated encumbr" if @settings["debug"]; oldEN = XMLData.encumbrance_text; doLines += ublineencm.call end
      if oldRM != Room.current.id then echo "updated room" if @settings["debug"]; oldRM = Room.current.id; doLines += ublineroomv.call end

      if oldBank != daily_silvers then echo "updated bank" if @settings["debug"]; oldBank = daily_silvers; doLines += ublinesilvv.call end
      if oldBounty != bounty_points then echo "updated bounty" if @settings["debug"]; oldBounty = bounty_points; ascTime = 0; doLines += ublinebountyv.call end
      if oldFavor != Resources.voln_favor then echo "updated favor" if @settings["debug"]; oldFavor = Resources.voln_favor; doLines += ublinefavorv.call end

      if (@settings["display-resources"] || @settings["display-favor"] || @settings["display-fxp"] || @settings["display-atp"] || @settings["display-tp"]) && Time.now.to_i - ascTime > @settings['silent-check-interval']
        ascTime = Time.now.to_i
        if @settings["display-fxp"] || @settings["display-atp"] || @settings["display-tp"]
          res = Lich::Util.quiet_command_xml("exp", /<output class="mono"\/>/, /<prompt time=/)
          asc_next = $1.delete(',').to_i if res.any? { |line| line =~ /Exp to next ATP: ([\d,]+)/i }
          asc_tps = $1.delete(',').to_i if res.any? { |line| line =~ /ATPs: ([\d\,]+)/i }
        end
        if @settings["display-resources"] || @settings["display-favor"]
          Lich::Util.quiet_command_xml("resource", /<output class="mono"\/>/, /<prompt time=/)
        end
      end

      if oldXP != XMLData.next_level_text || Experience.axp != asc_exp
        echo "updated next_level" if @settings["debug"]
        asc_pulse = Experience.axp - asc_exp if asc_exp != 0
        asc_exp = Experience.axp
        xpnNLT = XMLData.next_level_text
        if xpnNLT =~ /( experience| until next level)/
          xpnCur = xpnNLT.delete(' experience').delete(' until next level').to_i
          xpnLast = xpnOld - xpnCur
          xpnLast *= -1 if xpnLast < 0
          xpnLast = 0 if xpnLast > 2499
        else
          xpnCur = 0
          xpnLast = 0
        end
        if firstpulse
          xpnFirstTime = Time.now - 1
          xpnTotal = 0
          ascTotal = 0
          xpnLast = 0
          firstpulse = false
        end
        if capped
          xpnCap = (xpnCur / 2500 + 1) * 2500 - xpnCur
          xpnValue = 100 - (xpnCap / 25)
          xpnText = "#{xpnCap} until TP"
        else
          xpnValue = XMLData.next_level_value.to_i
          # xpnText = sprintf("Level: %2s         %6s TNL", Stats.level, xpnCur)
          xpnText = sprintf("Level: %2s  (%s%%)   %6s TNL", Stats.level, xpnValue, xpnCur)
        end
        xpnTotal += xpnLast + asc_pulse
        ascTotal += asc_pulse
        UserVars.uberbar_xp_per_day += xpnLast + asc_pulse
        UserVars.save()
        xpnHour = ((1.00 * xpnTotal) / ((nowTime - xpnFirstTime) / 3600.00)).to_i
        xpnOld = xpnCur
        oldXP = XMLData.next_level_text

        if @settings["display-loudxp"] and xpnLast > 0
          echo sprintf("********  %2s EXP Gained this Pulse ********* (%2s)+", xpnLast, Time.now.strftime('%X'))
        end

        doLines += ublineascnext.call + ublinenext.call + ublineloggv.call + ublinehourv.call + ublinelastv.call + ublinemind.call
        if profession_resource_available?
          doLines += ublineresource.call
          doLines += ublineresource2.call
        end
        doLines += ublinepcapped.call
      end
      if oldIN != XMLData.injuries.to_s
        echo "updated injuries" if @settings["debug"]
        newWO = ubWoundsMash()
        newWO.length.times { |n|
          if oldWO[n] != newWO[n] then doLines += ubWoundsChangeDis(areas[n]) end
        }
        oldIN = XMLData.injuries.to_s
        oldWO = ubWoundsMash()
      end
      doLines += "</dialogData>"
      puts(doLines) if doLines != "<dialogData id='UberBar'></dialogData>"
    }
  end
end

if Script.current.vars[1] =~ /help/
  Lich::Messaging.mono(Lich::Messaging.xml_encode("#{Script.current.name} Version: #{(Script.list.find { |x| x.name == Script.current.name }.inspect)[/version: (\d+\.\d+\.\d+)/i, 1]}"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(""))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("  Creates a Wrayth window with injury panel, vitals, and other useful information."))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(""))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("  Configuration options are below:"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(""))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-silver=<on|off>        - Turns on/off silver tracker display (requires #{$lich_char}bank or #{$lich_char}ledger to work)"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-bounty=<on|off>        - Turns on/off Bounty point tracker display (requires #{$lich_char}bank or #{$lich_char}hud_bounty to work)"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-room=<on|off>          - Turns on/off Lich Room # display"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-favor=<on|off>         - Turns on/off Order of Voln favor display"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-atp=<on|off>           - Turns on/off experience till next ATP bar"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-tp=<on|off>            - Turns on/off experience till next TP bar"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-fxp=<on|off>           - Turns on/off Field Experience shown in mindstate bar"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-resources=<on|off>     - Turns on/off Profession Resource bars"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-percentcap=<on|off>    - Turns on/off Percent Capped bar"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-loudxp=<on|off>        - Turns on/off loud exp pulses"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --display-debug=<on|off>         - Turns on/off debug messaging"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("     --silent-check-interval=<NUMBER> - Delay in seconds between checking EXP and/or RESOURCE"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(""))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("  Disabling atp, tp, fxp will prevent periodic EXPERIENCE checks"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode("  Disabling favor & resources will prevent periodic RESOURCE checks"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(""))
elsif Script.current.vars[1] =~ /list/
  echo JSON.pretty_generate(CharSettings[:settings])
elsif Script.current.vars[1]
  UberBarEO.set_vars
else
  UberBarEO.main
end
