=begin
  localchat.lic: Creates a separate window to isolate chat messages you care about

        author: elanthia-online
  contributors: Eleazzar
          game: Gemstone
          tags: chat
      required: Lich >= 5.0
       version: 1.0.4

     Help Contribute: https://github.com/elanthia-online/scripts

  Version Control:
    Major_change.feature_addition.bugfix
  v1.0.4 (2023-07-11)
    - bugfix: window will now allow shrinking after printing text instead of forcing a width
    - bugfix: change timeout back to 0.1 from 0.01 to give get time to process before giving up
  v1.0.3 (2023-07-06)
    - bugfix: ignore quoted statements that contain read, " to avoid sign related spam
  v1.0.2 (2023-07-04)
    - chore: refactor loop for simplicity and to be more rubyish
    - bugfix: removed unintentional delay in closing the window with the close button
    - bugfix: no longer displays non-dialog lines through better synchronization
  v1.0.1 (2023-07-03)
    - bugfix for default dialog text
  v1.0.0 (2023-07-01)
    - initial release

=end

require 'timeout'

# Hex helper
def hex_to_rgba(hex)
  hex = hex.delete('#') # Remove the '#' character if present

  red = hex[0..1].to_i(16)
  green = hex[2..3].to_i(16)
  blue = hex[4..5].to_i(16)
  alpha = 1.0

  Gdk::RGBA.new(red / 255.0, green / 255.0, blue / 255.0, alpha)
end

# Terminates the script when true
lc_exit = false

# Keep chat open when killing or pausing other scripts
no_kill_all
no_pause_all

# Chat window properties
window = nil
# Settings.load # deprecated call, no longer applicable in Lich5

# Configuration
if variable[1] =~ /help/i
  respond "###########"
  respond "# Local Chat"
  respond "#   by: Eleazzar"
  respond "###########"
  respond "#"
  respond "# Usage"
  respond "#   ;localchat                 - Runs localchat, consider using ;autostart add localchat"
  respond "#   ;localchat --help          - This help text"
  respond "#    Please note, all color values are hexadecimal, e.g. #FF0000"
  respond "#   ;localchat --bg-color      - Sets the color of the background color of the window"
  respond "#   ;localchat --dialog-color  - Sets the color of the text between quotes, e.g. \"This text\""
  respond "#   ;localchat --say-color     - Sets the color of local speech, e.g. Eleazzar darkly says"
  respond "#   ;localchat --whisper-color - Sets the color of whispers, e.g. Eleazzar whispers"
  respond "#   ;localchat --focused-color - Sets the color of focused ESP, e.g. [Focused] Eleazzar thinks"
  respond "#   ;localchat --recite-color  - Sets the color of recitations and prayers e.g. Eleazzar recites"
  respond "#   ;localchat --signal-color  - If you know, you know"
  respond "#"
  respond "#   ;localchat --font          - A font name string, e.g. Courier New, Arial, FiraCode Nerd Font, etc."
  respond "#   ;localchat --font-size     - An integer value, e.g. 18"
  respond "#"
  respond "#   If you need a window for all thoughts, simply use Windows -> Thoughts in Avalon"
  respond "#   The intention of this script is to bring attention to potentially time sensitive chat."
  respond "#"
  respond "##########"
  exit
elsif variable[1] =~ /^\-\-bg\-color$/i
  respond "###########"
  if variable[2]
    Settings["bg-color"] = "#{variable[2]}"
    respond "# Set the background color to #{Settings["bg-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --bg-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-dialog\-color$/i
  respond "###########"
  if variable[2]
    Settings["dialog-color"] = "#{variable[2]}"
    respond "# Set the dialog color to #{Settings["dialog-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --dialog-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-say\-color$/i
  respond "###########"
  if variable[2]
    Settings["say-color"] = "#{variable[2]}"
    respond "# Set the say color to #{Settings["say-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --say-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-whisper\-color$/i
  respond "###########"
  if variable[2]
    Settings["whisper-color"] = "#{variable[2]}"
    respond "# Set the whisper color to #{Settings["whisper-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --whisper-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-signal\-color$/i
  respond "###########"
  if variable[2]
    Settings["signal-color"] = "#{variable[2]}"
    respond "# Set the signal color to #{Settings["signal-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --signal-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-focused\-color$/i
  respond "###########"
  if variable[2]
    Settings["focused-color"] = "#{variable[2]}"
    respond "# Set the focused thought color to #{Settings["focused-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --focused-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-recite\-color$/i
  respond "###########"
  if variable[2]
    Settings["recite-color"] = "#{variable[2]}"
    respond "# Set the recite color to #{Settings["recite-color"]}"
    Settings.save
  else
    respond "You must specify a hex color, e.g. ;localchat --recite-color #FF0000"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-font$/i
  respond "###########"
  if variable[2]
    Settings["font"] = "#{variable[2..-1].join(" ")}"
    Settings.save
    respond "# Set the font to #{Settings["font"]}"
  else
    respond "You must specify a font, e.g. ;localhost --font Courier New"
  end
  respond "###########"
  exit
elsif variable[1] =~ /^\-\-font-size$/i
  respond "###########"
  if variable[2]
    Settings["font-size"] = variable[2]
    Settings.save
    respond "# Set the font to #{Settings["font-size"]}"
  else
    respond "You must specify a font-size, e.g. ;localhost --font-size 18"
  end
  respond "###########"
  exit
end

dialog_color  = Settings['dialog-color']  || "#FFFFFF"
say_color     = Settings['say-color']     || "#00FF00"
whisper_color = Settings['whisper-color'] || "#00FFFF"
signal_color  = Settings['signal-color']  || "#FF0000"
focused_color = Settings['focused-color'] || "#FFFF00"
recite_color  = Settings['recite-color']  || "#FF00FF"
bg_color      = Settings['bg-color']      || "#000000"

font = Settings['font'] || "Courier New"
font_size    = Settings['font-size'] || 12

window_width = Settings['window_width'] || 800
window_height = Settings['window_height'] || 300
window_position = Settings['window_position'] || [0, 0]

# Destructor
before_dying do
  done = false
  Gtk.queue do
    window_width = window.allocation.width
    window_height = window.allocation.height
    window_position = window.position
    window.destroy
    done = true
  end

  wait_until { done }

  Settings['window_width'] = window_width
  Settings['window_height'] = window_height
  Settings['window_position'] = window_position if (window_position.class == Array) && (window_position[0].to_i > -5) && (window_position[1].to_i > -5)
  Settings.save
end

# Window creation
done = false
Gtk.queue do
  window = Gtk::Window.new("#{Char.name}'s Chat")
  window.set_default_size(window_width, window_height)
  window_position[0] = [[0, window_position[0].to_i].max, (Gdk::Screen.default.width - window_width)].min
  window_position[1] = [[0, window_position[1].to_i].max, (Gdk::Screen.default.height)].min
  window.move(window_position[0], window_position[1])
  window.override_background_color(:normal, hex_to_rgba(bg_color))

  # box layout necessary for resizing widgets
  box = Gtk::Box.new(:vertical, 0)
  window.add(box)

  # Create a scrolled window to contain the text view
  scrolled_window = Gtk::ScrolledWindow.new
  scrolled_window.set_policy(Gtk::PolicyType::AUTOMATIC, Gtk::PolicyType::AUTOMATIC)
  scrolled_window.set_hexpand(true) # Expand horizontally to fill the available space
  scrolled_window.set_vexpand(true) # Expand vertically to fill the available space
  scrolled_window.set_margin_left(4) # Set left padding
  scrolled_window.set_margin_right(4) # Set right padding
  # add the scrolled window to the box layout
  box.add(scrolled_window)

  # Create the adjustment and connect it to the TextView's vertical scrollbar
  adjustment = scrolled_window.vadjustment
  adjustment.signal_connect('changed') do
    adjustment.value = adjustment.upper - adjustment.page_size
  end

  # Create a text view widget
  $textview = Gtk::TextView.new
  $textview.wrap_mode = Gtk::WrapMode::WORD
  $textview.editable = false
  $textview.cursor_visible = false

  # Set background color
  $textview.override_background_color(:normal, hex_to_rgba(bg_color))
  # Set the font
  $textview.override_font(Pango::FontDescription.from_string("#{font} #{font_size}"))

  # add the textview to the scrolled window
  scrolled_window.add($textview)

  # Create a text buffer for the content
  $text_buffer = $textview.buffer

  # Add the scrolled window to the window
  window.add(scrolled_window)

  # Handle the window's destroy event
  window.signal_connect('delete_event') { lc_exit = true }

  # Show all the widgets
  window.show_all
  window.keep_above = true
  done = true
end
wait_until { done }

# Function to change the text color
def change_text_color(buffer, start_iter, end_iter, color)
  # Create a text tag for the color
  color_tag = Gtk::TextTag.new
  color_tag.foreground = color

  # Add the tag to the tag table
  buffer.tag_table.add(color_tag)

  # Apply the tag to the specified range of text
  buffer.apply_tag(color_tag, start_iter, end_iter)
end

text = nil
gobble_multiline = false
# Main loop
until lc_exit
  begin
    Timeout.timeout(0.1) do
      # Get every new line from the client
      text = get
    end
  rescue Timeout::Error
    # Timeout occurred, continue the loop incase lc_exit was set
    next
  end

  # Exclude lines that start with "[" but not "[Focused\]"
  next if (text.start_with?("[") && !text.start_with?("[Focused")) || text =~ /reads, \"/

  # syncronous edits to the text buffer and UI only
  done = false
  Gtk.queue do
    # Filter for the chat messages, that have , " in them, recites: or recite:,
    # prayer:, is a second line of a recitation or prayer, or is a [Focused] ESP message
    if text =~ /, \"/ || text =~ /recite.*s?:/ || text =~ /prayer:/ || gobble_multiline

      # sort out what color we need to use for the start of the line
      color = if text =~ /whisper(s)?/
                whisper_color
              elsif text =~ /signal(s)?/
                signal_color
              elsif text =~ /^\[Focused\]/
                focused_color
              elsif text =~ /recite.*s?:/ || text =~ /prayer:/
                recite_color
              else
                say_color
              end

      # There are two lines of recited text, only the first line is identifiable
      # so prepare to gobble up the next line as the recited text
      gobble_multiline = (text =~ /recite.*s?:/ || text =~ /prayer:/)

      # Find the index of the " or : character
      delimeter_index ||= text.index('"') || text.index(':')

      # Add text to the end of the buffer
      $text_buffer.insert($text_buffer.end_iter, "#{text}\n")

      # Get an iterator to the start of the new line in the buffer, including
      # the new line character
      start_iter = $text_buffer.get_iter_at_offset($text_buffer.end_iter.offset - text.length - 1)

      # If there is a speech type (" or :) color it
      if delimeter_index
        # Get the iterators for the range before the delimeter
        end_iter = $text_buffer.get_iter_at_offset(start_iter.offset + delimeter_index)

        # Set the text color of the speech type
        change_text_color($text_buffer, start_iter, end_iter, color)
      end
      # Set the text color of the dialog itself
      change_text_color($text_buffer, end_iter, $text_buffer.end_iter, dialog_color)
    end
    done = true
  end
  wait_until { done }
end

# echo "Last text #{text}\n"
