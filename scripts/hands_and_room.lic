=begin

  A window with your Left and Right Hands items.
  Also shows PCs/NPCs in your room.
  Updates the display every 1 second.
  (Based upon ;inactivespells window script by Tillmen.)

   author: Deatrys
     game: Gemstone
     tags: items, hands, window
  version: 0.2

=end


no_kill_all
no_pause_all
hide_me

Settings.load
window_width = Settings['window_width'] || 120
window_height = Settings['window_height'] || 60
window_position = Settings['window_position']

bars = Hash.new
window = hands_box = done = window_close = nil

Gtk.queue {
  window = Gtk::Window.new
  window.title = 'hands'
  window.signal_connect('delete_event') { window_close = true }
  hands_box = Gtk::Box.new(:vertical)
  window.add(hands_box)
  window.show_all
  window.resize(window_width.to_i, window_height.to_i)
  window_position[0] = [[0, window_position[0].to_i].max, (Gdk::Screen.default.width - window_width)].min
  window_position[1] = [[0, window_position[1].to_i].max, (Gdk::Screen.default.height)].min
  window.move(window_position[0].to_i, window_position[1].to_i)
  window.keep_above = true
  done = true
}

wait_until { done }

before_dying {
  done = false
  Gtk.queue {
    window_width = window.allocation.width
    window_height = window.allocation.height
    window_position = window.position
    window.destroy
    done = true
  }
  wait_until { done }
  Settings['window_width'] = window_width
  Settings['window_height'] = window_height
  Settings['window_position'] = window_position if (window_position.class == Array) and (window_position[0].to_i > -5) and (window_position[1].to_i > -5)
  Settings.save
}


bars[0] = Gtk::Label.new
bars[1] = Gtk::Label.new
bars[2] = Gtk::Label.new
bars[0].height_request = 24
bars[1].height_request = 24
bars[2].height_request = 48
bars[0].width_request = 200
bars[1].width_request = 200
bars[2].width_request = 200
bars[0].set_selectable(true)
bars[1].set_selectable(true)
bars[2].set_selectable(true)
bars[2].set_wrap(true)
hands_box.pack_end(bars[2], :expand => false, :fill => false, :padding => 0)
hands_box.pack_end(bars[1], :expand => false, :fill => false, :padding => 0)
hands_box.pack_end(bars[0], :expand => false, :fill => false, :padding => 0)
bars[0].show
bars[1].show
bars[2].show

rhand = GameObj.right_hand
lhand = GameObj.left_hand

rpcs = GameObj.pcs
if (rpcs) then
  rpcs = GameObj.pcs.join(", ")
end
rnpcs = GameObj.npcs
if (rnpcs) then
  rnpcs = GameObj.npcs.join(", ")
end
rstring = ""

until window_close
  if (GameObj.right_hand != rhand) then
    rhand=GameObj.right_hand
    bars[0].set_text("Right: "+ GameObj.right_hand.name)
  end
  if (GameObj.left_hand != lhand) then
    lhand=GameObj.left_hand
    bars[1].set_text("Left: "+GameObj.left_hand.name)
  end
  if (GameObj.pcs == nil || GameObj.pcs.length < 1) then
    rpcs = ""
  end
  if (GameObj.pcs && GameObj.pcs.join(", ") != rpcs) then
    rpcs=GameObj.pcs.join(", ")
  end
  if (GameObj.npcs == nil || GameObj.npcs.length < 1) then
    rnpcs = ""
  end
  if (GameObj.npcs && GameObj.npcs.join(", ") != rnpcs) then
    rnpcs=GameObj.npcs.join(", ")

  end
  if ((rpcs==nil || rpcs.length < 1) && (rnpcs ==nil || rnpcs.length < 1)) then
    rstring = "Room: "
    bars[2].set_text(rstring)
  end

  if (rpcs && rpcs.length > 0) then
    rstring = "Room: " + rpcs
    if (rnpcs==nil || rnpcs.length<1) then
      bars[2].set_text(rstring)
    end
  end
  if (rpcs && rpcs.length > 0 && rnpcs && rnpcs.length > 0) then
    rstring += ", "
  end
  if ((rpcs==nil || rpcs.length < 1) && rnpcs && rnpcs.length > 0) then
    rstring = "Room: " + rnpcs
    bars[2].set_text(rstring)
  end
  if ((rpcs && rpcs.length > 0) && rnpcs && rnpcs.length > 0) then
    rstring += rnpcs
    bars[2].set_text(rstring)
  end


  sleep 1
end
