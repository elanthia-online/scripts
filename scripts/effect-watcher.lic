module EffectsWatcher
  Defined = []

  class Effect
    attr_reader :name, :start, :finish, :duration

    def initialize(name:, start:, duration: 120, finish: nil)
      @name = name
      @start = start
      @finish = finish
      @duration = duration
      EffectsWatcher::Defined << self
    end

    def done?(line)
      @finish && line =~ @finish
    end

    def start?(line)
      line =~ @start
    end
  end

  # these effects are slow to populate in the game feed, but incredibly deadly
  # reaction time is paramount to success/survival
  Effect.new(
    name: "Condemn",
    start: %r(The pungent stench of decay fills the air as mist rises from the floor around you!),
    finish: %r(The burden of condemnation lifts from your spirit.)
  )

  Effect.new(
    name: "Jaws",
    start: %r[Suddenly, you hear a loud \*clink\* as a large pair of carefully concealed metal jaws slam shut on your (right|left) leg!],
    finish: %r(The metal jaws restraining your movement snap apart.)
  )

  Effect.new(
    name: "Net",
    start: %r(Suddenly, a carefully concealed net springs up from the ground, completely entangling you!),
    finish: %r(The net entangling you rips and falls apart.)
  )

  Effect.new(
    name: "SunderShield",
    start: %r(You feel your left arm go numb!),
    finish: %r(The numbness in your left arm fades away.)
  )

  Effect.new(
    name: "Burrowed",
    start: %r(The ground seems to distort and shudder beneath your feet.)
  )

  Effect.new(
    name: "RiftSlow",
    start: %r(The cold seeps into your flesh, burrowing down into your bones.  The sensation leaves your muscles feeling rigid and unresponsive.)
  )

  def self.start_effect(effect)
    Log.out("starting %s for %s seconds" % [effect.name, effect.duration])
    Effects::Debuffs.to_h[effect.name] = Time.now + effect.duration
  end

  def self.end_effect(effect)
    Log.out("ending %s" % [effect.name])
    Effects::Debuffs.to_h.delete(effect.name)
  end

  def self.main()
    while (line = get)
      EffectsWatcher::Defined.each { |effect|
        self.start_effect(effect) if effect.start?(line)
        self.end_effect(effect) if effect.done?(line)
      }
    end
  end

  EffectsWatcher.main()
end
