=begin
  log_search.lic

  *** use log.lic to log. ;autostart add --global log --timestamp=\"%T\" --rnum ***

  Parse your logs to get search statistics for Gemstones and Dust.
  Creates two files in your Lich5/data/GSIV/CharName/ folder:
    searcharraylog.yaml      - log of every line it matched that can be used to verify results
    SearchDataFromLogs.yaml  - contains the count data

  ;log_search "<folder>" <options>     quotes are not required
  ;log_search C:/Gemstone/Lich5/logs/GSIV-Nisugi/2024/08/ <options>

  options being:
    --reset           clears data in memory before run
    --no-timestamps   logs don't have timestamps at beginning of line
    --quest-complete  needed if your sybil kill to infuse is not in your logs
    --txt             if you have wrayth/wizfe log files that end in .txt
    --debug           announces each file it parses

        author: Nisugi
          game: Gemstone
          tags: hunting, combat, tracking, gemstones, jewels, dust, data
       version: 1.4

  Change Log:
  v1.4
    - added monthly/weekly gemstone tracking
    - added weekly dust tracking
  v1.3 (2025-04-08)
    - reset dust search count on weekly reset
  v1.2 (2025-03-27)
    - disables timestamps if no timestamps detected instead of erroring
    - fixed error caused by old error messages in logs
  v1.1 (2025-03-24)
    - added mug for searches
    - removed ascension check on finds
  v1.0 (2025-03-23)
    - release
=end

module LogSearch
  ['yaml', 'terminal-table', 'time', 'date', 'rubygems', 'rubygems/dependency_installer'].each(&method(:require))

  installer = Gem::DependencyInstaller.new({ :user_install => true, :document => nil })
  installed_gems = Gem::Specification.map { |gem| gem.name }.sort.uniq

  begin
    unless installed_gems.include?('tzinfo')
      echo "Installing missing ruby gem 'tzinfo' now, please wait!"
      installer.install('tzinfo')
      echo "Done installing 'tzinfo' gem!"
    end
    unless installed_gems.include?('tzinfo-data')
      echo "Installing missing ruby gem 'tzinfo-data' now, please wait!"
      installer.install('tzinfo-data')
      echo "Done installing 'tzinfo-data' gem!"
    end
    require 'tzinfo'
  rescue
    echo "Required Ruby gems failed to install: tzinfo & tzinfo-data"
    echo "Please install the above gem(s) to run ;#{Script.current.name}"
    exit
  end
  respond("Input: #{Script.current.vars[0]}")
  game_dir = File.join(DATA_DIR, XMLData.game)
  char_dir = File.join(game_dir, Char.name)
  @filename  = File.join(char_dir, "SearchDataFromLogs.yaml")
  @filename2 = File.join(char_dir, "searcharraylog.yaml")
  file_location = nil

  if Script.current.vars[0].nil?
    respond("You need to specify folder of the log you wish to parse such as:")
    respond(" ;log_search <directory> <options>")
    respond(" ;log_search C:/Users/xxxx/Desktop/Lich5/logs/GSIV-Nisugi/2024/08/")
    respond(" ;log_search C:/Users/xxxx/Desktop/Lich5/logs/GSIV-Nisugi/2024/08/ --reset --no-timestamps")
    exit
  else
    file_location = Script.current.vars[1].gsub('\\', '/') + '/*.log'
    file_location = Script.current.vars[1].gsub('\\', '/') + '/*.txt' if Script.current.vars[0].include?('--txt')
  end
  exit if file_location.nil?

  if File.exist?(@filename)
    @scrape_data = YAML.load_file(@filename)
  end
  @scrape_data = {} if Script.current.vars[0] =~ /--reset/
  @scrape_data                              ||= {}
  @scrape_data[:creature]                   ||= "none"
  @scrape_data[:weekly_ascension_searches]  ||= 0
  @scrape_data[:last_weekly_event_searches] ||= 0
  @scrape_data[:searches_since_jewel]       ||= 0
  @scrape_data[:searches_since_dust]        ||= 0
  @scrape_data[:last_week_reset]            ||= 0
  @scrape_data[:jewel_found]                ||= {}
  @scrape_data[:dust_found]                 ||= {}
  @scrape_data[:none_found]                 ||= {}
  @scrape_data[:monthly_gemstones]          ||= 0
  @scrape_data[:weekly_gemstone]            ||= 0
  @scrape_data[:weekly_dust]                ||= 0
  @scrape_data[:last_month_reset]           ||= TZInfo::Timezone.get("America/New_York").now.month
  @scrape_data[:last_week_reset]            ||= 0
  @scrape_data[:room]                       ||= 0
  @scrape_data[:uid]                        ||= 0
  @scrape_data[:ascension_searches]         ||= 0
  @scrape_data[:quest_complete]               = false unless @scrape_data[:quest_complete]
  @debug                                      = false
  @has_timestamps                             = true
  @base_date                                  = nil
  @next_reset                                 = nil
  @default_tz                                 = Time.now.zone
  @scrape_data[:silent]                       = true unless @scrape_data[:silent] == false

  @has_timestamps = false if Script.current.vars[0] =~ /--no-timestamps?/
  @scrape_data[:quest_complete] = true if Script.current.vars[0] =~ /--quest-complete/
  @debug = true if Script.current.vars[0] =~ /--debug/

  SEARCH_CREATURE = %r{^(?<timestamp>(?:\d{4}-\d{2}-\d{2}\s+)?\d{2}:\d{2}:\d{2}(?:\s+[A-Za-z ]+)?)?:?\s*You search the (?:<.+?>)?(?<creature>[-A-Za-z ]+)(?:<.+?>)?\.$}
  SEARCH_MUG      = %r{^(?<timestamp>(?:\d{4}-\d{2}-\d{2}\s+)?\d{2}:\d{2}:\d{2}(?:\s+[A-Za-z ]+)?)?:?\s*Taking advantage of the scuffle, you roughly pat (?:<.+?>)?the (?:<.+?>)?(?<creature>[-A-Za-z ]+)(?:<.+?>)? down for hidden valuables\!$}
  EVIL_EYE_FLEE   = %r{^(?<timestamp>(?:\d{4}-\d{2}-\d{2}\s+)?\d{2}:\d{2}:\d{2}(?:\s+[A-Za-z ]+)?)?:?\s*The (?:<.+?>)?(?<creature>[-A-Za-z ]+)(?:<.+?>)? turns and runs screaming into the distance, never to be seen again\.$}
  ROOM_REGEX      = %r{^(?<timestamp>(?:\d{4}-\d{2}-\d{2}\s+)?\d{2}:\d{2}:\d{2}(?:\s+[A-Za-z ]+)?)?:?\s*\[[^\]]*-\s*(?<room>\d+)\](?:\s+\((?<uid>u\d+)\))?$}
  FOUND_DUST      = %r{^(?<timestamp>(?:\d{4}-\d{2}-\d{2}\s+)?\d{2}:\d{2}:\d{2}(?:\s+[A-Za-z ]+)?)?:?\s*You notice a scintillating mote of gemstone dust on the ground and gather it quickly\.$}
  FOUND_GEMSTONE  = %r{^(?<timestamp>(?:\d{4}-\d{2}-\d{2}\s+)?\d{2}:\d{2}:\d{2}(?:\s+[A-Za-z ]+)?)?:?\s*\*\* A glint of light catches your eye, and you notice an? (?<name>.+?) at your feet! \*\*$}
  ASCENSION_CREATURES = Regexp.union(
    %r{armored battle mastodon},
    %r{black valravn},
    %r{boreal undansormr},
    %r{crimson angargeist},
    %r{fork-tongued wendigo},
    %r{giant warg},
    %r{gigas berserker},
    %r{gigas disciple},
    %r{gigas shield-maiden},
    %r{gigas skald},
    %r{gold-bristled hinterboar},
    %r{gorefrost golem},
    %r{halfling bloodspeaker},
    %r{halfling cannibal},
    %r{reptilian mutant},
    %r{sanguine ooze},
    %r{shadow-cloaked draugr},
    %r{winged disir},
    %r{basalt grotesque},
    %r{death knight},
    %r{mist-wreathed banshee},
    %r{patrician vampire},
    %r{phantasmic conjurer},
    %r{skeletal dreadsteed},
    %r{tatterdemalion ghast},
    %r{hive thrall},
    %r{kiramon broodtender},
    %r{kiramon myrmidon},
    %r{kiramon stalker},
    %r{kiramon strandweaver},
    %r{kresh ravager}
  )

  def self.extract_base_date(filename)
    if filename =~ /^(\d{4}-\d{2}-\d{2})_/
      return $1
    else
      nil
    end
  end

  # Convert a timestamp from the log file into a Unix timestamp.
  # If the timestamp does not include a date, base_date (extracted from the filename) is used.
  # If no timezone is provided in the timestamp, default_tz is used.
  def self.convert_to_timestamp(log_time, file_date = nil)
    log_time = log_time.chomp(":").strip

    # Regex for timestamp with an optional full date and timezone
    if log_time =~ /^(\d{4}-\d{2}-\d{2})\s+(\d{2}:\d{2}:\d{2})(?:\s+(.+))?$/
      date_str = $1
      time_str = $2
      tz_str   = $3
      tz_str = @default_tz if tz_str.nil? || tz_str.empty?
      if tz_str
        time_obj = Time.strptime("#{date_str} #{time_str} #{tz_str}", "%Y-%m-%d %H:%M:%S %Z")
      else
        time_obj = Time.strptime("#{date_str} #{time_str}", "%Y-%m-%d %H:%M:%S")
      end

    # Regex for timestamp with only time (no date)
    elsif log_time =~ /^(\d{2}:\d{2}:\d{2})(?:\s+(.+))?$/
      # raise ArgumentError, "A base date is required if the timestamp doesn't include a date" if file_date.nil?
      if file_date.nil?
        respond("Filename missing date information. Enabling --no-timestamps flag.")
        @has_timestamps = false
        return 1
      end
      time_str = $1
      tz_str   = $2
      tz_str = @default_tz if tz_str.nil? || tz_str.empty?
      if tz_str
        time_obj = Time.strptime("#{file_date} #{time_str} #{tz_str}", "%Y-%m-%d %H:%M:%S %Z")
      else
        time_obj = Time.strptime("#{file_date} #{time_str}", "%Y-%m-%d %H:%M:%S")
      end
    else
      # raise ArgumentError, "Unrecognized timestamp format: #{log_time}"
      respond("Unrecognized timestamp format or missing formats. Enabling --no-timestamps flag.")
      @has_timestamps = false
      return 1
    end
    time_obj = time_obj.utc
    time_obj.to_i
  end

  def self.initialize_next_reset(current_log_timestamp)
    eastern_offset = "-04:00"
    current_time = Time.at(current_log_timestamp).utc
    current_time_eastern = current_time.getlocal(eastern_offset)
    days_until_sunday = (7 - current_time_eastern.wday) % 7

    if current_time_eastern.wday == 0 && current_time_eastern > Time.new(current_time_eastern.year, current_time_eastern.month, current_time_eastern.day, 0, 0, 0, eastern_offset)
      days_until_sunday = 7
    end

    candidate_sunday = current_time_eastern.to_date + days_until_sunday
    desired_reset = Time.new(candidate_sunday.year, candidate_sunday.month, candidate_sunday.day, 0, 0, 0, eastern_offset)
    reset_time = desired_reset.utc.to_i

    respond("DEBUG: initialize_next_reset: computed reset_time=#{desired_reset} (assumed EDT), #{Time.at(reset_time).utc} (UTC)")
    reset_time
  end

  def self.maybe_reset_weekly_counter(current_log_timestamp)
    return unless @has_timestamps
    eastern = TZInfo::Timezone.get("America/New_York")
    @scrape_data[:weekly_counts] ||= {}

    if @next_reset.nil?
      @next_reset = initialize_next_reset(current_log_timestamp)
      respond("DEBUG: @next_reset initialized to #{Time.at(@next_reset)}")
    end

    while current_log_timestamp >= @next_reset
      finished_week = eastern.to_local(Time.at(@next_reset + 3600)).strftime("%U").to_i - 1
      respond("DEBUG: Resetting weekly counter at boundary #{Time.at(@next_reset)} for finished week #{finished_week}.")

      total_this_week = @scrape_data[:weekly_ascension_searches]
      gap = total_this_week - (@scrape_data[:last_weekly_event_searches] || 0)
      key = (@next_reset - 1).to_s
      @scrape_data[:none_found][key] = {
        searches_since: gap,
        searches_week: total_this_week,
        creature: "none",
        room: "none",
        name: "final searches of the week with no find"
      }

      @scrape_data[:weekly_counts][:"week_#{finished_week}_ascension_searches"] = @scrape_data[:weekly_ascension_searches]
      @scrape_data[:weekly_counts][:"week_#{finished_week}_dust"] = @scrape_data[:weekly_dust]
      @scrape_data[:weekly_counts][:"week_#{finished_week}_gemstone"] = @scrape_data[:weekly_gemstone]
      @scrape_data[:weekly_ascension_searches] = 0
      @scrape_data[:weekly_gemstone] = 0
      @scrape_data[:weekly_dust] = 0
      @scrape_data[:last_week_reset] = @next_reset
      @next_reset += 7 * 86400
      respond("DEBUG: New reset boundary set to #{Time.at(@next_reset)}")
    end
  end

  def self.maybe_reset_monthly_counter(current_log_timestamp)
    return unless @has_timestamps
    est = TZInfo::Timezone.get("America/New_York")
    ts_est = Time.at(current_log_timestamp).getlocal(est.current_period.offset.utc_total_offset)
    current_month = ts_est.month
    if current_month != @scrape_data[:last_month_reset]
      @scrape_data[:monthly_gemstones] = 0
      @scrape_data[:last_month_reset] = current_month
    end
  end

  $search_array_log = []
  respond("Parsing files.")
  respond("File Location: #{file_location}") if @debug
  exit if file_location.nil?

  Dir.glob(file_location).each do |file|
    file_date = File.basename(file).gsub(/_.+\.log/, "") if @has_timestamps

    # buffer = File.readlines(file).map(&:chomp)
    buffer = File.binread(file).lines.map { |line| line.force_encoding("UTF-8").scrub.chomp }

    $search_array_log.append(file)
    respond("Parsing #{file}") if @debug

    buffer.each do |line|
      case line
      when %r{The fallen sybil's power lingers in the area, ready for the claiming.  Quickly, take your gemstone and INFUSE it while you still can!}
        @scrape_data[:quest_complete] = true

      when ROOM_REGEX
        @scrape_data[:room] = Regexp.last_match[:room] if Regexp.last_match[:room]
        @scrape_data[:uid] = Regexp.last_match[:uid] if Regexp.last_match[:uid]

      when FOUND_GEMSTONE
        name = Regexp.last_match[:name]
        key = @scrape_data[:timestamp].to_s if @has_timestamps
        key = @scrape_data[:ascension_searches].to_s if !@has_timestamps
        @scrape_data[:monthly_gemstones] += 1
        @scrape_data[:weekly_gemstone] += 1
        @scrape_data[:jewel_found][key] = {
          searches_since: @scrape_data[:searches_since_jewel],
          searches_week: @scrape_data[:weekly_ascension_searches],
          name: name,
          room: @scrape_data[:room],
          creature: @scrape_data[:creature],
          on_the_month: @scrape_data[:monthly_gemstones]
        }
        respond("jewel added: #{name} -searches_last: #{@scrape_data[:searches_since_jewel]} -searches_week: #{@scrape_data[:weekly_ascension_searches]} -room: #{@scrape_data[:room]} -creature: #{@scrape_data[:creature]}")
        @scrape_data[:searches_since_jewel] = 0
        @scrape_data[:last_weekly_event_searches] = @scrape_data[:weekly_ascension_searches]
        $search_array_log.append(line)

      when FOUND_DUST
        key = @scrape_data[:timestamp].to_s if @has_timestamps
        key = @scrape_data[:ascension_searches].to_s if !@has_timestamps
        @scrape_data[:weekly_dust] += 1
        @scrape_data[:dust_found][key] = {
          searches_since: @scrape_data[:searches_since_dust],
          searches_week: @scrape_data[:weekly_ascension_searches],
          name: "gemstone dust",
          room: @scrape_data[:room],
          creature: @scrape_data[:creature]
        }
        respond("dust added: -searches: #{@scrape_data[:searches_since_dust]} -room: #{@scrape_data[:room]} -creature: #{@scrape_data[:creature]}")
        @scrape_data[:searches_since_dust] = 0
        @scrape_data[:last_weekly_event_searches] = @scrape_data[:weekly_ascension_searches]
        $search_array_log.append(line)

      when SEARCH_CREATURE, SEARCH_MUG, EVIL_EYE_FLEE
        if @has_timestamps
          log_time = Regexp.last_match[:timestamp]
          @scrape_data[:timestamp] = convert_to_timestamp(log_time, file_date)
          maybe_reset_weekly_counter(@scrape_data[:timestamp])
          maybe_reset_monthly_counter(@scrape_data[:timestamp])
        end
        name = Regexp.last_match[:creature]
        @scrape_data[:creature] = name
        if ASCENSION_CREATURES.match?(name) && @scrape_data[:quest_complete]
          @scrape_data[:ascension_searches] += 1
          @scrape_data[:weekly_ascension_searches] += 1
          @scrape_data[:searches_since_jewel] += 1
          @scrape_data[:searches_since_dust] += 1
        end
        $search_array_log.append(line)
      end
    end
  end
  File.write(@filename2, $search_array_log.to_yaml)

  # save data to file
  File.write(@filename, @scrape_data.to_yaml)
  respond("Parsing complete. Search data saved to file. #{@filename}")
end
