=begin
  version: 1.5
  Author: elanthia-online
  Contributors: Kragdruk
  Tags: festival, RoL, Rings

  Rings of Lumnis Puzzle Solver

  Usage:
    ;rofl-puzzles <puzzle name>

  where <puzzle name> is one of the following:

    auto         automatically solve puzzles when they appear (default behavior)

    bookcase1    lean against a book in a bookcase, as one does
    bookcase2    there's a lever behind a book
    boxsphere    manipulate a metal box and a glowing sphere
    colorsphere  push a button and touch some sphere of various colors
    crystal      choose the correct damage type to destroy monster paintings
    ghost        use a wand to do stuff to a ghost
    irondoor     unlock an iron door with help from a boulder
    lavariver    the floor is lava
    levers       pull levers in the correct order
    lightcandle  light the correct candle
    makecandle   use locally-sourced organic ingredients to make an artisanal candle
    mosaic       find the right gem and symbol to put into the mosaic
    scramble     guess the word from scrambled letters
    stars        select the correct constellation to place in the night sky
    statue       move some statues around on an altar
    symbol       paint an Arkati symbol the correct colors and assemble
    trapdoor     get through a trapdoor by moving a boulder
    wicker       there's a tube in there that you can play
    wizard       I put on my robe and wizard hat
    aldoran      use the healing stones to fix the sick person
    gnomes       pick out the apotl or apotla for the bloodline
    elves        place the correct stone in house shield
    shops        point to the correct shop
    cutouts      put creature cutouts on the correct maps
    sheet        put skins on the correct statues
    flowers      plant and water the correct flower
    professions  drink from the profession corresponding goblet

  Thanks:
    * Fyffil for the solutions to the Planar puzzles
    * Alastir for creating ;RoL to answer trivia questions and providing
      solutions to many anagrams and the ghost, box, and stars puzzles
    * Cigger for the gem anagram answers and testing
    * Naamit for creature anagrams, arkati symbol tiles, and lots of help
      with testing and feedback.
    * Maetriks for creature anagrams
    * Claudaro for help testing and providing feedback
    * Roblar for some hints to puzzle solutions
    * Many other people in the HOA #puzzle_spoilers channel for their help
    * Hebrew2You for bribing me to fix the mosaic puzzle
    * Jahadeem for reporting the issue with the candle and the NOMARKEDDROP setting
    * Athias for submitting the Order and Elemental ring puzzle solutions
    * Azanoth for submitting the Chaos ring puzzle solutions

  **Pull Requests Welcome** - You can submit changes at:
  https://github.com/elanthia-online/scripts/tree/master/scripts/rofl-puzzles.lic
=end

module RofL
  class Statue
    KNOWN_POSITIONS = [
      "left-rear corner", "left-rear", "centered behind", "right-rear", "right-rear corner",
      "left",                            "middle",                           "right",
      "left-front corner", "left-front", "centered in front", "right-front", "right-front corner",
    ]

    POSITION_MAP = {
      "centered behind"    => {
        "middle"     => "pull",
        "left-rear"  => "nudge",
        "right-rear" => "prod",
      },
      "centered in front"  => {
        "middle"      => "push",
        "left-front"  => "nudge",
        "right-front" => "prod",
      },
      "left"               => {
        "left-rear corner"  => "push",
        "left-front corner" => "pull",
        "middle"            => "prod",
      },
      "left-front"         => {
        "left-front corner" => "nudge",
        "centered in front" => "prod",
      },
      "left-front corner"  => {
        "left"       => "push",
        "left-front" => "prod",
      },
      "left-rear"          => {
        "left-rear corner" => "nudge",
        "centered behind"  => "prod",
      },
      "left-rear corner"   => {
        "left"      => "pull",
        "left-rear" => "prod",
      },
      "middle"             => {
        "left"              => "nudge",
        "right"             => "prod",
        "centered behind"   => "push",
        "centered in front" => "pull",
      },
      "right"              => {
        "middle"             => "nudge",
        "right-rear corner"  => "push",
        "right-front corner" => "pull",
      },
      "right-front"        => {
        "centered in front"  => "nudge",
        "right-front corner" => "prod",
      },
      "right-front corner" => {
        "right-front" => "nudge",
        "right"       => "push",
      },
      "right-rear"         => {
        "centered behind"   => "nudge",
        "right-rear corner" => "prod",
      },
      "right-rear corner"  => {
        "right-rear" => "nudge",
        "right"      => "pull",
      },
    }

    DESCRIPTION_OF = {
      "jackal"  => {
        "altar" => "snarling and menacing jackal statue",
        "bowl"  => "jackal statue",
      },
      "cobra"   => {
        "altar" => "coiled and ready-to-strike cobra casting",
        "bowl"  => "cobra statue",
      },
      "nymph"   => {
        "altar" => "lithe shark-fanged nymph sculpture",
        "bowl"  => "nymph statue",
      },
      "goddess" => {
        "altar" => "flame-wreathed and sneering goddess effigy",
        "bowl"  => "goddess statue",
      },
    }

    def self.position_map
      POSITION_MAP
    end

    def self.known_positions
      KNOWN_POSITIONS
    end

    def self.description_of
      DESCRIPTION_OF
    end

    def self.find_path(starting_position, ending_position)
      return if !known_positions.include?(starting_position)
      return if !known_positions.include?(ending_position)

      queue = [starting_position] # FIFO of positions to explore
      visited = []                # Positions we've already visited
      edge_to = {}                # Reverse map of shortest path to starting position from each node

      # Breadth first search of positions from the starting point
      while queue.any?
        # Pull next position from front of queue
        current_position = queue.shift

        # Stop searching if we've found a path to the ending_position
        break if current_position == ending_position

        # Mark this node as visited so we don't bother with other paths here
        visited << current_position

        # Add any unvisited neighbors of this position to end of the search queue
        # and record that we reached the neighbor from this node
        position_map[current_position].keys.each do |(neighbor, _direction)|
          unless visited.include?(neighbor)
            queue << neighbor
            visited << neighbor
            edge_to[neighbor] = current_position
          end
        end
      end

      # If we found a solution, the current_position should now be the ending
      # position. Walk back from here to the starting position following edge_to,
      # our map of shortest paths, recording the direction needed to travel
      [].tap do |path|
        while current_position != starting_position
          # Determine the next closest room
          preceding_position = edge_to[current_position]

          # Figure out which direction we need to travel from the next cloest room to get here
          direction_to_travel = position_map[preceding_position][current_position]

          # Add that direction to the _front_ of the path since we're working backwards
          path.unshift(direction_to_travel)

          # Update our position to the next closest
          current_position = edge_to[current_position]
        end
      end
    end

    def self.parse_altar_position(statue, text)
      case text
      when /are situated in the middle of the/
        "middle"
      when /a #{description_of[statue]["altar"]}(?: to the| in the)? (.*?) (?:of )?the (?:altar|worshipping space)/
        $1
      else
        echo "ERROR: couldn't parse #{statue} position on the altar"
      end
    end

    def self.parse_bowl_position(statue, text)
      case text
      when /a #{description_of[statue]["bowl"]}(?: to the| in the)? (.*?) (?:of )?the altar/
        $1
      else
        echo "ERROR: couldn't parse #{statue} position in the bowl"
      end
    end

    def self.determine_solution(altar_text, bowl_text)
      Statue.description_of.keys.each_with_object({}) do |statue, positions|
        positions[statue] = {
          "bowl"   => Statue.parse_bowl_position(statue, bowl_text),
          "statue" => Statue.parse_altar_position(statue, altar_text)
        }
      end.map do |statue, position|
        Statue.find_path(position["statue"], position["bowl"]).map do |dir|
          "#{dir} #{Statue.description_of[statue]["altar"].split.last}"
        end
      end.flatten
    end

    def self.solve_puzzle
      altar_text = dothistimeout "look at altar", 3, /^A collection of statuary are situated near the altar|Four different statues|I could not find what you were referring to./
      bowl_text = dothistimeout "look in bowl", 3, /^An altar sits|I could not find what you were referring to./ if altar_text

      if !altar_text || !bowl_text || [altar_text, bowl_text].any? { |t| t =~ /I could not find what you were referring to./ }
        echo
        echo "ERROR: doesn't look like an altar statue puzzle"
        echo
      else
        if (solution = determine_solution(altar_text, bowl_text))
          multifput(*solution)
          fput "bow altar"
        else
          echo
          echo "ERROR: couldn't determine a solution"
          echo
        end
      end
    end

    def self.requirements
      [
        "grey felsite altar"
      ]
    end
  end

  class Mosaic
    GEM_INFO = {
      "Aeia"         => { "gem" => "emerald",          "shape" => "lily" },
      "Amasalen"     => { "gem" => "heliodor",         "shape" => "two-headed serpent" },
      "Andelas"      => { "gem" => "cat's eye quartz", "shape" => "feline" },
      "Arachne"      => { "gem" => "garnet",           "shape" => "arachnid" },
      "Charl"        => { "gem" => "thunder egg geode", "shape" => "trident" },
      "Cholen"       => { "gem" => "amethyst",         "shape" => "lute" },
      "Eorgina"      => { "gem" => "black diamond",    "shape" => "flame" },
      "Fash'lo'nae"  => { "gem" => "citrine quartz",   "shape" => "slit-pupiled eye" },
      "Gosaena"      => { "gem" => "moss agate",       "shape" => "sickle" },
      "Imaera"       => { "gem" => "emerald",          "shape" => "doe" },
      "Ivas"         => { "gem" => "green jade",       "shape" => "stylized wisp of smoke" },
      "Jastev"       => { "gem" => "alexandrite",      "shape" => "crystal ball" },
      "Jaston"       => { "gem" => "blue quartz",      "shape" => "feather" },
      "Kai"          => { "gem" => "tigerfang crystal", "shape" => "clenched fist" },
      "Koar"         => { "gem" => "topaz",            "shape" => "crown" },
      "Kuon"         => { "gem" => "green zircon",     "shape" => "leaf" },
      "Laethe"       => { "gem" => "rhodochrosite",    "shape" => "lone rose" },
      "Leya"         => { "gem" => "chalcedony",       "shape" => "dagger" },
      "Lorminstra"   => { "gem" => "black dreamstone", "shape" => "key" },
      "Lumnis"       => { "gem" => "turquoise",        "shape" => "five-ringed golden scroll" },
      "Luukos"       => { "gem" => "emerald",          "shape" => "serpent" },
      "Marlu"        => { "gem" => "star diopside",    "shape" => "six-tentacled star" },
      "Mularos"      => { "gem" => "bloodstone",       "shape" => "dagger-pierced heart" },
      "Niima"        => { "gem" => "white opal",       "shape" => "dolphin" },
      "Oleani"       => { "gem" => "morganite",        "shape" => "budding flower atop a heart" },
      "Onar"         => { "gem" => "obsidian",         "shape" => "broken skull" },
      "Phoen"        => { "gem" => "yellow sapphire",  "shape" => "sunburst" },
      "Sheru"        => { "gem" => "amber",            "shape" => "jackal" },
      "Ronan"        => { "gem" => "jet",              "shape" => "sword" },
      "The Huntress" => { "gem" => "starstone",        "shape" => "eight-pointed star" },
      "Tilamaire"    => { "gem" => "labradorite",      "shape" => "musical note" },
      "Tonis"        => { "gem" => "jasper",           "shape" => "pegasus" },
      "Voaris"       => { "gem" => "geode",            "shape" => "young rose" },
      "Voln"         => { "gem" => "onyx",             "shape" => "shield" },
      "V'tull"       => { "gem" => "bloodjewel",       "shape" => "scimitar" },
      "Zelia"        => { "gem" => "moonstone",        "shape" => "crescent moon" }
    }

    def self.gem_info_for(god)
      GEM_INFO.fetch(god)
    end

    MOSAIC_REGEX = /The depiction of (.*) is lit up from behind,/
    ERROR_REGEX  = /I could not find what you were referring to./

    def self.solve_puzzle
      round_count = 0
      5.times do
        round_count += 1
        result = dothistimeout "look at colorful mosaic", 5, Regexp.union(MOSAIC_REGEX, ERROR_REGEX)

        case result
        when ERROR_REGEX
          respond
          respond " ERROR: This doesn't look like a mosaic puzzle"
          respond
          exit
        when MOSAIC_REGEX
          god = $1
          shape = gem_info_for(god)["shape"]
          gem = gem_info_for(god)["gem"]

          100.times do
            result = dothistimeout "turn contraption", 5, /^As you/
            break if result =~ /soon replaced by one of #{gem}[.]$/
          end

          100.times do
            result = dothistimeout "push contraption", 5, /^As you/
            break if result =~ /finally settles into the shape of an? #{shape}[.]$/
          end

          dothistimeout "tap contraption", 3, /You tap the bejweled button/
          if dothistimeout "put my #{gem.split.last} in colorful mosaic", 3, /You carefully place your/
            unless round_count >= 5
              fput "rub colorful mosaic"
            end
          else
            respond
            respond "  ERROR: failed to place gem in mosaic. Try to pry everything and unpause script to continue."
            respond
            pause_script
            return
          end
        else
          respond
          respond "  ERROR: couldn't determine which Arkati is selected in the mosaic"
          respond
          exit
        end
      end
    end

    def self.requirements
      [
        "gem-bedecked contraption",
        "colorful floor mosaic"
      ]
    end
  end

  module CrystalPainting
    def self.solve_puzzle
      round_count = 0
      3.times do
        round_count += 1
        100.times do
          result = dothistimeout "rub glowing crystal", 5, /^Within moments, however,|Rather than destroying it|What were you referring to/

          case result
          when /Rather than destroying it/
            break
          when /^Within moments, however,/
            fput "tap crystal"
          else
            respond
            respond "  ERROR: Doesn't look like a crystal puzzle to me"
            respond
            exit
          end
        end

        unless round_count >= 3
          fput "turn crystal"
        end
      end
    end

    def self.requirements
      [
        "depiction", "portrait", "painting"
      ]
    end
  end

  module ConstellationStars
    CONSTELLATIONS = {
      "Charlatos" => "The Spire",
      "Eoantos"   => "The Lady of the Green",
      "Eorgaen"   => "The Paladin",
      "Fashanos"  => "Arachne",
      "Imaerasta" => "The Queen of Enlightenment",
      "Ivastaen"  => "The Mistress of Adoration",
      "Jastatos"  => "The Jackal",
      "Koaratos"  => "Jastev's Crystal",
      "Lormesta"  => "Grandfather's Eye",
      "Lumnea"    => "The Dragonfly",
      "Olaesta"   => "The Hammer",
      "Phoenatos" => "The Sun God",

      "Spring"    => "The Mistress of Adoration",
      "Summer"    => "The Guardian",
      "Fall"      => "The Gryphon",
      "Winter"    => "The Ur-Daemon",
    }

    ACTIVE_AREA_REGEX = /The "(.*)" area is brightly lit with a random smattering of stars./
    ERROR_REGEX = /You can't see the sky from here.|You gaze up into the sky/

    def self.solve_puzzle
      round_count = 0
      4.times do
        round_count += 1
        unless checkright("star") || checkleft("star")
          fput "get star"

          unless checkright("star") || checkleft("star")
            echo "ERROR: couldn't get a star to place"
          end
        end

        result = dothistimeout "look sky", 3, Regexp.union(ACTIVE_AREA_REGEX, ERROR_REGEX)

        active_area = case result
                      when ERROR_REGEX
                        respond
                        respond "  ERROR: This doesn't seem like a Constellation puzzle"
                        respond
                        return
                      when ACTIVE_AREA_REGEX
                        $1
                      end
        constellation_for_area = CONSTELLATIONS.fetch(active_area)

        100.times do
          result = dothistimeout "rub my star", 5, /until they settle on a formation akin/
          break if result =~ /formation akin to #{constellation_for_area}\.$/
        end

        fput "put star in sky"
        unless round_count >= 4
          fput "turn sky"
        end
      end
    end

    def self.requirements
      [
        "dark night sky"
      ]
    end
  end

  module Scramble
    SOLUTIONS = {
      # Spiritual (Arkati)
      "I   E   A   A"                     => "aeia",
      "A   C   H   R   E   N   A"         => "arachne",
      "L   A   R   C   H"                 => "charl",
      "L   O   E   N   C   H"             => "cholen",
      "K   A   N   E   O"                 => "eonak",
      "A   I   O   G   E   R   N"         => "eorgina",
      "R   E   Z   G   S   H   E   H"     => "ghezresh",
      "R   A   I   M   E   A"             => "imaera",
      "V   A   S   E   J   T"             => "jastev",
      "S   A   T   N   O   J"             => "jaston",
      "N   A   S   T   J   O"             => "jaston",
      "A   I   K"                         => "kai",
      "R   O   K   A"                     => "koar",
      "N   O   K   U"                     => "kuon",
      "K   O   N   U"                     => "kuon",
      "A   T   E   L   E   H"             => "laethe",
      "M   U   I   N   L   S"             => "lumnis",
      "S   O   U   L   K   U"             => "luukos",
      "A   M   L   U   R"                 => "marlu",
      "S   O   M   L   A   R   U"         => "mularos",
      "E   A   N   I   L   O"             => "oleani",
      "E   P   H   N   O"                 => "phoen",
      "N   A   R   O   N"                 => "ronan",
      "A   R   O   N"                     => "onar",
      "U   S   E   R   H"                 => "sheru",
      "O   S   T   I   N"                 => "tonis",
      "L   O   V   N"                     => "voln",
      "A   Z   I   L   E"                 => "zelia",

      # One of the bounty ones? (Gems)
      "E   A   G   T   A"                 => "agate",
      "S   T   Y   H   E   A   T   M"     => "amethyst",
      "R   L   C   O   A"                 => "coral",
      "M   A   I   D   O   N   D"         => "diamond",
      "D   I   P   S   O   E   D   I"     => "diopside",
      "L   A   M   E   R   E   D"         => "emerald",
      "N   O   S   T   E   Y   F   E"     => "feystone",
      "T   R   A   N   E   G"             => "garnet",
      "S   P   A   J   E   R"             => "jasper",
      "D   O   E   R   P   T   I"         => "peridot",
      "R   A   L   E   P"                 => "pearl",
      "N   E   T   I   L   I   P"         => "plinite",
      "E   R   I   A   P   S   H   P"     => "sapphire",
      "U   T   S   S   O   L   E   N   O" => "soulstone",
      "I   R   E   S   P   H   E   N"     => "spherine",
      "L   I   S   N   E   P"             => "spinel",

      # Chaos? (Monsters)
      "M   O   G   L   E"                 => "golem",
      "R   A   I   M   T   O   N   U"     => "minotaur",
      "T   E   K   S   L   E   O   N"     => "skeleton",
      "A   I   L   N   V   E   L   N"     => "velnalin",
      "T   O   N   S   C   U   C   R   T" => "construct",
      "R   A   C   E   T   U   N"         => "centaur",
      "S   O   U   L   M   I"             => "moulis",
      "K   L   A   N   I   M   Y"         => "myklian",
      "M   O   N   K   A   I   R"         => "Kiramon",
      "M   O   O   N   O   N   N   I"     => "nonomino",
      "L   I   M   E   R   N   G"         => "gremlin",
      "T   A   E   I   S   R   I   C"     => "csetairi",
      "H   A   I   T   R   W"             => "wraith",
      "M   A   H   T   N   O   P"         => "phantom",
      "S   P   Y   O   C   C   L"         => "cyclops",
      "B   O   R   C   A"                 => "cobra",
    }

    WALL_REGEX = /the letters are:\s+((?:[A-Z]\s*{2,}){2,})$/
    ERROR_REGEX = /I could not find what you were referring to./

    def self.solve_puzzle
      result = dothistimeout "look wall", 5, Regexp.union(WALL_REGEX, ERROR_REGEX)

      case result
      when WALL_REGEX
        answer = SOLUTIONS.fetch($1)
        fput "get chalk"
        fput "write wall; #{answer}"
      else
        respond
        respond "  ERROR: doesn't look like a word scramble puzzle"
        respond
      end
    end

    def self.requirements
      [
        "wall",
        "piece of chalk"
      ]
    end
  end

  module Ghost
    # Credit goes to Alastir for this solution
    def self.solve_puzzle
      fput "dig dirt"
      fput "get wand"
      fput "turn my wand"
      fput "turn my wand"
      fput "turn my wand"
      dothistimeout "wave wand at ghost", 5, /^You wave/
      waitcastrt?
      waitrt?
      fput "drop wand"
      fput "search corpse"
      fput "unlock coffin with my key"
      fput "open coffin"
      fput "push corpse"
      fput "close coffin"
      fput "push coffin"
      fput "bury coffin"
    end

    def self.requirements
      [
        "dead ghost",
        "ebonwood coffin",
        "patch of loose dirt",
        "pale grey wand"
      ]
    end
  end

  module SymbolPainting
    SYMBOL_COLORS = {
      "trident"                => { "symbol" => "green",   "tile" => "blue" },
      "lute"                   => { "symbol" => "crimson", "tile" => "gold" },
      "anvil"                  => { "symbol" => "gold",    "tile" => "brown" },
      "sheaf of grain"         => { "symbol" => "gold",    "tile" => "green" },
      "doe"                    => { "symbol" => "brown",   "tile" => "green" },
      "artist's brush"         => { "symbol" => "black",   "tile" => "grey" },
      "crystal ball"           => { "symbol" => "silver",  "tile" => "grey" },
      "arm with fist clenched" => { "symbol" => "silver",  "tile" => "crimson" },
      "crown"                  => { "symbol" => "gold",    "tile" => "white" },
      "key"                    => { "symbol" => "gold",    "tile" => "black" },
      "sunburst"               => { "symbol" => "gold",    "tile" => "blue" },
      "pegasus"                => { "symbol" => "gold",    "tile" => "blue" },
      "sickle"                 => { "symbol" => "silver",  "tile" => "green" },
      "crescent moon"          => { "symbol" => "silver",  "tile" => "black" },
      "cat's head"             => { "symbol" => "black",   "tile" => "red" },
      "slit-pupiled eye"       => { "symbol" => "yellow",  "tile" => "grey" },
      "serpent"                => { "symbol" => "green",   "tile" => "brown" },
      "jackal's head"          => { "symbol" => "black",   "tile" => "gold" },
      "scimitar"               => { "symbol" => "black",   "tile" => "red" },
      "lily"                   => { "symbol" => "white",   "tile" => "green" },
      "widow"                  => { "symbol" => "black",   "tile" => "red" },
      "eight-pointed star"     => { "symbol" => "silver",  "tile" => "black" },
      "leaf"                   => { "symbol" => "gold",    "tile" => "brown" },
      "dagger"                 => { "symbol" => "ivory",   "tile" => "blue" },
      "broken skull"           => { "symbol" => "white",   "tile" => "black" },
      "note"                   => { "symbol" => "yellow",  "tile" => "blue" },
      "rose"                   => { "symbol" => "yellow",  "tile" => "red" },
      "shield"                 => { "symbol" => "white",   "tile" => "black" },
      "wisp"                   => { "symbol" => "green",   "tile" => "red" },
      "flame"                  => { "symbol" => "red",     "tile" => "grey" },
    }

    PIGMENT_COMPONENTS = {
      "blue"    => ["blue"],
      "brown"   => ["brown"],
      "crimson" => ["crimson"],
      "gold"    => ["gold"],
      "ivory"   => ["ivory"],
      "red"     => ["red"],
      "silver"  => ["silver"],
      "white"   => ["white"],
      "yellow"  => ["yellow"],
      "black"   => ["black"],
      "grey"    => ["black", "white"],
      "green"   => ["yellow", "blue"],
      "orange"  => ["red", "yellow"],
      "purple"  => ["blue", "red"],
    }

    def self.solve_puzzle
      if (color_info = guess_color_info)
        unless checkright("paintbrush") || checkleft("paintbrush")
          fput "get paintbrush"
        end

        color_info.each do |(target, _color)|
          fput "clean #{target}"
          set_pigment color_info.fetch(target)
          fput "paint #{target}"
        end

        fput "drop paintbrush"
        fput "get symbol"
        fput "put symbol on tile"
      else
        respond
        respond "  ERROR: don't know which color to paint #{get_symbol_description}"
        respond
        respond "  Sorry, but you will need to solve this on your own."
        respond
        pause_script
      end
    end

    def self.guess_color_info
      get_color_info_for(get_symbol_description)
    end

    def self.get_symbol_description
      GameObj.loot.find { |i| i.noun == "symbol" }.name.split[0..-2].join(" ")
    end

    def self.get_color_info_for(symbol_description)
      if (info = SYMBOL_COLORS[symbol_description])
        info
      else
        k = SYMBOL_COLORS.find do |(desc, _color)|
          symbol_description.end_with?(desc)
        end
        SYMBOL_COLORS[k[0]] if k
      end
    end

    def self.set_pigment(color)
      fput "clean paintbrush"
      PIGMENT_COMPONENTS[color].each do |base|
        self.change_pigment_color_to(base)
        fput "dip pigment"
      end
    end

    PIGMENT_REGEX = /the pigment inside gradually transforms from .* to (.*)\.$/
    ERROR_REGEX = /What were you referring to?/
    def self.change_pigment_color_to(color)
      25.times do
        result = dothistimeout "rub pigment", 3, Regexp.union(PIGMENT_REGEX, ERROR_REGEX)

        case result
        when PIGMENT_REGEX
          break if $1 == color
        else
          respond
          respond "  ERROR: couldn't find any pigment for our paintbrush"
          respond
        end
      end
    end

    def self.requirements
      ["symbol", "pigment", "tile"]
    end
  end

  module MakeCandle
    # Credit goes to Alastir for this solution
    def self.solve_puzzle
      fput "look in box"
      fput "get beeswax"
      fput "put beeswax in pot"
      fput "get wick"
      fput "put wick in mold"
      fput "get pot"
      fput "put pot on hearth"
      fput "light hearth"
      fput "turn pot"
      fput "snuff hearth"
      fput "get pot"
      fput "get mold"
      fput "pour pot into mold"
      fput "put pot on hearth"
      fput "put mold in case"
      fput "get mold from case"
      fput "turn mold"
      fput "put mold in case"
      r = dothistimeout "drop candle", 5, /^You drop|^You notice that the beeswax pillar candle is marked as unsellable and stop yourself\.$/
      if r =~ /^You notice that the beeswax pillar candle is marked as unsellable and stop yourself\.$/
        echo "You have NOMARKEDDROP enabled but this puzzle requires you to drop marked items."
        echo "You can disable this setting with: SET NOMARKEDDROP OFF"
        fput "set nomarkeddrop off"
        fput "drop candle"
        fput "set nomarkeddrop on"
      end
      fput "light candle"
    end

    def self.requirements
      ["white paper box"]
    end
  end

  module LightCandle
    SUCCESS_REGEX = /The wick flickers gently but burns brightly/
    FAIL_REGEX = /The wick refuses to stay lit/
    ERROR_REGEX = /What were you referring to?/

    def self.solve_puzzle
      fput "look bench"
      fput "get twig"
      fput "put twig in brazier"
      ["first", "second", "third", "fourth"].each do |ord|
        case dothistimeout "light #{ord} candle", 3, Regexp.union(SUCCESS_REGEX, FAIL_REGEX, ERROR_REGEX)
        when ERROR_REGEX, nil
          respond
          respond "  ERROR: this doesn't seem to be a candle puzzle"
          respond
          break
        when SUCCESS_REGEX
          break
        end
      end
    end

    def self.requirements
      [
        "iron brazier",
        "elaborate prayer bench",
      ]
    end
  end

  module Levers
    def self.solve_puzzle
      multifput "push white lev", "pull black lev", "push green lev", "pull blue lev", "push red lev"
    end

    def self.requirements
      [
        "white lever",
        "black lever",
        "green lever",
        "blue lever",
        "red lever",
      ]
    end
  end

  module IronDoor
    def self.solve_puzzle
      multifput "kick boulder", "get key", "unlock door"
    end

    def self.requirements
      [
        "iron door",
        "slate grey boulder",
      ]
    end
  end

  module BoxSphere
    def self.solve_puzzle
      multifput "push box", "roll sphere"
    end

    def self.requirements
      [
        "slightly elevated platform",
        "glowing sphere",
        "large metal box",
        "wrought iron gate",
      ]
    end
  end

  module TrapdoorBoulder
    def self.solve_puzzle
      dothistimeout "push boulder", 3, /With a heave-ho, you manage to push the boulder onto the trapdoor\.  A loud and unsettling \*\*CREAK\*\* echoes from the wooden planks\./
      loop {
        result = dothistimeout "jump trapdoor", 0.5, /As the wooden trapdoor breaks apart and the boulder drops into darkness, you manage to scramble to the edge of the crevice safely\.|That was fun\./
        if result =~ /As the wooden trapdoor breaks apart and the boulder drops into darkness, you manage to scramble to the edge of the crevice safely\.|That was fun\./
          break
        end
      }
    end

    def self.requirements
      [
        "wooden trapdoor",
        "large boulder",
      ]
    end
  end

  module BookcaseAndRug
    def self.solve_puzzle
      multifput "l in book", "lean journal", "pull rug", "pull trap"
    end

    def self.requirements
      [
        "woven rug",
        "wooden bookcase",
      ]
    end
  end

  module TallBookcase
    def self.solve_puzzle
      multifput "jump", "push button", "l behind book", "pull lever"
    end

    def self.requirements
      [
        "tall bookcase",
      ]
    end
  end

  module LavaRiver
    def self.solve_puzzle
      fput "get hatchet"
      loop {
        result = dothistimeout "cut tree", 3, /You raise a steel hatchet high over your head and with a mighty swing, you strike an ironwood tree\!|There is already a sufficient notch in the tree\./
        sleep 0.2
        if result =~ /There is already a sufficient notch in the tree\./
          break
        end
      }
      multifput "push tree", "go tree"
    end

    def self.requirements
      [
        "wide lava river",
        "ironwood tree",
        "steel hatchet",
      ]
    end
  end

  module WizardMannequin
    def self.solve_puzzle
      multifput "get robe", "put robe on man", "get hat", "put hat on man"
    end

    def self.requirements
      [
        "robe",
        "hat",
        "wizard mannequin",
      ]
    end
  end

  module WickerBox
    def self.solve_puzzle
      multifput "open box", "l in box", "get tube", "drop tube", "get sheet", \
                "shake sheet", "put sheet on box", "get tube", "play tube"
    end

    def self.requirements
      [
        "wicker box",
      ]
    end
  end

  module AldoranStones
    def self.solve_puzzle
      result = dothistimeout "look", 3, /sickly looking woman\.|sickly looking man\./
      if result =~ /sickly looking woman\./
        heal_target = "woman"
      elsif result =~ /sickly looking man\./
        heal_target = "man"
      end

      fput "look in basket"
      result = dothistimeout "inspect #{heal_target}", 10, /head\.|neck\.|face\.|broken hand\.|broken arm\.|broken leg\.|back\.|chest\.|abdomen\.|major convulsions\.|severe blood loss\.|over\-indulgence of alcohol\.|debilitating disease\.|exposure to poison\./
      if result =~ /head\.|neck\.|face\./
        multifput "get spinel from basket", "wave spinel at #{heal_target}"
      elsif result =~ /broken hand\.|broken arm\.|broken leg\./
        multifput "get sard from basket", "wave sard at #{heal_target}"
      elsif result =~ /back\.|chest\.|abdomen\./
        multifput "get sunstone from basket", "wave sunstone at #{heal_target}"
      elsif result =~ /major convulsions\./
        multifput "get tourmaline from basket", "wave tourmaline at #{heal_target}"
      elsif result =~ /severe blood loss\./
        multifput "get quartz from basket", "wave quartz at #{heal_target}"
      elsif result =~ /over\-indulgence of alcohol\./
        multifput "get amethyst from basket", "wave amethyst at #{heal_target}"
      elsif result =~ /debilitating disease\./
        multifput "get alabaster from basket", "wave alabaster at #{heal_target}"
      elsif result =~ /exposure to poison\./
        multifput "get turquoise from basket", "wave turquoise at #{heal_target}"
      else
        echo "Could not find appropriate injury"
        exit
      end
    end

    def self.requirements
      [
        "woven basket",
      ]
    end
  end

  module GnomeBloodlines
    def self.solve_puzzle
      translation = {
        "Rosengift"   => "multi-feathered",
        "Angstholm"   => "owl-feathered",
        "Basingstoke" => "peacock",
        "Wendwillow"  => "feather",
        "Felcour"     => "vulture"
      }
      fput "look mannequin"
      while (line = get)
        if line =~ /You see (?:a|an) (\w+) forest gnome mannequin\./
          multifput "get #{translation[$1]} apotl", "put apotl on mannequin"
          break
        end
      end
    end

    def self.requirements
      [
        "black vulture feather apotla",
        "tawny owl-feathered apotl",
        "multi-feathered apotla",
        "albatross feather apotl",
        "peacock feather apotl",
      ]
    end
  end

  module ElvenHouses
    def self.solve_puzzle
      fput "look in basket"
      ordered_shields = ["first", "second", "third", "fourth"]
      ordered_shields.each { |shield_num|
        sleep 0.2
        result = dothistimeout "look #{shield_num} shield", 5, /Encircled by silver, an onyx rose is set upon a field of jade\.|Encircled by silver, a silver harp is set upon a field of dark amethyst\.|Encircled by silver, a golden wyvern leaf is set upon a field of crimson\.|Encircled by silver, an aquamarine wavecrest is set upon a field of white\.|Encircled by gold, a peacock is set upon a field of deep sapphire blue\.|Encircled by gold, a broad green oak leaf is set upon a field of umber\.|Encircled by gold, a scarlet pentacle is set upon a field of grey\./
        if result =~ /Encircled by silver, an onyx rose is set upon a field of jade./
          multifput "get black cabochon", "put my cabochon in #{shield_num} shield"
        elsif result =~ /Encircled by silver, a silver harp is set upon a field of dark amethyst\./
          multifput "get purple cabochon", "put my cabochon in #{shield_num} shield"
        elsif result =~ /Encircled by silver, a golden wyvern leaf is set upon a field of crimson\./
          multifput "get red cabochon", "put my cabochon in #{shield_num} shield"
        elsif result =~ /Encircled by silver, an aquamarine wavecrest is set upon a field of white\./
          multifput "get green cabochon", "put my cabochon in #{shield_num} shield"
        elsif result =~ /Encircled by gold, a peacock is set upon a field of deep sapphire blue\./
          multifput "get white cabochon", "put my cabochon in #{shield_num} shield"
        elsif result =~ /Encircled by gold, a broad green oak leaf is set upon a field of umber\./
          multifput "get yellow cabochon", "put my cabochon in #{shield_num} shield"
        elsif result =~ /Encircled by gold, a scarlet pentacle is set upon a field of grey\./
          multifput "get orange cabochon", "put my cabochon in #{shield_num} shield"
        end
      }
    end

    def self.requirements
      [
        "wicker basket",
        "shield",
      ]
    end
  end

  module ColorSpheres
    def self.solve_puzzle
      translation = {
        "crimson"  => "red",
        "ivory"    => "white",
        "sapphire" => "blue",
        "ebony"    => "black",
        "viridian" => "green"
      }
      ordered_spheres = []

      fput "push button"
      while (line = get)
        if line =~ /An? (\w+) glow fills the area/
          ordered_spheres.push(translation[$1])
        end
        break if ordered_spheres.length == 4
      end

      ordered_spheres.each { |color| fput "touch #{color} sphere" }
    end

    def self.requirements
      [
        "metal button",
        "white sphere",
        "black sphere",
        "green sphere",
        "blue sphere",
        "red sphere",
      ]
    end
  end

  module Shops
    def self.solve_puzzle
      translation = {
        "Darbo"     => "alchemist",
        "Elantaran" => "alchemist",
        "Lomara"    => "alchemist",
        "Sorena"    => "alchemist",
        "Morvaeyn"  => "armor",
        "Itarille"  => "armor",
        "Haldrick"  => "armor",
        "Vonder"    => "fletcher",
        "Relegan"   => "fletcher",
        "Marijon"   => "herb",
        "Trill"     => "instrument",
        "Ambra"     => "instrument",
        "Hervina"   => "jewelry",
        "Murdos"    => "jewelry",
        "Galena"    => "locksmith",
        "Hihaeim"   => "locksmith",
        "Kniknak"   => "locksmith",
        "Kreldor"   => "locksmith",
      }

      sleep 0.5
      put "peer window"
      while (line = get)
        if line =~ /the faint image of (\w+) (?:in|materializes)/
          fput "point #{translation[$1]} shop"
          break
        end
      end
    end

    def self.requirements
      [
        "small window"
        # there are also shops but they change =/
      ]
    end
  end

  module Cutouts
    def self.solve_puzzle
      creature_map = {
        "warrior shade"     => "ta'vaalor",
        "ash hag"           => "teras",
        "dybbuk"            => "solhaven",
        "bat"               => "zul",
        "black urgh"        => "ta'vaalor",
        "krolvin pirate"    => "river",
        "krolvin corsair"   => "river",
        "great stag"        => "ta'illistim",
        "skayl"             => "teras",
        "wolfshade"         => "ta'vaalor",
        "forest trali"      => "ta'illistim",
        "lava golem"        => "teras",
        "brown spinner"     => "river",
        "mezic"             => "solhaven",
        "monkey"            => "icemule",
        "spectre"           => "river",
        "red tsark"         => "teras",
        "ridge orc"         => "zul",
        "striped relnak"    => "ta'vaalor",
        "luminous spectre"  => "river",
        "maw spore"         => "ta'illistim",
        "fire ogre"         => "teras",
        "mongrel hobgoblin" => "landing",
        "niirsha"           => "ta'vaalor",
        "carceris"          => "landing",
        "farlook"           => "ta'illistim",
        "three-toed tegu"   => "ta'illistim",
        "dobrem"            => "solhaven",
        "krynch"            => "zul",
        "wood wight"        => "solhaven",
        "albino scorpion"   => "zul",
        "seraceris"         => "icemule",
        "pyrothag"          => "teras",
        "spectral miner"    => "landing",
        "caribou"           => "icemule",
        "cave bear"         => "river",
        "grizzly bear"      => "icemule",
        "blood eagle"       => "river",
        "stone gargoyle"    => "landing",
        "grutik savage"     => "zul",
        "white vysan"       => "icemule",
        "giant veaba"       => "zul",
        "waern"             => "solhaven",
        "hobgoblin"         => "landing",
        "ilvarie pixie"     => "ta'vaalor",
        "greater kappa"     => "landing",
        "monastic lich"     => "landing",
        "pale crab"         => "solhaven",
        "grifflet"          => "ta'illistim",
        "seeker"            => "icemule",
      }

      fput "look in paper bag"
      cutouts_left = true
      while cutouts_left
        fput "get cutout from paper bag"
        result = dothistimeout "look in paper bag", 3, /cutout|There is nothing in the bag\./
        if result =~ /There is nothing in the bag\./
          cutouts_left = false
        end
        dothistimeout "dip my cutout in glue", 3, /until it is sufficiently covered\./
        cutout = GameObj.right_hand.name.downcase.sub " cutout", ""
        dothistimeout "put cutout on #{creature_map[cutout]} map", 3, /You pat it firmly a few times until the glue dries sufficiently\./
      end
    end

    def self.requirements
      [
        "paper bag",
        "bowl of glue",
      ]
    end
  end

  module Sheet
    def self.solve_puzzle
      fput "pull sheet"
      hide_map = {
        "lesser orc"       => "hide",
        "agresh bear"      => "claw",
        "troll chieftain"  => "fang",
        "werebear"         => "paw",
        "bear"             => "claw",
        "cyclops"          => "eye",
        "thrak"            => "hide",
        "coyote"           => "tail",
        "warthog"          => "snout",
        "vesperti"         => "claw",
        "forest trali"     => "hide",
        "martial eagle"    => "talon",
        "red bear"         => "paw",
        "puma"             => "hide",
        "cougar"           => "tail",
        "mountain snowcat" => "pelt",
        "manticore"        => "tail",
        "spotted leaper"   => "pelt",
        "thunder troll"    => "scalp",
        "shadow steed"     => "tail",
        "plains lion"      => "skin",
        "black leopard"    => "paw",
        "spectre"          => "skin",
        "lava troll"       => "eye",
        "treekin druid"    => "beard",
        "grey orc"         => "beard",
        "mist wraith"      => "eye",
        "centaur ranger"   => "hide",
        # ^ this is likely incomplete
      }
      GameObj.loot.each { |obj|
        if obj.name =~ /statue$/
          hide = hide_map[obj.name.downcase.sub " statue", ""]
          echo obj.name.downcase.sub " statue", ""
          echo hide
          put 'look'
          sleep 1
          fput "get #{hide}"
          fput "put #{hide} on ##{obj.id}"
        end
      }
    end

    def self.requirements
      [
        "white silk sheet covering a large display"
      ]
    end
  end

  module GrowFlowers
    def self.solve_puzzle
      translation = {
        "Admiration"    => "sunflower seed",
        "Bashfulness"   => "peony tuber",
        "Beauty"        => "orchid seedpod",
        "Betrayal"      => "wolfsbane bulb",
        "Cheerfulness"  => "crocus seed",
        "Danger"        => "foxglove bulb",
        "Elegance"      => "begonia seed",
        "Expectation"   => "anemone bulb",
        "Fickleness"    => "larkspur seed",
        "Forgetfulness" => "moonflower seedpod",
        "Laughter"      => "monkeyflower seed",
        "Love"          => "rose hip",
        "Presumption"   => "snapdragon seed",
        "Prophecy"      => "sirenflower seed",
        "Remembrance"   => "rosemary seed",
        "Spirituality"  => "dandelion seed-puff",
        "Strength"      => "fennel seed",
        "Untameable"    => "heather seed",
        # ""     => "alyssum seed",
        # ""     => "amaranth seed",
        # ""     => "angelica seed",
        # ""     => "bleeding seed",
        # ""     => "bluebell seed",
        # ""     => "buttercup seed",
        # ""     => "chicory seed",
        # ""     => "clover seed",
        # ""     => "daffodil bulb",
        # ""     => "daisy seed",
        # ""     => "dryad seed",
        # ""     => "feverfew seed",
        # ""     => "freesia bulb",
        # ""     => "hostas bulb",
        # ""     => "hydrangea bulb",
        # ""     => "iceblossom seed",
        # ""     => "salorisa bulb",
      }

      sleep 0.2
      fput "look in seed box"
      sleep 0.2
      put "read tapestry"
      while (line = get)
        if line =~ /~~ (\w+) ~~/
          multifput "get #{translation[$1]}", "put #{translation[$1]} in pot", "get watering can", "pour can on pot"
          break
        end
      end
    end

    def self.requirements
      [
        "watering can",
        "clay pot",
        "seed box",
        "woven tapestry",
      ]
    end
  end

  module ProfessionalGoblets
    def self.solve_puzzle
      translation = {
        "rangers"   => "green goblet",
        "rogues"    => "dark goblet",
        "bards"     => "blue goblet",
        "paladins"  => "blue goblet",
        "wizards"   => "clear goblet",
        "clerics"   => "silver goblet",
        "warriors"  => "purple goblet",
        "empaths"   => "silver goblet",
        "sorcerers" => "black goblet",
        # ""     => "red goblet",
      }

      sleep 0.2
      fput "look on mahogany bar"
      sleep 0.2
      put "read bar"
      while (line = get)
        if line =~ /~\*~ I am the goblet of (\w+)\. ~\*~/
          profession = $1
          if profession =~ /paladins|bards/
            result = dothistimeout "get #{translation[profession]} from mahogany bar", 3, /elegant blue cut\-glass goblet|elegant blue crystal goblet/
            if (result =~ /elegant blue cut\-glass goblet/) && (profession =~ /paladins/)
              fput "drink my goblet"
            elsif (result =~ /elegant blue crystal goblet/) && (profession =~ /bards/)
              fput "drink my goblet"
            else
              multifput "put my goblet on bar", "get second #{translation[profession]} from mahogany bar", "drink my goblet"
            end
          else
            multifput "get #{translation[profession]} from mahogany bar", "drink my goblet"
          end
          break
        end
      end
    end

    def self.requirements
      [
        "antique mahogany bar",
      ]
    end
  end

  Puzzle = Struct.new(:name, :klass, :description) do
    def solve_puzzle
      klass.solve_puzzle
    end

    def requirements
      klass.requirements
    end
  end

  PUZZLES = [
    Puzzle.new("statue",      Statue,             "move some statues around on an altar"),
    Puzzle.new("mosaic",      Mosaic,             "find the right gem and symbol to put into the mosaic"),
    Puzzle.new("crystal",     CrystalPainting,    "choose the correct damage type to destroy monster paintings"),
    Puzzle.new("stars",       ConstellationStars, "select the correct constellation to place in the night sky"),
    Puzzle.new("ghost",       Ghost,               "use a wand to do stuff to a ghost"),
    Puzzle.new("scramble",    Scramble,            "guess the word from scrambled letters"),
    Puzzle.new("symbol",      SymbolPainting,      "paint an Arkati symbol the correct colors and assemble"),
    Puzzle.new("makecandle",  MakeCandle,          "use locally-sourced organic ingredients to make an artisanal candle"),
    Puzzle.new("lightcandle", LightCandle,         "light the correct candle"),
    Puzzle.new("levers",      Levers,              "pull levers in the correct order"),
    Puzzle.new("irondoor",    IronDoor,            "unlock an iron door with help from a boulder"),
    Puzzle.new("trapdoor",    TrapdoorBoulder,     "get through a trapdoor by moving a boulder"),
    Puzzle.new("boxsphere",   BoxSphere,           "manipulate a metal box and a glowing sphere"),
    Puzzle.new("colorsphere", ColorSpheres,        "push a button and touch some sphere of various colors"),
    Puzzle.new("bookcase1",   BookcaseAndRug,      "lean against a book in a bookcase, as one does"),
    Puzzle.new("bookcase2",   TallBookcase,        "there's a lever behind a book"),
    Puzzle.new("lavariver",   LavaRiver,           "the floor is lava"),
    Puzzle.new("wizard",      WizardMannequin,     "I put on my robe and wizard hat"),
    Puzzle.new("wicker",      WickerBox,           "there's a tube in there that you can play"),
    Puzzle.new("aldoran",     AldoranStones,       "use the healing stones to fix the sick person"),
    Puzzle.new("gnomes",      GnomeBloodlines,     "pick out the apotl or apotla for the bloodline"),
    Puzzle.new("elves",       ElvenHouses,         "place the correct stone in house shield"),
    Puzzle.new("shops",       Shops,               "point to the correct shop"),
    Puzzle.new("cutouts",     Cutouts,             "put creature cutouts on the correct maps"),
    Puzzle.new("sheet",       Sheet,               "put skins on the correct statues"),
    Puzzle.new("flowers",     GrowFlowers,         "plant and water the correct flower"),
    Puzzle.new("professions", ProfessionalGoblets, "drink from the profession corresponding goblet"),
  ]

  def self.determine_puzzle
    PUZZLES.find do |puzzle|
      puzzle.requirements.all? do |requirement|
        GameObj.loot.any? do |loot|
          loot.noun == requirement || loot.name == requirement
        end
      end
    end
  end

  def self.activate_puzzle_triggers
    [
      "white tile",
      "tile",
      "dark ceiling",
      "dim crystal",
    ].find do |trigger|
      fput "look #{trigger}" if GameObj.loot.find { |i| i.name == trigger }
    end
  end

  def self.puzzle_here?
    activate_puzzle_triggers
    determine_puzzle
  end
end

print_usage_info = proc do
  respond
  respond "  Rings of Lumnis Puzzle Solver"
  respond
  respond "  Usage:"
  respond
  respond "    #{$clean_lich_char}#{script.name} <puzzle name>"
  respond
  respond "  where <puzzle name> is one of the following:"
  respond
  respond "    %-12s %s" % ["auto", "automatically solve puzzles when they appear (default behavior)"]
  respond
  RofL::PUZZLES.sort_by(&:name).each do |puzzle|
    respond "    %-12s %s" % [puzzle.name, puzzle.description]
  end
  respond
end

if defined?(Lich)
  case script.vars[1]
  when /^help/
    print_usage_info.call
    exit
  when /^auto/, nil
    loop do
      wait_until("[#{script.name}] waiting for next puzzle...\n") do
        RofL.puzzle_here?
      end

      puzzle = RofL.determine_puzzle
      respond
      respond "  Looks like a #{puzzle.name} puzzle, attempting to solve it."

      empty_hands
      puzzle.solve_puzzle
      clear

      # Assume puzzle has been solved and you are now answering a question
      5.times do
        result = matchtimeout 10, /"I believe this is yours," and places/
        unless result.is_a?(String) && result =~ /"I believe this is yours," and places/
          if Script.running?('rofl-questions') && !Script.paused?('rofl-questions')
            respond
            respond "ERROR: Something went wrong with trying to solve the puzzle."
            respond "  Please report this error to the Elanthia-Online group for help"
            respond
            exit
          elsif Script.paused?('rofl-questions')
            respond
            respond "ERROR: You have rofl-questions paused, attempting to unpause now and repeat!"
            Script.unpause('rofl-questions')
            put('repeat')
          else
            respond
            respond "ERROR: You don't have rofl-questions running, this is required or answer the question manually!"
            respond "  Attempting to start rofl-questions now since question was not answered manually."
            Script.start('rofl-questions') if Script.exists?('rofl-questions') && !Script.running?('rofl-questions')
            sleep(1)
            if Script.running?('rofl-questions')
              put('repeat')
            else
              respond "  Couldn't start rofl-questions, and you didn't answer question manually, something is wrong!"
              respond "  Report this to Elanthia-Online group for help"
              exit
            end
          end
        else
          break
        end
      end

      fill_hands
      fput "look"
    end
  when /^stat/
    RofL::Statue.solve_puzzle
  when /^mosaic/, /^mosiac/, /^gem/
    RofL::Mosaic.solve_puzzle
  when /^cry/
    RofL::CrystalPainting.solve_puzzle
  when /^star/
    RofL::ConstellationStars.solve_puzzle
  when /^scram/
    RofL::Scramble.solve_puzzle
  when /^ghost/, /^coffin/
    RofL::Ghost.solve_puzzle
  when /^paint/, /^symbol/, /^tile/
    RofL::SymbolPainting.solve_puzzle
  when /^makec/
    RofL::MakeCandle.solve_puzzle
  when /^light/
    RofL::LightCandle.solve_puzzle
  when /^lever/
    RofL::Levers.solve_puzzle
  when /^iron/
    RofL::IronDoor.solve_puzzle
  when /^trap/
    RofL::TrapdoorBoulder.solve_puzzle
  when /^box/
    RofL::BoxSphere.solve_puzzle
  when /^color/
    RofL::ColorSpheres.solve_puzzle
  when /case1/
    RofL::BookcaseAndRug.solve_puzzle
  when /case2/
    RofL::TallBookcase.solve_puzzle
  when /^lava/
    RofL::LavaRiver.solve_puzzle
  when /^wizard/
    RofL::WizardMannequin.solve_puzzle
  when /^wicker/
    RofL::WickerBox.solve_puzzle
  when /^aldoran/
    RofL::AldoranStones.solve_puzzle
  when /^gnomes/
    RofL::GnomeBloodlines.solve_puzzle
  when /^elves/
    RofL::ElvenHouses.solve_puzzle
  when /^shops/
    RofL::Shops.solve_puzzle
  when /^cutouts/
    RofL::Cutouts.solve_puzzle
  when /^sheet/
    RofL::Sheet.solve_puzzle
  when /^flowers/
    RofL::GrowFlowers.solve_puzzle
  when /^professions/
    RofL::ProfessionalGoblets.solve_puzzle
  else
    respond
    respond "  [#{script.name}] didn't recognize \"#{script.vars[1]}\" as a valid puzzle"
    print_usage_info.call
    exit
  end
end
