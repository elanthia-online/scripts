=begin
  This script contributes to the share-able dyes list.

  See the help info for options and configurations.

        author: elanthia-online
  contributors: Dissonance
          game: Gemstone
          tags: dyes, dye-n-ator, alchemy, cobbling, crafting
       version: 1.0.2

  Changelog:
  v1.0.2 - 2025-05-12
    - updated the script to use the new Google Sheets URI
  v1.0.1 - 2025-05-09
    - extended timeout on sending to Google Sheets to 120 seconds
  v1.0.0 - 2025-04-20
    - created the script to find dyes in dye-n-ator, containers, and hands and share them with the community
=end

module DyeTied
  require 'json'
  require 'terminal-table'
  require 'net/http'

  @dyes = []

  @debug = CharSettings['debug'] # Set to true for debug messages
  @debug ||= false

  @testing_mode = CharSettings['testing_mode'] # Set to true for testing mode
  @testing_mode ||= false

  def self.get_dyes_command_dye_n_ator(item_name)
    Lich::Messaging.msg("info", "get_dyes_command_dye_n_ator(#{item_name}).") if @debug
    results = Lich::Util.issue_command(
      "gaze #{item_name}",
      /Several cylinders are filled with dye, the glass displaying each hue in turn and reminding you that you have the following colors stored within:/,
      :silent => true, :quiet => true
    )

    return results
  end

  def self.get_dyes_list_dye_a_nator(item_name)
    Lich::Messaging.msg("info", "get_dyes_list_dye_a_nator(#{item_name}).") if @debug

    @dyes.clear

    results = get_dyes_command_dye_n_ator(item_name)

    parsed_item_name = item_name # fallback in case the gaze line doesn't match

    results.each do |result|
      if result =~ /You gaze at (?:an|a) <a [^>]*>([^<]+)<\/a>/
        parsed_item_name = $1.strip
      end

      if result =~ /\d+\.\s+(infinite doses|[0-9]+ doses) of (cobbling|alchemy) (.+?) dye/i
        amount = $1.strip
        type = $2.strip
        color = $3.strip
        @dyes << {
          name: "#{color} dye",
          amount: amount,
          type: type,
          item: parsed_item_name,
          character: Char.name
        }
      end
    end
  end

  def self.generate_json
    Lich::Messaging.msg("info", "generate_json") if @debug
    unless @dyes.empty?
      JSON.pretty_generate(@dyes)
    else
      Lich::Messaging.msg("error", "No dyes found.")
      return nil
    end
  end

  def self.get_dyes_list_single(hand)
    Lich::Messaging.msg("info", "get_dyes_list_single(#{hand}).") if @debug

    @dyes.clear # Clear previous results if any

    dye_id = nil
    dye_name = nil

    if hand == "left"
      if GameObj.left_hand.name =~ /dye$/i
        dye_id = GameObj.left_hand.id
      end
    elsif hand == "right"
      if GameObj.right_hand.name =~ /dye$/i
        dye_id = GameObj.right_hand.id
      end
    else
      Lich::Messaging.msg("error", "Invalid hand specified. Use 'left' or 'right'.")
      exit
    end

    if dye_id.nil?
      Lich::Messaging.msg("error", "No dye found in the specified hand.")
      exit
    end

    type_amount = determine_type_and_amount({ :id => dye_id, :name => dye_name }, nil, false)

    @dyes << {
      name: type_amount[:name] + " dye",
      amount: type_amount[:uses],
      type: type_amount[:type],
      item: "n/a",
      character: Char.name
    }
  end

  def self.get_dyes_list_container(item_name)
    Lich::Messaging.msg("info", "get_dyes_list_container(#{item_name}).") if @debug

    @dyes.clear

    container_id = nil

    # Try left and right hands
    if GameObj.left_hand && GameObj.left_hand.name =~ /#{Regexp.escape(item_name)}/i
      container_id = GameObj.left_hand.id
    elsif GameObj.right_hand && GameObj.right_hand.name =~ /#{Regexp.escape(item_name)}/i
      container_id = GameObj.right_hand.id
    else
      # Look in inventory
      GameObj.inv.each do |inv|
        if inv.name =~ /#{Regexp.escape(item_name)}/i
          container_id = inv.id
          break # Stop looking after we find the first match
        end
      end
    end

    if container_id
      found_dyes = process_container(container_id)
      Lich::Messaging.msg("info", found_dyes) if @debug
    else
      Lich::Messaging.msg("error", "Could not find a container matching '#{item_name}'.")
      exit
    end

    # finish processing now
    found_dyes.each do |result|
      name = result[:name]
      type_amount = determine_type_and_amount(result, container_id)

      @dyes << {
        name: name,
        amount: type_amount[:uses],
        type: type_amount[:type],
        item: item_name,
        character: Char.name
      }
    end
  end

  def self.get_analyze_result(result, container_id, get_item = true)
    Lich::Messaging.msg("info", "get_analyze_result(#{result})  And get_item = #{get_item} from #{container_id}.") if @debug
    emptied_hands = false

    Lich::Messaging.msg("info", "get_analyze_result: checking hands.  Looking for: #{result[:id]}.  get_item = #{get_item} left_hand.id = #{GameObj.left_hand.id} right_hand.id = #{GameObj.right_hand.id}") if @debug
    # if we want to get the tiems, and we're not holding it, and empty hands
    if get_item && !(GameObj.left_hand.id == result[:id] || GameObj.right_hand.id == result[:id])
      Lich::Messaging.msg("info", "get_analyze_result: emptying hands") if @debug
      emptied_hands = true
      empty_hands
    end
    fput("get ##{result[:id]}") if get_item
    analyze_result = Lich::Util.issue_command("analyze ##{result[:id]}", /You analyze .*? and sense that the creator has provided the following information:/)
    fput("_drag ##{result[:id]} ##{container_id}") if get_item

    if emptied_hands
      Lich::Messaging.msg("info", "get_analyze_result: filling hands") if @debug
      fill_hands
    end

    return analyze_result
  end

  def self.determine_type_and_amount(result, container_id, get_item = true)
    dye_type = nil
    uses = nil
    name = nil

    analyze_result = get_analyze_result(result, container_id, get_item)
    echo analyze_result if @debug

    analyze_result.each_with_index do |line, _idx|
      clean_line = line.gsub(/<[^>]*>/, '').strip
      Lich::Messaging.msg("info", "analyze_result clean line: #{clean_line}") if @debug

      # Case 1: cobbling/alchemy dye
      if (match = clean_line.match(/(?:A .*? of )?(?<full_name>[\w\s\-']+?) dye is (?<type>[\w\s']+?) dye.*?It has (?<uses>\w+) uses?/i))
        name = clean_line.match(/dye items\s+([\w\s\-']+)/i)&.captures&.first&.strip || match[:full_name].strip
        dye_type = match[:type].strip
        uses_raw = match[:uses].strip

        uses = (uses_raw.downcase == "one") ? "1" : uses_raw

        Lich::Messaging.msg("info", "Matched standard dye: #{name}, Type: #{dye_type}, Uses: #{uses}") if @debug

      # Case 2: Dyer's Tent dye
      elsif (match = clean_line.match(/This is (?<type>[\w\s']+?) dye that will dye items (?<color>[\w\s\-']+?) by a clerk/i))
        dye_type = match[:type].strip
        name = match[:color].strip
        uses = "1"
        Lich::Messaging.msg("info", "Matched inline Dyer's Tent dye: #{name}, Type: #{dye_type}, Uses: #{uses}") if @debug
      end
    end

    Lich::Messaging.msg("info", "Dye type: #{dye_type}, Uses: #{uses}, Name: #{name}") if @debug
    if dye_type && uses && name
      return { type: dye_type, uses: uses, name: name }
    else
      Lich::Messaging.msg("error", "Could not determine dye type or number of uses.")
      exit
    end
  end

  def self.process_container(container_id)
    found = []
    if (valid_container = GameObj.containers[container_id])
      valid_container.each do |item|
        if item.name =~ /dye$/i
          found << {
            name: item.name,
            id: item.id.to_i
          }
        end
      end
    end
    return found
  end

  def self.display_results_table
    Lich::Messaging.msg("info", "display_results_table") if @debug

    i = 1 # counter for the table row numbers

    table = Terminal::Table.new do |t|
      t.title = "Dyes Found"
      t.headings = ['No', 'Item', 'Dye Name', 'Amount', 'Type', 'Character']
      @dyes.each do |dye|
        t.add_row [i, dye[:item], dye[:name], dye[:amount], dye[:type], dye[:character]]
        i += 1
      end
    end

    respond(table)
  end

  def self.display_help
    Lich::Messaging.mono(Lich::Messaging.xml_encode("#{Script.current.name} Help:"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("Usage: #{$lich_char}#{Script.current.name} --dyenator <item_name>       - Search for dyes in a dye-n-ator"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("       #{$lich_char}#{Script.current.name} --hand <hand>                - Record dye in <right/left> hand"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("       #{$lich_char}#{Script.current.name} --container <item_name>      - Record dyes in <container>"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("       #{$lich_char}#{Script.current.name} --help                       - Display this help message"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("       #{$lich_char}#{Script.current.name} --debug                      - Toggle debug messages"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("       #{$lich_char}#{Script.current.name} --testing-mode               - Toggle testing mode.  This will not send data to the sheet."))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("       #{$lich_char}#{Script.current.name} --reset-warning              - Reset the warning message so it will show again next run"))
  end

  def self.send_to_sheet
    Lich::Messaging.msg("info", "send_to_sheet") if @debug
    Lich::Messaging.msg("info", "Sending data to Google Sheets.  This could take a minute or two for a full dye-n-ator, please be patient.")

    json_to_send = generate_json

    if json_to_send.nil?
      Lich::Messaging.msg("error", "No data to send to Google Sheets.")
      return
    else
      uri = URI("https://script.google.com/macros/s/AKfycbw3IBe1Pdko1QBqfmUDrHXj3UtHtRSyQspBtaaMZDjhLqY40K4QK-uSAt3p6Nz5Vv5u/exec")

      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true
      http.read_timeout = 120 # seconds
      http.open_timeout = 15  # fail fast if the server is down

      req = Net::HTTP::Post.new(uri.request_uri)
      req['Content-Type'] = 'application/json'
      req.body = json_to_send

      res = http.request(req)

      # Log the response
      Lich::Messaging.msg("info", "GoogleSheets responded #{res.code}: #{res.body}") if @debug
      Lich::Messaging.msg("info", "Sending to Sheet completed.  You can visit the sheet, here:")
      Lich::Messaging.msg("info", "https://docs.google.com/spreadsheets/d/10n664FdTAocGDjPloWpyVXdDMAFUm87qkBqhVSn9ak8/edit?usp=sharing")
      res.code.to_i
    end
  rescue => e
    # catch network / JSON errors
    echo "!! send_to_sheet error: #{e.class}: #{e.message}"
  end

  def self.display_warning
    @warning_seen = CharSettings['dye_tied_warning_continued']
    @warning_seen ||= false

    return if @warning_seen

    Lich::Messaging.msg("warn", "***************")
    Lich::Messaging.msg("warn", "*** WARNING ***")
    Lich::Messaging.msg("warn", "***************")
    Lich::Messaging.msg("warn", " ")
    Lich::Messaging.msg("warn", "This script will upload the data it collects to a Google Sheet.")
    Lich::Messaging.msg("warn", "This data will be publicly available to anyone with the link.")
    Lich::Messaging.msg("warn", "The purpose of collecting this data is to help the community to share dyes.")
    Lich::Messaging.msg("warn", " ")
    Lich::Messaging.msg("warn", "You can view the sheet here:")
    Lich::Messaging.msg("warn", "https://docs.google.com/spreadsheets/d/10n664FdTAocGDjPloWpyVXdDMAFUm87qkBqhVSn9ak8/edit?usp=sharing")
    Lich::Messaging.msg("warn", " ")
    Lich::Messaging.msg("warn", " ")
    Lich::Messaging.msg("warn", "Please ensure you are comfortable with this before proceeding.")
    Lich::Messaging.msg("warn", "If you continue, you agree to share this data publicly.")
    Lich::Messaging.msg("warn", " ")
    Lich::Messaging.msg("warn", "** If you do not agree, please kill the script now. (#{$lich_char}kill #{Script.current.name})**")
    Lich::Messaging.msg("warn", " ")
    Lich::Messaging.msg("warn", "Otherwise, unpause the script to continue.")
    Lich::Messaging.msg("warn", "You will not be asked again on this character after continuing.")

    sleep(2)
    Script.current.pause()

    sleep(2)

    CharSettings['dye_tied_warning_continued'] = true
    Lich::Messaging.msg("info", "You have agreed to share this data publicly.  Thank you.")

    sleep(5)
  end
end

DyeTied.display_warning

unless Script.current.vars[0].nil?
  case Script.current.vars[0].downcase
  when /--help/
    DyeTied.display_help
  when /--debug/
    CharSettings['debug'] = @debug = !@debug
    Lich::Messaging.msg("info", "Debug mode toggled to #{@debug}")
  when /--testing-mode/
    CharSettings['testing_mode'] = @testing_mode = !@testing_mode
    Lich::Messaging.msg("info", "Testing mode toggled to #{@testing_mode}")
  when /--reset-warning/
    CharSettings['dye_tied_warning_continued'] = false
    Lich::Messaging.msg("info", "Warning message reset.  You will be prompted again next time you run the script.")
  when /--hand/
    Lich::Messaging.msg("info", "#{Script.current.name} processing a single dye: #{Script.current.vars[2..-1].join(" ")}.")
    DyeTied.get_dyes_list_single(Script.current.vars[2])

    # echo DyeTied.generate_json
    DyeTied.display_results_table

    DyeTied.send_to_sheet unless @testing_mode
    Lich::Messaging.msg("warn", "DyeTied is in testing mode, data not transmitted.") if @testing_mode
  when /--dyenator|--dye-n-ator/
    Lich::Messaging.msg("info", "#{Script.current.name} is looking for dyes in your #{Script.current.vars[2..-1].join(" ")}.")

    item_name = Script.current.vars[2..-1].join(" ")
    DyeTied.get_dyes_list_dye_a_nator(item_name)

    # echo DyeTied.generate_json
    DyeTied.display_results_table

    DyeTied.send_to_sheet unless @testing_mode
    Lich::Messaging.msg("warn", "DyeTied is in testing mode, data not transmitted.") if @testing_mode
  when /--container/
    Lich::Messaging.msg("info", "#{Script.current.name} is looking for dyes in your #{Script.current.vars[2..-1].join(" ")}.")

    item_name = Script.current.vars[2..-1].join(" ")
    DyeTied.get_dyes_list_container(item_name)

    # echo DyeTied.generate_json
    DyeTied.display_results_table

    DyeTied.send_to_sheet unless @testing_mode
    Lich::Messaging.msg("warn", "DyeTied is in testing mode, data not transmitted.") if @testing_mode
  else
    Lich::Messaging.msg("info", "Unknown command. Use --help for usage information.")
  end
else
  DyeTied.display_help
end
