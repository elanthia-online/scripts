=begin
  CombatLog.lic is a damage meter.
  
  IN ALPHA STAGE. IN ALPHA STAGE. IN ALPHA STAGE. IN ALPHA STAGE. IN ALPHA STAGE.
  
        author: Nisugi
		  game: Gemstone
		  tags: hunting, data collection
	   version: 1.1.1
	   
  Version Control:
    Major_chage.feature_addition.bugfix
  v1.0.0 alpha
    Initial creation.
	Supports fire, barrage, volley, spikethorn, tangleweed, feline companions.
	Tracks damage and flares for each attack. Reports on death.
	Make an alias ;alias add dps = CombatLog.report_kill('\?')
	then just 'dps <target_id>' to report on them.
  v1.1.0 alpha
    Rewrites on rewrites. Thing we're getting to a good place for modularity.
    Added some breeze flare messaging, greater rhimar flares, dislodge, pindown, nature's fury
  v1.1.1
    Update for Ruby v3 compatibility	
	
  Need to do:
    EVERYTHING
	Integrate all attacks/flares/dot type damage
	Integrate a proper report.
	Need ;logxml of various combat types to parse.
	
=end


module CombatLog
  require 'yaml'
  status_tags
  @debug = false
  @debug_parse = false
  
  def self.initialize
    @attacks_regex = Regexp.union(
	  /You(?: take aim and)? fire .*? at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/,
	  /You(?: take aim and)? fire your <a exist="\d+" noun="\w+">[^<]+<\/a> at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> but the shot flies wide of the target/,
	  /Without bothering to aim, you loose a chaotic hail of arrows to pin down your foes/,
	  /You rush toward <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> with an open hand, attempting to dislodge/,
	  /Dozens of long thorns suddenly grow out from the ground underneath <pushBold\/>a <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/,
	)
    @ATTACKS = {
	  /You(?: take aim and)? fire .*? at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/ => 'fire',
	  /You(?: take aim and)? fire your <a exist="\d+" noun="\w+">[^<]+<\/a> at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> but the shot flies wide of the target/ => 'fire_miss',
	  /Without bothering to aim, you loose a chaotic hail of arrows to pin down your foes/ => 'pindown',
	  /You rush toward <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> with an open hand, attempting to dislodge/ => 'dislodge',
	  /Dozens of long thorns suddenly grow out from the ground underneath <pushBold\/>a <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/ => 'spikethorn'
	}

	@death_cry_regex = Regexp.union(
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> lets out a final scream and goes still/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> falls back into a heap and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> screams up at the heavens, then collapses and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> screams one last time and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> screeches one last time and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> crumples to the ground and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> falls to the ground and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> rolls over and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> lets out a final scream and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> lets out a final agonized squeal and dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> lets out a final agonized squeal and goes still/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> tenses in agony as <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> begins to dissolve from the bottom up/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> tail twitches feebly as <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> dies/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> collapses, gurgling once with a wrathful look on <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> face before expiring/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> gurgles once and goes still, a wrathful look on <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> face/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> face begins to hideously contort as ribbons of essence begin to wend away from <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> and into nothingness/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> tenses in agony as <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> begins to dissolve from the bottom up/,
	/The(?: spectral form of the)? <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> struggles to utter a final prayer, then goes still/
	)

	@rot_dot_regex = Regexp.union(
 	  /Darkened sores form all over <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, leaking ooze leaks from the fresh wounds/,
	  /<pushBold\/>\w <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> skin cracks open and oozes an inky black ichor/,
	  /Rotting ulcers spread across <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> body/,
	  /Abscesses drain a bloody yellow fluid across <pushBold\/>a <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> body/,
	  /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> loses <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> balance/,
	  /Skin peels off <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> body, exposing rotting flesh/,
	  /A fierce rash spreads across <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> body/,
	  /Rotting skin falls from <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> body in large flakes/,
	  /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> breathing appears to be labored/,
	  /Blisters form on <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> skin and ooze a putrid dark yellow fluid/,
	  /Small pieces of flesh rot off <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> body/
	)
	@ROT_DOT = {
	  /Darkened sores form all over <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>, leaking ooze leaks from the fresh wounds/ => 'rot_dot',
	  /<pushBold\/>\w <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> skin cracks open and oozes an inky black ichor/ => 'rot_dot',
	  /Rotting ulcers spread across <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> body/ => 'rot_dot',
	  /Abscesses drain a bloody yellow fluid across <pushBold\/>a <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> body/ => 'rot_dot',
	  /<pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> loses <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> balance/ => 'rot_dot',
	  /Skin peels off <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> body, exposing rotting flesh/ => 'rot_dot',
	  /A fierce rash spreads across <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> body/ => 'rot_dot',
	  /Rotting skin falls from <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> body in large flakes/ => 'rot_dot',
	  /<pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> breathing appears to be labored/ => 'rot_dot',
	  /Blisters form on <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> skin and ooze a putrid dark yellow fluid/ => 'rot_dot',
	  /Small pieces of flesh rot off <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> body/ => 'rot_dot'
	}
 
  #Flare tracking. _regex and hash. New flares need to be added to both.
    @flares_regex = Regexp.union(
	  #Flares
	  /Cords of plasma-veined grey mist seep from your <a exist="\d+" noun="\w+">[^<]+<\/a> and entangle <pushBold\/>the <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, causing <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> to tremble violently/,
	  /A wave of wicked power surges forth from your <a exist="\d+" noun="\w+">[^<]+<\/a> and fills <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> with terror, <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> form trembling with unmitigated fear/,
	  /A sickly green aura radiates from \w+ <a exist="\d+" noun="\w+">[^<]+<\/a> .*? and seeps into <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> wounds/,
	  /Your <a exist="\d+" noun="\w+">[^<]+<\/a> bursts alight with leaping tongues of holy fire/,
	  /A thin stream of icy cold liquid shoots forth from your <a exist="\d+" noun="\w+">[^<]+<\/a>, water droplets freezing instantly into razor sharp slivers as they sail toward <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> and maim <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> on impact/,
	  /From somewhere nearby, a snowball comes whizzing towards <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, splattering as it connects/,
	  /Your <a exist="\d+" noun="\w+">[^<]+<\/a> emits a fist-sized ball of lightning-suffused flames/,
	  /(?:(?:An|The) earthy, sweet aroma (?:wafts from |clings to |clinging to )|Soot brown specks of leaf mold trail in the wake of )<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>(?: in a murky haze| grows more pervasive| movements, distorted by a murky haze| in a murky haze, accompanied by soot brown specks of leaf mold)/,
	  /(?:A gust of wind shoves )?<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>(?: back| is buffeted by a (?:burst|sudden gust) of wind(?: and pushed back)?)/,
	  #Buffs
	  /Vital energy infuses you, hastening your arcane reflexes/,
	  /The vitality of nature bestows you with a burst of strength/,
	  /A favorable tailwind springs up behind you|The wind turns in your favor|You shift position, taking advantage of a favorable tailwind/,
	  #Ensorcell
	  /Necrotic energy from your <a exist="\d+" noun="\w+">[^<]+<\/a> overflows into you/,
	  /You feel healed/,
	  /You feel empowered/,
	  /You feel rejuvenated/,
	  /You feel reinvigorated/,
	  /You feel energized/,
	  /You feel the unnatural surge of necrotic power wane away/
	)
	@FLARES = {
	  #Flares
	  /Cords of plasma-veined grey mist seep from your <a exist="\d+" noun="\w+">[^<]+<\/a> and entangle <pushBold\/>the <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, causing <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> to tremble violently/ => 'ghezyte_flare',
	  /A wave of wicked power surges forth from your <a exist="\d+" noun="\w+">[^<]+<\/a> and fills <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> with terror, <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> form trembling with unmitigated fear/ => 'terror_flare',
	  /A sickly green aura radiates from a <a exist="\d+" noun="\w+">[^<]+<\/a> .*? and seeps into <pushBold\/>an? <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> wounds/ => 'rot_flare',
	  /Your <a exist="\d+" noun="\w+">[^<]+<\/a> bursts alight with leaping tongues of holy fire/ => 'holy_fire_flare',
	  /From somewhere nearby, a snowball comes whizzing towards <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, splattering as it connects/ => 'greater_rhimar_double_flare',
	  /A thin stream of icy cold liquid shoots forth from your <a exist="\d+" noun="\w+">[^<]+<\/a>, water droplets freezing instantly into razor sharp slivers as they sail toward <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> and maim <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> on impact/ => 'greater_rhimar_flare',
	  /Your <a exist="\d+" noun="\w+">[^<]+<\/a> emits a fist-sized ball of lightning-suffused flames/ => 'firewheel_flare',
	  /(?:(?:An|The) earthy, sweet aroma (?:wafts from |clings to |clinging to )|Soot brown specks of leaf mold trail in the wake of )<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>(?: in a murky haze| grows more pervasive| movements, distorted by a murky haze| in a murky haze, accompanied by soot brown specks of leaf mold)/ => 'wild_entropy_flare',
	  /(?:A gust of wind shoves )?<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>(?: back| is buffeted by a (?:burst|sudden gust) of wind(?: and pushed back)?)/ => 'breeze_flare',
	  #Buffs
	  /Vital energy infuses you, hastening your arcane reflexes/ => 'arcane_reflex',
	  /The vitality of nature bestows you with a burst of strength/ => 'physical_prowess',
	  /A favorable tailwind springs up behind you|The wind turns in your favor|You shift position, taking advantage of a favorable tailwind/ => 'tailwind',
	  #Ensorcell
	  /Necrotic energy from your <a exist="\d+" noun="(\w+)">[^<]+<\/a> overflows into you/ => 'ensorcell_flare',
	  /You feel healed/ => 'ensorcell_heal',
	  /You feel empowered/ => 'ensorcell_mana',
	  /You feel rejuvenated/ => 'ensorcell_spirit',
	  /You feel reinvigorated/ => 'ensorcell_stamina',
	  /You feel energized/ => 'ensorcell_acuity',
	  /You feel the unnatural surge of necrotic power wane away/ => 'ensorcell_acuity_consumed'
	}

  #AOE damage regex. _regex is to match attacks, the corresponding hashes are used to pull targets/attack name.
  #New attacks need to be added to both the regex and hash.
	@aoe_attacks_regex = Regexp.union(
	  /You close your eyes in a moment of intense concentration, channeling the pure natural power of your surroundings/,
	  /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above/
	)
	@AOE_ATTACKS = {
	  /You close your eyes in a moment of intense concentration, channeling the pure natural power of your surroundings/ => 'natures_fury',
	  /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above/ => 'volley'
	}
	@aoe_hits_regex = Regexp.union(
	  /(?:The|<pushBold\/>\w+) <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is struck by a falling arrow/,
	  /An arrow (?:pierces|skewers) <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/,
	  /(?:The|<pushBold\/>\w+) <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is transfixed by an arrow\'s descent/,
	  /An arrow finds its mark!  <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is hit/,
	  /The surroundings advance upon <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> with relentless fury/,
	)
	@AOE_HITS = {
	  /(?:The|<pushBold\/>\w+) <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is struck by a falling arrow/ => 'volley',
	  /An arrow (?:pierces|skewers) <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/ => 'volley',
	  /(?:The|<pushBold\/>\w+) <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is transfixed by an arrow\'s descent/ => 'volley',
	  /An arrow finds its mark!  <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is hit/ => 'volley',
	  /The surroundings advance upon <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> with relentless fury/ => 'natures_fury'

	}
	
    @miss_regex = Regexp.union(
	  /You stumble wide of <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>, nowhere near your target/,
	  /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above/
	)
	
	@companion_attacks_regex = Regexp.union(
	  /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> pounces on <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/>/,
	  /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> charges forward and slashes <pushBold\/><a exist="\d+" noun="\w+">her<\/a><popBold\/> claws at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> faster than <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> can react/,  	  /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> lunges forward and rakes <pushBold\/><a exist="\d+" noun="\w+">her<\/a><popBold\/> talons across <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> faster than <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> can react/
	)
	@COMPANION_ATTACKS = {
	  /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> pounces on <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/ => 'companion',
	  /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> charges forward and slashes <pushBold\/><a exist="\d+" noun="\w+">her<\/a><popBold\/> claws at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> faster than <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> can react/ => 'companion',
  	  /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> lunges forward and rakes <pushBold\/><a exist="\d+" noun="\w+">her<\/a><popBold\/> talons across <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> faster than <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> can react/ => 'companion'
	}
  end
	
  def self.load
    @file = "combat_log_#{Time.now.year}_#{Time.now.month}_#{Time.now.day}"
    Dir.mkdir("#{$data_dir}#{XMLData.game}") unless File.exist?("#{$data_dir}#{XMLData.game}")
    Dir.mkdir("#{$data_dir}#{XMLData.game}/#{Char.name}") unless File.exist?("#{$data_dir}#{XMLData.game}/#{Char.name}")
    @filename = "#{$data_dir}#{XMLData.game}/#{Char.name}/#{@file}.yaml"
	if !File.exist?("#{@filename}")
      @combat_log = Hash.new { |h,k| h[k] = {} }
      File.write(@filename,@combat_log.to_yaml)
	else
	  @combat_log = YAML.load_file(@filename)
	end
	@combat_log[nil] = nil
	before_dying { File.write(@filename,@combat_log.to_yaml) }
  end
  
  def self.save
	File.write(@filename,@combat_log.to_yaml)
  end
  
  def self.report_kill(id)
    echo "report_kill(#{$1})" if debug
	time_of_combat = @combat_log[id]['death_time'].to_f + @combat_log[id]['round_time'].to_f - @combat_log[id]['start_time'].to_f
	damage = nil
	@combat_log[id].each { |k,v|
	  case k
	  when /fire_damage/
	    damage += @combat_log[id]['fire_damage'].to_i
	  when /spikethorn_damage/
	    damage += @combat_log[id]['spikethorn_damage'].to_i
	  when /volley_damage/
	    damage += @combat_log[id]['volley_damage'].to_i
	  when /barrage_damage/
	    damage += @combat_log[id]['barrage_damage'].to_i
	  when /tangleweed_damage/
	    damage += @combat_log[id]['tangleweed_damage'].to_i
	  when /companion_damage/
	    damage += @combat_log[id]['companion_damage'].to_i
	  when /rot_damage/
	    damage += @combat_log[id]['rot_damage'].to_i
	  when /rot_dot_damage/
	    damage += @combat_log[id]['rot_dot_damage'].to_i
	  when /dislodge_damage/
	    damage += @combat_log[id]['dislodge_damage'].to_i
	  when /natures_fury_damage/
	    damage += @combat_log[id]['natures_fury_damage'].to_i
	  end
	  }
	  @combat_log[id]['total_damage'] = damage
	echo "You did #{damage} damage to ##{id} (#{@combat_log[id]['name']}) in #{time_of_combat.truncate(3)} seconds for #{(damage/time_of_combat).truncate(3)} dps."
	echo "#{id} : #{@combat_log[id]}"
	CombatLog.save
  end
    
  def self.new_target(id,name,cause)
    echo "new_target(#{id},#{name},#{cause})" if @debug
	@combat_log[id] = Hash.new unless @combat_log.has_key?(id)
	@combat_log[id]['name'] = name unless @combat_log[id].has_key?('name')
	@combat_log[id]['start_time'] = Time.now unless @combat_log[id].has_key?('start_time')
	@combat_log[id][cause] += 1
  end
  
  def self.dead_target(id,time,cause)
    echo "dead_target(#{id},#{time},#{cause})" if debug
	@combat_log[id]['death_time'] = Time.now
	@combat_log[id]['dead'] = true
	@combat_log[id]['cause_of_death'] = cause
  end
  
  def self.process_aoe_attacks(string,buffer,time)
    echo "process_aoe_attacks(#{string},buffer,#{time}" if @debug
	id = cause = nil;damage = round_time = 0
	@current_aoe = Hash.new
	@AOE_ATTACKS.each { |k,v| if string =~ k then cause = v end }
    buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  when /(?:Cast )?Roundtime:? (\d+) (?:sec|Seconds?)/
	    round_time = $1.to_i
	  when @death_cry_regex
		@current_aoe['death_time'] = time
		@current_aoe['dead'] = true
		@current_aoe['cause_of_death'] = cause
	  when /(?:Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is ravaged for |... (?:and )?(?:hits? for )?)(\d+) points? of damage/
	    @current_aoe[cause + "_damage"] += $1.to_i
	  when @flares_regex
	    @FLARES.each { |k,v| if k =~ line then @current_aoe[v] += 1 end }
	  when @aoe_hits_regex
	    @AOE_HITS.each { |k,v|
		  case line
		  when k
		    id = $1
		    CombatLog.new_target($1,$2,cause)
			@current_aoe['round_time'] = round_time
		  end
	    }
		@combat_log[id].merge!(@current_aoe)
		CombatLog.report_kill(id) if @combat_log[id]['dead']
		@current_aoe = Hash.new
	  when @aoe_attacks_regex
	    echo "break"
	    break
	  end
	}
  end  

  def self.process_pindown(buffer,time)
    echo "process_pindown()" if @debug
	buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  when /The spray of arrows leaves <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> unscathed and undeterred/
	    CombatLog.new_target($1,$2,'pindown_miss')
	  when /<pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is rooted in place/
	    CombatLog.new_target($1,$2,'pindown')
	  when /Without bothering to aim, you loose a chaotic hail of arrows to pin down your foes!/
	    break
	  end
	  }
  end

  def self.process_barrage(buffer,time)
    echo "process_barrage(buffer,#{time})" if @debug
    id = round_time = nil
    #Let's find our target's id.
	target_line = buffer.find { |l| l =~ /The arrow (?:sticks in|sails through) <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/ }
	if target_line =~ /The arrow (?:sticks in|sails through) <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>/
	  id = $1
	  CombatLog.new_target($1,$2,'barrage')
	end
    buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  when /The arrow streaks off into the distance/ # Need to check on this.
	    if line[i-1] =~ /(?:.*)?<pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>(?:.*?)/
		  CombatLog.new_target($1,$2,'barrage_miss')
		end
	  #Roundtime used for death dps
	  when /(?:Cast )?Roundtime:? (\d+) (?:sec|Seconds?)/
		@combat_log[id]['round_time'] = $1.to_i
	  #Dead
	  when @death_cry_regex
	    CombatLog.dead_target(id,time,'barrage')
	  #Flares
	  when @flares_regex
	    @FLARES.each { |k,v| if k =~ line then @combat_log[id][v] += 1 end }
	  #Damage
	  when /Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is ravaged for (\d+) points? of damage!/
		@combat_log[id]['barrage_damage'] += damage
	  when /... (?:and hit for )?(\d+) points? of damage!/
	    damage = $1.to_i
		case buffer[i-1]
		when @other_damage_regex
		  damage = 0 #Zero out other damage source that may invade our buffer. rot, companion, tangleweed
		end
		@combat_log[id]['barrage_damage'] += damage
 	  when /Nocking another arrow to your bowstring, you swiftly draw back and loose again/
		break
	  end
	}
	CombatLog.report_kill(id) if @combat_log[id]['dead']
  end
  
  def self.process_attack(string,buffer,time)
    echo "process_attack(#{string},buffer,#{time})" if @debug
    id = name = cause = terminate = nil
    @ATTACKS.each { |k,v|
      case string
      when k
	    id = $1;name = $2;cause = v
        CombatLog.new_target($1,$2,v)
      end
	}
	buffer.pop()
    buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
      case line
	  when /<prompt time="\d+">[^<]+<\/prompt>/
	    echo "break"
  	    break if terminate
	  when /(?:Cast )?Roundtime:? (\d+) (?:sec|Seconds?)/
	    terminate = true
	    @combat_log[id]['round_time'] = $1
	  when @death_cry_regex
	    CombatLog.dead_target(id,time,cause)
	  when /(?:Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is ravaged for |... (?:and )?(?:hits? for )?)(\d+) points? of damage/
	    @combat_log[id][cause + "_damage"] += $1.to_i
	  when @flares_regex
	    @FLARES.each { |k,v| if k =~ line then @combat_log[id][v] += 1 end }
	  when @miss_regex
	    @combat_log[id][cause + "_miss"] += 1
		break
	  end
    }  
    CombatLog.report_kill(id) if @combat_log[id]['dead']
  end
  
  def self.process_rot_dot(string,buffer,time)
    echo "process_rot_dot(#{string},buffer,#{time})" if @debug
    id = nil;damage = 0
	@current_rot = Hash.new
	buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  when @death_cry_regex
	    @current_rot['death_time'] = time
		@current_rot['dead'] = true
		@current_rot['cause_of_death'] = 'rot_dot'
	  when /... (?:and )?(?:hits? for )?(\d+) points? of damage/
	    echo "damage"
	    damage = $1.to_i
		case buffer[i-1]
		when @rot_dot_regex
		  @current_rot['rot_dot_damage'] += damage
		end
	  when @rot_dot_regex
	  echo "rot_dot_regex match"
	    @ROT_DOT.each { |h,k|
		  case line
		  when h
		    id = $1
		    CombatLog.new_target($1,$2,'rot_dot')
			@combat_log[id].merge!(@current_rot)
		  end
		}
		echo "break"
	    break
	  end
    }
	CombatLog.report_kill(id) if @combat_log[id]['dead']
  end

  def self.process_companion(string,buffer,time)
	echo "process_companion(#{string},buffer,#{time})" if @debug
	id = name = cause = nil
	@COMPANION_ATTACKS.each { |k,v|
	  case string
	  when k
		id = $1;name = $2;cause = v
		CombatLog.new_target($1,$2,v)
	  end
	}
	buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  when /SMR result:/
	    break
	  #Dead
	  when @death_cry_regex
	    CombatLog.dead_target(id,time,'companion')
	  when /... (?:and )?(?:hits? for )?(\d+) points? of damage/
	    @combat_log[id]['companion_damage'] += $1.to_i
	  when /The <pushBold\/><a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> takes the opportunity to slash <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> claws at the <pushBold\/><a exist="(\d+)" noun="\w+">[^<]+<\/a><popBold\/> chest/
	    @combat_log[id]['companion_double_attack'] += 1  
	  when /The murky haze surrounding <pushBold\/><a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> seems to intensify the slashing attack/
	    @combat_log[id]['companion_debuff'] += 1
	  when /<pushBold\/>A <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> emerges from the shadows/
		@combat_log[id]['companion_ambush'] += 1
	  end
	}
	CombatLog.report_kill(id) if @combat_log[id]['dead']
  end

  def self.process_tangleweed(string,buffer,time,id,name)
    echo "process_tangleweed(#{string},buffer,#{timer})" if @debug
	CombatLog.new_target(id,name,'tangleweed')
	buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  when /SMR result:/
	    break
	  when /You notice a number of the <a exist="\d+" noun="\w+">[^<]+<\/a> widgeonweed mass scrape into <pushBold\/>a <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> skin\.  <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> suddenly looks very weak/
	    @combat_log[id]['tangleweed_poison'] += 1
	  #Dead
	  when @death_cry_regex
	    CombatLog.dead_target(id,time,'tangleweed')
	  when /... (?:and )?(?:hits? for )?(\d+) points? of damage/
	    @combat_log[id]['tangleweed_damage'] += $1.to_i
	  end
	}
	CombatLog.report_kill(id) if @combat_log[id]['dead']
  end

  def self.combat_watch_xml
	while string = get
	  case string
	  when @attacks_regex
	    sleep(0.1)
		CombatLog.process_attack(string,reget(50),Time.now)
	  when @aoe_attacks_regex
	    sleep(0.1)
		CombatLog.process_aoe_attacks(string,reget(75),Time.now)
	  when @rot_dot_regex
		CombatLog.process_rot_dot(string,reget(25),Time.now)
	  #when /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above/
	   # sleep(0.1)
		#CombatLog.process_volley(reget(75),Time.now)
	  when /Nocking another arrow to your bowstring, you swiftly draw back and loose again/
	    sleep(0.1)
		CombatLog.process_barrage(reget(50),Time.now)
	  when /Without bothering to aim, you loose a chaotic hail of arrows to pin down your foes/
		CombatLog.process_pindown(reget(25),Time.now)
		
	  #Moonbeam
	  when /The (?:coruscating|dappled|ruddy|scarlet-sparked|swirling) light appears to crack and shatter, disintegrating into the air without effect/
		CombatLog.new_target($1,$2,'moonbeam_miss')
	  when /<pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/> is caught fast, the light of (?:Liabo|Lornon|the moon) arresting <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> movements/
	    CombatLog.new_target($1,$2,'moonbeam')
	  #Tangleweed
	  when /The <a exist="\d+" noun="\w+">[^<]+<\/a> lashes out at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>, but is unable to grasp <pushBold\/><a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>/
		CombatLog.new_target($1,$2,'tangleweed_miss')
	  when /The <a exist="\d+" noun="\w+">[^<]+<\/a> lashes out (?:violently )?at <pushBold\/>\w+ <a exist="(\d+)" noun="\w+">([^<]+)<\/a><popBold\/>, (?:dragging|wraps itself around) <pushBold\/><a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> (?:body and entangles <pushBold\/><a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> )?(?:on|to) the ground/
		process_tangleweed(string,reget(50),Time.now,$1,$2)
	  #Companion
	  when @companion_attacks_regex
		process_companion(string,reget(50),Time.now)
	  end
	end
  end
end

CombatLog.initialize
CombatLog.load
CombatLog.combat_watch_xml




=begin
  def self.process_volley(buffer,time)
    echo "process_volley(buffer,#{time})" if @debug
	id = nil;damage = 0
	buffer.to_enum.with_index.reverse_each { |line,i|
	  echo line if @debug_parse
	  case line
	  #Clear our variables for the next target
	  when /The arrow breaks into tiny fragments/
	    @current_volley = Hash.new;damage = 0
	  #break out of our buffer. Volley parse is over.
	  when /An ominous shadow falls over your surroundings as a whistling hail of arrows arcs down from above/
	    break
	  #record our targets death
	  when @death_cry_regex
		@current_volley['death_time'] = time
		@current_volley['dead'] = true
		@current_volley['cause_of_death'] = 'volley'
	  #record our damage against the target
	  when /(?:Consumed by the hallowed flames, <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> is ravaged for |... (?:and )?(?:hits? for )?)(\d+) points? of damage/
	    damage += $1.to_i
	  #Flares
	  when @flares_regex
	  @FLARES.each { |k,v| if k =~ line then @current_volley[v] += 1 end }
	  #Grab our targets @volley_target_regex
	  when @volley_hit_regex
	    @VOLLEY_HIT.each { |k,v|
		case line
		when k
		  id = $1
		  CombatLog.new_target($1,$2,'volley')
		end
	  }
	  #Record our data.
	  when /SMR result:/
		@combat_log[id].merge!(@current_volley)
		@combat_log[id]['volley_damage'] += damage
		CombatLog.report_kill(id) if @combat_log[id]['dead']
	  end
	}
  end
=end
