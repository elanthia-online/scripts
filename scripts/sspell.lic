## vim: set ft=ruby:
=begin
    Keeps your signs, sigils, symbols, and cmans active.

    ;sspell help for details

	maintainer: Elanthia-Online
		author: spiffyjr
		name: SpiffySpell
		tags: spells
	 version: 1.1

	  changelog:
			1.1 (2021-10-11) updates to support GTK3  
			1.0 * Initial release
=end

settings    = CharSettings.to_hash
cast_list   = settings['cast_list'] || [ ]
perm_list   = settings['perm_list'] || [ ]

hunting     = false
keep_mana   = settings['keep_mana'] || 40
max_time    = settings['max_time'] || 200
script_name = script.name

help = proc {
    respond
    respond
    respond 'SpiffySpells by SpiffyJr (theman@spiffyjr.me)'
    respond
    respond "  This script will manage spells, signs, sigils, symbols, and spells."
    respond "  You have the option of defining spells that should be permanent and spells that"
    respond "  should be used only during a hunt."
    respond
    respond "  #{$clean_lich_char}#{script.name} help     view this message"
    respond "  #{$clean_lich_char}#{script.name} setup    access the gui setup"
    respond "  #{$clean_lich_char}#{script.name} hunt     toggle on/off hunting mode"
    respond
    respond
}

setup = proc {
    window        = window_action = nil
    window_width  = settings['window_width']  || 545
    window_height = settings['window_height'] || 490

    Gtk.queue {
        label_box = Gtk::Box.new(:horizontal, 5)
        label_box.pack_start(Gtk::Label.new('Ignore Spells'), :expand => false, :fill => false, :padding => 0)
        label_box.pack_start(Gtk::Label.new('Hunting Spells'), :expand => false, :fill => false, :padding => 0)
        label_box.pack_start(Gtk::Label.new('Permanent Spells'), :expand => false, :fill => false, :padding => 0)

        renderer = Gtk::CellRendererText.new
        renderer.background = 'white'

        nocast_ls = Gtk::ListStore.new(String, String)
        nocast_ls.set_sort_column_id(0, :ascending)
        nocast_tv = Gtk::TreeView.new(nocast_ls)
        nocast_tv.headers_visible = false
        nocast_tv.height_request = 150
        nocast_tv.append_column(Gtk::TreeViewColumn.new('', renderer, :text => 0, :background_set => 2))
        nocast_tv.append_column(Gtk::TreeViewColumn.new('', renderer, :text => 1, :background_set => 2))
        nocast_sw = Gtk::ScrolledWindow.new
        nocast_sw.set_policy(:automatic, :always)
        nocast_sw.add(nocast_tv)

        cast_ls = Gtk::ListStore.new(String, String)
        cast_ls.set_sort_column_id(0, :ascending)
        cast_tv = Gtk::TreeView.new(cast_ls)
        cast_tv.headers_visible = false
        cast_tv.height_request = 150
        cast_tv.append_column(Gtk::TreeViewColumn.new('', renderer, :text => 0, :background_set => 2))
        cast_tv.append_column(Gtk::TreeViewColumn.new('', renderer, :text => 1, :background_set => 2))
        cast_sw = Gtk::ScrolledWindow.new
        cast_sw.set_policy(:automatic, :always)
        cast_sw.add(cast_tv)

        perm_ls = Gtk::ListStore.new(String, String)
        perm_ls.set_sort_column_id(0, :ascending)
        perm_tv = Gtk::TreeView.new(perm_ls)
        perm_tv.headers_visible = false
        perm_tv.height_request = 150
        perm_tv.append_column(Gtk::TreeViewColumn.new('', renderer, :text => 0, :background_set => 2))
        perm_tv.append_column(Gtk::TreeViewColumn.new('', renderer, :text => 1, :background_set => 2))
        perm_sw = Gtk::ScrolledWindow.new
        perm_sw.set_policy(:automatic, :always)
        perm_sw.add(perm_tv)

        tree_box = Gtk::Box.new(:horizontal, 5)
        tree_box.pack_start(nocast_sw, :expand => true, :fill => true, :padding => 0)
    tree_box.pack_start(cast_sw, :expand => true, :fill => true, :padding => 0)
        tree_box.pack_start(perm_sw, :expand => true, :fill => true, :padding => 0)

        keep_mana_entry = Gtk::Entry.new; keep_mana_entry.text = (keep_mana.to_s)
        max_time_entry = Gtk::Entry.new; max_time_entry.text = (max_time.to_s)
        save_button = Gtk::Button.new(:label => 'Ok')
        save_button.width_request = 75
        cancel_button = Gtk::Button.new(:label => 'Cancel')
        cancel_button.width_request = 75
        button_box = Gtk::Box.new(:horizontal, 3)
        button_box.pack_start(Gtk::Label.new('mana reserve:'),:expand => false, :fill => false, :padding => 4)
        button_box.pack_start(keep_mana_entry, :expand => false, :fill => false, :padding => 4)
        button_box.pack_start(Gtk::Label.new('cast to:'), :expand => false, :fill => false, :padding => 4)
        button_box.pack_start(max_time_entry, :expand => false, :fill => false, :padding => 4)
        button_box.pack_end(save_button, :expand => false, :fill => false, :padding => 4)
        button_box.pack_end(cancel_button, :expand => false, :fill => false, :padding => 4)

        main_box = Gtk::Box.new(:vertical, 4)
        main_box.pack_start(label_box, :expand => false, :fill => false, :padding => 4)
        main_box.pack_start(tree_box, :expand => false, :fill => false, :padding => 4)
        main_box.pack_start(button_box, :expand => false, :fill => false, :padding => 4)

        window = Gtk::Window.new
        window.title = 'SpiffySpells Setup'
        window.border_width = 5
        window.add(main_box)
        window.resize(window_width, window_height)

        Spells.known.each { |spell|
            next unless (Spell[spell].time_per > 0) or ([9603, 9605, 9625].include?(spell))

          if cast_list.include?(spell.num)
            iter    = cast_ls.append
            iter[0] = spell.num.to_s
                iter[1] = spell.name
            end

            if perm_list.include?(spell.num)
            iter    = perm_ls.append
            iter[0] = spell.num.to_s
            iter[1] = spell.name
            end

            iter    = nocast_ls.append
            iter[0] = spell.num.to_s
            iter[1] = spell.name
        }

        cast_tv.drag_source_set(:button1_mask, [ [ 'text/plain', :same_app, 0 ] ], :move)
        cast_tv.drag_dest_set(:all, [ [ 'text/plain', :same_app, 0 ] ], :move)
        nocast_tv.drag_source_set(:button1_mask, [ [ 'text/plain', :same_app, 0 ] ], :move)
        nocast_tv.drag_dest_set(:all, [ [ 'text/plain', :same_app, 0 ] ], :move)
        perm_tv.drag_source_set(:button1_mask, [ [ 'text/plain', :same_app, 0 ] ], :move)
        perm_tv.drag_dest_set(:all, [ [ 'text/plain', :same_app, 0 ] ], :move)

        perm_tv.signal_connect('drag-data-get') { |who, drag_context, data|
          data.text = who.selection.selected[0] if who.selection.selected
        }
        perm_tv.signal_connect('drag-data-received') { |who, drag_context, x, y, data, info, time|
          nocast_ls.each { |model,path,iter|
            if iter[0] == data.text
              new_iter    = perm_ls.append
              new_iter[0] = iter[0]
              new_iter[1] = iter[1]
              break
            end
          }
        }
        perm_tv.signal_connect('button-press-event') { |who, event|
          if (event.event_type == :button2_press) and (source_iter = perm_tv.selection.selected)
            perm_ls.remove(source_iter)
          end
        }
        cast_tv.signal_connect('drag-data-get') { |who, drag_context, data|
          data.text = who.selection.selected[0] if who.selection.selected
        }
        cast_tv.signal_connect('drag-data-received') { |who, drag_context, x, y, data, info, time|
          nocast_ls.each { |model,path,iter|
            if iter[0] == data.text
              new_iter    = cast_ls.append
              new_iter[0] = iter[0]
              new_iter[1] = iter[1]
              break
            end
          }
        }
        cast_tv.signal_connect('button-press-event') { |who, event|
          if (event.event_type == Gdk::Event::BUTTON2_PRESS) and (source_iter = cast_tv.selection.selected)
            cast_ls.remove(source_iter)
          end
        }
        nocast_tv.signal_connect('drag-data-get') { |who, drag_context, data|
          data.text = who.selection.selected[0] if who.selection.selected
        }
        nocast_tv.signal_connect('drag-data-received') { |who, drag_context, x, y, data, info, time|
          cast_ls.each { |model,path,iter|
            if iter[0] == data.text
              cast_ls.remove(iter)
              break
            end
          }
        }
        nocast_tv.signal_connect('button-press-event') { |who, event|
          if (event.event_type == Gdk::Event::BUTTON2_PRESS) and (source_iter = nocast_tv.selection.selected)
              if event.button == 1
                dest_iter    = cast_ls.append
                dest_iter[0] = source_iter[0]
                dest_iter[1] = source_iter[1]
              elsif event.button == 3
                dest_iter    = perm_ls.append
                dest_iter[0] = source_iter[0]
                dest_iter[1] = source_iter[1]
              end
          end
        }
        cancel_button.signal_connect('clicked') {
          window_width  = window.allocation.width
          window_height = window.allocation.height
          window_action = :cancel
        }
        save_button.signal_connect('clicked') {
          Gtk.queue {
            cast_list = Array.new
            cast_ls.each { |model,path,iter| cast_list.push(iter[0].to_i) }

            perm_list = Array.new
            perm_ls.each { |model,path,iter| perm_list.push(iter[0].to_i) }

            window_width  = window.allocation.width
            window_height = window.allocation.height
                keep_mana     = keep_mana_entry.text.to_i
                max_time      = max_time_entry.text.to_i
            window_action = :save
          }
        }
        window.signal_connect('delete_event') {
          window_width  = window.allocation.width
          window_height = window.allocation.height
          window_action = :cancel
        }

        window.show_all
    }

    wait_while { window_action.nil? }
    Gtk.queue { window.destroy }

    settings['window_width']  = window_width
    settings['window_height'] = window_height

    if window_action == :save
        settings['cast_list'] = cast_list
        settings['perm_list'] = perm_list
        settings['keep_mana'] = keep_mana
        settings['max_time'] = max_time
    end
}

meditating = proc {
    Spell['Meditation'].timeleft > 10 or Spell['Pre-Meditate'].active?
}

$sspell_hunt = proc { |hunt|
    hunting = hunt

    if hunting
        respond "-- #{script_name}: hunting mode enabled"
    else
        respond "-- #{script_name}: hunting mode disabled"
    end
}

$sspell_toggle = proc {
    hunting = !hunting

    if hunting
        respond "-- #{script_name}: hunting mode enabled"
    else
        respond "-- #{script_name}: hunting mode disabled"
    end
}

action = proc { |client_string|
    if client_string =~ /^(?:<c>)?#{$clean_lich_char}#{script_name} (.*)$/
    cmd = $1.strip

    if cmd =~ /^setup$/i
            setup.call()
        elsif cmd =~ /^help$/i
            help.call()
        elsif cmd =~ /^hunt$/i
            $sspell_toggle.call
    else
      respond "-- #{script_name}: you're doing it wrong!"
    end

    nil
  elsif client_string =~ /^(?:<c>)?#{$clean_lich_char}#{script_name}/
    respond "-- #{script_name}: you're doing it wrong!"
    else
        client_string
    end
}

cast_it = proc { |spell|
    if [606, 640].include?(spell.num) and (!Spell[625].active? and Spell[625].affordable? and Spell[625].known?)
        next Spell[625].cast
    elsif [9605, 9625].include?(spell.num)
        if checkstamina(60)
            waitrt?
            waitcastrt?
            spell.cast
            next
        end

        next nil
    end

    waitrt?
    waitcastrt?
    spell.cast
}

if script.vars[1] =~ /^setup/i
    setup.call()
elsif script.vars[1] =~ /^help$/i
    help.call()
elsif script.vars[1]
    echo "You're doing it wrong!"
end

exit if script.vars[1]

UpstreamHook.add(script.name, action)
before_dying { UpstreamHook.remove(script.name) }

loop {
    wait_while { dead? }
    wait_while { hidden? }
    wait_while { meditating.call }
    wait_while { Spell['Symbol of Dreams'].active? }

    if hunting
      cast_list.each { |spell|
            sleep 0.25

        spell = Spell[spell]

        if not spell.active? or (spell.name == 'Surge of Strength' and spell.timeleft < 0.1667)
          wait_while { muckled? or (checkprep != 'None') }
          waitcastrt?
          waitrt?

          # Stagger signs that use spirit (thanks Tillmen!)
          spirit_count = 0
          [ Spell['Sign of Swords'],Spell['Sign of Shields'],Spell['Sign of Dissipation'] ].each { |sn|
            spirit_count += 1 if sn.active? and (sn.time_per - sn.timeleft) < 3
          }

          # Logic for casting spells
          if (spell.affordable? and (spell.num > 9000 or spell.known?) and (spell.spirit_cost.zero? or (percentspirit > 75 and spirit_count < 2)))
            next if (spell.name == 'Sign of Clotting' and Spell['Sign of Staunching'].active?)

                    res = cast_it.call(spell)
            if res =~ /The power from your (?:sigil|sign) dissipates into the air\.|Your magic fizzles ineffectually\.|You try to compose yourself/
              room_count = XMLData.room_count
                        wait_while { room_count == XMLData.room_count }
                    elsif res =~ /All you manage to do is cough up/
                        wait_until { Wounds.neck < 2 }
                    elsif res =~ /You can\'t think clearly enough to prepare/
                        sleep 10
            end
          end
        end
      }
    elsif GameObj.npcs.find { |npc| npc.type =~ /aggressive|undead/ }.nil?
        perm_list.sort { |a,b| Spell[a].timeleft <=> Spell[b].timeleft }.each { |num|
            waitrt?
            sleep 0.25

            break if meditating.call
            break if hunting

            spell = Spell[num]

            next if not spell.known? or (spell.active? and not spell.stacks)

            if spell.timeleft < (max_time - eval(spell.duration)).abs and spell.affordable? and checkmana(keep_mana + spell.mana_cost)
                res = cast_it.call(spell)
                if res =~ /The power from your (?:sigil|sign) dissipates into the air\.|Your magic fizzles ineffectually\.|You try to compose yourself/
                    room = Room.current.id
                    wait_until { Room.current.id != room }
                elsif res =~ /All you manage to do is cough up/
                    wait_until { Wounds.neck < 2 }
                elsif res =~ /You can\'t think clearly enough to prepare/
                    sleep 10
                end

                waitcastrt?
            end
        }
    end

    # Sigil of Power (not yet implemented except for me)
    if not meditating.call and (maxmana - checkmana) > 25 and Spell['Sigil of Power'].known? and checkstamina(125) and not Spell['POPed Muscles'].active?
    pause_script('bigshot') if running?('bigshot')
        pause_script('shunt') if running?('shunt')

      waitcastrt?
      waitrt?

      put "sigil of power"

    unpause_script('bigshot') if running?('bigshot')
        unpause_script('shunt') if running?('shunt')

        sleep 2
    end

    if Char.prof == 'Empath' and not Spell['Adrenal Surge Cooldown'].active?
        lore = Skills.slblessings

        if lore >= 65
            stam = maxstamina
        elsif lore >= 35
            stam = 50
        elsif lore >= 15
            stam = 25
        else
            stam = 9999
        end

        if maxstamina - checkstamina > stam
            pause_script('bigshot') if running?('bigshot')
            pause_script('shunt') if running?('shunt')

            Spell['Adrenal Surge'].cast

            unpause_script('bigshot') if running?('bigshot')
            unpause_script('shunt') if running?('shunt')

            sleep 2
        end
    end

  sleep 0.25
}