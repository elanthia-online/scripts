=begin
locates and forages what you want and how many then returns you to the room you started.

syntax is ;betazzherb <herb name> <qty you want to find> <location (optional)>

;betazzherb setup for GUI setup.

example: ;betazzherb some pothinir grass 9 greymist woods (to find 9 pothinir in greymist woods only)
or ;betazzherb some acantha leaf 17 (just to find 17 acantha leaf anywhere close)

****Item name has to match, almost all herbs have 'some' in front, 'some acantha leaf'****

finds any forageable items including sticks and wiregrass

This script doesnt care if creatures are in the room, so be careful using it.
*******AGAIN, THIS SCRIPT HAS NO COMBAT CAPABILITIES, DO NOT LEAVE UNATTENDED!!!*******

v5 update: Mini-update to change a _drag command to put, hopefully bypassing some weirdness?

v4 update: Handle luminsecent indigo mushrooms properly, MARK them unsellable when found.
           This has not been fully tested, because I haven't dug any up myself yet.
           Let me know how it works for you.

author: Zzentar
location function added by Baswab/Gibreficul
GUI setup, additional features by Gnomad
Ongoing maintence by Gnomad
tags: foraging, herbs

version: 6 (Interim) 3/24/2020
  GUI adjusted to GTK3 specs
version: 6 

=end



#hands full check

if !(checkleft && checkright).nil?
  puts "#{monsterbold_start} YOU MUST HAVE AT LEAST ONE HAND EMPTY TO USE THIS SCRIPT.#{monsterbold_end}"
  puts "#{monsterbold_start} WAITING UNTIL YOU EMPTY A HAND.#{monsterbold_end}"
  wait_until{(checkleft && checkright).nil?}
  puts "#{monsterbold_start} OK, CONTINUING.#{monsterbold_end}"
end


#echo lootsack.id

#borrowing liberally from sloot for easy extensibility despite the spartan GTK window I'm building.
CharSettings.load
before_dying { CharSettings.save }

settings = CharSettings.to_hash

setup = proc {
  gtk_globals = Hash.new
  gtk_locals = Hash.new

  window = window_action = nil
  Gtk.queue {

    gtk_globals['lootsack'] = Gtk::Entry.new
  gtk_globals['lootsack'].text = UserVars.lootsack if (UserVars.lootsack) != nil
  gtk_globals['lootsack'].has_tooltip = true
  gtk_globals['lootsack'].tooltip_markup = "Container to hold your foraged herbs.\nIf you're using this for bounties, maybe\ndon't choose an auto-bundler."
    gtk_locals['kneel_to_forage'] = Gtk::CheckButton.new('Kneel to forage?')
  gtk_locals['kneel_to_forage'].active = settings['kneel_to_forage'] if settings['kneel_to_forage'].defined?
  gtk_locals['kneel_to_forage'].has_tooltip = true
  gtk_locals['kneel_to_forage'].tooltip_markup = "Kneel before foraging?\nRemember, this script will not try to keep you alive."
    gtk_locals['hide_to_forage'] = Gtk::CheckButton.new('Hide when foraging?')
  gtk_locals['hide_to_forage'].active = settings['hide_to_forage'] if settings['hide_to_forage'].defined?
  gtk_locals['hide_to_forage'].has_tooltip = true
  gtk_locals['hide_to_forage'].tooltip_markup = "Hide before foraging?\nTries once per round, doesn't care if you succeed."
    gtk_locals['stow_stuff'] = Gtk::CheckButton.new('Stow your gear?')
  gtk_locals['stow_stuff'].active = settings['stow_stuff'] if settings['stow_stuff'].defined?
  gtk_locals['stow_stuff'].has_tooltip = true
  gtk_locals['stow_stuff'].tooltip_markup = "Stow your gear before foraging?\n(In case you want to walk around with it out.)"
    gtk_locals['sing_tonis'] = Gtk::CheckButton.new('Sing Tonis?') if Spell[1035].known?
  gtk_locals['sing_tonis'].active = settings['sing_tonis'] if settings['sing_tonis'].defined?
  gtk_locals['sing_tonis'].has_tooltip = true
  gtk_locals['sing_tonis'].tooltip_markup = "Sing the Song of Tonis?"
    gtk_locals['sanct_rooms'] = Gtk::CheckButton.new('Sanct the room first?') if Spell[213].known?
  gtk_locals['sanct_rooms'].active = settings['sanct_rooms'] if settings['sanct_rooms'].defined?
  gtk_locals['sanct_rooms'].has_tooltip = true
  gtk_locals['sanct_rooms'].tooltip_markup = "Cast minor sanctuary in each room before foraging?\nThe script won't recast 213 if it fails or wears off.\nDoes not sing Peace."


    # Primary Window
    window = Gtk::Window.new
  window.set_icon(@default_icon)
    window.title = "Zzentar's Forgaging Script"
    window.border_width = 3
    window.resizable = false
    #window.resize(450, 300)

    # Notebooks for tabs at the top
    nb = Gtk::Notebook.new.set_show_border(true).set_border_width(3)

    #
    # Notebook Page 1 - The only page thus far and probably forever.
    #
    vb_pg1 = Gtk::Box.new(:vertical, 1).set_border_width(3)

    #
    # Page 1, Frame 1 - Probably the only frame
    #
    vb_pg1_1 = Gtk::Box.new(:vertical, 1).set_border_width(3)
    fr_pg1_1 = Gtk::Frame.new.set_border_width(5).set_label_widget(Gtk::Label.new.set_markup('<b>Zzherb Options</b>'))
    fr_pg1_1.add(vb_pg1_1)
    vb_pg1.pack_start(fr_pg1_1, :expand => false, :fill => false, :padding => 0)

    lbl = Gtk::Label.new.set_markup("Zzherb was created by the late Ken Dumas,\nlongtime player of Zzentar and others.\nIf you got to play with him, you were lucky.\nIf not, you missed out. Rest in peace.")
    lbl.set_wrap(true).set_padding(0,10)
    vb_pg1_1.pack_start(lbl, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(Gtk::Alignment.new(1,0,0,1).add(Gtk::Label.new('Lootsack for your foraging: ')),:expand => true, :fill => false, :padding => 0)

  hb.pack_start(gtk_globals['lootsack'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(gtk_locals['kneel_to_forage'].set_width_request(145), :expand => false, :fill => false, :padding => 0)
  vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)

    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(gtk_locals['hide_to_forage'].set_width_request(145), :expand => false, :fill => false, :padding => 0)
  vb_pg1_1.pack_start(hb, :expand => false, :fill => true, :padding => 0)

    hb.pack_start(gtk_locals['stow_stuff'], :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => true, :padding => 0)

    if Spell[1035].known?
      hb = Gtk::Box.new(:horizontal, 1)
      hb.pack_start(gtk_locals['sing_tonis'].set_width_request(145), :expand => false, :fill => false, :padding => 0)
      vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)
    end

  if Spell[213].known?
    hb = Gtk::Box.new(:horizontal, 1)
    hb.pack_start(gtk_locals['sanct_rooms'].set_width_request(145), :expand => false, :fill => false, :padding => 0)
    vb_pg1_1.pack_start(hb, :expand => false, :fill => false, :padding => 0)
  end

    nb.append_page(vb_pg1,Gtk::Label.new('Setup'))


    # Save/Close buttons
    hb_saveclose = Gtk::Box.new(:horizontal, 0)
    save = Gtk::Button.new(:label => 'Save & Close', :use_underline => false, :stock_id => nil)
    close = Gtk::Button.new(:label => 'Exit', :use_underline => false, :stock_id => nil)

    save.signal_connect('clicked') { window_action = :save }
    close.signal_connect('clicked') { window_action = :done }

    hb_saveclose.pack_start(save, :expand => false, :fill => false, :padding => 0)
    hb_saveclose.pack_start(close, :expand => false, :fill => false, :padding => 0)

    # Primary VerticalBox to split up Notebook and Save/Close buttons
    vb_main = Gtk::Box.new(:vertical, 5)
    vb_main.border_width = 3

    vb_main.pack_start(nb, :expand => false, :fill => false, :padding => 0)
    vb_main.pack_start(Gtk::Alignment.new(1,0,0,0).add(hb_saveclose), :expand => false, :fill => false, :padding => 0)

    window.signal_connect('delete_event') { respond window.allocation.width; window_action = :exit }

    window.add(vb_main)
    window.show_all
    window.keep_above = true # On windows keep_above is required AFTER show_all
  }

  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
#  undo_before_dying # Don't ask me what this does - I stripped it from Tillmen's code
# Gtk.queue { window.destroy }

  clean_entry = proc { |entry|
    entry.text = entry.text.strip
    if entry.text.empty?
      entry.text = nil
    end

    entry.text
  }

  if window_action == :save
    gtk_globals.each_pair { |option,widget|
      if widget.class == Gtk::CheckButton
        UserVars.change(option,widget.active?,:char)
      elsif widget.class == Gtk::Entry
        UserVars.change(option,clean_entry.call(widget),:char)
      else
        echo "error: unknown global widget #{option} [#{widget.class}]"
      end
    }

    gtk_locals.each_pair { |option,widget|
      if widget.class == Gtk::CheckButton
        settings[option] = widget.active?
    UserVars.change(option,widget.active?,:char)
      elsif widget.class == Gtk::Entry
        settings[option] = clean_entry.call(widget)
      else
        echo "error: unknown local widget #{option} [#{widget.class}]"
      end
    }

    echo 'settings saved'
  elsif window_action == :done or window_action == :exit
    echo 'closed without saving'
  end
}

#timer start
start_time = Time.now


# ******variable definitions******

if script.vars[0] == "setup"
  setup.call
  exit
elsif UserVars.lootsack != nil
  lootsack = GameObj[UserVars.lootsack]
else
  respond '*** ERROR ***'
  respond '* You must set up a lootsack for your herbs.'
  respond '* The script is not initialized.'
  respond "* Run #{$clean_lich_char}#{Script.self} setup or set the variables manually."
end
righthand = false
lefthand = false
die_early = false

if checkright.nil? or settings['stow_stuff']
  righthand = true
else lefthand = true
end

herb_count = 0
shroom_count = 0
location = false

#I love www.regexer.com; just sayin'.
if script.vars[0] =~ /^--(.*)=(.*)/
  setting = $1
  status = $2
  setting_options = ['lootsack', 'sanct_rooms', 'kneel_to_forage', 'hide_to_forage', 'stow_stuff', 'sing_tonis']
  if setting_options.include?(setting)
    if setting == 'lootsack'
      UserVars.lootsack = status
      echo "lootsack set to #{status}"
      exit
    elsif status =~ /true|yes|on/i
      CharSettings.load
      before_dying { CharSettings.save }
      settings = CharSettings.to_hash
      settings[setting] = true
      echo "#{setting} is now on."
      exit
    elsif status =~ /false|no|off/i
      CharSettings.load
      before_dying { CharSettings.save }
      settings = CharSettings.to_hash
      settings[setting] = false
      echo "#{setting} is now off."
      exit
    else
      echo "#{status} is not a valid option for #{setting}."
      exit
    end
  else
    echo "#{setting} is not something you can set."
    exit
  end
elsif script.vars[0] =~ /^--(.*)/
  setting = $1
  setting_options = ['lootsack', 'sanct_rooms', 'kneel_to_forage', 'hide_to_forage', 'stow_stuff']
  if setting_options.include?(setting)
    if setting == 'lootsack'
      echo "Your lootsack is currently set to #{UserVars.lootsack}"
      exit
    else
      CharSettings.load
      settings = CharSettings.to_hash
      on_off = settings[setting] ? 'on' : 'off'
      echo "#{setting} is currently #{on_off}."
      exit
    end
  else
    echo "#{setting} is not something you can set."
    exit
  end
elsif script.vars[0] == 'credits'
   respond '* Zzherb was created by the late Ken Dumas, longtime player of Zzentar and others.'
   respond '* If you got to play with him, you were lucky. If not, you missed out. Rest in peace.'
   respond '*'
   respond '* Location function added by Baswab/Gibreficul.'
   respond '* Gnomad added some extra features and is trying to just keep things working nicely.'
   exit
end

if script.vars[1].downcase == 'bounty'
  bounty_string = nil
  if script.vars[0] =~ /^bounty (\w*)$/
    bounty_string = LNet.get_data($1, 'bounty')
    if !bounty_string
      echo '', 'Something went wrong.', 'It\'s likely one of the following:'
      echo ' * You\'re not running LNet'
      echo " * #{$1} isn't specific enough to refer to only one character on LNet"
      echo " * #{$1} isn't running LNet"
      echo " * #{$1} hasn't given you permission to see their bounty"
      echo ' * You made a typo.'
      echo ' * None of the above are true, and you should post in the zzherb thread on LNet.', ''
    end
  elsif script.vars[2]
    bounty_string = script.vars[0]
  elsif bounty?
    bounty_string = bounty?
  end

  if bounty_string =~ /concoction that requires (?:a |an )?(.*) found (?:on |in )?(.*?)(?: (?:near|between|under) .*?)?\.\s+These samples must be in pristine condition\.\s+You have been tasked to retrieve (\d+) (?:more )?sample/
    herb = $1
    qty = $3.to_i
    location = $2
  else
    echo 'This option only works if an herbalist has given you a bounty,'
    echo 'if you put in a character\'s name, or if you paste in a bounty string.'
    echo 'Although right now, my matching code is probably messed up.'
    echo 'Reach out and let me know what your current bounty is, word-for-word.'
    echo 'Please use [code] tags if you paste to the thread.'
    echo 'If you\'re pasting in another character\' bounty,'
    echo 'make sure you paste the message from the BOUNTY verb.'
    echo 'Pasting what the herbalist said won\'t work.'
    exit
  end

elsif script.vars[0] =~ /(?:a\s|an\s)?(.*?)\s+(\d+)\s+(.*)/
  herb = $1
  qty = $2.to_i
  location = $3
elsif script.vars[0] =~ /(?:a\s|an\s)?(.*?)\s+(\d+)/
  herb = $1
  qty = $2.to_i
else
  respond "***  ERROR ***"
  respond "*  Correct syntax for this script's usage is:"
  respond "*  #{$clean_lich_char}#{Script.self} <herbname> <number> <location (optional)>"
  respond "*  #{$clean_lich_char}#{Script.self} bounty <paste of BOUNTY command (optional)>"
  respond "*  #{$clean_lich_char}#{Script.self} setup for GUI setup"
  respond "*  #{$clean_lich_char}#{Script.self} credits"
  respond '*'
  respond '*'
  respond "*  #{$clean_lich_char}#{Script.self} --lootsack=<container noun>  Container to hold your foraged herbs."
  respond "*           If you're using this for bounties, maybe don't choose an auto-bundler."
  respond '*'
  respond "*  #{$clean_lich_char}#{Script.self} --sanct_rooms=<on|off>       Cast minor sanctuary in each room before foraging?"
  respond "*           The script won't recast 213 if it fails for any reason or wears off. Does not sing Peace."
  respond '*'
  respond "*  #{$clean_lich_char}#{Script.self} --kneel_to_forage=<on|off>   Kneel before foraging?"
  respond "*           Remember, this script will not try to keep you alive."
  respond '*'
  respond "*  #{$clean_lich_char}#{Script.self} --hide_to_forage=<on|off>    Hide before foraging?"
  respond "*           Tries once per round, doesn't care if you succeed."
  respond '*'
  respond "*  #{$clean_lich_char}#{Script.self} --stow_stuff=<on|off>        Stow your gear before foraging?"
  respond "*           (In case you want to walk around with it out.)"
  respond '*'
  respond "*  EXITING"

  quiet_exit
  exit
end

if herb == "luminescent indigo mushroom"
  respond '*'
  respond '* I\'ve got some bad news for you.'
  respond '*'
  respond '* You can\'t explicitly forage for luminescent indigo mushrooms.'
  respond '* All you can do is forage for some other herb and hope to accidentally find one.'
  respond '*'
  exit
end

herb = 'ayana leaf' if herb =~ /ayana (weed|lichen|berry|root)/
herb = "ayana'al leaf" if herb =~ /ayana'al (weed|lichen|berry|root)/

if Room.tags.include?(herb)
  respond "#{herb} is found"
else
  echo  "error: can't find #{herb}"
  similiar = Room.tags.find_all { |tag| tag =~ /#{herb}/ }
  echo "try: #{similiar.join(', ')}" unless similiar.empty?
  exit
end

if location
  echo "Number to find:  #{qty}  Item:  #{herb}  Location:  #{location}"
else
  echo "Number to find:  #{qty}  Item:  #{herb}"
end


# ******HERB ROOM GENERATION******

target_list = Array.new
#occupied_rooms = Array.new



if herb == 'ayana leaf'
  Room.list.each{|room| target_list.push(room.id)  if room.tags.include?("ayana leaf") || room.tags.include?("ayana lichen") || room.tags.include?("ayana weed") || room.tags.include?("ayana berry")|| room.tags.include?("ayana root")}
elsif herb == "ayana'al leaf"
  Room.list.each{|room| target_list.push(room.id)  if room.tags.include?("ayana'al leaf") || room.tags.include?("ayana'al lichen") || room.tags.include?("ayana'al weed") || room.tags.include?("ayana'al berry")|| room.tags.include?("ayana'al root")}
else
  Room.list.each { |room| target_list.push(room.id) if room.tags.include?(herb) }
end

previous, shortest_distances = Map.dijkstra(Room.current.id)

if location
  target_list.delete_if { |room_num| (Room[room_num].location == nil && Room[room_num].title[0] !~ /#{location}/i) }
  target_list.delete_if { |room_num| (Room[room_num].location != nil && Room[room_num].location !~ /#{location}/i) }
end

if location and target_list.size == 0
  location_list = []
  Room.list.each{|places| location_list.push(places.location) if places.tags.include?(herb)}
  location_list = location_list.flatten.uniq
  location_list.delete_if {|x| x == true}
  location_list.delete_if {|x| x == nil}
  puts "#{monsterbold_start} The location does not seem valid. Here is a list of locations that have that herb#{monsterbold_end}"
  location_list.each{|locations| respond "#{locations}"}
  exit
end

target_list.delete_if { |room_num| shortest_distances[room_num].nil? }
wait_time = 20  #was 20
wait_time += 580 if location
target_list.delete_if { |room_num| shortest_distances[room_num].to_i > wait_time }
target_list.sort! { |a,b| shortest_distances[a] <=> shortest_distances[b] }
echo "**"
target_list.each{ |item|
  echo "#{Room[item].title}, #{item}"
}
room = Room.current.id
for herb_room in target_list



  start_script 'go2', [ herb_room.to_s ]
  wait_while { running?('go2') }

  # if GameObj.pcs != nil
  #   if occupied_rooms != nil
  #     echo 'Room is occupied, let\'s try back later.'
  #     occupied_rooms.push herb_room
  #     if target_list.last == herb_room
  #       target_list = occupied_rooms
  #       occupied_rooms = nil
  #     end
  #   else
  #     echo 'Room is still occupied. Another time, maybe?'
  #   end
  #   next
  # end


  foragename = herb

  if foragename == 'twisted black mawflower' then foragename = 'mawflower'
  elsif foragename == 'stem of freesia flowers' then foragename = 'freesia flowers'
  elsif foragename == 'small green olive' then foragename = 'green olive'
  elsif foragename == 'mass of congealed slime' then foragename = 'congealed slime'
  elsif foragename == 'oozing fleshsore bulb' then foragename = 'fleshsore bulb'
  elsif foragename == 'rotting bile green fleshbulb' then foragename = 'fleshbulb'
  elsif foragename == 'discolored fleshbinder bud' then foragename = 'fleshbinder bud'
  elsif foragename == 'slime-covered grave blossom' then foragename = 'grave blossom'
  elsif foragename == "sprig of Imaera's Lace" then foragename = "Imaera's Lace"
  elsif foragename == 'handful of elderberries' then foragename = 'elderberries'
  elsif foragename == 'sprig of wild lilac' then foragename = 'lilac'
  elsif foragename == 'fragrant white lily' then foragename = 'white lily'
  elsif foragename == 'handful of huckleberries' then foragename = 'huckleberries'
  elsif foragename == 'trollfear mushroom' then foragename = 'mushroom'
  elsif foragename == 'bunch of wild grapes' then foragename = 'wild grapes'
  elsif foragename == 'handful of blueberries' then foragename = 'blueberries'
  elsif foragename == 'handful of raspberries' then foragename = 'raspberries'
  elsif foragename == 'layer of onion skin' then foragename = 'onion skin'
  elsif foragename == 'vermilion fire lily' then foragename = 'fire lily'
  elsif foragename == 'handful of walnuts' then foragename = 'walnuts'
  elsif foragename == 'orange tiger lily' then foragename = 'tiger lily'
  elsif foragename == 'small branch of acacia' then foragename = 'branch of acacia'
  elsif foragename == 'golden flaeshorn berry' then foragename = 'flaeshorn berry'
  elsif foragename == 'white alligator lily' then foragename = 'alligator lily'
  elsif foragename == 'dark pink rain lily' then foragename = 'pink rain lily'
  elsif foragename == 'white spider lily' then foragename = 'spider lily'
  elsif foragename =~ /(silver|bright blue|fiery red|snow white|pale violet|peach|soft orange|pink|yellow|lavender|ice blue|azure|bright red|pale green|soft yellow|bright green|light red) iceblossom/ then foragename = 'iceblossom'
  elsif foragename =~ /(bent|short|heavy) stick/ then foragename = 'stick'
  elsif foragename =~ /(blue|red|green|pink|purple|yellow|white) mold/ then foragename = 'mold'
  elsif foragename == 'handful of snowberries' then foragename = 'snowberries'
  elsif foragename == 'sprig of edelweiss' then foragename = 'edelweiss'
  elsif foragename == 'handful of bearberries' then foragename = 'bearberries'
  elsif foragename == 'cluster of woad leaves' then foragename = 'woad leaves'
  elsif foragename == 'large black toadstool' then foragename = 'black toadstool'
  elsif foragename == 'some glowing green lichen' then foragename = 'green lichen'
  elsif foragename == 'luminescent green fungus' then foragename = 'green fungus'
  elsif foragename == 'black-tipped wyrm thorn' then foragename = 'wyrm thorn'
  elsif foragename == 'some fetid black slime' then foragename = 'black slime'
  elsif foragename == 'sprig of sky-blue delphinuris' then foragename = 'delphinuris'
  elsif foragename == 'handful of mustard seeds' then foragename = 'mustard seeds'
  elsif foragename == 'handful of snowberries' then foragename = 'snowberries'
  elsif foragename == 'sprig of wild phlox' then foragename = 'phlox'
  elsif foragename == 'cluster of gorse' then foragename = 'gorse'
  elsif foragename == 'giant glowing toadstool' then foragename = 'glowing toadstool'
  elsif foragename == 'sprig of Imaera\'s Lace' then foragename = 'lace'
  end

  Spell[213].cast if Spell[213].known? and Spell[213].affordable? and settings['sanct_rooms']

  empty_hands if settings['stow_stuff']

  ## forage loop ##
  # All bonuses pulled from GSWiki. Blame them, not me (or Zzentar)
  loop {

    if Spell[402].known? and not Spell[402].active?
      Spell[402].cast   #Presence, no effect if 2x perception
    end

    if Spell[506].known? and not Spell[506].active?
      fput 'stop 506'
      Spell[506].cast   #Haste
    end

    if Spell[604].known? and not Spell[604].active?
      Spell[604].cast   #Foraging, +10 to roll
    end

    if Spell[1035].known? and not Spell[1035].active? and settings['sing_tonis']
      Spell[1035].cast  #Song of Tonis
    end

    if Spell[9704].known? and not Spell[9704].active?
      Spell[9704].cast     #Sigil of Resolve, +GoS Ranks/3
    end

    if not kneeling? and settings['kneel_to_forage']
      fput 'kneel'      #Kneeling, +10 to roll
    end

    if not hiding? and settings['hide_to_forage']
      fput 'hide'
    end

    if herb_count > (qty - 1)
      # echo "task done"
      break
    end

    forage_result = dothistimeout 'forage for ' + foragename, 5, /^You forage|^You make so much noise that only the dead would not notice you thrashing about in your unsuccessful search\.$|^You stumble about in a fruitless attempt at foraging\.$|you are unable to find anything useful|^As you carefully forage around you (can find no hint|see no evidence) of what you are looking for\.|you are fairly certain this is where it can be found|^You begin to forage around when your hand comes into contact with something that stabs you in the finger\.$|^As you forage around you suddenly feel a sharp pain in your right hand!|^You begin to forage around when suddenly you feel a burning sensation in your hand\.$|you realize you should probably leave some things here for other people to find|^You fumble about so badly in your search that you can only hope no one was watching you\.$/
    sleep 0.5
    waitrt?
    if forage_result =~ /^You forage briefly and manage to find/
      if righthand
        foragehand = GameObj.right_hand
      else
        foragehand = GameObj.left_hand
      end
      if foragehand.name == 'luminescent indigo mushroom'
        fput "mark ##{foragehand.id}"
        shroom_count += 1
        herb_count -= 1
      end
      fput "put ##{foragehand.id} in ##{lootsack.id}"
      herb_count += 1

    elsif forage_result =~ /^As you forage around you suddenly feel a sharp pain in your right hand!/
      if (limb_repair = Spell[1102]) and limb_repair.known? and limb_repair.affordable?
        limb_repair.cast
      else
        start_script 'useherbs'
        wait_while { running? 'useherbs' }
      end
    end

    #  ****try again unless the room is foraged out or task is finished****
    #
    if forage_result =~ /fairly certain this is where it can be found./
      echo 'This is a night-only or day-only herb, and you are foraging at the wrong time of day for it.'
      echo 'Try again later or earlier.'
      die_early = true
      break
    elsif forage_result.nil? or forage_result =~ /^As you carefully forage around you (can find no hint|see no evidence) of what you are looking for\./
      echo "bad room or the script timed out"
      fill_hands if settings['stow_stuff']
      break
    elsif forage_result =~ /you are unable to find anything useful|^As you forage around, you realize you should probably leave some things here for other people to find./
      echo "foraged out"
      fill_hands if settings['stow_stuff']
      break
    end
  }
  if die_early or herb_count > (qty - 1)
    echo "task done"
    break
  end

end
fill_hands if settings['stow_stuff']
start_script('go2', [ room.to_s ])
wait_while{running?('go2')}

echo "Found " + herb_count.to_s + " of " + herb


total_time = Time.now.to_f - start_time.to_f
##respond "Time to forage: #{((Time.now.to_f - start_time.to_f) / 60.00).as_time}"
##respond (total_time/60.0).as_time
puts "#{monsterbold_start}It took #{Time.now.to_i - start_time.to_i} seconds to find #{herb_count} pieces of #{foragename}#{monsterbold_end}"
puts "#{monsterbold_start}You still need #{qty - herb_count} more pieces of #{foragename}#{monsterbold_end}." if herb_count < qty
if shroom_count > 0
  puts "*"
  puts "*"
  puts "#{monsterbold_start}* You also found #{shroom_count > 1 ? shroom_count : 'a'} luminescent indigo mushroom#{shroom_count > 1 ? 's! They are' : '! It is'} rare to find and can be used in ranger resist potions.#{monsterbold_end}"
  puts "#{monsterbold_start}* #{shroom_count > 1 ? 'They have' : 'It has'} been put in your #{lootsack.name} and MARKed unsellable.#{monsterbold_end}"
  puts "*"
  puts "*"
end
