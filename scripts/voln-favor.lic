=begin

  Updated Voln favor tracking using the new RESOURCE command.

  Set the script to start on login.
  Type "favor" with the script running to see how much favor you have.

  This requires Ruby 2.5+

  If you aren't sure your Ruby version, download version.  Run ;version
  If you have an old version of Ruby you can download the latest ruby4lich http://bit.ly/WinLich
  During the install only select to install Ruby and you will be good.

  Todo:
    Add favor gain/spent for session
    Add ability to customize formatting

    Requres: oleani-lib.lic (will auto download)
     author: elanthia-online
       game: Gemstone
       tags: voln, favor
 previously: asexualfavors.lic
    version: 1.0.1

   changelog:
      1.0.1 (2023-09-18):
        bugfix for resource command squelching eating mono close tag
        remove running in quiet mode
        rubocop cleanup
      1.0.0 (2021-10-27):
        renamed asexualfavors script and objects to voln-favor
        updated regex to match current system undead release message
      0.0.6 (2020-11-11):
        Updated to the newest Oleani
        Pushed to Elanthia-Online
      0.0.5 (2020-07-07):
        Added Ruby version check
      0.0.4 (2020-06-29):
        Adjusted some output formatting
      0.0.3 (2020-06-26):
        Added Voln Member check
        Added initial notice to calibrate by praying
        Added Voln Master check to hide certain information
      0.0.2 (2020-06-25):
        Fixed version error
        Fixed pray favor updating
      0.0.1 (2020-06-25):
        Initial Release

=end

begin
  if Gem::Version.new(RUBY_VERSION) <= Gem::Version.new('2.4.0')
    echo "You appear have an outdated version of Ruby."
    exit
  end
rescue
  echo "You appear have an outdated version of Ruby."
  exit
end

begin
  raise "Oleani is missing" unless Script.exists? "oleani-lib.lic"
  load 'scripts/oleani-lib.lic'
  raise "Oleani version is out of date" if Oleani::version < Gem::Version.new('0.0.9')
rescue => error
  echo error.message
  echo "Downloading Oleani-lib.lic in 5 seconds."
  echo "Please ;kill voln-favor if you do not want to continue!"
  sleep(5)
  Script.run('repository', 'download oleani-lib.lic')
  retry if Script.exists? "oleani-lib.lic"
  echo "Some how a core script is missing.  Don't know what happened."
  exit
end

class VolnFavors
  VERSION = "1.0.0"

  def self.version
    Gem::Version.new(VERSION)
  end

  class Config
    # include Oleani::Record

    attr_reader :symbol, :step, :initial

    def initialize
      @symbol = CharSettings[:symbol] ||= 0
      @step = CharSettings[:step] ||= 0
      @initial = CharSettings[:initial] ||= false
    end

    def symbol=(amount)
      CharSettings[:symbol] = amount
      @symbol = CharSettings[:symbol]
    end

    def step=(amount)
      CharSettings[:step] = amount
      @step = CharSettings[:step]
    end

    def initial=(res)
      CharSettings[:initial] = res
      @initial = CharSettings[:initial]
    end
  end

  def config
    @config
  end

  UNDEAD_RELEASE = /^.*?sound like a .*? as a white glow separates/

  RANK_UP = /^(?:<.*?>)?The (?:<.*?>)?monk(?:<.*?>)? concludes ceremoniously.*Go now and continue your work\./

  PRAY_MESSAGES = Hash.new

  # Wehnimer's Landing, Icemule Trace, Solhaven, and Ta'Vaalor Visions
  PRAY_MESSAGES["vision of a flower that has not yet begun to open"] = 0
  PRAY_MESSAGES["vision of a baby eagle barely hatched from its egg"] = 0.10
  PRAY_MESSAGES["vision of a butterfly drying its wings on a leaf"] = 0.20
  PRAY_MESSAGES["vision of the headwaters of a mighty river"] = 0.30
  PRAY_MESSAGES["vision of a weaver on a loom, nearly half way in the creation of an intricate tapestry"] = 0.40
  PRAY_MESSAGES["brief vision of twin bowls of wine"] = 0.50
  PRAY_MESSAGES["vision of a hiker as he clears the peak of a hill and begins to descend the other side"] = 0.60
  PRAY_MESSAGES["vision of a lute, finely crafted, but missing a third of its strings"] = 0.70
  PRAY_MESSAGES["vision of a rainbow forming as a thunder storm begins to abate"] = 0.80
  PRAY_MESSAGES["vision of a path as it winds its way through a forest and to the edge of a clear pool"] = 0.90
  PRAY_MESSAGES["vision of a pool of clear water"] = 1

  # Todo: Add River's Rest Visions

  def cleanup
    DownstreamHook.remove("favor_hook")
    @command_watcher.stop
    @timer_thread.kill
  end

  def update_favor(favor)
    last_favor = @config.symbol

    change = favor - last_favor

    favor_gain = change > 0 ? change : 0

    @config.symbol = favor

    @config.step += favor_gain

    step_favor = self.favor_to_step

    step_favor_text = " - **Current Step:** `#{@config.step}/#{step_favor}` !!(#{(@config.step * 100) / step_favor}%)!!" if Society.rank < 26

    if (change != 0) || @force
      Oleani::IO.send "[**Total Favor**: `#{Oleani::Helpers.format_number(@config.symbol)}` - **Change (+/-):** `#{change}`#{Oleani::Helpers.format_number(step_favor_text)}]"
    end

    @force = false
  end

  def install_hook
    DownstreamHook.add("favor_hook", proc { |server_string|
      if server_string =~ /^\s*?Health: \d+/ && @state == :capture
        @capture_resource = true
      elsif server_string =~ /<output class=""/
        @capture_resource = false
        @state = :sleep
      end

      server_string unless @capture_resource
    })
  end

  def favor_to_step
    (Society.rank * 100) + (((XMLData.level**2) * (((Society.rank + 2) / 3) * 5)) / 3)
  end

  def start_timer_thread
    @timer_thread = Thread.new {
      loop {
        sleep(0.1)
        @timers.wait
      }
    }
  end

  def monitor_downstream
    while (line = get)
      if line =~ UNDEAD_RELEASE
        @send_resource_request.reset
      elsif line =~ RANK_UP
        @config.step = 0
        @send_resource_request.reset
      elsif line =~ /^After a few moments of prayer and reflection you see a (.*?)\./
        if PRAY_MESSAGES[$1] == 1
          @config.step = self.favor_to_step
        else
          floor_favor = (self.favor_to_step * PRAY_MESSAGES[$1]).ceil
          ceiling_favor = (self.favor_to_step * (PRAY_MESSAGES[$1] + 0.1)).ceil
          @config.step = @config.step.between?(floor_favor, ceiling_favor) ? @config.step : floor_favor
        end

        @force = true
        @send_resource_request.reset
      elsif line =~ /^(?:<popBold\/>|\s*)?Voln Favor: ([0-9,]+)/
        favor = $1
        update_favor(favor.gsub(/[,\s]*/, '').to_i)
      end
    end
  end

  def self.run(script)
    VolnFavors.new(script)
  end

  def initialize(script)
    @config = Config.new
    @script = script
    @script.want_downstream = false
    @script.want_downstream_xml = true
    self.validate_reqs

    @force = true
    @timers = Oleani::Timers::Group.new
    @command_watcher = Oleani::CommandMonitor.new
    @timer_thread = nil
    @capture_resource = false
    @state = :sleep

    @state = :capture
    $_SERVER_.puts "#{$cmd_prefix}resource\n"

    @send_resource_request = @timers.after(0.7) {
      @state = :capture
      $_SERVER_.puts "#{$cmd_prefix}resource\n"
    }

    before_dying { self.cleanup }

    self.setup_commands
    self.install_hook
    self.start_timer_thread

    @command_watcher.start

    Oleani::IO.send("**VOLN-FAVORS** Version[`#{VERSION}`] Running")

    # Blocking call.  Must come last
    self.monitor_downstream
  end

  def validate_reqs
    if running?("sexual-favors")
      Oleani::IO.send("**Killing Sexual Favors as it interferes with us.**")
      Oleani::IO.send("**You should make sure that sexual favors does not autostart**")
      kill_script("sexual-favors")
    end

    if running?("asexualfavors")
      Oleani::IO.send("**Killing ASexualFavors as it is outdated.**")
      Oleani::IO.send("**You should make sure that ASexualFavors does not autostart**")
      kill_script("asexualfavors")
      Object.send(:remove_const, :ASexualFavors)
    end

    if Society.status !~ /Voln/
      dothistimeout 'society', 15, /You may view your society|You may reset your society|Past society affiliations/
      if Society.status !~ /Voln/
        Oleani::IO.send("@@You don't seem to be a member of Voln.  This script isn't for you.@@")
        exit
      end
    end

    if !@config.initial && Society.rank < 26
      Oleani::IO.send("!!FIRST TIME RUNNING NOTICE!!")
      Oleani::IO.send("`Please calibrate VOLN-FAVORS by praying at a Voln Temple`\n\n")
      @config.initial = true
    end
  end

  def setup_commands()
    @command_watcher.on("favors", "fav[or|o]") do
      step_favor = favor_to_step
      Oleani::IO.send("\n     **Total Favor:**` #{Oleani::Helpers.format_number(@config.symbol)}`")
      Oleani::IO.send("    **Current Step:** `#{Oleani::Helpers.format_number(@config.step)}/#{Oleani::Helpers.format_number(step_favor)}` !!(#{(@config.step * 100) / step_favor}%)!!") if Society.rank < 26
      Oleani::IO.send("\n")
    end

    @command_watcher.on("symbol", "sy[mbol|mbo|mb|m]", false) do |_args|
      @send_resource_request.reset
    end
  end
end

VolnFavors.run(script)
