=begin
    Looting loop script
    Will attempt to continuously loot dead mobs. Can use ;sloot, ;eloot, ;foreach, or LOOT ROOM

    SYNTAX - ;looploot <OPTION>
    If ran with no option, will loot corpses and use ;foreach to loot things to your ;vars gemsack container.

    OPTION Selections Include:
         SLOOT           - Will use ;sloot to search/loot
         ELOOT           - Will use ;eloot to search/loot
         NOLOOT          - Will loot corpse, but do nothing with items.
         PICKUP          - Will only pickup gems, not loot corpses
         STOW            - Will set STOW SET GEM SACK and LOOT ROOM
         <CONTAINERNAME> - Will loot corpses and attempt to use ;foreach to put items in said container

       todo: unknown
     author: Tysong (horibu on PC)
       name: looploot
       tags: looting, gems
    version: 1.2

    changelog:
        1.2 (2023-10-01)
            Added ELOOT option
            rubocop cleanup
        1.1 (2018-07-29)
            Added STOW option
        1.0 (2018-01-13)
            Initial release
=end

previous_container = nil

before_dying {
  if Script.current.vars[1] =~ /stow/
    respond ""
    respond ""
    respond ""
    respond "Be Sure To Reset Stow"
    respond "STOW SET GEM \<CONTAINERNAME\>"
    respond ""
    respond ""
    respond ""
    fput "stow set gem ##{previous_container}"
  end
}

if Script.current.vars[1].downcase =~ /help/
  echo "    Looting loop script
    Will attempt to continuously loot dead mobs. Can use ;sloot, ;eloot, ;foreach, or LOOT ROOM

    SYNTAX - ;looploot <OPTION>
    If ran with no option, will loot corpses and use ;foreach to loot things to your ;vars gemsack container.

    OPTION Selections Include:
         SLOOT           - Will use ;sloot to search/loot
         ELOOT           - Will use ;eloot to search/loot
         NOLOOT          - Will loot corpse, but do nothing with items.
         PICKUP          - Will only pickup gems, not loot corpses
         STOW            - Will set STOW SET GEM SACK and LOOT ROOM
         <CONTAINERNAME> - Will loot corpses and attempt to use ;foreach to put items in said container"
  exit
elsif Script.current.vars[1].downcase =~ /sloot/
  loop {
    ['clothing', 'ammo', 'box', 'gem', 'herb', 'jewelry', 'lockpick', 'magic', 'reagent', 'scroll', 'uncommon', 'wand', 'valuable'].each { |type|
      if !UserVars.send("#{type}sack").nil? and UserVars.send("#{type}sack").length > 0 and GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.send("#{type}sack").strip)}/i }
        next
      else
        next if type == 'skinweapon'
        # next if !settings["enable_loot_#{type}"]
        echo "** failed to find #{type} sack" if Char.name =~ /Kaeynne|Tysong|Fyrentennimar/
        fput "inventory"
        pause 1
      end
    }
    GameObj.npcs.each { |monster|
      if monster.status =~ /dead/ && !(running? "sloot")
        start_script "sloot" if !(running? "sloot")
        wait_while { running? "sloot" }
      end
    }
    sleep 1.5
  }
elsif Script.current.vars[1].downcase =~ /noloot/
  loop {
    GameObj.npcs.each { |monster|
      if monster.status =~ /dead/
        fput "loot"
      end
    }
    sleep 1.5
  }
elsif Script.current.vars[1].downcase =~ /pickup/
  Script.current.want_downstream_xml = true
  result = dothistimeout "stow list", 5, /  (.*) \(gem\)$/
  if result =~ /  (?:a|an) <a exist="(.*)" noun="(?:.*)"\>(?:.*)<\/a\>(?:.*) \(gem\)$/
    previous_container = $1
  end
  if Script.current.vars[2]
    container = Script.current.vars[0].split(' ')[1..-1].join(' ')
    fput "stow set gem #{container}"
  else
    fput "stow set gem sack"
  end
  Script.current.want_downstream_xml = false
  loop {
    pause 0.25
    waitrt?
    if GameObj.loot.find { |item| item.type =~ /gem/ }
      fput "LOOT ROOM"
    end
    if GameObj.loot.find { |item| item.type =~ /box/ } && Char.name =~ /Tysong|Rasko/
      fput "LOOT ROOM"
    end

    sleep 1
    waitrt?
  }
elsif Script.current.vars[1].downcase =~ /stow/
  Script.current.want_downstream_xml = true
  result = dothistimeout "stow list", 5, /  (.*) \(gem\)$/
  if result =~ /  (?:a|an) <a exist="(.*)" noun="(?:.*)"\>(?:.*)<\/a\>(?:.*) \(gem\)$/
    previous_container = $1
  end
  if Script.current.vars[2]
    container = Script.current.vars[0].split(' ')[1..-1].join(' ')
    fput "stow set gem #{container}"
  else
    fput "stow set gem sack"
  end
  Script.current.want_downstream_xml = false
  loop {
    GameObj.npcs.each { |monster|
      if monster.status =~ /dead/
        fput "loot"
      end
    }
    pause 0.25
    waitrt?
    if GameObj.loot.find { |item| item.type =~ /gem/ }
      fput "LOOT ROOM"
    end
    if GameObj.loot.find { |item| item.type =~ /box/ } && Char.name =~ /Tysong|Rasko/
      fput "LOOT ROOM"
    end

    sleep 1
    waitrt?
  }
elsif Script.current.vars[1].downcase =~ /eloot/
  loop {
    Script.run('eloot') if GameObj.npcs.any? { |monster| monster.status =~ /dead/ }
    sleep(1.5)
  }
else
  loop {
    GameObj.npcs.each { |monster|
      if monster.status =~ /dead/
        fput "loot"
      end
    }
    pause 1
    waitrt?
    if GameObj.loot.find { |item| item.type =~ /gem/ }
      if Script.current.vars[1]
        Script.run("foreach", "gem in room; move to my #{Script.current.vars[1]}")
      else
        Script.run("foreach", "gem in room; move to my #{UserVars.gemsack}")
      end
    end
    sleep 1
    waitrt?
  }
end
