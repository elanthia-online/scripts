=begin

  This script formats the output of the exp verb a better HUD

	 author: Ondreian
	   tags: cosmetic, experience
  version: 0.1
  
  changelog:
    0.1: initial release

=end

begin
  require "terminal-table"  
rescue => _exception
  _respond "<b>this script needs the `terminal-table` gem</b>"
  exit
end

module Experfect
  module Transformer
    EXP_OUTPUT_SIZE = 7

    @state = :wait
    @buffer = []

    def self.buffer()
      @buffer
    end

    def self.handle_bundled_kv(k, v)
      k.split("/").zip(v.split("/").map {|int|
        int =~ /[\d+,]/ ? int.gsub(",", "").to_i : int
      })
    end

    def self.handle_str(v)
      # skip by casting to 0
      return 0 if v.downcase == "none"
      return v
    end

    def self.with_commas(str)
      str.to_s.reverse
        .gsub(/(\d{3})(?=\d)/, '\\1,')
        .reverse
    end

    def self.transform_kv(k, v)
      return handle_bundled_kv(k, v) if k.include?("/")
      [k, v =~ /[\d+,]/ ? v.gsub(",", "").to_i : handle_str(v)]
    end

    def self.transform_line(line)
      line.strip.split(/\s{2,}/)
        .map {|kv| transform_kv(*kv.split(":\s")) }
        .to_a
    end

    if Opts["test"]
      Log.out transform_line %[          Level: 100                         Fame: 89,594,910]
      Log.out transform_line %[      Total Exp: 16,346,809         Death's Sting: None]
      Log.out transform_line %[  Long-Term Exp: 4,841]
      Log.out transform_line %[      PTPs/MTPs: 3/0                         ATPs: 0]
      exit
    end

    def self.make_hud(buffered)
      rows = @buffer
        .map{|line| transform_line(line) }
        .flatten
        .each_slice(2)
        .select {|k, v| v.is_a?(String) or v > 0}
        .map {|k,v|
          # todo: tracking over time like ;xp
          [{value: k, alignment: :right}, with_commas(v)] 
        }

      Terminal::Table.new(rows: rows)
    end

    def self.flush(buffered)
      hud = make_hud(buffered)
      _respond hud
      buffered.clear
    end

    def self.consume(incoming)
      @buffer << incoming
    end

    def self.attach()
      DownstreamHook.add(self.name, -> incoming {
        begin
          if @buffer.size.eql?(EXP_OUTPUT_SIZE)
            flush(@buffer)
            @state = :wait
            return incoming
          end
          
          if @state.eql?(:active)
            consume(incoming)
            return nil
          end
          
          if incoming =~ %r[^\s+Level:]
            @state = :active
            consume(incoming)
            return nil
          end
          
          return incoming
        rescue => exception
          respond exception
          return incoming
        end
      })
      before_dying {DownstreamHook.remove(self.name)}
      sleep
    end
  end
end

Experfect::Transformer.attach()