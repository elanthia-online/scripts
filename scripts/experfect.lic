=begin

  This script formats the output of the exp verb a better HUD

	 author: Ondreian
	   tags: cosmetic, experience
  version: 0.1
  
  changelog:
    0.1: initial release

=end

begin
  require('terminal-table')
rescue => exception
  respond "the terminal-table gem is required"
  respond exception
end

module Experfect
  module Progress
    @state ||= {}
    @state   = {} if Script.current.vars.include?("--reset")

    @state[:start]   ||= {}
    @state[:current] ||= {}

    def self.state()
      @state
    end

    def self.untrackable?(k)
      k.downcase =~ /exp to/ or
      k.downcase =~ /(m|p)tps$/ or
      k.downcase =~ /until lvl/ or
      k.downcase =~ /sting/
    end

    def self.track(k, v)
      return if untrackable?(k)
      @state[:start][k] ||= v
      @state[:current][k] = v
    end

    def self.get(k)
      return 0 if untrackable?(k)
      initial_value = @state.dig(:start, k)   || 0
      current_value = @state.dig(:current, k) || 0
      current_value - initial_value
    end

    def self.render(val)
      return "" if val == 0
      abs = val.abs
      string = Transformer.with_commas(abs)
      return "-%s" % string if val < 0
      return string
    end
  end

  module Transformer
    EXP_OUTPUT_SIZE = 8

    @state   = :wait
    @buffer  = []
    
    def self.buffer()
      @buffer
    end

    def self.handle_bundled_kv(k, v)
      # special case for field exp transformer
      k = "Field Exp/Max Field Exp" if k.downcase =~ /field exp/
      k.split("/").zip(v.split("/").map {|int|
        int =~ /[\d+,]/ ? int.gsub(",", "").to_i : int
      })
    end

    def self.handle_str(v)
      # skip by casting to 0
      return 0 if v.downcase == "none"
      return v
    end

    def self.with_commas(str)
      str.to_s.reverse
        .gsub(/(\d{3})(?=\d)/, '\\1,')
        .reverse
    end

    def self.transform_kv(k, v)
      return handle_bundled_kv(k, v) if k.include?("/") or v.include?("/")
      [k, v =~ /[\d+,]/ ? v.gsub(",", "").to_i : handle_str(v)]
    end

    def self.transform_line(line)
      line.strip.split(/\s{2,}/)
        .map {|kv| transform_kv(*kv.split(":\s")) }
        .to_a
    end

    def self.filter_hud(k, v)
      return false if k.downcase.eql?("level") && v.eql?(100)
      return false if k.downcase.eql?("deeds") && v > 4
      v.is_a?(String) or v > 0
    end

    def self.make_hud(buffered)
      rows = buffered
        .map{|line| transform_line(line) }
        .flatten
        .each_slice(2)
        .select {|k, v| filter_hud(k, v)}
        .map {|k,v|
          begin
            Progress.track(k, v)
              [{value: k, alignment: :right}, with_commas(v), 
                Progress.render(Progress.get(k))]   
          rescue => exception
            respond(exception)
          end
        }

      Terminal::Table.new(
        rows: rows, 
        headings: [" ", "current", "progress"])
    end

    if Script.current.vars.include?("--test")
      test_1 = <<~EXP
          Level: 100                         Fame: 49,098,927
     Experience: 9,914,814              Field Exp: 2/1,000
  Ascension Exp: 227,390            Recent Deaths: 0
      Total Exp: 10,142,204         Death's Sting: None
  Long-Term Exp: 0
 Exp to next TP: 186              Exp to next ATP: 22,610
      PTPs/MTPs: 28/0                        ATPs: 0
          Deeds: 7
      EXP
      test_1 = test_1.split("\n").map(&:strip)
      _respond make_hud(test_1).to_s
    end

    def self.flush(buffered)
      hud = make_hud(buffered)
      buffered.clear
      return hud
    end

    def self.consume(incoming)
      @buffer << incoming
    end

    def self.attach()
      begin
        DownstreamHook.add(self.name, -> incoming {
          begin
            if @buffer.size.eql?(EXP_OUTPUT_SIZE)
              @state = :wait
              hud = flush(@buffer).to_s
              return hud + incoming
            end
            
            if @state.eql?(:active)
              consume(incoming)
              return nil
            end
            
            if incoming =~ %r[^\s+Level:]
              @state = :active
              consume(incoming)
              return nil
            end
            
            return incoming
          rescue => error
            DownstreamHook.remove(self.name)
            respond error
            return incoming
          end
        })
        before_dying {DownstreamHook.remove(self.name)}
        sleep
      ensure
        DownstreamHook.remove(self.name)
      end
    end
  end
end

exit if Script.current.vars.include?("--test")
Experfect::Transformer.attach()