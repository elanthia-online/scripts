# frozen_string_literal: true

=begin
  A reworking of Lichmeister Tillmen's inactivespells script
  All due credit to concept and vision to Tillmen (tillmen@lichproject.com)

        author: elanthia-online
  contributors: Tillmen, Elanthia-Online
          game: gs
          tags: spells, debuffs, cooldowns, buffs, wizardfe, uberspells
       version: 1.0.0
      required: Lich >= 5.0

     Help Contribute: https://github.com/elanthia-online/scripts

  Version Control:
    Major_change.feature_addition.bugfix
  v1.0.0 (2023-06-28)
    - Initial release
    - Rework of Tillmen's inactivespells script
    - Add GTK3 support
    - Ordered spells in ascending order based on spell number
    - Permit differentiation in progress bar colors

  ToDo:
    1) Refactor code (get rid of eval and find better balance) - done
    2) Enable user personalization of colors, fonts
    3) Enable feature to cast from the window

=end

no_kill_all
no_pause_all
# hide_me

# Settings.load # deprecated call, no longer applicable in Lich5
window_width = Settings['window_width'] || 240
window_height = Settings['window_height'] || 25
window_position = Settings['window_position']

@bars = {}
@spell_duration = {}
@spell_p_bar = {}
duration = {}
@window = @bar_box = @color = done = window_close = nil

Gtk.queue do
  @window = Gtk::Window.new(:toplevel)
  @window.title = Char.name.to_s
  @window.icon = @default_icon
  @window.signal_connect('delete_event') { window_close = true }
  @window.resize(window_width.to_i, window_height.to_i)
  @window_position[0] = [[0, window_position[0].to_i].max, (Gdk::Screen.default.width - window_width)].min
  @window_position[1] = [[0, window_position[1].to_i].max, (Gdk::Screen.default.height - window_height)].min
  @window.move(window_position[0].to_i, (window_position[1].to_i + 28)) # test against Win / Linux
  done = true
  @bar_box = Gtk::Box.new(:vertical, 0)
  @window.add(@bar_box)
end

wait_until { done }

before_dying do
  done = false
  Gtk.queue do
    window_width = @window.allocation.width
    window_height = @window.allocation.height
    window_position = @window.position
    @window.destroy
    done = true
  end
  wait_until { done }
  Settings['window_width'] = window_width
  Settings['window_height'] = window_height
  if window_position.instance_of?(Array) && (window_position[0].to_i > -5) && (window_position[1].to_i > -5)
    Settings['window_position'] = window_position
  end
  Settings.save
end

def palette(circle)
  if Gtk::Settings.default.gtk_application_prefer_dark_theme?

    rainbow = { '1' => '#9AA5B1', '2' => '#7B8784', '3' => '#616E7C',
              '4' => '#627D98', '5' => '#486581', '6' => '#625D52',
              '7' => '#504A40', '9' => '#334E68', '10' => '#102A43',
              '11' => '#616E7C', '12' => '#857F72', '16' => '#323F4B',
              '17' => '#BDBDBD', '90' => '#303F9F', '95' => '#00879B',
              '96' => '#0089B7', '97' => '#0089B7', '98' => '#0089B7',
              '99' => '#0089B7', '6666' => '#C62828' }
  else
    rainbow = { '1' => '#DDA0DD', '2' => 'violet', '3' => 'orchid',
                '4' => 'powderblue', '5' => 'skyblue', '6' => 'greenyellow',
                '7' => 'hotpink', '9' => 'deepskyblue', '10' => 'gold',
                '11' => 'burlywood', '16' => 'lightcoral', '17' => 'lightgray',
                '90' => 'lime', '95' => 'lightgreen', '96' => 'lightsteelblue',
                '97' => 'turquoise', '6666' => 'lightsalmon' }
  end
  rainbow.fetch(circle, '#C62828')
end

until window_close
  Spell.active.each do |spell|
    Gtk.queue do
      unless @bars[spell.num]
        # start build a bar - if a bar for a spell is not present, build a bar
        duration[spell.num] = proc { (spell.duration).to_f }.call unless spell.stacks
        @bars[spell.num] = Gtk::Paned.new(:horizontal)
        @spell_p_bar[spell.num] = Gtk::ProgressBar.new
        @spell_duration[spell.num] = Gtk::Label.new
        @spell_duration[spell.num].set_width_chars(9)
        @s_overlay = Gtk::Overlay.new

        circle = (spell.num).to_s[0..-3]
        @circle_color = palette(circle)
        provider = Gtk::CssProvider.new
        provider.load(data: "label { font-weight: bold; }\
                            trough {font-weight: bold; min-height: 22px; }\
                            progress {font-weight: bold; min-height: 20px; background-image: none; background-color: %s;}" % @circle_color)
        @spell_p_bar[spell.num].style_context.add_provider(provider, Gtk::StyleProvider::PRIORITY_USER)
        @s_overlay.add(@spell_p_bar[spell.num])
        @s_label = Gtk::Label.new(spell.name.to_s)
        @s_overlay.add_overlay(@s_label)
        @bars[spell.num].add1(@spell_duration[spell.num])
        @bars[spell.num].add2(@s_overlay)
        @bars = @bars.sort_by { |k, _v| k }.to_h
        @bar_box.pack_start(@bars[spell.num])
        @bar_box.reorder_child(@bars[spell.num], @bars.keys.index(spell.num))
        # end build a bar - bar is built and inserted at this point
      end

      if spell.stacks
        if (spell.num == 9710) || (spell.num == 9711) || (spell.num == 9719)
          @spell_p_bar[spell.num].set_fraction(spell.timeleft / 3.0)
        else
          @spell_p_bar[spell.num].set_fraction(spell.timeleft / 250.0)
        end
      else
        @spell_p_bar[spell.num].set_fraction(spell.timeleft / duration[spell.num])
      end

      spell.timeleft > 599 ? @spell_duration[spell.num].text = 'Indefinite' : @spell_duration[spell.num].text = (spell.remaining)
      @window.show_all
      @window.keep_above = true
    end
  end

  active = Spell.active.collect(&:num)
  @bars.each_pair do |num, bar|
    Gtk.queue { @bars.delete(num); bar.destroy } unless active.include?(num)
  end

  sleep 0.5

end

#
# Spell number reference
#
# 100 Minor Spiritual
# 200 Major Spiritual
# 300 Cleric Profession
# 400 Minor Elemental
# 500 Major Elemental
# 600 Ranger Profession
# 700 Sorceror Profession
# 900 Wizard Profession
# 1000 Bard Profession
# 1100 Empath Profession
# 1600 Paladin Profession
# 1700 Arcane
# 6666 Death Decay Timer (specific)
# 9000 Various other game timers
# 9500 Armor timers
# 9516 Mana Leech Timer (Specific)
# 9600 Combat Maneuver timers
# 9700 Guardians of Sunfist society
# 9725 Sorcerous Demon Illusion timer
# 9800 Order of Voln society
# 9900 Council of Light society
#
