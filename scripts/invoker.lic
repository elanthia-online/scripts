=begin
  Runs continuously and notifies you when the invoker has returned.
  If you are already in FWI Gardenia Commons it will use them automatically.
  Note: Once it prompts you if you would like to use them,
  the script will not do so automatically if you move in to the room.

        author: elanthia-online
  Contributors: Nesmeor, Athias, Tysong
          name: invoker
          tags: utility, spellup
       version: 2.3.0

  Changelog:
  2.3.0 (2024-06-18)
    - Updated timing to run every even hour using UTC time
    - Rubocop cleanup
  2.2.0 (2021-08-11)
    - Namespace changes to correct messaging
    - Updated header information
    - other minor bug fixes
  2.1.1 (2021-05-15)
    - Bug fixes and tuning
  2.1.0 (2021-05-10)
    - Added customizable script pausing/killing, debugging
  2.0.1 (2021-05-08)
    - Fixed auto & toggling behavior
  2.0.0 (2021-04-28)
    - Script rewritten to be class based (Thanks Athias!)
    - Functionality optimized for less error prone interaction.
    - Script pausing functionality
  1.3.0 (2021-04-27)
    - Updated to Semantic Versioning
    - Created  msg to handle messaging
    - Added error messaging for spells being asked multiple times
  1.2.0 (2021-04-26)
    Added auto-use if in Park room. Removed room customization from command line as the invoker only ever shows up in one place. If you need to change it you can still change the invoker_location variable at the top of the script, but I prefer simplicity where possible :)
  1.1.0 (2021-04-24)
    Added colorized text for stormfront UI

=end

Settings[:scripts_to_pause] ||= ["nesbounty", "sbounty", "bigshot", "nesmapper", "ebounty", "huntpro"]
Settings[:scripts_to_kill]  ||= ["sloot", "poolparty", "eloot"]
Settings[:auto]             ||= false
Settings[:debug]            ||= false

gems_to_load = ["tzinfo"]
failed_to_load = []
gems_to_load.each { |gem|
  unless Gem::Dependency.new(gem).matching_specs.max_by(&:version).nil?
    require gem
  else
    failed_to_load.push(gem)
  end
}
begin
  TZInfo::Timezone.get("America/New_York")
rescue
  failed_to_load.push("tzinfo-data")
end
unless failed_to_load.empty?
  echo "Requires Ruby gems: #{failed_to_load.join(", ")}"
  echo "Please install the above gem(s) to run ;#{Script.current.name}"
  exit
end

class Invoker
  def initialize(auto = false)
    if auto == true
      @auto = true
    else
      @auto = Settings[:auto]
    end
    Invoker.msg("Invoker auto mode: #{@auto}", "info")

    @current_hour = nil
    @decision = false
    @scripts_to_pause = Settings[:scripts_to_pause]
    @scripts_to_kill = Settings[:scripts_to_kill]
    @scripts_to_resume = []
    @dubug = Settings[:debug]

    # This defaults the Town Square, Small Park
    invoker_location = 3677

    loop {
      # Check the current time to see if the invoker is present
      invoker_present = Invoker.check_time
      if invoker_present
        # Capture the current hour to avoid trying multiple times
        new_hour = Time.now.hour
        # Make sure we haven't seen the invoker already
        if @current_hour != new_hour
          @decision = false
          until @decision
            if !Invoker.check_time
              break
            end
            # Automatically ask for spells if in the same room. 284 is duplicate ID
            if Room.current.id == invoker_location and @auto == true
              Invoker.visit_invoker
              Invoker.update_time(new_hour)
            # Otherwise prompt the player to respond
            elsif @auto == true
              Invoker.msg("Invoker is now available, automatically visiting in 15 seconds. ;stop invoker to prevent this.", "info")
              pause 15
              Invoker.halt_scripts
              Invoker.visit_invoker
              Invoker.resume_scripts
              Invoker.update_time(new_hour)
            else
              Invoker.msg("The invoker is now available. YES to visit them, SHAKE to skip this time.", "info")
              result = matchtimeout 30, /A good positive attitude never hurts\.|Shake what\?/
              if result =~ /A good positive attitude never hurts\./
                Invoker.visit_invoker
                Invoker.update_time(new_hour)
              elsif result =~ /Shake what\?/
                Invoker.msg("Skipping invoker this hour.", "info")
                Invoker.update_time(new_hour)
              end
            end
          end
        end
      end
      # Throttle while waiting for time to pass
      sleep(60)
    }
  end

  def self.msg(text, type = "info")
    # send debug messages if debugging
    if (type == "debug" && @debug) || type != "debug"
      _respond Lich::Messaging.msg_format(type, text)
    end
  end

  def self.update_time(new_hour)
    @current_hour = new_hour
    @decision = true
  end

  def self.check_time
    # Is it every EVEN hour between 00 and 15mins past the hour?
    return false if TZInfo::Timezone.get('America/New_York').to_local(Time.now).hour.odd?
    if Time.now.min.between?(00, 15)
      return true
    else
      return false
    end
  end

  def self.go2(cur_loc)
    set_locations = {
      "park"    => "288",
      "fwi"     => "3668",
      "invoker" => "3677",
    }

    if set_locations.include? cur_loc
      location = set_locations[cur_loc]
    else
      location = cur_loc
    end

    return if Room.current.id == location.to_i or Room.current.tags.include?(location)

    fput "unhide" if hidden? or invisible?
    waitrt?
    waitcastrt?
    Script.run("go2", "#{location} --disable-confirm")
    sleep 0.2
  end

  def self.get_spells
    regex_results = Regexp.union(
      /^The invoker states, "I've already granted you some spells\.  Please wait a few minutes before asking again\."$/,
      /^The invoker states, "The cost for my services is 10,000 silver and I will provide a full spellup\.  If you'd like me to continue, please have payment in hand and ASK me again with 30 seconds\."$/,
      /^You hand over your payment to a half-elven invoker garbed in colorful layered robes\.  Shaking back the layered sleeves of her multicolored robes, the invoker releases upon you a flurry of abjurations\.\.\.$/
    )
    results = dothistimeout("ask invoker about spells", 3, regex_results)
    if results =~ /^The invoker states, "I've already granted you some spells\.  Please wait a few minutes before asking again\."$/
      Invoker.msg("You have already asked for spells, please try again later!", "info")
    elsif results =~ /^The invoker states, "The cost for my services is 10,000 silver and I will provide a full spellup\.  If you'd like me to continue, please have payment in hand and ASK me again with 30 seconds\."$/
      fput("ask invoker about spells")
    end
  end

  def self.get_silvers
    return if (current_silvers = Lich::Util.silver_count >= 10_000)
    Invoker.go2('bank')
    fput("withdraw #{10_000 - current_silvers} silver")
    Invoker.go2('invoker')
  end

  def self.visit_invoker
    # Capture current location
    current_room = Room.current.id
    # Go to FWI invoker location
    Invoker.go2('invoker')
    unless Room.current.tags.include?("invoker")
      echo("You do not have ;go2 setup properly to get to FWI.")
      echo("Please update your ;go2 settings to do this.")
      echo("Help for how to do this can be found via ;go2 help")
      exit
    end
    # Go to FWI bank if not enough silver
    Invoker.get_silvers
    # Ask the invoker for spells
    Invoker.get_spells
    # Return to previous location
    Invoker.go2(current_room)
  end

  def self.halt_scripts
    @scripts_to_pause.each { |script|
      Invoker.msg("Invoker.halt_scripts each: #{script}", "debug")
      Invoker.msg("Script.running? #{Script.running?(script)}", "debug")
      if Script.running?(script)
        Script.pause(script)
        @scripts_to_resume.push(script)
        # in case this terminates early, kill scripts to avoid chaos
        before_dying { kill_script script }
      end
    }
    Invoker.msg("Invoker.halt_scripts scripts_to_resume:#{@scripts_to_resume}", "debug")

    @scripts_to_kill.each { |script|
      if Script.running?(script)
        kill_script script
      end
    }
  end

  def self.resume_scripts
    Invoker.msg("Invoker.resume_scripts scripts_to_resume: #{@scripts_to_resume}", "debug")
    @scripts_to_resume.each { |script|
      if Script.paused?(script)
        Script.unpause(script)
      end
    }
    undo_before_dying
  end

  def self.help
    Invoker.msg("Runs continuously and notifies you when the invoker has returned.", "info")
    Invoker.msg("")
    Invoker.msg(";invoker auto to visit the invoker automatically this time only", "info")
    Invoker.msg("")
    Invoker.msg(";invoker toggle to default to automatic mode (or turn it off)", "info")
    Invoker.msg("")
    Invoker.msg(";invoker list to see scrips in each list that are paused or killed when invoker is run", "info")
    Invoker.msg("")
    Invoker.msg(";invoker add pause/kill (script) to add a script to the pause or kill list.", "info")
    Invoker.msg("")
    Invoker.msg(";invoker remove pause/kill (script) to remove a script from the pause or kill list.", "info")
    exit
  end
end

if Script.current.vars[1] == "help"
  Invoker.help
elsif Script.current.vars[1] == "toggle"
  echo "Automatic mode changed to #{!Settings[:auto]}"
  Settings[:auto] = !Settings[:auto]
elsif Script.current.vars[1] == "debug"
  echo "Debug mode changed to #{!Settings[:debug]}"
  Settings[:debug] = !Settings[:debug]
elsif Script.current.vars[1] == "auto"
  echo "Running in one-time auto mode"
  Invoker.new(true)
elsif Script.current.vars[1] == "list"
  echo "Scripts to pause: #{Settings[:scripts_to_pause].join(', ')}"
  echo "Scripts to kill: #{Settings[:scripts_to_kill].join(', ')}"
elsif Script.current.vars[1] == "add"
  if Script.current.vars[2] == "pause"
    echo "#{Script.current.vars[3]} added to scripts to pause."
    Settings[:scripts_to_pause].push(Script.current.vars[3]).uniq!
  elsif Script.current.vars[2] == "kill"
    echo "#{Script.current.vars[3]} added to scripts to kill."
    Settings[:scripts_to_kill].push(Script.current.vars[3]).uniq!
  elsif Script.current.vars[2]
    echo "Please specify pause or kill"
  end
elsif Script.current.vars[1] == "remove"
  if Script.current.vars[2] == "pause"
    echo "#{Script.current.vars[3]} removed from scripts to pause."
    Settings[:scripts_to_pause].delete(Script.current.vars[3])
  elsif Script.current.vars[2] == "kill"
    echo "#{Script.current.vars[3]} removed from scripts to kill."
    Settings[:scripts_to_kill].delete(Script.current.vars[3])
  elsif Script.current.vars[2]
    echo "Please specify pause or kill"
  end
elsif Script.current.vars[1]
  echo "command not recognized"
elsif Script.current.vars[1] == nil
  Invoker.new
end
