=begin
  Runs continuously and notifies you when the invoker has returned.
  If you are already in the park it will use them automatically.
  Note: Once it prompts you if you would like to use them,
  the script will not do so automatically if you move in to the room.
  
  author: Nesmeor
  name: invoker
  tags: utility, spellup
  version: 2.1.1

  Changelog:
  2.1.1 - (5/15/2021)
    - Bug fixes and tuning
  2.1.0 -(5/10/2021)
    - Added customizable script pausing/killing, debugging
  2.0.1 (5/8/2021)
    - Fixed auto & toggling behavior
  2.0.0 (4/28/2021)
    - Script rewritten to be class based (Thanks Athias!)
    - Functionality optimized for less error prone interaction.
    - Script pausing functionality
  1.3.0 (4/27/2021):
    - Updated to Semantic Versioning
    - Created  msg to handle messaging
    - Added error messaging for spells being asked multiple times
  1.2 (4/26/2021):
    Added auto-use if in Park room. Removed room customization from command line as the invoker only ever shows up in one place. If you need to change it you can still change the invoker_location variable at the top of the script, but I prefer simplicity where possible :)
  1.1 (4/24/2021):
    Added colorized text for stormfront UI

=end

if Settings[:scripts_to_pause] == nil
  Settings[:scripts_to_pause] = ["nesbounty","sbounty","bigshot","nesmapper",]
end
if Settings[:scripts_to_kill] == nil
  Settings[:scripts_to_kill] = ["sloot","poolparty"]
end
if Settings[:auto] == nil
  Settings[:auto] = false
end
if Settings[:debug] == nil
  Settings[:debug] = false
end

class Invoker
  def initialize(auto=false)
    if auto == true
      @auto = true
    else
      @auto = Settings[:auto]
    end
    msg("Invoker auto mode: #{@auto}","info")

    @current_hour = nil
    @decision = false
    @scripts_to_pause = Settings[:scripts_to_pause]
    @scripts_to_kill = Settings[:scripts_to_kill]
    @scripts_to_resume = []
    @dubug = Settings[:debug]

    # This defaults the Town Square, Small Park
    invoker_location = 288

    loop {
      # Check the current time to see if the invoker is present
      invoker_present = Invoker.check_time
      if invoker_present
        # Capture the current hour to avoid trying multiple times
        new_hour = Time.now.hour
        # Make sure we haven't seen the invoker already
        if @current_hour != new_hour
          @decision = false
          until @decision
            if !Invoker.check_time
              break
            end
            # Automatically ask for spells if in the same room. 284 is duplicate ID
            if Room.current.id == invoker_location and @auto == true
              Invoker.get_spells
              update_time(new_hour)
            # Otherwise prompt the player to respond
            elsif @auto == true
              msg("Invoker is now available, automatically visiting in 15 seconds. ;stop invoker to prevent this.","info")
              pause 15
              halt_scripts
              Invoker.visit_invoker
              resume_scripts
              update_time(new_hour)
            else
              msg("The invoker is now available. YES to visit them, SHAKE to skip this time.","info")
              result = matchtimeout 30, /A good positive attitude never hurts\.|Shake what\?/
              if result =~ /A good positive attitude never hurts\./
                Invoker.visit_invoker
                update_time(new_hour)
              elsif result =~ /Shake what\?/
                msg("Skipping invoker this hour.","info")
                update_time(new_hour)
              end
            end 
          end
        end
      end
      # Throttle while waiting for time to pass
      pause 30
    }
  end

  def msg(text, type = "info")
    # send debug messages if debugging
    if type == "debug"
      if @debug == true
        echo ">> #{text}"
      end
    elsif $frontend == 'stormfront' and type != "debug"
      if type == "error"
        puts "\<preset id=\"thought\"\>ERROR: #{text}\<\/preset\>"
      elsif type == "warn"
        puts "\<pushBold\/\>WARNING: #{text}\<popBold\/\>"
      elsif type == "info"
        puts "\<preset id=\"whisper\"\>#{text}\<\/preset\>"
      else
        echo text
      end
    elsif type == "error"
      echo "** #{text}"
    elsif type == "warn"
      echo "!! #{text}"
    elsif type == "info"
      echo "-- #{text}"
    else
      echo text
    end
  end 

  def update_time(new_hour)
    @current_hour = new_hour
    @decision = true
  end

  def self.check_time
    # Is it between 01 & 15 minutes?
    time = Time.now.strftime('%M')
    if time.to_s =~ /0[1-9]|1[0-5]/
      return true
    else
      return false
    end
  end

  def self.go2(cur_loc)
    set_locations = {
      "park"    => "288",
      "fwi"     => "3668",
    }

    if set_locations.include? cur_loc
      location = set_locations[cur_loc]
    else
      location = cur_loc
    end

    return if Room.current.id == location.to_i or Room.current.tags.include?(location)

    fput "unhide" if hidden? or invisible?
    waitrt?
    waitcastrt?
    Script.run("go2", "#{location.to_s} --disable-confirm", flags = { :quiet => true })
    sleep 0.2
  end

  def self.get_spells
    result = dothistimeout "ask invoker about spells", 5, /releases upon you|Please wait a few minutes before asking again/
    if result =~ /Please wait a few minutes before asking again/
       msg("You have already asked for spells, please try again later!","info")
    end
  end

  def self.visit_invoker
    # Capture current location
    current_room = Room.current.id
    # Go to the park
    Invoker.go2('park')
    # Ask the invoker for spells
    Invoker.get_spells
    # Return to previous location
    Invoker.go2(current_room)
  end

  def halt_scripts
    @scripts_to_pause.each { | script | 
    msg("halt_scripts each: #{script}","debug")
    msg("Script.running? #{Script.running?(script)}","debug")
    if Script.running?(script)
      Script.pause(script)
      @scripts_to_resume.push(script)
      # in case this terminates early, kill scripts to avoid chaos
      before_dying{kill_script script}
    end
   }
   msg("halt_scripts scripts_to_resume:#{@scripts_to_resume}","debug")

   @scripts_to_kill.each { | script | 
    if Script.running?(script)
      kill_script script
    end
   }
  end

  def resume_scripts
    msg("resume_scripts scripts_to_resume: #{@scripts_to_resume}","debug")
    @scripts_to_resume.each { | script | 
      if Script.paused?(script)
        Script.unpause(script)
      end
    }
    undo_before_dying
  end

    def self.showhelp
     msg("Runs continuously and notifies you when the invoker has returned.","info")
     msg("")
     msg(";invoker auto to visit the invoker automatically this time only","info")
     msg("")
     msg(";invoker toggle to default to automatic mode (or turn it off)","info")
     msg("")
     msg(";invoker list to see scrips in each list that are paused or killed when invoker is run","info")
     msg("")
     msg(";invoker add pause/kill (script) to add a script to the pause or kill list.","info")
     msg("")
     msg(";invoker remove pause/kill (script) to remove a script from the pause or kill list.","info")
    exit
  end
end

if script.vars[1] == "help"
  Invoker.showhelp
  exit
elsif script.vars[1] =="toggle"
  if Settings[:auto]
    Settings[:auto] = false
    echo "Switching to manual mode"
    exit
  else
    Settings[:auto] = true
    echo "Switch to automatic mode"
    exit
  end
elsif script.vars[1] =="debug"
  if Settings[:debug]
    Settings[:debug] = false
    echo "Debug disabled"
    exit
  else
    Settings[:debug] = true
    echo "Debug enabled"
    exit
  end
elsif script.vars[1] == "auto"
  echo "Running in one-time auto mode"
  Invoker.new(true)
  exit
elsif script.vars[1] == "list"
  echo "Scripts to pause:"
  Settings[:scripts_to_pause].each do | script |
    echo script
  end
  respond ""
  echo "Scripts to kill:"
  Settings[:scripts_to_kill].each do | script |
    echo script
  end
  exit
elsif script.vars[1] == "add"
  if script.vars[2] == "pause"
    echo "#{script.vars[3]} added to scripts to pause."
    Settings[:scripts_to_pause].append(script.vars[3])
    exit
  elsif script.vars[2] == "kill"
    echo "#{script.vars[3]} added to scripts to kill."
    Settings[:scripts_to_kill].append(script.vars[3])
    exit
  elsif script.vars[2]
    echo "Please specify pause or kill"
    exit
  end
elsif script.vars[1] == "remove"
  if script.vars[2] == "pause"
    echo "#{script.vars[3]} removed from scripts to pause."
    Settings[:scripts_to_pause].delete(script.vars[3])
    exit
  elsif script.vars[2] == "kill"
    echo "#{script.vars[3]} removed from scripts to kill."
    echo Settings[:scripts_to_kill].delete(script.vars[3])
    exit
  elsif script.vars[2]
    echo "Please specify pause or kill"
    exit
  end 
elsif script.vars[1]
  echo "command not recognized"
  exit
elsif script.vars[1] == nil
  Invoker.new
end
