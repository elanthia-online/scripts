# frozen_string_literal: true

=begin
  eloot.lic: eLoot is fork/update/rewrite of sloot.
  Requires eloot.ui to be placed in your data folder

  Some primary changes from sloot include using in-game STOW settings instead of variables.
  Locksmith pool handling, loot room, exclusion support, appraise limits.
  eloot also auto-writes settings to your Lich5/Data/eloot folder per character.

   original author: SpiffyJr (sloot)
        maintainer: elanthia-online
      contributers: SpiffyJr, Athias, Demandred, Tysong, Deysh
              game: Gemstone
              tags: loot
           version: 1.4.11
  Improvements:
 
  v1.4.11 (2022-08-02)
    - added support for looting coins on the ground
 
  v1.4.10 (2022-07-28)
    - more edits for locksmithpool not recognizing worker
 
  v1.4.9 (2022-07-28)
    - another edit to the locksmith pool
 
  v1.4.8 (2022-07-20)
    - close sacks function had a bug preventing it from working
    - additional changes for the load delay in locksmith pool
  
  v1.4.7 (2022-07-09)
    - fix for object load delay in locksmith pool
	
  v1.4.6 (2022-07-09)
    - added option to deposit coins/notes without sell routine
    - fixed bug in empty box selling causing it to duplicate
  
  v1.4.5
    - performance improvement in selling and storing items
    - added logic to address having a box in hand at start of sell routine.
    - added support to loot a box in hand then exit - ;eloot box
  
  v1.4.4
    - added skin matching for alchemically ruined skins
  
  v1.4.3
    - added support for skinning rotting chimera's when they have scorpion tails
  
  v1.4.2 (2022-06-15)
    - bug fix in blunt skinning
  
  v1.4.1 (2022-06-15)
    - bug fix for disks

  v1.4.0 (2022-06-10)
    - added support for shroud and glamour
    - added check in valid loot routine to exclude disks
  
  v1.3.7 (2022-06-10)
    - bug fix to recognize new crumbly items properly
    
  v1.3.6 (2022-05-30)
    - bug fix for box list methods
    - bug fix for coin hand issue
  
  v1.3.5 (2022-05-24)
    - removed tryin to phase a box in a disk, that doesn't work
    - fixed bug in furrier selling routine
    - added support for separating and selling pelt bundles for bounties
    - reworked some selling logic to reduce number of container checks
    - added a check to address "...wait" performance lag
    - moved ;eloot pool to it's own method
    - reduced number of container looks during selling
    - fixed bug in skinning sheath identification
    - added support for coin hands inside containers
    - consolidated individual item selling into separate method
    - added container selection for selling
  
  v1.3.4 (2022-05-16)
    - corrected some messaging in loot_bag method
    - add support for coin hands
    - bugfix excluded items sold at furrier now working
    - empty hands if using option ;eloot pool
    - Add GameObj types to list/test output for debugging
  
  v1.3.3 (2022-05-16)
    - added support for sheaths
    - added autostart support: ;autostart add eloot start
    - added a check for berserk being active
    - fixed skin bundler looting
    - added support for looking into containers critters drop 
    - bugfix for looting caesera
  
  v1.3.2
    - fixed bug that prevented gold rings from being deposited with chronomage
    - added check for trying to loot crumbly items
    - added looting and disposing of food items -limited functionality due to so many food variations
  
  v1.3.1
    - bugfix for not equiping hands after emptying during loot/skinning
    - bugfix for not detecting proper storing of loot in container via try_or_fail
  
  v1.3.0
    - added exclusion functionality to looting and skinning
    - standardized chronoemage gold ring regex
    - refactored looting methods
    - added hinderance check to phase method
    - moved box phasing to after the box is in the container for DS reasons
    - fixed skinning bug that could cause infinite loop if skinner disarmed
    - added caedera to list of critters putting items in hand when looting
  
  v1.2.8 (2022-04-21)
    - fix inventory containers regex with full hands
  
  v1.2.7 (2022-04-21)
    - added support to keep containers closed
    - removed redundant container looks
    - fixed invalid loot bug
    - reorganized yaml file save location
    - added versioning to UI and independant download
    - fixed duplicate 315 casting (maybe)
    - fixed excessive stancing when skinning
    - converted messaging to use built in Lich methods
    - fixed invalid_loot method
    - standardized empty/fill hands to use Lich methods
    - trash now looks for tag meta:trashcan first then falls back to old method
    - added additional check to fill hands after looting
    - initial inventory method changed to avoid using GameObj.inv
    - fixed stancing bug when frenzy is active
  
  v1.2.6 (2022-04-15)
    - support for weapon displayers
  
  v1.2.5 (2022-04-14)
    -fixed the fix for skinning (thanks Tysong)

  v1.2.4 (2022-04-14)
    - fixed searching while wounded bug
    - fixed missing skin weapon bug

  v1.2.3 (2022-04-12)
    - Correction to clothing looting
    - added debug toggle to help
    - fixed bug in container when looting
    - added spiked cavern urchin to the blunt skinning creatures
    - no need to ;eloot load after change in settings

  v1.2.2 (2022-04-08)
    - Typo in Loot.search method corrected

  v1.2.1 (2022-04-07)
    - Typo correction

  v1.2.0 (2022-04-07)
    - Support for scarab selling
    - Support for clothing looting / selling
    - Support for cursed looting / selling
    - Support for opening / closing containers during hunting
    - Fixes for phasing boxes and looting boxes
    
  v1.1.0 (2022-04-05)
    - Start option to just do locksmith pool added ;eloot pool 
    - toggle for disk usage
    - additional help comments
    - various creature loot support
    - toggle for looking inside boxes
    - bug fixes for box selling routine

  v1.0.0 (2022-04-03)
    - forked and renamed as eloot, rebasing version as v1.0.0
    - global rename from SLoot to ELoot
    - corrected ;eloot list to allow for parameters (loot, sell, skin, internal)
    - corrected for box and overflow constraint
    - added 'load' command back in - we found a point!
    - converted all CharSettings to yaml file to improve reliability
    - removed write-to-db3 capability - it is too inconsistent
    - improved bulk-gems logic (with thanks to Izzy101yzzI)
    - support for super secure gem pouches
    - default to silence output

  v2.2.1 (2021-12-23)
    - added any container specified in STOW LIST
    - added 'overflow' capabilities (although I still don't know why)
    - cleaned up bulk gem sales / individual gem sales logic
    - created a write-to-db3 capability rather than relying on lazy writes to db3
    - removed 'load' command - it is pointless

  v2.0.2 (2021-07-25)
    - Our chief edit is the loot. The loot and hands.
    - Our TWO chief edits are loot and hands. And gold rings.
    - Our THREE chief edits are loot, hands and gold rings. And many fixes to stuff and other stuff.
    - AMONG our edits are such diverse changes as loot fixes, items stowing and getting back out, hands, gold rings to chronomage, 604 support...oh nevermind I'll come back in.
    - Seriously though, lots of changes and fixes.
    - Zealot stance stuff removed?
    - Blunt skinning issues
    - More.

  v2.0.1 (2021-05-08)
    - Corrected skinning issue for left-handed skinners

  v2.0.0 (2021-04-12)
    - Rebaselined as SLoot 2.0
    - Fixed locksmith pool being full issue
    - Fixed container full issue when using disks (thanks to Demandred)
    - Added town locksmith processing
    - Added return to original location after ;sloot sell
    - Added expanded detail comment section and version
    - Added title bar update with version
    - Removed Hoarding option and related code
    - Updated internal comments
    - Updated to work with jinx data for sloot.ui

=end

# Check version of Lich for compatibility
LICH_GEM_REQUIRES = '5.4.1'
INFOMON_GEM_REQUIRES = '1.18.11'
INFOMON_VERSION = '0.0.0'
infomon_data = open("#{SCRIPT_DIR}/infomon.lic", 'r').read
if infomon_data =~ /^=begin\r?\n?(.+?)^=end/m
    comments = $1.split("\n")
else
    comments = []
    infomon_data.split("\n").each {|line|
        if line =~ /^[\t\s]*#/
            comments.push(line)
        elsif line !~ /^[\t\s]*$/
            break
        end
    }
end
for line in comments
    if line =~ /^[\s\t#]*version:[\s\t]*([\w,\s\.\d]+)/i
        INFOMON_VERSION = $1.sub(/\s\(.*?\)/, '').strip
    end
end

if Gem::Version.new(LICH_VERSION) < Gem::Version.new(LICH_GEM_REQUIRES) || Gem::Version.new(INFOMON_VERSION) < Gem::Version.new(INFOMON_GEM_REQUIRES)
   if $frontend == 'stormfront' || $frontend == 'profanity'
     _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
     _respond "\<preset id=\"thought\"\>" + "Script:#{script.name} now requires a newer version of Lich(#{LICH_GEM_REQUIRES}+) & Infomon (#{INFOMON_GEM_REQUIRES}) to run." + "\<\/preset\>"
     _respond "\<preset id=\"thought\"\>" + "Please update to a newer version." + "\<\/preset\>"
     _respond ""
     _respond "\<preset id=\"thought\"\>" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION) }" + "\<\/preset\>"
     _respond "\<preset id=\"thought\"\>" + "Currently Running Infomon Version: #{Gem::Version.new(INFOMON_VERSION) }" + "\<\/preset\>"
     _respond "\<preset id=\"thought\"\>" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation" + "\<\/preset\>"
     _respond "\<preset id=\"speech\"\>" + "########################################" + "\<\/preset\>"
   else
     _respond "##" + "########################################"
     _respond ">" + "Script:#{script.name} now requires a newer version of Lich(#{LICH_GEM_REQUIRES}+) & Infomon (#{INFOMON_GEM_REQUIRES}) to run."
     _respond ">" + "Please update to a newer version."
     _respond ">" + ""
     _respond ">" + "Currently Running Lich Version: #{Gem::Version.new(LICH_VERSION) }"
     _respond ">" + "Currently Running Infomon Version: #{Gem::Version.new(INFOMON_VERSION) }"
     _respond ">" + "For help updating visit: https://gswiki.play.net/Lich_(software)/Installation"
     _respond "##" + "########################################"
   end
   exit
end

ELoot_version = '1.4.11'
ELootUI_version = '1.1.5'

elootUI_VERSION = nil

if File.exist?("#{$data_dir}eloot.ui")

  File.foreach("#{$data_dir}eloot.ui") { |line| 
    if line =~ /^[\s\t#]*version:[\s\t]*([\w,\s\.\d]+)/i
          elootUI_VERSION = $1.sub(/\s\(.*?\)/, '').strip
          break
    end
  }

  if elootUI_VERSION != ELootUI_version
    Lich::Messaging.msg(type = "warn", msg = " Your UI is an old version! ")
    Lich::Messaging.msg(type = "warn", msg = " Kill script if you don't want to download!")
    for i in (5).downto(1)
      Lich::Messaging.msg(type = "warn", msg = " Downloading in...#{i} ")
      sleep 1
    end
    
    Script.run("jinx", "data update eloot.ui --force")
  end
else
  Lich::Messaging.msg(type = "warn", msg = " Your UI is missing or its a first install. ")
  Lich::Messaging.msg(type = "warn", msg = " Kill script if you don't want to download!")
  for i in (5).downto(1)
      Lich::Messaging.msg(type = "warn", msg = " Downloading in...#{i} ")
      sleep 1
    end
    
    Script.run("jinx", "data install eloot.ui")
end

#move an existing profile from the old directory structure and save it to new one
old_dir = "#{$data_dir}eloot/#{XMLData.game}/"
new_dir = "#{$data_dir}#{XMLData.game}/#{Char.name}/"

if (!File.exists? File.join(new_dir, "eloot.yaml")) && (File.exists? File.join(old_dir, "#{Char.name}.yaml"))
  Dir.mkdir("#{$data_dir}#{XMLData.game}") unless File.exist?("#{$data_dir}#{XMLData.game}")
  Dir.mkdir("#{$data_dir}#{XMLData.game}/#{Char.name}") unless File.exist?("#{$data_dir}#{XMLData.game}/#{Char.name}")
 
  #Move the file
  FileUtils.cp("#{old_dir}#{Char.name}.yaml", new_dir)
 
  #Then rename it
  File.rename("#{new_dir}#{Char.name}.yaml", "#{new_dir}eloot.yaml")
 
  #Wait for it to finish
  sleep 0.5 until File.exists? File.join(new_dir, "eloot.yaml")
 
end
 
require 'yaml' #we clearly need to be saving information without CharSettings

# eloot is a looter for Gemstone that focuses on performance
module ELoot
  @@data ||= nil
  
  ##### Data & Setup Start #####
  
  def self.load_defaults()
    
    default_hash = {
      :loot_types=>["alchemy", "armor", "box", "clothing", "collectible", "food", "gem", "jewelry", "lockpick", "magic", "reagent", "scroll", "skin", "uncommon", "valuable", "wand"],
      :loot_exclude=>["black ora", "urglaes"],
      :loot_phase=>false,
      :use_disk=>true,
      :loot_defensive=>false,
      :coin_hand=>false,
      :coin_hand_name=>"",
      :overflow_container=>"",
      :sell_loot_types=>["alchemy", "armor", "clothing", "food", "gem", "jewelry", "lockpick", "magic", "reagent", "scroll", "skin", "uncommon", "valuable", "wand", "box"],
      :sell_container=>["default","overflow","box","collectible","forageable","gem","herb","lockpick","potion","reagent","scroll","skin","treasure","trinket","wand"],
      :sell_exclude=>[],
      :sell_keep_scrolls=>[],
      :sell_appraise_types=>["jewelry", "magic", "uncommon", "valuable"],
      :sell_appraise_gemshop=>14999,
      :sell_appraise_pawnshop=>34999,
      :sell_collectibles=>true,
      :sell_gold_rings=>false,
      :sell_locksmith=>false,
      :sell_locksmith_pool=>true,
      :display_box_contents=>false,
      :sell_locksmith_pool_tip=>15,
      :sell_locksmith_pool_tip_percent=>true,
      :sell_share_silvers=>false,
      :sell_fwi=>false,
      :sell_shroud=>false,
      :sell_keep_silver=>0,
      :skin_enable=>false,
      :skin_kneel=>false,
      :skin_604=>false,
      :skin_resolve=>false,
      :skin_sheath=>"",
      :skin_weapon=>"",
      :skin_sheath_blunt=>"",
      :skin_weapon_blunt=>"",
      :silence=>true,
      :debug=>false,
      :unskinnable=>[],
      :crumbly=> [],
      :keep_closed=>false
    }
    Dir.mkdir("#{$data_dir}#{XMLData.game}") unless File.exist?("#{$data_dir}#{XMLData.game}")
    Dir.mkdir("#{$data_dir}#{XMLData.game}/#{Char.name}") unless File.exist?("#{$data_dir}#{XMLData.game}/#{Char.name}")

    File.write("#{$data_dir}#{XMLData.game}/#{Char.name}/eloot.yaml", default_hash.to_yaml)
   
    default_hash
  end

  def self.load_profile(name: Char.name)
    if name != nil
      filename = "#{$data_dir}#{XMLData.game}/#{name}/eloot.yaml"
      if File.exist?("#{filename}") && name == Char.name
        settings_hash = YAML.load_file(filename)      
      elsif !File.exist?("#{filename}") && name != Char.name
        ELoot.msg("error", " ELoot.load_profile: Attempt to load a profile that does not exist.")
      elsif !File.exist?("#{filename}") && name == Char.name
        ELoot.msg("info", " No current settings found.  Loading defaults for configurtion.")
        ELoot.msg("info", " Suggest you configure to your needs with ;eloot setup")
        settings_hash = ELoot.load_defaults()
      else
        ELoot.msg("error", " ELoot.load_profile: There was an unknown error with loading a profile")
      end
    else
      ELoot.msg("error", " ELoot.load_profile: name not defined")
    end
 
    settings_hash
    
  end

  def self.save_profile(name: Char.name)
    
    #This adds it to the profile for backward compatability
    ELoot.data.settings[:display_box_contents] = false unless ELoot.data.settings.has_key?(:display_box_contents)
    ELoot.data.settings[:use_disk] = true unless ELoot.data.settings.has_key?(:use_disk)
    ELoot.data.settings[:keep_closed] = false unless ELoot.data.settings.has_key?(:keep_closed)
    
    if name != nil
      filename = "#{$data_dir}#{XMLData.game}/#{Char.name}/eloot.yaml"
      if name == Char.name
        File.write(filename, ELoot.data.settings.to_yaml)
        ELoot.msg("info", " Settings saved to file: #{filename}.")
      elsif File.exist?("#{filename}") && name != Char.name
        ELoot.msg("info", " You are attempt to overwrite another profile!")
        ELoot.msg("info", " If you wish to overwrite, please ;unpause eloot.")
        ELoot.msg("info", " Else ;kill eloot and choose another filename.")
        pause_script
        File.write(filename, ELoot.data.settings.to_yaml)
        ELoot.msg("info", " Settings saved to file: #{filename}.")        
      elsif !File.exist?("#{filename}") && name != Char.name
        File.write(filename, ELoot.data.settings.to_yaml)
        ELoot.msg("info", " Settings are being saved to another profile!")
        ELoot.msg("info", " Settings saved to file: #{filename}.")
      else
        ELoot.msg("error", " ELoot.save_profile: There was an unknown error with saving a profile")
      end
    end
       
  end

  def self.load(settings)
    @@data = Data.new(settings)
  end

  def self.container_check
  
    #This check is done to ensure the contents are available
    #Only done during initial load, load command, or after ui closes
  
    check_edged = false
    check_blunt = false
  
    items_opened = Array.new
    ELoot.data.sacks.keys.each{ |item| 
      next if items_opened.include?(item)
      items_opened.push(item)
      ELoot::Inventory.open_single_container(ELoot.data.sacks[item])     
      if ELoot.data.sacks[item].contents.empty? || ELoot.data.sacks[item].contents.nil?
        ELoot.silent_command("look in ##{ELoot.data.sacks[item].id}",/There is nothing|In the|That is closed/)
      end
    }
       
    #Are we using a coin hand?
    if ELoot.data.settings[:coin_hand] && (ELoot.data.settings[:coin_hand_name].empty? || ELoot.data.settings[:coin_hand_name].nil?) 
      ELoot.msg("warn", " Use Coin Hand is checked but no name given! Eloot can't use the coin hand.")
    elsif !ELoot.data.settings[:coin_hand] && ELoot.data.settings[:coin_hand_name].length.positive?
      ELoot.msg("warn", " Use Coin Hand is NOT checked but a name is given! Eloot can't use the coin hand.")
    elsif ELoot.data.settings[:coin_hand] && !ELoot.data.settings[:coin_hand_name].empty? && !ELoot.data.settings[:coin_hand_name].nil?           
      # #Are we wearing the coin hand?
       ELoot.data.coin_hand = GameObj.inv.find { |i| i.name =~ /#{ELoot.data.settings[:coin_hand_name]}\b/ }
      unless ELoot.data.coin_hand
        #Guess not so loop thru inv and see if we can find it
        GameObj.inv.each { |item|
          if !items_opened.include?(item)
            Inventory.check_sell_container(item)
          end
          ELoot.data.coin_hand = item.contents.find { |thing| thing.name =~ /#{ELoot.data.settings[:coin_hand_name]}\b/ }
          if ELoot.data.coin_hand
            ELoot.data.coin_container = item
            break
          end  
        }  
      end
    end
    
    if ELoot.data.settings[:coin_hand] && ELoot.data.coin_hand.nil? && !ELoot.data.settings[:coin_hand_name].empty?
      ELoot.msg("warn", " Use Coin Hand is checked but can't find the coin hand! Eloot can't use the coin hand.")
    end
    
    
    unless ELoot.data.ready_list["skin_sheath"].nil?
      ELoot::Inventory.open_single_container(ELoot.data.ready_list["skin_sheath"])
      if ELoot.data.ready_list["skin_sheath"].contents.empty? || ELoot.data.ready_list["skin_sheath"].contents.nil?
        lines = ELoot.silent_command("look in ##{ELoot.data.ready_list["skin_sheath"].id}",/There is nothing|In the|That is closed|you glance/i)
      end
      
      if lines.any? { |line| line =~ /you glance/i }
        check_edged = true
      end
       
      
      #Lets see if the edged skin weapon is in the sheath
      ELoot.msg("debug", " ELoot.data.ready_list['skin_sheath'].contents: #{ELoot.data.ready_list["skin_sheath"].contents}")
      unless ELoot.data.settings[:skin_weapon].nil?
        ELoot.data.skin_edged = ELoot.data.ready_list["skin_sheath"].contents.find { |i| i.name =~ /#{ELoot.data.settings[:skin_weapon]}/ }
        ELoot.msg("debug", " ELoot.data.skin_edged: #{ELoot.data.skin_edged}")       
      end     
    end
 
    unless ELoot.data.ready_list["skin_sheath_blunt"].nil?  
      ELoot::Inventory.open_single_container(ELoot.data.ready_list["skin_sheath_blunt"])
      if ELoot.data.ready_list["skin_sheath_blunt"].contents.empty? || ELoot.data.ready_list["skin_sheath_blunt"].contents.nil?
        lines = ELoot.silent_command("look in ##{ELoot.data.ready_list["skin_sheath_blunt"].id}",/There is nothing|In the|That is closed|you glance/i)
      end
      
      if lines.any? { |line| line =~ /you glance/i }
        check_blunt = true
      end
           
      #Lets see if the blunt skin weapon is in the sheath
      unless ELoot.data.settings[:skin_weapon_blunt].nil?      
        ELoot.data.skin_blunt = ELoot.data.ready_list["skin_sheath_blunt"].contents.find { |i| i.name =~ /#{ELoot.data.settings[:skin_weapon_blunt]}/ }
      end
    end
    
    if (ELoot.data.skin_edged.nil? && check_edged && !ELoot.data.settings[:skin_weapon].nil?) || (ELoot.data.skin_blunt.nil? && check_blunt && !ELoot.data.settings[:skin_weapon_blunt].nil?)
      inventory = []
      exist =  %r{<a exist=(?:'|")(?<id>.*?)(?:'|") noun=(?:'|")(?<noun>.*?)(?:'|")>(?<name>.*?)</a>}
  
      lines = ELoot.silent_command("inventory full",/You are currently wearing/)
      
      lines.each do |line|
        line.scan(exist).each do |matches| inventory << GameObj.new(*matches) end
      end
  
      if check_edged
        ELoot.data.skin_edged = inventory.find { |i| i.type =~/weapon/i && i.name =~ /#{ELoot.data.settings[:skin_weapon]}/ }
      end
      
      if check_blunt
        ELoot.data.skin_blunt = inventory.find { |i| i.type =~/weapon/i && i.name =~ /#{ELoot.data.settings[:skin_weapon_blunt]}/ }
      end
    end
    
    ELoot.disk_usage 
   
  end

  def self.data
    @@data
  end

  def self.sell
    Sell.sell
  end
 
  def self.manage_sorter  
    if running? "sorter"
      kill_script ("sorter")
      before_dying { Script.start('sorter') }
    end  
  end

  def self.disk_usage
  
    return if DownstreamHook.list.include?("eloot-disk") && ELoot.data.settings[:use_disk]
  
    if ELoot.data.settings[:use_disk]
      15.times do
        break if (ELoot.data.disk = GameObj.loot.find { |l| l.name =~ /#{Char.name} (?:disk|coffin)$/ })

        sleep(0.1)
      end
    
      DownstreamHook.add('eloot-disk',
        proc do |line|
          if line =~ /^Your <a exist="(\d+)" noun="(disk|coffin)">(disk|coffin)<\/a> arrives|^A small circular container suddenly appears/
            ELoot.data.disk_full = false if ELoot.data.disk.nil?
            ELoot.data.disk = GameObj.loot.find { |obj| obj.id == Regexp.last_match(1).to_s }
          end
          line
        end
      )
    else   
      ELoot.data.disk = nil
      DownstreamHook.remove("eloot-disk")
    end
    
  end

  def self.msg(type = "info", text)
     
    #color options - set type to use
    #yellow, orange, teal, green, plain
    
    return if type == "debug" && !ELoot.data.settings[:debug]
       
    if text.class == Hash
      text = text.inspect.gsub("#<", "#")
    elsif text.class == Array
      text = text.to_s
    elsif text.class == String
      text = text.gsub("#<", "#")
    end
    
    type = type == "debug" ? "speech" : type
    
    Lich::Messaging.msg(type, text)
  
  end

  def self.room_meta(key)
    key = "meta:#{key}"
    tag = Room.current.tags.find { |t| t =~ /#{key}/ }
    return Regexp.last_match(1).to_s if tag =~ /^#{key}:(.*)$/

    nil
  end

  def self.fwi?(room)
    (room.location =~ /Four Winds|Mist Harbor|Western Harbor/)
  end

  def self.silent_command(command, start_pattern, loud = false, end_pattern = /<prompt/, include_end = false, timeout=5)
    result = []
    name = "Sell:: -#{Time.now.tv_sec}.#{Time.now.tv_usec}-#{Random.rand(10000)}"
    filter = false
    save_want_downstream = Script.current.want_downstream
    save_want_downstream_xml = Script.current.want_downstream_xml
    Script.current.want_downstream = false
    Script.current.want_downstream_xml = true

    begin
      Timeout::timeout(timeout, Interrupt) {
        DownstreamHook.add(name, proc { |xml|
          is_loud = loud ? xml : nil
          if filter
            if xml =~ end_pattern
              DownstreamHook.remove(name)
              filter = false
            else
              next(is_loud)
            end
          elsif xml =~ start_pattern
            filter = true
            next(is_loud)
          else
            xml
          end
        })
        if loud
          fput command
        else
          $_SERVER_.puts command
        end
        until (xml = get) =~ start_pattern; end
        result << xml.rstrip
        until (xml = get) =~ end_pattern
          result << xml.rstrip
        end
        if include_end
          result << xml.rstrip
        end
      }
    rescue Interrupt
      nil
    ensure
      DownstreamHook.remove(name)
      Script.current.want_downstream_xml = save_want_downstream_xml
      Script.current.want_downstream = save_want_downstream
    end
       
    return result
  end
  
  def self.test
         
    echo " Eloot Version: #{ELoot_version}"
    echo ""
    echo "--------------- Settings ---------------"
    echo *ELoot.data.settings
    echo "----------------------------------------"
    echo ""
    echo "--------------- Sacks ------------------"
    echo *ELoot.data.sacks
    echo "----------------------------------------"
    echo ""
    echo "--------------- Contents ---------------"
   
    ELoot.data.sacks.keys.each{ |item|      
      Inventory.check_sell_container(ELoot.data.sacks[item])
      ELoot.data.sacks[item].contents.each { |thing| 
        echo "Name: #{thing.name} Type: #{thing.type} Sellable: #{thing.sellable}"
      }       
    }
    
    echo "----------------------------------------"
    
    echo ""
    echo "--------------- Ready List -------------"
    
    ELoot.data.ready_list.each{ |item| 
      echo item
    }
    
    echo ""
    echo "--------------- Skinning Weapons -------------"
    
    echo "Edged Skinner: #{ELoot.data.skin_edged.inspect}"
    echo "Blunt Skinner: #{ELoot.data.skin_blunt.inspect}"
    
    echo ""
    echo "--------------- Coin Hand -------------"
    
    echo "Coin Hand: #{ELoot.data.coin_hand.inspect}"
    echo "Coin Container: #{ELoot.data.coin_container.inspect}"
    
    echo "--------------GameObj Types-------------"
    echo GameObj.type_data.map{|k,v| k}.sort.join(', ')
    
  end
  
  ##### Data & Setup End #####

  def self.box_phase(box)
    return unless box.type =~ /box/
    return box unless ELoot.data.settings[:loot_phase] && Spell[704].known? && Spell[704].affordable? && box.name !~ /enruned|mithril/i 

    loop {
      cast_result = Spell[704].cast("at ##{box.id}")
      break unless cast_result =~ /^\[Spell Hindrance for/ && Spell[704].affordable?
    }   
  end

  def self.box_unphase(box)
  
    lines = ELoot.silent_command("look at ##{box.id}",/You see/)
    return box unless lines.any?{ |line| line =~ /shifting/i }
  
    dothistimeout("drop ##{box.id}", 3, /flickers in and out of existence/)
    sleep 0.5
 
    lines = ELoot.silent_command("glance hands",/You glance down/)
 
    return GameObj.right_hand if GameObj.right_hand.type =~ /box/  
    return GameObj.left_hand if GameObj.left_hand.type =~ /box/
    
  end

  def self.change_stance(stance)
    return if Effects::Debuffs.active?("Frenzy") || dead?
    return if checkstance(stance.strip)
    return if stance == 'defensive' && checkstance('guarded')

    expiry = Time.now + 2
    while (cur_stance = checkstance) != stance
      res = dothistimeout("stance #{stance}", 2, /You are now|Roundtime|wait|Your rage causes you/i)
      if res =~ /Roundtime: (\d+)|wait (\d+)/i
        sleep((Regexp.last_match(1) || Regexp.last_match(2)).strip.to_f - 1)
        expiry = Time.now + 2
      elsif Time.now > expiry
        break
      else
        break
      end
      sleep 0.5
    end
  end
 
  def self.use_coin_hand
    return unless ELoot.data.settings[:coin_hand] && ELoot.silver_check.positive?
    return if ELoot.data.coin_hand.nil?
  
    unless ELoot.data.coin_container.nil?
      Inventory.free_hand
      Inventory.open_single_container(ELoot.data.coin_container)
      Inventory.drag(ELoot.data.coin_hand)
    end
    
    dothistimeout("close ##{ELoot.data.coin_hand.id}", 1, /You feel your pockets lighten/)
  
    unless ELoot.data.coin_container.nil?
      Inventory.store_item(ELoot.data.coin_container, ELoot.data.coin_hand)
    end
  
  end
 
  def self.decurse(obj)
  
    return true unless obj.type =~ /cursed/

    if !Spell[315].known?
      ELoot.msg("info", "** #{obj.name} is cursed. And you don't know cleric spell 315. Can't touch that.")
      return false
    elsif Spell[315].known? && !Spell[315].affordable?
      ELoot.msg("info", "** #{obj.name} is cursed and you don't have emough mana to cast 315.")
      return false
    elsif  !ELoot.data.settings[:loot_types].include?("cursed")
      ELoot.msg("info", "** #{obj.name} is cursed and you don't have the setting enabled for looting it.")
      return false
    elsif Spell[315].known? && Spell[315].affordable?
      #Fixme: add hinderance check
      Spell[315].cast("at ##{obj.id}")
      return true
    end
  
  end

  def self.find_boxes 
     
    box_sacks = Array.new
    box_sacks.push(ELoot.data.sacks["box"]) if ELoot.data.settings[:sell_container].include?("box")
    box_sacks.push(ELoot.data.sacks["default"]) if ELoot.data.settings[:sell_container].include?("default")
    box_sacks.push(ELoot.data.sacks[ELoot.data.settings[:overflow_container]]) if ELoot.data.settings[:sell_container].include?("overflow")
    
    ELoot.msg("debug", " box_sacks: #{box_sacks}")
    
    items = Array.new
    checked_containers = Array.new
    box_sacks.each{ |sack|
      next if sack.nil? || checked_containers.include?(sack.id)
      checked_containers.push(sack.id)
      Inventory.check_sell_container(sack)
      items += sack.contents.to_a.find_all { |obj| obj.type =~ /box/ } 
    }   

    if ELoot.data.settings[:use_disk] 
      ELoot.wait_for_disk
      Inventory.check_sell_container(ELoot.data.disk)
      items += ELoot.data.disk.contents.to_a.find_all { |obj| obj.type =~ /box/ }
    end
  
    ELoot.msg("debug", " box_list before: #{items}")
  
    box_list = items.uniq
    
    ELoot.msg("debug", " box_list after: #{box_list}")

    box_list.dup.each{|box|
      lines = ELoot.silent_command("look in ##{box.id}",/There is nothing|In the(.*?)#{box.noun}|That is closed|You see the shifting form/)
      box_list.delete(box) if lines.any?{ |line| line =~ /There is nothing|In the/i }
    }
  
    return box_list

  end

  def self.find_trash
  
    can = $1 if Room.current.tags.find { |t| t =~ /meta:trashcan:(.*)/}
      
    unless can
      can = ["crate", "barrel", "wastebarrel", "wastebasket", "casket", "canister"]
    end
     
    trash = (GameObj.room_desc.to_a + GameObj.loot.to_a).find_all { |obj| (obj.name =~ Regexp.union(can) && obj.name !~ /\w+'s #{obj.noun}$/) && obj.type !~ /box/}.last 
       
  end

  def self.find_worker
  
    worker = nil  
    name = $1 if Room.current.tags.find { |w| w =~ /meta:boxpool:npc:(.*)/}

    unless name 
      name = ["worker", "trickster", "Jahck", "woman", "attendant", "gnome", "merchant", "dwarf"]
    end

    20.times {    
      worker = (GameObj.npcs).find { |obj| obj.name =~ Regexp.union(name) }
      break if worker
      
      ELoot.silent_command("look", /<resource picture/)
      sleep 0.1
    }

    if worker.nil?
      ELoot.msg("info", " Failed to find the locksmith pool NPC")
      ELoot.msg("info", " Update your map db; ;repository download-mapdb")
      ELoot.msg("info", " If the error persists then report this to Elanthia-Online")
      exit
    end
    
    return worker
   
  end

  def self.go2(place)
    fput('unhide') if (hidden? || invisible?)

    # If we're going to a place we do it based on the sell_fwi settings
    if place.class == String && ELoot.data.settings[:sell_fwi]
      fwi_place = Room.list.find { |room| room.tags.include?(place) && ELoot.fwi?(room) }

      place = fwi_place.id if fwi_place
    end

    return if Room.current.id == place || Room.current.tags.include?(place)

    if Room.current.id.nil?
      if ELoot.data.settings[:debug]
        ELoot.msg "info", "unknown room location: hope you know what you're doing"
      else
        ELoot.msg "error", 'unknown room location'
      end
    end
    Script.run('go2', "#{place} --disable-confirm", { quiet: true })
  end

  def self.help
    ELoot.msg("yellow", "")
    ELoot.msg("yellow", " ELoot by SpiffyJr, maintained by Elanthia-Online")
    ELoot.msg("yellow", "")
    ELoot.msg("yellow", " ELoot is a looter script designed to make looting as fast and easy as possible.")
    ELoot.msg("yellow", "")
    ELoot.msg("teal",   " Basic usage: #{$lich_char}eloot")
    ELoot.msg("teal",   " Autostart hint: #{$lich_char}autostart add eloot start")
    ELoot.msg("teal",   " (Loads eloot data at start of game session)")
    ELoot.msg("yellow", "")
    ELoot.msg("green",  " Extra commands:")
    ELoot.msg("teal",   "  help           shows this help message")
    ELoot.msg("teal",   "  list             lists current settings")
    ELoot.msg("teal",   "  sell            sells your loot")
    ELoot.msg("teal",   "  pool          does just the locksmith pool") 
    ELoot.msg("teal",   "  deposit       just deposits coins and notes") 
    ELoot.msg("teal",   "  --debug=on/off        toggles debug messages")
    ELoot.msg("yellow", "")
    ELoot.msg("orange", "  Warning     *** Mark ANYTHING you don't want to lose. ELoot is not perfect! ***")
    ELoot.msg("yellow", "")
  end

  def self.loot
  
    if Spell['Berserk'].active?
      ELoot.msg("info", " Your current status prevents you from looting.")
      return
    end

    #remember what is in our hands
    ELoot.data.right_hand = GameObj.right_hand
    ELoot.data.left_hand = GameObj.left_hand

    ELoot.change_stance('defensive') if ELoot.data.settings[:loot_defensive]
    ELoot.msg("debug", "ELoot.loot: Defensive Stance") if ELoot.data.settings[:loot_defensive]

    ELoot.msg("debug", "ELoot.loot: Begin Skinning") if ELoot.data.settings[:skin_enable]
    Loot.skin if ELoot.data.settings[:skin_enable]

    ELoot.msg("debug", "ELoot.loot: Searching")
    Loot.search
    sleep(0.1)

    ELoot.msg("debug", "ELoot.loot: Looting the Room")
    Loot.room
  
    #use coin hand if we have it
    ELoot.use_coin_hand
       
    Inventory.return_hands
 
  end

  def self.silver_check
    silvers = 0
		lines = ELoot.silent_command(
			"info",
			/Name: <a exist=.*? noun/					
		)
	
		lines.each do |line|
			next unless line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9,]+)/				
			silvers = $1.delete(",").to_i
		end
			
		return silvers
  end

  def self.silver_deposit
  
    ending_silver = ELoot.silver_check
    keep_silvers = ELoot.data.settings[:sell_keep_silver].to_i  
    note = ELoot.data.sacks["default"].contents.find { |obj| obj.noun =~ /^(?:note|scrip|chit)$/ }

    return unless keep_silvers.positive? || ending_silver > 0 || note
    
    ELoot.go2('bank') 
    fput('share all') if ELoot.data.settings[:sell_share_silvers] && ending_silver > 1
    fput('deposit all') if ending_silver > 0 || note 
    fput("withdraw #{keep_silvers}") if keep_silvers.positive?
   
  end

  def self.silver_withdraw(amount)
    return if amount <= 0

    ELoot.go2('bank')

    # TODO: handle not enough silver case
    fput("withdraw #{amount} silvers")
  end

  def self.wait_for_disk
 
    return unless ELoot.data.disk || !ELoot.data.settings[:use_disk]

    if ELoot.data.disk.status =~ /gone/ || !GameObj.loot.find { |l| l.name =~ /#{Char.name} (?:disk|coffin)$/ }
      ELoot.msg("info", " Waiting for your disk to arrive")
      50.times do
        break if (ELoot.data.disk = GameObj.loot.find { |l| l.name =~ /#{Char.name} (?:disk|coffin)$/ })
        sleep(0.1)
      end
    end
 
    return unless ELoot.data.disk && ELoot.data.disk.status !~ /gone/ && ELoot.data.disk.contents.nil?

    Inventory.check_sell_container(ELoot.data.disk) 

  end
 
  # Global data used by ELoot
  class Data
    attr_accessor :disk, :disk_full, :sacks_full, :ready_list, :ready_method, :sacks, :settings, :skinners, :skinsheath, :silent_open, :checked_bags,
                  :needs_closed, :look_regex, :sacks_closed, :all_loot_categories, :regex_gold_rings, :right_hand, :left_hand, :skin_edged, :skin_blunt,
                  :coin_hand, :coin_container

    def initialize(settings)
      @disk = nil
      @disk_full = false
      @ready_list = {}
      @ready_method = {}
      @sacks = {}
      @settings = settings
      @skinners = {}
      @skinsheath = nil
      @skin_edged = nil
      @skin_blunt = nil
      @sacks_full = Array.new
      @sacks_closed = Array.new
      @right_hand = ""
      @left_hand = ""
      @checked_bags = Array.new
      @coin_hand = nil
      @coin_container = nil

      $sell_ignore = Array.new
      
      default_crumbly = [
        #Kraken Fall
        "gnarled dark wooden crook", 
        "twisted obsidian dagger", 
        "immense fel-hafted handaxe", 
        "gold-tipped heavy spear", 
        "notched bone handaxe", 
        "rough pinewood crook", 
        "swirling sanguine orb", 
        "battered antique faewood crate", 
        "copper-traced dark steel hatchet", 
        "huge black alloy greatsword",
        
        #Atoll
        "twisted soot black runestaff",
        "corroded bronze Hammer of Kai",
        "dried seaweed-wrapped longbow",
        "bronze-bound driftwood greatshield",
        "coral-hilted heavy ball and chain",
        "coral-hilted sharply tapered longsword",
      ]
    
      @settings[:crumbly] ||= []
      @settings[:crumbly] = (default_crumbly + @settings[:crumbly]).uniq
      
      @settings[:sell_container] ||= ["default","overflow","box","collectible","forageable","gem","herb","lockpick","potion","reagent","scroll","skin","treasure","trinket","wand"]

      @look_regex = Regexp.union(
        /Peering into the <a exist=.*? noun="toolkit">/i,
        /That is closed/i,
        /is shut too tightly to see its contents/i,
        /In the(.*?)you see/i,
        /In the(.*?):/i,
        /There is nothing/i,
        /You glance/i,
        /^Attached to a.*keyring/i,
        /.*?[.*?]:/i,
      )
      @silent_open = Regexp.union(
        /You throw back/i,
        /You open/i,
        /Oh no! It's already/i,
        /You pick at the knot/i,
        /is already open/i,
        /is open already/i,
        /You unfasten/i,
        /You glance around suspiciously/i,
        /^What were you referring to\?/i,
        /^I could not find what you were referring to\./i,
        /You pull the long strips of leather/i,
        /With a flick of your wrist/i,
        /Sliding the lever on the side/i,
        /You rub your hand/i,
        /There doesn't seem to be any way/i,
        /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i,
      )
      @needs_closed = Regexp.union(
        /You throw back/i,
        /You open/i,
        /You pick at the knot/i,
        /You unfasten/i,
        /With a quick glance over your shoulder/i,
        /You pull the long strips of leather/i,
        /With a flick of your wrist/i,
        /Sliding the lever on the side/i,
        /You rub your hand/i,
      )
          
      @regex_gold_rings = /^(dingy|plain|braided|twisted|intricate|large|thin|wide|polished|scratched|thick|dull|faded|small|flawless|inlaid|dirt\-caked|ornate|exquisite|shiny|bright|narrow) gold ring$|^gold ring$/
      
      @all_loot_categories = ["alchemy", "armor", "box", "clothing", "collectible", "cursed", "gem", "herb", "jewelry", "junk", "lockpick", "magic", "reagent", "scroll", "skin", "uncommon", "valuable", "wand", "weapon"]
      
            
      #Lets grab the inventory
      items = []
      exist =  %r{<a exist=(?:'|")(?<id>.*?)(?:'|") noun=(?:'|")(?<noun>.*?)(?:'|")>(?<name>.*?)</a>}
      
      lines = ELoot.silent_command("inventory full", /You are currently wearing/)
      
      lines.each do |line| line.scan(exist).each do |matches| items << GameObj.new(*matches) end end
      
      #Make sure to include what's in our hands
      items << GameObj.right_hand if checkright
      items << GameObj.left_hand if checkleft

      #Finding the ready list items
      sheath_list_match = /(?:sheath|secondary sheath):\s+<d\scmd="store\s(\w+)\sclear">[^<]+<a\sexist="(\d+)"\snoun="[^"]+">([^<]+)<\/a>(?:\s[^<]+)?<\/d>/    
      ready_list_match = /(?:shield|weapon|secondary weapon|ranged weapon):\s+<d\scmd="store\s(\w+)\sclear">[^<]+<a\sexist="(\d+)"\snoun="[^"]+">([^<]+)<\/a>(?:\s[^<]+)?<\/d>\s+\(<d\scmd='store set'>([^<]+)<\/d>\)/
      
      ready_lines = ELoot.silent_command("ready list",/Your current settings are/)	
      ready_lines.each {|line|

        if line =~ ready_list_match   
          @ready_list.store(Regexp.last_match(1).to_s.downcase, items.find { |i| i.id == Regexp.last_match(2) })
          @ready_method.store(Regexp.last_match(1).to_s.downcase, Regexp.last_match(4)) 
        elsif line =~ sheath_list_match   
          @ready_list.store(Regexp.last_match(1).to_s.downcase, items.find { |i| i.id == Regexp.last_match(2) })       
        end
      }
    
      #Add the skin sheath if set
      @ready_list.store("skin_sheath", items.find { |i| i.name =~ /#{@settings[:skin_sheath]}\b/ if !@settings[:skin_sheath].empty? && !@settings[:skin_sheath].nil?})
      @ready_list.store("skin_sheath_blunt", items.find { |i| i.name =~ /#{@settings[:skin_sheath_blunt]}\b/ if !@settings[:skin_sheath_blunt].empty? && !@settings[:skin_sheath_blunt].nil?})
          
      @ready_list.delete("")
   
      #Finding the Stow list
      container_match = /<a exist="([^"]+)" noun="[^"]+">[^(.]+\(([a-z]+)\)/
      container_lines = ELoot.silent_command("stow list",/You have the following/)		  
      
      container_lines.each {|line|   
        if line =~ container_match
          @sacks.store(Regexp.last_match(2), items.find { |i| i.id == Regexp.last_match(1) })
          @sacks.delete(Regexp.last_match(2)) unless @sacks[Regexp.last_match(2)]    
        end
      }
      
      #Add the overflow sack 
      @sacks.store(@settings[:overflow_container].to_s, items.find { |i| i.name =~ /#{@settings[:overflow_container]}/ })
      @sacks.delete("")
      
      @settings[:sell_container].push(@settings[:overflow_container].to_s) if @settings[:sell_container].include?("overflow")
      @settings[:sell_container].delete("")
    
      if @sacks['default'].nil?
        ELoot.msg("error", " Set stow container using STOW SET before using this script") 
        exit
      end
  
      if @settings[:debug]
        Lich::Messaging.msg("speech", "ready list: #{@ready_list.inspect}")
        Lich::Messaging.msg("speech", "sacks: #{@sacks.inspect}")
      end
          
    end
  end

  # Setup is an extension of Gtk::Builder for Gtk setup
  class Setup < Gtk::Builder
    
    @@categories = {
      loot: {
        loot_types: {
        #:loot_types=>["alchemy", "armor", "box", "clothing", "collectible", "gem", "jewelry", "lockpick", "magic", "reagent", "scroll", "skin", "uncommon", "valuable", "wand"],
          default: []
        },
        loot_exclude: {
        #:loot_exclude=>["black ora", "urglaes"],
          default: ["black ora", "urglaes"],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        critter_exclude: {
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        loot_phase: { default: false },
        use_disk: { default: true },
        loot_defensive: { default: false },
        overflow_container: { default: '' },
        coin_hand: { default: false },
        coin_hand_name: { default: '' },
        keep_closed: { default: false }
      },
      sell: {
        sell_loot_types: {
        #:sell_loot_types=>["alchemy", "armor", "clothing", "gem", "jewelry", "junk", "lockpick", "magic", "reagent", "scroll", "skin", "uncommon", "valuable", "wand"],
          default: []
        },
        sell_container: { default: [] },
        sell_exclude: {
        #:sell_exclude=>[],
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
        sell_keep_scrolls: {
        #:sell_keep_scrolls=>[],
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = Spell[text].num
              iter[1] = Spell[text].name
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(Spell[selected.get_value(0)].num)
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)
            next if Spell[text].nil?

            setting.push(Spell[text].num)
            setting.uniq!.sort!
          end
        },
        sell_appraise_types: {default: ["jewelry", "magic", "uncommon", "valuable"]},
        sell_appraise_gemshop: { default: 14_999 },
        sell_appraise_pawnshop: { default: 34_999 },
        sell_collectibles: { default: true },
        sell_gold_rings: { default: false },
        sell_locksmith: { default: false },
        sell_locksmith_pool: { default: true },
        display_box_contents: { default: false },
        sell_locksmith_pool_tip: { default: 15 },
        sell_locksmith_pool_tip_percent: { default: true },
        sell_share_silvers: { default: false },
        sell_fwi: { default: false },
        sell_shroud: { default: false },
        sell_keep_silver: { default: 0 }
      },
      skin: {
        skin_enable: { default: false },
        skin_kneel: { default: false },
        skin_604: { default: false },
        skin_resolve: { default: false },
        skin_sheath: { default: '' },
        skin_weapon: { default: '' },
        skin_sheath_blunt: { default: ''},
        skin_weapon_blunt: { default: '' },
        skin_exclude: {
          default: [],
          load: proc do |store, setting|
            store.clear
            setting.each do |text|
              iter = store.append
              iter[0] = text
            end
          end,
          delete: proc do |_, selected, setting|
            setting.delete(selected.get_value(0))
            setting.uniq!.sort!
          end,
          set: proc do |_, text, setting|
            next if setting.include?(text)

            setting.push(text)
            setting.uniq!.sort!
          end
        },
      },
      internal: {
        silence: { default: true },
        debug: { default: false },
        unskinnable: { default: [] },
        crumbly: { default: [] }
      }
    }

    def self.get_category(key)
      @@categories.each { |category, data| return category unless data[key].nil? }
      nil
    end

    def self.get_setting(key)
      cat = Setup.get_category(key)
      return nil if cat.nil?

      @@categories[cat].each { |setting, data| return data if setting == key }
      nil
    end

    def initialize(settings)
      super()

      @settings = settings

      # set default values if they don't exist
      @@categories.each do |_, data|
    
        data.each { |key, value| @settings[key] = value[:default] if @settings[key].nil? }
      end

      # remove settings that doesn't exist
      @settings.delete_if { |key, _| next Setup.get_category(key).nil? }

      # only sorcerers can phase
      @settings[:loot_phase] = false unless Char.prof == 'Sorcerer'

      # 604 support
      @settings[:skin_604] = false unless Spell[604].known?

      # GoS only for Sigil of Resolve
      @settings[:skin_resolve] = false unless Society.status == 'Guardians of Sunfist' && Society.rank >= 4

      # use a GTK Builder to setup all the basics of the window then expand on that base
      return unless defined?(Gtk) && Gtk::Version::MAJOR == 3

      Gtk.queue do
        add_from_file("#{$data_dir}eloot.ui")
        load_settings

        self['main'].keep_above = true
        self['main'].set_title "ELoot Setup v#{ELoot_version}"

        # connect signals after settings are loaded to a bunch of handlers don't trigger
        connect_signals { |handler| method(handler) }
      end
    end

    # This is connected to automatically during load_settings and syncs data back to CharSettings.
    def on_update(obj)
      Gtk.queue do
        key = obj.builder_name.to_sym
        setting = Setup.get_setting(key)
        return if setting.nil?

        if obj.class == Gtk::CheckButton
          @settings[key] = obj.active?
        elsif obj.class == Gtk::Entry
          @settings[key] = obj.text.strip
        elsif obj.class == Gtk::SpinButton
          # update from text entry
          obj.update

          # force int, we don't use floats anywhere
          @settings[key] = obj.adjustment.value.to_i
        end
      end
    end

    def on_close_clicked
      ELoot.save_profile()
      self['main'].destroy
    end

    def on_destroy
      Gtk.queue { @running = false }
    end

    # iterate all objects and for any that match a setting name directly we set the default
    def load_settings
      Gtk.queue do
        # load up the generic settings which are just matching by name of the widget
        objects.each do |obj|
          next unless obj.methods.include?(:builder_name)

          key = obj.builder_name.to_sym
          next if (setting = Setup.get_setting(key)).nil?

          # set the default value
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("skin_resolve")) && !Spell[9704].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("skin_604")) && !Spell[604].known?
          obj.set_sensitive(false) if (obj.builder_name.to_s.eql?("sell_shroud")) && (!Spell[1205].known? || !Spell[1212].known?)
          if obj.class == Gtk::CheckButton
            obj.active = @settings[key]
            obj.signal_connect('toggled') { on_update(obj) }
          elsif obj.class == Gtk::Entry
            obj.text = @settings[key].strip
            obj.signal_connect('changed') { on_update(obj) }
          elsif obj.class == Gtk::SpinButton
            obj.value = @settings[key]
            obj.adjustment.value = @settings[key]
            obj.signal_connect('changed') { on_update(obj) }
          elsif obj.class == Gtk::TreeView
            if (store = self["#{key}_store"]).nil?
              respond "** failed to find store for treeview #{key}"
              next
            elsif setting[:load].nil?
              respond "** no :load defined #{key}"
              next
            end

            setting[:load].call(store, @settings[key])

            # setup the signals
            if (add = self["#{key}_add"]).nil?
              respond "** failed to find add for treeview #{key}"
              next
            elsif (delete = self["#{key}_delete"]).nil?
              respond "** failed to find delete for treeview #{key}"
              next
            elsif (entry = self["#{key}_entry"]).nil?
              respond "** failed to find entry for treeview #{key}"
              next
            end

            add.signal_connect('clicked') do
              if setting[:set].nil?
                respond "** no :set defined for #{key}"
                next
              elsif entry.text.empty?
                next
              end
              setting[:set].call(store, entry.text, @settings[key])
              setting[:load].call(store, @settings[key])
            end

            delete.signal_connect('clicked') do
              if setting[:delete].nil?
                respond "** no :delete defined for #{key}"
                next
              elsif (selected = obj.selection.selected).nil?
                next
              end
              setting[:delete].call(store, selected, @settings[key])
              setting[:load].call(store, @settings[key])
            end
          end
        end

        # checkboxes for array storage with id's <setting>:<value>
        # this is primarily used by the loot types
        objects.each do |obj|
          next unless obj.methods.include?(:builder_name)
          next unless obj.builder_name =~ /^([^:]+):(.*)$/i
          next unless obj.class == Gtk::CheckButton

          key = Regexp.last_match(1).to_sym
          value = Regexp.last_match(2).to_s
          next if Setup.get_setting(key).nil?

          obj.active = @settings[key].include?(value)

          # add in hook
          obj.signal_connect('toggled') do
            @settings[key].delete(value)
            if obj.active?
              @settings[key].push(value)
              @settings[key].uniq!.sort!
            end
          end
        end
      end
    end

    def start
      @running = true

      Gtk.queue { self['main'].show_all }

      wait_while { @running }
    end

    def list(cat_to_list: 'all')
      indent_size = 2
      print_array =
        proc do |key, value, indent|
          _respond("#{' ' * indent_size * indent.to_i}#{key}:")
          value.sort!.each { |entry| _respond("#{' ' * indent_size * (indent.to_i + 1)}#{value.index(entry) + 1}. #{entry}") }
        end

      print_value = proc { |key, value, indent| _respond("#{' ' * indent_size * indent.to_i}#{key}: #{value}") }

      categories = cat_to_list == 'all' ? %w[loot sell skin internal] : [cat_to_list]
      if $frontend == 'stormfront'
        output = "<output class=\"mono\"/>\n"
      else
        output = String.new
      end
      categories.each do |opt|
        _respond("#{output}") if !output.empty?
        _respond("#{monsterbold_start}= #{opt.capitalize} =#{monsterbold_end}\n")
        @@categories[opt.to_sym].each do |id, _|
          value = @settings[id]
          value.class == Array ? print_array.call(id, value, 1) : print_value.call(id, value, 1)
        end
      end
      _respond("#{monsterbold_start}= GameObj Types =#{monsterbold_end}\n")
      _respond("#{GameObj.type_data.map{|k,v| k}.sort.join(', ')}")
      if $frontend == 'stormfront'
        output = "<output class=\"\"/>\n"
        _respond("#{output}")
      end
    end

    def self.update_setting(key, value)
      setting = Setup.get_setting(key)
      ELoot.msg("error", "** Setting \"#{key}\" does not exist") if setting.nil?

      action = nil

      if value =~ /^([+-])(.*)$/
        action = Regexp.last_match(1)
        value = Regexp.last_match(2).strip.downcase
      end

      if value == 'reset'
        @settings.delete(key)
        ELoot.msg("info", " Reset #{key}")
      elsif @settings[key].class == Array
        if value =~ /\d/ && @settings[key][value.to_i]
          @settings[key].delete_at(value.to_i)
        else
          @settings[key].delete(value)
        end

        if action == '-'
          ELoot.msg("info", " \"#{value}\" removed from \"#{key}\"")
        else
          @settings[key].push(value)
          ELoot.msg("info", " \"#{value}\" added to \"#{key}\"")
        end

        ELoot.msg("info", " \"#{key}\" is now \"#{@settings[key].join(', ')}\"")
      else
        if @settings[key].class == FalseClass || @settings[key].class == TrueClass
          value = value =~ /^true|1|yes|on/ ? true : false
        elsif @settings[key].class == Integer
          value = value.to_i
        end

        ELoot.msg("info", " \"#{key}\" has been set to \"#{value}\"")
        @settings[key] = value
      end
    end
  end

  #Inventory handles inventory
  module Inventory
  
    @sell_containers = []
  
    def self.check_sell_container(sack)
 
      ELoot.msg("debug", "Inventory.check_sell_container: sack = #{sack}")
   
      return if sack == nil || sack == ""
     
      container = sack.class == GameObj ? sack : ELoot.data.sacks[sack]
     
      #take a look to refresh contents and see if closed
      lines = ELoot.silent_command("look in ##{container.id}",ELoot.data.look_regex)
          
      ELoot.msg("debug", "Inventory.check_sell_container: lines = #{lines}")
      
      #if closed lets open it up
      if lines.any?{ |line| line =~ /That is closed|is shut too tightly to see its contents/i }
        #open the bag
        ELoot.msg("debug", "Inventory.check_sell_container: opening bag")
        ELoot.silent_command("open ##{container.id}",ELoot.data.silent_open)
        
        #check out whats inside
        ELoot.silent_command("look in ##{container.id}",ELoot.data.look_regex)
      
        #we had to open it so lets remember that
        @sell_containers.push(container) unless @sell_containers.include?(container) 
      end
       
    end
  
    def self.close_container(bag)    
      close_regex = /You close .*|That is already closed|What were you referring to|seem to be any way to do that|You tie|Discreetly slipping your hand|You wrap/  
      ELoot.silent_command("close ##{bag.id}",close_regex)       
    end
 
    def self.close_sell_containers   
      return unless ELoot.data.settings[:keep_closed]

      @sell_containers.each{ |sack|        
        Inventory.close_container(sack)
      } 
    end
  
    def self.drag(item, to = "hand") #drags things from inventory to a hand or wears containers
    
      return if item.nil? || item.empty? || item.name == "Empty"
    
      if to == "hand"
        to = GameObj.right_hand.id.nil? ? 'right' : 'left'
      end
    
      lines = ELoot.silent_command("_drag ##{item.id} #{to}", /You|Spreading your wings|Draping the|Heedful of your surroundings/, true)
    
      20.times {
        return true if ([GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id)) && to != "wear"
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id)) && to == "wear"
        sleep 0.1
      }
      
      return false
      
    end
   
    def self.free_hand 
      unless (GameObj.right_hand.id.nil? and ([Wounds.rightArm, Wounds.rightHand, Scars.rightArm, Scars.rightHand].max < 3)) or (GameObj.left_hand.id.nil? and ([Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max < 3))
        if GameObj.right_hand.id and ([Wounds.rightArm, Wounds.rightHand, Scars.rightArm, Scars.rightHand].max < 3 or [Wounds.leftArm, Wounds.leftHand, Scars.leftArm, Scars.leftHand].max = 3)
          waitrt?
          Inventory.free_hands(right: true)
        else
          waitrt?
          Inventory.free_hands(left: true)
        end
      end
    end

    def self.free_hands(right: false, left: false, both: false)
     
      if (right || both) && checkright
        #Are we holding a ready_list weapon? If so put it into its sheath
        if ready_item = ELoot.data.ready_list.find { |k,v| v.id == GameObj.right_hand.id}[0]
          Inventory.stow_ready_list(ready_item, GameObj.right_hand)       
        end 
        if !GameObj.right_hand.id.nil? 
          Inventory.single_drag(GameObj.right_hand) #drags single item into container
        end
      end
      
      if (left || both) && checkleft
        if ready_item = ELoot.data.ready_list.find { |k,v| v.id == GameObj.left_hand.id }[0]
          Inventory.stow_ready_list(ready_item, GameObj.left_hand)       
        end
        if !GameObj.left_hand.id.nil? 
          Inventory.single_drag(GameObj.left_hand) #drags single item into container
        end
      end
  
    end

    def self.open_loot_containers(item)
      #Method intended for opening containers that will receive loot from the loot room or loot item command
      ELoot.msg("debug", " Start of open_loot_containers(item)")
      return unless ELoot.data.settings[:keep_closed]
    
      Inventory.open_single_container(ELoot.data.sacks["default"])
      Inventory.open_single_container(ELoot.data.settings[:overflow_container])
      
      containers = Array.new 
      item.each{ |loot|
        next if ELoot.data.sacks[loot.type].nil?
        unless containers.include?(ELoot.data.sacks[loot.type].id)
          Inventory.open_single_container(ELoot.data.sacks[loot.type])
          containers.push(ELoot.data.sacks[loot.type].id)
        end    
      }
       
    end
  
    def self.open_single_container(sack)
      return if sack.nil? || sack.empty?
      container = sack.class == GameObj ? sack : ELoot.data.sacks[sack]
      ELoot.msg("debug", " open_single_container(sack): before open sack - #{sack} container: #{container}")
      lines = []
      loop {
        lines = ELoot.silent_command("open ##{container.id}",ELoot.data.silent_open)
        ELoot.msg("debug", " open_single_container(sack): open lines - #{lines}")
        if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
          waitrt?
          next
        else
          break
        end
      }
      ELoot.msg("debug", " open_single_container(sack): end of loop")
      if lines.any?{ |line| line =~ ELoot.data.needs_closed }
        @sell_containers.push(container) unless @sell_containers.include?(container)
      end  
     
    end
   
    def self.return_hands
  
      #Nothing to do
      return if ELoot.data.right_hand.id == GameObj.right_hand.id && ELoot.data.left_hand.id == GameObj.left_hand.id
   
      #Check Right Hand
      unless ELoot.data.right_hand.id == GameObj.right_hand.id
        if ready_item = ELoot.data.ready_list.find { |k,v| v.id == ELoot.data.right_hand.id }[0]
          Inventory.return_ready_list(ready_item, ELoot.data.right_hand, "right") 
        else
          Inventory.drag(ELoot.data.right_hand, 'right')   
        end    
      end
      
      #Check Left Hand
      unless ELoot.data.left_hand.id == GameObj.left_hand.id
        if ready_item = ELoot.data.ready_list.find { |k,v| v.id == ELoot.data.left_hand.id }[0]
          Inventory.return_ready_list(ready_item, ELoot.data.left_hand, "left") 
        else
          Inventory.drag(ELoot.data.left_hand, 'left')   
        end    
      end
    
    end
    
    def self.return_ready_list(ready_item, item, hand)
  
      lines = []
      loop {
        lines = ELoot.silent_command("ready #{ready_item}", /You|Spreading your wings|Draping the|Heedful of your surroundings|(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./, true)
        if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
          waitrt?
          next
        else
          break
        end
      }
    
      hand = hand == "right" ? GameObj.right_hand : GameObj.left_hand
    
      20.times {
        return true if ([hand].map(&:id).compact.include?(item.id)) 
        sleep 0.1
      } 
      
    end
    
    def self.single_drag(item, phase_thing = true) #drags single item into container
      
      return if item.nil?
     
      if item.type =~ /box/      
        #item = ELoot.box_phase(item) 
        
        if ELoot.data.disk && !ELoot.data.disk_full && ELoot.data.settings[:use_disk]
          #Wait for disk to arrive
          ELoot.wait_for_disk
          if ELoot.data.disk
            result = Inventory.store_item(ELoot.data.disk, item)
            if result
              return
            end                    
            #inform user it didn't fit if !result
            ELoot.msg("info", " The #{item} won't fit in the #{ELoot.data.disk}. Trying different container.")
            ELoot.data.disk_full = true
          end              
        end
      end
             
      #If we are still here lets see if a sack type was identified
      if ELoot.data.sacks[item.type] && !ELoot.data.sacks_full.include?(ELoot.data.sacks[item.type])
        result = Inventory.store_item(ELoot.data.sacks[item.type], item)
        if result
          ELoot.box_phase(item) if phase_thing
          return
        end
        #inform user it didn't fit
        ELoot.msg("info", " The #{item} won't fit in the #{ELoot.data.sacks[item.type]}. Trying default container.")     
      end
      
      #Still here? Try the default
      if !ELoot.data.sacks_full.include?(ELoot.data.sacks["default"])
        result = Inventory.store_item(ELoot.data.sacks["default"], item)
        if result
          ELoot.box_phase(item) if phase_thing
          return
        end
      end
      
      #inform user it didn't fit
      ELoot.msg("info", " The #{item} won't fit in the #{ELoot.data.sacks["default"]}. Trying overflow container.")
      
      #try the overflow
      if ELoot.data.settings[:overflow_container].empty?
        ELoot.msg("info", " You have not set an OVERFLOW container.")
        ELoot.msg("info", " You're carrying too much stuff. Unload a bit! Exiting...")
        exit
      else
        result = Inventory.store_item(ELoot.data.sacks[ELoot.data.settings[:overflow_container]], item)
        if result
          ELoot.box_phase(item) if phase_thing
          return
        end    
        ELoot.msg("info", " Your OVERFLOW container cannot hold this item.")
        ELoot.msg("info", " You're carrying too much stuff. Unload a bit! Exiting...")
        exit
      end
            
    end
 
    def self.single_loot(item) #loots a single item
      return if item.nil?  
          
      lines = []
      loop {
        lines = ELoot.silent_command("loot ##{item.id}", /You|Spreading your wings|Draping the|Heedful of your surroundings|(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./, true)
        if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
          waitrt?
          next
        else
          break
        end
      }

      20.times {
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) and ELoot.data.sacks[item.type].contents.to_a.map(&:id).include?(item.id))
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) and ELoot.data.sacks["default"].contents.to_a.map(&:id).include?(item.id))
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) and item.type =~ /skin/)
        sleep 0.1
      }

      ELoot.silent_command("look in ##{ELoot.data.sacks[item.type].id}", ELoot.data.look_regex)
      10.times {
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) and ELoot.data.sacks[item.type].contents.to_a.map(&:id).include?(item.id))
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) and ELoot.data.sacks["default"].contents.to_a.map(&:id).include?(item.id))
        sleep 0.1
      }
      
      #inform user it didn't fit
      ELoot.msg("info", " The #{item} wasn't looted. Trying overflow container.")
      
      #still here so try overflow
      if ELoot.data.settings[:overflow_container].empty?
        ELoot.msg("info", " You have not set an OVERFLOW container.")
        ELoot.msg("info", " You're carrying too much stuff. Unload a bit! Exiting...")
        exit
      else
        result = Inventory.store_item(ELoot.data.sacks[ELoot.data.settings[:overflow_container]], item)
        return if result      
        ELoot.msg("info", " Your OVERFLOW container cannot hold this item.")
        ELoot.msg("info", " You're carrying too much stuff. Unload a bit! Exiting...")
        exit
      end
 
    end
 
    def self.store_item(bag, item, is_skinner = false)
      
      return if item.nil? || item.name == "Empty"
      
      lines = []
      loop {
        lines = ELoot.silent_command("_drag ##{item.id} ##{bag.id}", /You|Spreading your wings|Draping the|Heedful of your surroundings|won't fit|(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\.|crumbles? and decays? away/, true)
        if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
          waitrt?
          next
        else
          break
        end
      }
    
      #Check if full
      if lines.any? { |l| l =~ /won't fit/i }
        ELoot.data.sacks_full.push(bag)
        return false
      end
    
      if lines.any? { |l| l =~ /crumbles? and decays? away/i }
        ELoot.msg("info", " This item was crumbly, adding to list")
        ELoot.data.settings[:crumbly].push(item.name)
        ELoot.save_profile()
        return true
      end
      
      20.times {
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) && bag.contents.to_a.map(&:id).include?(item.id))
        #Lousy weapon displayers don't have contents
        if is_skinner
          return true if ![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id)
        end
        sleep 0.1
      }
  
      ELoot.silent_command("look in ##{bag.id}", ELoot.data.look_regex)
      10.times {
        return true if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id) && bag.contents.to_a.map(&:id).include?(item.id))
        sleep 0.1
      }
  
      return false  
         
    end

    def self.stow_ready_list(ready_item, item)
        
      if ELoot.data.ready_method[ready_item] =~ /put in sheath/
        Inventory.check_sell_container(ELoot.data.ready_list["sheath"])
      elsif ELoot.data.ready_method[ready_item] =~ /put in secondary/
        Inventory.check_sell_container(ELoot.data.ready_list["2sheath"])
      end
 
      lines = []
      loop {
        lines = ELoot.silent_command("store #{ready_item}", /You|Spreading your wings|Draping the|Heedful of your surroundings|(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./, true)
        if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
          waitrt?
          next
        else
          break
        end
      }
     
      20.times {
        return true if ![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id)
        sleep 0.1
      }     
     
      return false  

    end
 
  end #End of Inventory

  # Loot handles the room looting for ELoot
  module Loot
   
    def self.bag_loot(bag) #loots bags dropped from critters that have treasure in them
      return if ELoot.data.checked_bags.include?(bag.id)
   
      lines = ELoot.silent_command("open ##{bag.id}",ELoot.data.silent_open)
      
      if lines.any?{ |line| line =~ /There doesn't seem to be any way to do that/i}
        ELoot.data.checked_bags.push(bag.id)
        return 
      end
           
      result = dothistimeout("look in ##{bag.id}", 3, ELoot.data.look_regex)
                   
      if bag.contents.any? { |obj| obj.name =~ /silver coins/ }
        res = dothistimeout("get coins from ##{bag.id}", 3, /You gather the remaining|Get what\?/)
        ELoot.msg("info", " Unknown get coin result") if res !~ /You gather the remaining/
        sleep 0.5
        waitrt?
      end

      objs = Loot.reject_invalid_loot(bag.contents)
      if objs.empty?
        ELoot.data.checked_bags.push(bag.id)
        return 
      end
      #Open sacks for looting the box
      Inventory.open_loot_containers(objs)
      
      #If handled, we reject them since they're already looted.
      types = ["box", "clothing", "collectible", "cursed", "jewelry"]
      objs = objs.reject do |thing|
        next false if ELoot.data.settings[:loot_exclude].length.positive? && thing.name =~ Regexp.union(ELoot.data.settings[:loot_exclude])     
        unless thing.type =~ Regexp.union(ELoot.data.settings[:loot_types].reject { |x| !types.include?(x)}) \
          || (thing.type =~ /weapon/i && thing.type =~ /uncommon/ ) && ELoot.data.settings[:loot_types].include?("weapon") \
          || (thing.type =~ /armor/i && thing.type =~ /uncommon/ ) && ELoot.data.settings[:loot_types].include?("armor") 
          next false       
        end
        #Make sure we have a hand free
        Inventory.free_hand
        Inventory.single_drag(thing)
        next true
      end
      ELoot.msg("debug", " Loot.bag_loot: After specials check")
      
      # Anything left after boxes, collectibles, and uncommon weapon/armor?
      if objs.empty?     
        ELoot.data.checked_bags.push(bag.id)
        return 
      end
      
      # Find out what loot is valid so we can match it to the remaining loot
      valid = Loot.valid_objs(objs.clone) if not objs.empty?
      invalid = Loot.invalid_objs(objs.clone) if not objs.empty?
      ELoot.msg("debug", " Loot.bag_loot - valid: #{valid}")
      ELoot.msg("debug", " Loot.bag_loot - invalid: #{invalid}")

      # Is there anything else we care about?
      if valid.empty? && !invalid.empty?    
        invalids = []
        invalid.each{ |t| invalids.push(t.name) }
        ELoot.msg("info", " Left the following invalid lootables: #{invalids.join(', ')}.")      
      else
        #Make sure we have a hand free
        Inventory.free_hand
        valid.each do |thing|
          Inventory.single_drag(thing)
        end
        invalids = []
        invalid.each{ |t| invalids.push(t.name) }
        ELoot.msg("info", " Left the following invalid lootables: #{invalids.join(', ')}.") if invalid.length.positive?
      end
      
      ELoot.data.checked_bags.push(bag.id)
         
    end
   
    def self.box_loot(box) #Loots box contents
        
      res = dothistimeout("open ##{box.id}", 3, /open|locked/)      
      return Inventory.single_drag(box) if res =~ /locked/
  
      if ELoot.data.settings[:display_box_contents]
        fput "look in ##{box.id}" 
      else
        ELoot.silent_command("look in ##{box.id}",/There is nothing|In the|That is closed/)
      end
  
      if box.contents.empty?
        Sell.save_trash_box(box)
        return
      end

      if box.contents.any? { |obj| obj.name =~ /silver coins/ }
        res = dothistimeout("get coins from ##{box.id}", 3, /You gather the remaining|Get what\?/)
        ELoot.msg("info", " Unknown get coin result") if res !~ /You gather the remaining/
        sleep 0.5
        waitrt?
      end

      objs = Loot.reject_invalid_loot(box.contents)
      if objs.empty?     
        Sell.save_trash_box(box)
        return 
      end
           
      #If handled, we reject them since they're already looted.
      types = ["box", "clothing", "collectible", "cursed", "jewelry"]
      objs = objs.reject do |thing|
        next false if ELoot.data.settings[:loot_exclude].length.positive? && thing.name =~ Regexp.union(ELoot.data.settings[:loot_exclude])     
        unless thing.type =~ Regexp.union(ELoot.data.settings[:loot_types].reject { |x| !types.include?(x)}) \
          || (thing.type =~ /weapon/i && thing.type =~ /uncommon/ ) && ELoot.data.settings[:loot_types].include?("weapon") \
          || (thing.type =~ /armor/i && thing.type =~ /uncommon/ ) && ELoot.data.settings[:loot_types].include?("armor") 
          next false       
        end
     
        Inventory.single_drag(thing)
        next true
      end
      ELoot.msg("debug", " Loot.box_loot: After specials check")
      
      # Anything left after boxes, collectibles, and uncommon weapon/armor?
      if objs.empty?     
        Sell.save_trash_box(box)
        return 
      end
      
      # Find out what loot is valid so we can match it to the remaining loot
      valid = Loot.valid_objs(objs.clone) if not objs.empty?
      invalid = Loot.invalid_objs(objs.clone) if not objs.empty?
      ELoot.msg("debug", " Loot.box_loot - valid: #{valid}")
      ELoot.msg("debug", " Loot.box_loot - invalid: #{invalid}")

      # Is there anything else we care about?
      if valid.empty? && !invalid.empty?    
        invalids = []
        invalid.each{ |t| invalids.push(t.name) }
        ELoot.msg("info", " Left the following invalid lootables: #{invalids.join(', ')}.")      
      elsif invalid.empty? && !valid.empty?
        ELoot.msg("debug", " Loot.box_loot: looting box")
        res = dothistimeout("loot ##{box.id}", 3, /You search through/)
        ELoot.msg("info", " Failed to LOOT box") if res.nil?
        sleep(0.10)

        if box.contents.length.positive?
          lootsack = ELoot.data.sacks['default']
          res = dothistimeout("empty ##{box.id} in ##{lootsack.id}", 3, /You try to empty/)
          sleep 0.5
          waitrt?
          if res.nil?
            ELoot.msg("info", " Failed to EMPTY box")          
            ELoot.msg("info", " Sleeping for 3 seconds: ;kill the script to handle yourself")
            fput "look in ##{box.id}"            
            sleep 3
          end
        end      
      else
        valid.each do |thing|
          Inventory.single_drag(thing)
        end
        invalids = []
        invalid.each{ |t| invalids.push(t.name) }
        ELoot.msg("info", " Left the following invalid lootables: #{invalids.join(', ')}.") if invalid.length.positive?
      end
      
      Sell.save_trash_box(box)
      
    end
 
    def self.loot_all(items) #loots entire room #Fixme
  
      waitrt?
  
      res = dothistimeout('loot room', 3, /With a discerning eye|There is no loot|(?:gather|pick) up and stow (?:what|as much) treasure .+ manage|but quickly realize|before realizing you have no room|(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./)
    
      #Have some rt to wait on
      if res =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./
        sleep 0.2
        waitrt?
        
        #Rerun Loot.room to make sure rt didn't mess us up to much
        Loot.room
      end
    
      #Didn't get it all?...something in-hand?
      if res =~ /(?:gather|pick) up and stow (?:what|as much) treasure .+ manage|but quickly realize|before realizing you have no room/
        
        Inventory.single_drag(GameObj.right_hand) if items.include?(GameObj.right_hand)
        Inventory.single_drag(GameObj.left_hand) if items.include?(GameObj.left_hand)  
        
        #Anything left?
        objs = Loot.reject_invalid_loot(GameObj.loot.to_a)
        return if objs.empty?
        
        #Still here so rerun Loot.room
        Loot.room
        
      end
    end
 
    def self.occassional_skinner(obj)
    
      if obj.name =~ /rotting chimera/
        lines = ELoot.silent_command("describe chimera",/The twisted and confused form/)
        if lines.any? { |line| line =~ /A huge scorpion tail rises high from the rear/}
          return true
        end
      end
      
      return false
            
    end
 
    def self.reject_invalid_loot(objs) #rejects items from the GamObj.loot object
      objs.reject do |obj|
        obj.name =~ /\bsevered\b/i ||
        obj.id.to_i.negative? ||
        (obj.type =~ /weapon|armor/i && obj.type !~ /uncommon/i) ||
        obj.noun =~ /^(?:disk|coffin)$/ ||
        ELoot.data.settings[:crumbly].index(obj.name) > -1          
      end
    end

    def self.valid_objs(objs) #finds valid loot
      if !ELoot.data.settings[:loot_types].nil?
        objs.reject do |obj|
          obj.type !~ Regexp.union(ELoot.data.settings[:loot_types]) ||
            (ELoot.data.settings[:loot_exclude].length.positive? &&
             obj.name =~ Regexp.union(ELoot.data.settings[:loot_exclude]))
        end
      end
    end

    def self.invalid_objs(objs) #finds non-valid loot    
        invalid_categories = ELoot.data.all_loot_categories - ELoot.data.settings[:loot_types]
        objs.find_all do |obj|
          next if obj.nil? || obj.empty?
          obj.type =~ Regexp.union(invalid_categories)  \
          || (ELoot.data.settings[:loot_exclude].length.positive? && obj.name =~ Regexp.union(ELoot.data.settings[:loot_exclude]))          
        end     
    end
    
    def self.room #method that loots the room
      
      objs = Loot.reject_invalid_loot(GameObj.loot.to_a)

      if not objs.empty? 
        
        #Open sacks for looting the room
        Inventory.open_loot_containers(objs)
 
        # Boxes go first. If handled, we reject them since they're already looted.
        types = ["box", "clothing", "collectible", "cursed", "jewelry", "food"]
        objs = objs.reject do |thing|
    
          Loot.bag_loot(thing) if thing.type =~ /clothing/ 
          next false if ELoot.data.settings[:loot_exclude].length.positive? && thing.name =~ Regexp.union(ELoot.data.settings[:loot_exclude])     
          unless thing.type =~ Regexp.union(ELoot.data.settings[:loot_types].reject { |x| !types.include?(x)}) \
            || (thing.type =~ /weapon/i && thing.type =~ /uncommon/ ) && ELoot.data.settings[:loot_types].include?("weapon") \
            || (thing.type =~ /armor/i && thing.type =~ /uncommon/ ) && ELoot.data.settings[:loot_types].include?("armor") \
            || thing.name =~ /orb/ && thing.type =~ /magic/ && ELoot.data.settings[:loot_types].include?("magic") \
            || thing.name =~ /silver coin/ && ELoot.data.settings[:loot_types].include?("coins")
            next false       
          end
    
          if thing.name =~ /silver coin/
            ELoot.silent_command("get coin",/you gather/i,true)
          else
            #Make sure we have a hand free
            Inventory.free_hand
            Inventory.single_drag(thing) if ELoot.decurse(thing)
          end
          
          next true
        end
      end
      
      ELoot.msg("debug", " Loot.room: After specials check")
      
      # Anything left after boxes, collectibles, and uncommon weapon/armor?
      # Find out what loot is valid so we can match it to the remaining room loot
      if not objs.empty?
        valid = Loot.valid_objs(objs.clone)
        invalid = Loot.invalid_objs(objs.clone)
        ELoot.msg("debug", " Loot.room - valid: #{valid}")
        ELoot.msg("debug", " Loot.room - invalid: #{invalid}")
      
        #Make sure we have a hand free
        Inventory.free_hand unless valid.empty?
      
        # Is there anything else we care about?
        if valid.empty? && !invalid.empty?    
          invalids = []
          invalid.each{ |t| invalids.push(t.name) unless valid.include?(t) }
          ELoot.msg("info", " Left the following invalid lootables: #{invalids.join(', ')}.") if !invalids.empty?
        elsif invalid.empty? && !valid.empty?
          #Make sure we have a hand free
          Inventory.free_hand
          ELoot.msg("debug", " Loot.room: Calling Loot.loot_all")
          Loot.loot_all(valid)
        else
          
          valid.each do |obj|
            if obj.type !~ /clothing|jewelry|gem|herb|skin|wand|scroll|potion|reagent|trinket|lockpick|treasure|forageable|magic|collectible/
              Inventory.single_drag(obj)
            else
              Inventory.single_loot(obj)
            end
          end
          invalids = []
          invalid.each{ |t| invalids.push(t.name) unless valid.include?(t) }
          ELoot.msg("info", " Left the following invalid lootables: #{invalids.join(', ')}.") if !invalids.empty?
        end
      end
           
      ELoot.msg("debug", " Loot.room: End of method")
      
    end

    def self.search(objs = GameObj.dead.to_a) #searches dead critters
      
      return if objs.empty?

      inhand_critters = /skayl|glacei|tumbleweed|plant|shrub|creeper|vine|bush|caedera/
   
      objs.each do |thing|
        next if (ELoot.data.settings[:critter_exclude].length.positive? && thing.name =~ Regexp.union(ELoot.data.settings[:critter_exclude]))
        ELoot.change_stance('defensive') if ELoot.data.settings[:loot_defensive]
        
        if thing.name =~ inhand_critters 
          Inventory.free_hand 
          free_hand = GameObj.right_hand.id.nil? ? "right" : "left"         
        end
        # Loot it
        3.times do
          waitrt?
          res = dothistimeout("loot ##{thing.id}", 1, /You (search|plunge|break)|not in any condition|see well enough to search/)
          break if res =~ /You (search|plunge|break)|not in any condition|see well enough to search/ || thing.status =~ /gone/ || thing.nil?
        end

        # Some creatures put an item directly in your hand
        if thing.name =~ inhand_critters
          check_hand = free_hand == "right" ? GameObj.right_hand : GameObj.left_hand
          if check_hand.name != "Empty"
            if ELoot.data.settings[:keep_closed]
              Inventory.open_single_container(ELoot.data.sacks["default"])
              Inventory.open_single_container(ELoot.data.sacks["gem"])
              Inventory.open_single_container(ELoot.data.sacks["skin"])
              Inventory.open_single_container(ELoot.data.settings[:overflow_container])
            end  
           
            Inventory.single_drag(check_hand, false)
          end
        end
      end

      # if the setting is on always end in defensive
      ELoot.change_stance('defensive') if ELoot.data.settings[:loot_defensive]
      
    end

    def self.skin_obj_types(objs, type) #skins type (blunt/dagger) group of dead critters
      
      return if objs.empty?
      dont_stow = false
      waitrt?
     
      if type == :blunt
        skinner = ELoot.data.skin_blunt
        ELoot.msg("debug", " blunt skinner: #{skinner} blunt skinner.id: #{skinner.id}")
        unless skinner
          ELoot.msg("info", " No blunt weapon found. Please run setup and make sure its listed.")
          return
        end
        Inventory.free_hands(both: true)
      else
        skinner = ELoot.data.skin_edged
        ELoot.msg("debug", " edged skinner: #{skinner} edged skinner.id: #{skinner.id}")
        unless skinner.id       
          skinner = GameObj.right_hand   
          dont_stow = true
          ELoot.msg("info", " No edged skin weapon found. Using whatever is in your hand.")
          ELoot.msg("info", " Please run setup and make sure the sheath and weapon are listed and the weapon is inside the sheath")
        end
         Inventory.free_hand unless skinner.id == GameObj.right_hand.id || skinner.name == "Empty"
      end
      
      expiry = Time.now + 1
      until [GameObj.right_hand.id, GameObj.left_hand.id].include?(skinner.id) || skinner.name == "Empty"
        waitrt?
        Inventory.drag(skinner)
        pause 0.2
        break if Time.now > expiry
      end
      if skinner.name =~ /Empty/i
        skinner_hand = 'right'
      else
        skinner_hand = skinner.id == GameObj.left_hand.id ? 'left' : 'right'
      end

      # Safe to kneel?
      while GameObj.targets.empty? && ELoot.data.settings[:skin_kneel] && !kneeling?
        dothistimeout('kneel', 3, /You kneel down\.$|You move to|You are already kneeling\.$/)
      end

      # Sigil of Resolve?
      if ELoot.data.settings[:skin_resolve] &&
          Spell['Sigil of Resolve'].affordable? &&
          !Spell['Sigil of Resolve'].active?
        Spell['Sigil of Resolve'].cast
      end

      # 604 stuff
      if ELoot.data.settings[:skin_604] && Spell[604].affordable? && (!Spell[604].active? || (Spell[604].timeleft * 60).truncate() <= 10)
        until Spell[604].active? && (Spell[604].timeleft * 60).truncate() > 5
          Spell[604].cast
          sleep(0.1)
        end
      end

      skin_match = Regexp.union(
        /You skinned/i,
        /You botched/i,
        /already been/i,
        /cannot skin/i,
        /must be a member/i,
        /can only skin/i,
        /You are unable to break through/i,
        /You break through the crust of the/i,
        /You crack open a portion/i,
        /Because your account is free/i,
        /it's not possible to get a worthwhile/i,
      )

      break_match = Regexp.union(
        /You break through the crust of the .+ and withdraw (.+)!/i,
        /You crack open a portion of the .+ and uncover (.+)!/i,
      )

      # Skin em
      objs.each do |obj|
        res = dothistimeout("skin ##{obj.id} #{skinner_hand}", 2, skin_match)
        if res =~ /You cannot skin/
          ELoot.data.settings[:unskinnable].push(obj.name)
          ELoot.save_profile()
        elsif res =~ break_match
          fput "stow gem ##{GameObj.left_hand.id}"
        end
      end

      waitrt?
      
      return if dont_stow
      
      
      if type == :blunt
        bag = ELoot.data.ready_list["skin_sheath_blunt"].nil? ? ELoot.data.sacks["default"] : ELoot.data.ready_list["skin_sheath_blunt"]
      else
        bag = ELoot.data.ready_list["skin_sheath"].nil? ? ELoot.data.sacks["default"] : ELoot.data.ready_list["skin_sheath"] 
      end
      
      Inventory.store_item(bag, skinner, true)
      
      if [GameObj.right_hand.id, GameObj.left_hand.id].include?(skinner.id)
        Inventory.store_item(ELoot.data.sacks["default"], skinner)
      end
          
    end

    def self.skin(objs = GameObj.dead.to_a) #determines what to skin
      

        objs = objs.reject do |obj|
          (ELoot.data.settings[:unskinnable].index(obj.name) > -1 && !Loot.occassional_skinner(obj))||
            obj.type =~ /bandit/ ||
            obj.name =~ /(?:ethereal|ghostly|unwordly|Grimswarm)/ ||
            ELoot.data.settings[:skin_exclude].length.positive? && obj.name =~ Regexp.union(ELoot.data.settings[:skin_exclude])
        end
 
      return if objs.empty?

      blunts = objs.find_all { |obj| obj.name =~ /krynch|stone mastiff|krag dweller|cavern urchin/i }
      normals = objs.reject { |obj| obj.name =~ /krynch|stone mastiff|krag dweller|cavern urchin/i }

      skin_obj_types(normals, :normal)
      skin_obj_types(blunts, :blunt)

      stance = checkstance
      unless standing?
        ELoot.change_stance('offensive') if GameObj.targets.empty?
        dothistimeout('stand', 3, /You stand|You quickly roll|You are already standing/) until standing?
        ELoot.change_stance(stance) if checkstance != stance
      end
    end
  
  end #End of Loot

  # Sell is a module that handles selling loot
  module Sell

    def self.box_in_hand
      
      return unless [GameObj.left_hand.type, GameObj.right_hand.type].include?("box")
      
      #Make sure the box is in the right hand
      if GameObj.left_hand.type == "box"
        fput "swap"
      end
      
      box = GameObj.right_hand
      
      #Need a free hand
      Inventory.free_hands(left: true) unless GameObj.left_hand.type == "box"
        
      #Is it opened or closed?
      lines = ELoot.silent_command("look in ##{box.id}",/There is nothing|In the|That is closed/)
      
      #It's open so loot it!
      if lines.any?{ |line| line =~ /There is nothing|In the/i }
        Loot.box_loot(box) 
        return
      end
      
      #Still here so lets drop it off at the pool
      if ELoot.data.settings[:sell_locksmith_pool]
        ELoot.silver_withdraw(8000 - ELoot.silver_check) 
        ELoot.go2('locksmith pool')
        
        worker = ELoot.find_worker
    
        percent = ELoot.data.settings[:sell_locksmith_pool_tip_percent] ? ' PERCENT' : ''

        match = /You want a locksmith|You don't have that much|takes your|already holding as many boxes|already (unlocked|open)/
        result = dothistimeout("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}", 3, match)
        if result =~ /already (unlocked|open)/
         Loot.box_loot(box)
        else
          res = dothistimeout("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}", 3, match)        
          if res =~ /You don't have that much/
            ELoot.silver_withdraw(8000 - ELoot.silver_check)
            ELoot.go2('locksmith pool')
            fput("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}")
            dothistimeout("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}", 3, match)  
          elsif res =~ /already (unlocked|open)/
           Loot.box_loot(box)
          end
        end
      end
      
      if !checkright
        return
      end
           
      #Still here so the pool must be full. Trying locksmith
      if ELoot.data.settings[:sell_locksmith]
        ELoot.silver_withdraw(8000 - ELoot.silver_check)
        ELoot.go2('locksmith')
        
        if (table = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.noun =~ /(?:table|counter)$/ })
        dothistimeout("look on ##{table.id}", 3, /On the/) if table.contents.nil?

          if table.contents.nil?
            error('failed to find table contents')
          else
            activator = nil
            if table.contents.any? { |obj| obj.noun == 'bell' }
              activator = 'ring bell'
            elsif table.contents.any? { |obj| obj.noun == 'keys' }
              activator = 'pull keys'
            elsif table.contents.any? { |obj| obj.noun == 'chime' } || GameObj.loot.any? { |obj| obj.noun == 'chime' }
              activator = 'ring chime'
            end

            if activator
              res = dothistimeout(activator, 3, /Gimme ([\d,]+) silvers/)
              ELoot.msg "info", 'unknown locksmith response' unless res

              res = dothistimeout('pay', 3, /accepts|have enough/)
              if res =~ /have enough/
                Inventory.single_drag(thing, false)
                ELoot.silver_withdraw(8000)
                ELoot.go2('locksmith')
                dothistimeout(activator, 3, /Gimme ([\d,]+) silvers/)
              end       
            else
              ELoot.msg("error", " Failed to find a bell, keys, or chime on the table")
            end
            
            Loot.box_loot(box)
           
          end
        else
          ELoot.msg("error", " Failed to find a table")
        end
        
      end
      
      #Only drop if Shattered
      if XMLData.game == "GSF" && GameObj.right_hand.type == "box"
        fput "drop ##{GameObj.right_hand.id}"
      end
          
    end

    def self.glam_and_shroud
      glam = Spell[1205]
      shroud = Spell[1212]

      if glam.known? && glam.affordable? && Effects::Spells.time_left("Glamour") < 1
          wait_until { glam.affordable? }
          glam.cast(Char.name)
      end

      if shroud.known?
        shroud_races = ['human',
                        'giantman',
                        'half-elf',
                        'sylvankind',
                        'dark elf',
                        'elf',
                        'dwarf',
                        'halfling',
                        'forest gnome',
                        'burghal gnome',
                        'half-krolvin',
                        'erithian',
                        'aelotoi']
        shroud_race_hash = {"vo" => "human",
                            "ifw" => "dwarf",
                            "wl" => "human",
                            "imt" => "halfling",
                            "rr" => "human",
                            "kf" => "human",
                            "en" => "elf",
                            "ti" => "dwarf",
                            "zl" => "dwarf"}
        town = Room[Room.current.find_nearest_by_tag("town")]
        town_key = town.image.split("-")[0]
        if town.image =~ /zul/i
          town_key = "zl"
        end
        desired_race = shroud_race_hash[town_key]
 
        lines = ELoot.silent_command("fame",/Your personal fame/)
        
        if lines.any?{ | line| line =~ /You are a level (?:\d+) ([\w\- ]+) (?:[\w\- ]+)\./ }
          current_race = $1.downcase()
          current_race_setting = shroud_races.index(current_race) + 1
        end
        
        return true if current_race == desired_race
        race_setting = shroud_races.index(desired_race) + 1
        if Effects::Spells.time_left("Shroud of Deception") < 2
            waitcastrt?
            wait_until { shroud.affordable? }
            shroud.cast(Char.name)
        end

        lines = ELoot.silent_command("shroud profile",/You are currently using profile/)
    
        if lines.any? { |line| line =~ /You are currently using profile <d cmd='shroud view [0-9]+'>([0-9]+)<\/d>./ }
          shroud_profile = $1
        end
 
        before_dying { fput("shroud set #{shroud_profile} race #{current_race_setting}") }
        fput("shroud set #{shroud_profile} race #{race_setting}")
      end
    end

    def self.save_trash_box(box)
    
      #Save the box if we want to sell it
      if ELoot.data.settings[:sell_loot_types].include?("box") && box.contents.empty? && box.name =~ /gold|mithril|silver/
        ELoot.msg("debug", " save_trash_box(box): inside first if")
        Inventory.single_drag(box,false)
        return
      end
      
      ELoot.msg("debug", " save_trash_box(box): looking for a trashcan")
      trash = ELoot.find_trash
      
      unless trash
        #going here because they have trash cans. Don't want to litter
        ELoot.go2('locksmith pool')       
        trash = ELoot.find_trash
      end
      
      if trash.nil?
        fput("drop ##{box.id}")
      else
        ELoot.msg("debug", " save_trash_box(box): putting it in trash")
        #use a loop, dothistimeout and a timer - getting stuck with a ...wait after getting coins
        t = Time.now + 3
        loop {
          dothistimeout "put ##{box.id} in ##{trash.id}", 1, /As you place|If you wish to continue/
          if ![GameObj.right_hand.id, GameObj.left_hand.id].include?(box.id) || Time.now > t
            break
          end       
        }    
      end

     
      fput("drop ##{box.id}") if [GameObj.right_hand.id, GameObj.left_hand.id].include?(box.id)
      
    end
     
    def self.dump_herbs_junk
  
      #What stuff are we supposed to dump?
      dump_stuff = Array.new
      ["herb", "junk", "food"].each { |item|    
        if ELoot.data.settings[:sell_loot_types].include?(item)
            dump_stuff.push(item)
        end
      }
      
      #Return if nothing
      if dump_stuff.empty?
        return
      end
 
      #Do we have anything to dump?
      dump_items = Array.new
      sacks = [ELoot.data.sacks["default"], ELoot.data.sacks[ELoot.data.settings[:overflow_container]]]      
      sacks.each{ |sack| 
        Inventory.check_sell_container(sack) if @sell_containers.include?(sack) && ELoot.data.settings[:keep_closed]
        sack.contents.each{ |item|
          if item.type =~ Regexp.union(dump_stuff)
            dump_items.push(item)
          end
        }
      }
 
      #No items to dump so return
      if dump_items.empty?
        return
      end

      #Is there a trash can here?
      trash = ELoot.find_trash

      unless trash
        #going here because they have trash cans. Don't want to litter
        ELoot.go2('locksmith pool')       
        trash = ELoot.find_trash
      end
      
      if trash.nil?
        ELoot.msg("info", " No trashcan found! Skipping herb/junk/food disposal so as not to litter and be a pest.")
        return
      end
      
      dump_items.each{ |item|      
        Inventory.drag(item)  
        fput("put ##{item.id} in ##{trash.id}")
        sleep(0.25)
        if [GameObj.right_hand.id, GameObj.left_hand.id].include?(item.id)
          ELoot.msg("info", " #{item.name} isn't gone so maybe its special...keepin it.")
          Inventory.single_drag(item)
        end          
      }
           
      Inventory.free_hands(both: true)
       
    end

    def self.appraise(item,location)
      return if item.type =~ /jewelry/ && location == "pawnshop"
           
      amount = 0
      raw = nil
      
      limit = location == "gemshop" ? ELoot.data.settings[:sell_appraise_gemshop] : ELoot.data.settings[:sell_appraise_pawnshop]
      
      high_value = /not buying anything this valuable today/
      denied = Regexp.union(
        /That thing's worth less/,
        /Can't say I'm interested/,
        /That's basically worthless here/,
        /He hands it back to you, saying/,
        /Not my line, really/,
        /not quite my field/,
        /only deal in gems and jewelry/,
        /There is nothing of value to me/,
        /Trying to pull a fast one on old Hortemeyer, are you\?/,
        /no use for that/,
        /Appraise what\?\?\?/,
      )
      appraised = /([,0-9]+) (?:silver|for it if you want to sell|for this if you'd like)/
      sold = Regexp.union(
        /(?:pays|hands) you [,0-9]+ silver/,
        /I don't have that much spare silver, I will have to give you a bank note for it/,
        /I'm afraid I don't have that much silver on hand.+so I'll have to give you a .+ for it./,
      )
      item_selling_match = Regexp.union(high_value,denied,appraised,sold)
      
      
      res = dothistimeout "appraise ##{item.id}", 3, item_selling_match
   
      if res =~ appraised
        raw = $1
        amount = $1.delete(",").to_i
      end        
 
      if amount > limit.to_i 
        ELoot.msg("info", " The #{item} appraises for #{raw}. That's above your settings.")
        Inventory.single_drag(item)
      elsif amount <= limit.to_i && amount != 0
        Sell.sell_item(item)
      else
        Inventory.single_drag(item)
      end
     
    end
    
    def self.locksmith_pool(boxes)
      # if we're here, assume we emptied out the disk some
      ELoot.data.disk_full = false
      ELoot.silver_withdraw(8000 - ELoot.silver_check) if boxes.length.positive?
      ELoot.go2('locksmith pool')

      worker = ELoot.find_worker

      Inventory.free_hands(both: true)
      ELoot.wait_for_disk

      boxes.each do |box|
 
        lines = ELoot.silent_command("look in ##{box.id}",/There is nothing|In the #{box.name}|That is closed|shifting form/)
        next if lines.any?{ |line| line =~ /There is nothing|In the/i }
   
        Inventory.drag(box)
 
        box = ELoot.box_unphase(box)
  
        percent = ELoot.data.settings[:sell_locksmith_pool_tip_percent] ? ' PERCENT' : ''
 
        match = /You want a locksmith|You don't have that much|takes your|already holding as many boxes|already (unlocked|open)/
        result = dothistimeout("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}", 3, match)
        if result =~ /already (unlocked|open)/
         Loot.box_loot(box)
        else
          res = dothistimeout("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}", 3, match)        
          if res =~ /You don't have that much/
            ELoot.silver_withdraw(8000 - ELoot.silver_check)
            ELoot.go2('locksmith pool')
            fput("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}")
            dothistimeout("give ##{worker.id} #{ELoot.data.settings[:sell_locksmith_pool_tip]}#{percent}", 3, match)  
          elsif res =~ /already holding as many boxes/
            sleep(0.250)
            Inventory.single_drag(box)
            break
          elsif res =~ /already (unlocked|open)/
           Loot.box_loot(box)
          end
        end
        sleep(0.250)
        Inventory.single_drag(box) if [GameObj.right_hand.id, GameObj.left_hand.id].include?(box.id)
      end

      
      # retrieve (and loot) any boxes in the pool
      loop do
        match = /We don't have any boxes ready for you|We don't seem to have that box|Alright, here's your/
        res = dothistimeout("ask ##{worker.id} for return", 3, match)
        # no more boxes left
        break if res !~ /Alright, here's your/

        box = nil
        if GameObj.right_hand.type =~ /box/
          box = GameObj.right_hand
        elsif GameObj.left_hand.type =~ /box/
          box = GameObj.left_hand
        else
          ELoot.msg("error", " Failed to find the box you were supposed to get; report this to Elanthia-Online")
        end

        Loot.box_loot(box)

        sleep(0.250)
      end
    end

    def self.locksmith(boxes)
      # if we're here, assume we emptied out the disk some
      ELoot.data.disk_full = false

      silver = ELoot.silver_check

      ELoot.silver_withdraw(8000 - silver) if silver < 8000

      ELoot.go2('locksmith')
      ELoot.wait_for_disk

      if (table = (GameObj.room_desc.to_a + GameObj.loot.to_a).find { |obj| obj.noun =~ /(?:table|counter)$/ })
        dothistimeout("look on ##{table.id}", 3, /On the/) if table.contents.nil?

        if table.contents.nil?
          error('failed to find table contents')
        else
          activator = nil
          if table.contents.any? { |obj| obj.noun == 'bell' }
            activator = 'ring bell'
          elsif table.contents.any? { |obj| obj.noun == 'keys' }
            activator = 'pull keys'
          elsif table.contents.any? { |obj| obj.noun == 'chime' } || GameObj.loot.any? { |obj| obj.noun == 'chime' }
            activator = 'ring chime'
          end

          if activator
            boxes.each { |box| 
              Inventory.free_hands(both: true)
              Sell.locksmith_open(box, activator)          
            }           
          else
            ELoot.msg("error", " Failed to find a bell, keys, or chime on the table")
          end
        end
      else
        ELoot.msg("error", " Failed to find a table")
      end
    end

    def self.locksmith_open(box, activator)
    
      lines = ELoot.silent_command("look in ##{box.id}",/There is nothing|In the #{box.name}|That is closed|shifting form/)
      return if lines.any?{ |line| line =~ /There is nothing|In the/i }
    
      Inventory.drag(box)
      box = ELoot.box_unphase(box)

      res = dothistimeout(activator, 3, /Gimme ([\d,]+) silvers/)
      ELoot.msg "info", 'unknown locksmith response' unless res

      res = dothistimeout('pay', 3, /accepts|have enough/)
      if res =~ /have enough/
        Inventory.single_drag(thing, false)
        ELoot.silver_withdraw(8000 - ELoot.silver_check)
        ELoot.go2('locksmith')

        return Sell.locksmith_open(box, activator)
      end

      Loot.box_loot(box)
    end

    def self.gold_rings
    
      return unless ELoot.data.settings[:sell_gold_rings]
    
      ELoot.go2("chronomage")
    
      Inventory.free_hands(both: true)
        
      unless npc = GameObj.npcs.find { |npc| npc.noun =~ /clerk|agent|halfling|scallywag|dwarf|woman|attendant|guard/ }
        npc = GameObj.room_desc.find { |n| n.noun =~ /clerk|agent|halfling|scallywag|dwarf|woman|attendant|guard/ }
      end
   
      unless npc.nil?
        chrono_sacks = Array.new
        chrono_sacks.push(ELoot.data.sacks["default"]) if ELoot.data.settings[:sell_container].include?("default")
        chrono_sacks.push(ELoot.data.sacks[ELoot.data.settings[:overflow_container]]) if ELoot.data.settings[:sell_container].include?("overflow")
        
        chrono_sacks.each{ |sack| Inventory.open_single_container(sack) }        
             
        chrono_sacks.each{ |sack|
          next if sack.nil?
          next if sack.contents.find_all { |obj| obj.name =~ ELoot.data.regex_gold_rings }.empty?
        
          sack.contents.each do |item|
            next if $sell_ignore.include?(item.id)
            next unless item.name =~ ELoot.data.regex_gold_rings
            $sell_ignore.push(item.id) 
            Inventory.drag(item)
            #Fixme: add checks
            fput "give ##{item.id} to ##{npc.id}"
            
            20.times {
              break if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id))
              sleep 0.1
            }
            
            Inventory.free_hands(both: true)     
          end       
        }      
      end
    end

    def self.collectibles 
   
      return unless ELoot.data.settings[:sell_collectibles]
      
      places = Array.new
      places.push(Room.current.find_nearest_by_tag("collectible")) unless Room.current.find_nearest_by_tag("collectible").nil?
      places.push(Room.current.find_nearest_by_tag("collectibles")) unless Room.current.find_nearest_by_tag("collectibles").nil?
      
      go_place = Room.current.find_nearest(places)

      ELoot.go2(go_place)

      Inventory.free_hands(both: true)

      ELoot.data.sacks.keys.each{ |item|
        next unless ELoot.data.settings[:sell_container].include?(item)     
        ELoot.data.sacks[item].contents.each { |thing| 
          next if $sell_ignore.include?(thing.id)
          next unless thing.type == "collectible"
          next if ELoot.data.ready_list.find { |k,v| v.id == thing.id}
          next if (thing.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/ && !ELoot.data.settings[:sell_exclude].empty?)
          next if thing.name =~ /bound/
          $sell_ignore.push(thing.id)          
          Inventory.drag(thing)            
          dothistimeout("deposit ##{thing.id}", 3, /You hand your/)
          
          20.times {
            break if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(thing.id))
            sleep 0.1
          }
          
          
          Inventory.free_hands(both: true)
        }       
      }
     
    end

    def self.furrier
    
      ELoot.go2("furrier")
    
      Inventory.free_hands(both: true)
    
      skin_match = /You have been tasked to retrieve (\d+) (.*) of at least \w+ quality for (?:the )?\w+ (?:in|on|near) (?:(.*) (?:under|near|between) )?(?:the Company Store in )?([^.]+)\./     
      
      skin_sacks = Array.new
      skin_sacks.push(ELoot.data.sacks["skin"]) if ELoot.data.settings[:sell_container].include?("skin")
      skin_sacks.push(ELoot.data.sacks["default"]) if ELoot.data.settings[:sell_container].include?("default")
      skin_sacks.push(ELoot.data.sacks[ELoot.data.settings[:overflow_container]]) if ELoot.data.settings[:sell_container].include?("overflow")
         
      ELoot.msg("debug", " skin_sacks: #{skin_sacks}")
      skin_sacks.each{ |sack|
        ELoot.msg("debug", " Beginning of skin_sack.each: #{sack}")
        next if sack.nil?
        next unless ELoot.data.settings[:sell_loot_types].include?("skin") || ELoot.data.settings[:sell_loot_types].include?("reagent")
        next if sack.contents.find_all { |obj| obj.sellable =~ /furrier/ }.empty?
        ELoot.msg("debug", " Contents after next: #{sack.contents} using sack: #{sack}")
        bulk_sell = true
        bulk_sell = false if bounty? =~ skin_match && sack.contents.find_all { |obj| obj.name =~ /bundle/ }.length.positive?
        unless ELoot.data.settings[:sell_exclude].empty? 
          if sack.contents.find_all { |obj| obj.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/ && obj.sellable =~ /furrier/ }.length.positive?
            bulk_sell = false
          end          
        end
     
        if bulk_sell 
          ELoot.msg("debug", " bulk_sell: #{bulk_sell} using sack: #{sack}")
          Inventory.drag(sack) if [checkleft, checkright].index(sack.noun).nil?
          #Fixme: add checks here
          dothistimeout("sell ##{sack.id}", 3, /inspects the contents carefully/)
          Inventory.drag(sack, "wear")       
          sleep 0.5
        else
          sack.contents.each do |item| 
            next if $sell_ignore.include?(item.id)
            next unless item.sellable =~ /furrier/
            next if !ELoot.data.settings[:sell_exclude].empty? && item.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/           
            $sell_ignore.push(item.id) 
            Inventory.drag(item)
            
            if item.name =~ /bundle/
              #grab the bundle ID
              bundle_id = !GameObj.right_hand.id.nil? ? GameObj.right_hand.id : GameObj.left_hand.id
               
              until ![GameObj.right_hand.id, GameObj.left_hand.id].include?(bundle_id)
                #remove a skin
                result = dothistimeout "bundle remove", 5, /You remove|Those were the last two/
                
                if result =~ /Those were the last two/
                  Sell.sell_item(GameObj.right_hand)
                  Sell.sell_item(GameObj.left_hand)
                else
                  #get the skin id
                  skin = GameObj.right_hand.id != bundle_id ? GameObj.right_hand : GameObj.left_hand
                  Sell.sell_item(skin)
                end
                
              end
            
            else     
              Sell.sell_item(item)
            end
          end
        end
        Inventory.free_hands(both: true)
        ELoot.msg("debug", " bottom of each using sack: #{sack}")
      }
      
    end
    
    def self.gemshop
    
      ELoot.go2("gemshop")
      
      Inventory.free_hands(both: true)
             
      gem_sacks = Array.new
      gem_sacks.push(ELoot.data.sacks["gem"]) if ELoot.data.settings[:sell_container].include?("gem")
      gem_sacks.push(ELoot.data.sacks["default"]) if ELoot.data.settings[:sell_container].include?("default")
      gem_sacks.push(ELoot.data.sacks[ELoot.data.settings[:overflow_container]]) if ELoot.data.settings[:sell_container].include?("overflow")
     
      gem_sacks.each{ |sack|
        next if sack.nil?
        next if sack.contents.find_all { |obj| obj.sellable.include?("gemshop") }.empty?
    
        #Bulk sell sack if it has gems and no exclusions
        if (ELoot.data.settings[:sell_exclude].empty? || (sack.contents.find_all { |obj| obj.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/ }).empty?) && sack.contents.find_all { |obj| obj.type =~ /gem/ }.length.positive? && ELoot.data.settings[:sell_loot_types].include?("gem")      
            Inventory.drag(sack) if [checkleft, checkright].index(sack.noun).nil?
            dothistimeout("sell ##{sack.id}", 3, /inspects the contents carefully/)
            Inventory.drag(sack, "wear")
            sleep 0.5
            Inventory.free_hands(both: true)     
        end  
        
        #Loop thru remaining contents and sell/appraise whatever is left
        sack.contents.each do |item|
          next if $sell_ignore.include?(item.id)
          next unless item.sellable.include?("gemshop") || item.noun =~ /thorn|berry/ || item.type =~ /scarab/
          next unless item.type.split(',').any? { |type| type =~ /^#{ELoot.data.settings[:sell_loot_types].join('|')}$/ }
          next if !ELoot.data.settings[:sell_exclude].empty? && item.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/
          next if ELoot.data.settings[:sell_gold_rings] && item.name =~ ELoot.data.regex_gold_rings
          $sell_ignore.push(item.id) 
          if item.type =~ /cursed/ && (!Spell[315].known? || !ELoot.data.settings[:sell_loot_types].include?("cursed"))
            ELoot.msg("info", "** #{item.name} is cursed. Can't touch that. You'll need to take a look")
            next
          elsif item.type =~ /cursed/ && Spell[315].known? && Spell[315].affordable? && ELoot.data.settings[:sell_loot_types].include?("cursed")
            Spell[315].cast("at ##{item.id}")
          end
          
          Inventory.drag(item)
          
          if item.type =~ /#{ELoot.data.settings[:sell_appraise_types].join('|')}/ && !ELoot.data.settings[:sell_appraise_types].empty?          
            Sell.appraise(item,"gemshop")
          else            
            Sell.sell_item(item)
          end
                    
          Inventory.free_hands(both: true)
        end
              
      }
       
    end
    
    def self.consignment
      
      ELoot.go2("consignment")
  
      Inventory.free_hands(both: true)
      
      consignment_sacks = Array.new
      consignment_sacks.push(ELoot.data.sacks["reagent"]) if ELoot.data.settings[:sell_container].include?("reagent")
      consignment_sacks.push(ELoot.data.sacks["default"]) if ELoot.data.settings[:sell_container].include?("default")
      consignment_sacks.push(ELoot.data.sacks[ELoot.data.settings[:overflow_container]]) if ELoot.data.settings[:sell_container].include?("overflow")
      
      consignment_sacks.each{ |sack|
        next if sack.nil?
        next if sack.contents.find_all { |obj| obj.sellable.include?("consignment") }.empty?  
        sack.contents.each { |thing|
          next if $sell_ignore.include?(thing.id)
          next unless thing.sellable.include?("consignment")
          next unless thing.type.split(',').any? { |type| type =~ /^#{ELoot.data.settings[:sell_loot_types].join('|')}$/ }
          next if ELoot.data.ready_list.find { |k,v| v.id == thing.id}
          next if !ELoot.data.settings[:sell_exclude].empty? && thing.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/
          next if thing.name =~ /bound/
          $sell_ignore.push(thing.id)          
          Inventory.drag(thing)
          Sell.sell_item(thing)
       
          Inventory.free_hands(both: true)
        }       
      }
              
    end
    
    def self.pawnshop
   
      ELoot.go2("pawnshop")

      Inventory.free_hands(both: true)
      
      all_contents = Array.new
      ELoot.data.sacks.keys.each{ |item|
        next unless ELoot.data.settings[:sell_container].include?(item)
        all_contents += ELoot.data.sacks[item].contents.to_a
      }
   
      if ELoot.data.settings[:use_disk] 
        ELoot.wait_for_disk
        Inventory.check_sell_container(ELoot.data.disk)
        all_contents += ELoot.data.disk.contents.to_a
      end
  
      all_contents.each { |thing|
        next if $sell_ignore.include?(thing.id)
        next unless (thing.sellable.include?("pawnshop") && !thing.sellable.include?("gemshop")) || thing.type == "box"
        next if ELoot.data.ready_list.find { |k,v| v.id == thing.id}
        next if !ELoot.data.settings[:sell_exclude].empty? && thing.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/
        next unless thing.type.split(',').any? { |type| type =~ /^#{ELoot.data.settings[:sell_loot_types].join('|')}$/ }
        next if thing.name =~ /bound/
        next if ELoot.data.settings[:sell_gold_rings] && thing.name =~ ELoot.data.regex_gold_rings
        $sell_ignore.push(thing.id)
        if thing.type =~ /scroll/ && ELoot.data.settings[:sell_keep_scrolls].length.positive?
          lines = ELoot.silent_command("read ##{thing.id}", /It takes you a moment|There is nothing there to read|You can't do that/) 
          next if lines.any?{ |line| line =~ /\((?:#{ELoot.data.settings[:sell_keep_scrolls].join("|")})\)/i }
        end
        next unless ELoot.decurse(thing)
        if thing.type =~ /cursed/ && (!Spell[315].known? || !ELoot.data.settings[:sell_loot_types].include?("cursed"))
          ELoot.msg("info", "** #{thing.name} is cursed. Can't touch that. You'll need to take a look")
          next
        elsif thing.type =~ /cursed/ && Spell[315].known? && Spell[315].affordable? && ELoot.data.settings[:sell_loot_types].include?("cursed")
          Spell[315].cast("at ##{thing.id}")
        end
                   
        Inventory.drag(thing)
        if (thing.type =~ /#{ELoot.data.settings[:sell_appraise_types].join('|')}/ && !ELoot.data.settings[:sell_appraise_types].empty?) || thing.type =~ /uncommon|weapon|armor/ 
          Sell.appraise(thing,"pawnshop")
        elsif thing.type =~ /box/
            lines = ELoot.silent_command("look in ##{thing.id}",/There is nothing|In the|That is closed/)
            if lines.any?{ |line| line =~ /There is nothing|In the/i }
              thing.contents.each{|box_item|
                  if box_item.type =~ /cursed/ && Spell[315].known? && Spell[315].affordable? && ELoot.data.settings[:sell_loot_types].include?("cursed") 
                    Spell[315].cast("at ##{box_item.id}")
                  elsif box_item.type =~ /cursed/ && !Spell[315].known?
                    ELoot.msg("info", "** #{box_item.name} is cursed. Stowing box. You'll need to take a look")
                    Inventory.single_drag(thing, false)                     
                  else
                    Inventory.single_drag(thing,false)
                  end
              }
              Sell.sell_item(thing)
            elsif lines.any?{ |line| line =~ /That is closed/i }
              #This shouldn't happen
              ELoot.msg("info", "** #{thing.name} is closed. Storing box...")
              Inventory.single_drag(thing,false)
            end
        else  
          Sell.sell_item(thing)         
        end 
        
               
        Inventory.free_hands(both: true)
      }       
    
          
    end

    def self.pool
    
      #Make sure we can see all the containers
      ELoot.data.sacks.keys.each{ |item|
        next unless ELoot.data.settings[:sell_container].include?(item)
        Inventory.check_sell_container(item)      
      }
    
      room = Room.current.id
      ELoot.disk_usage 
      boxes = ELoot.find_boxes
      ELoot.data.right_hand = GameObj.right_hand
      ELoot.data.left_hand = GameObj.left_hand
      Inventory.free_hands(both: true)
      Sell.locksmith_pool(boxes)
      ELoot.go2(room)
      Inventory.return_hands
       
    end

    def self.sell_item(item)
    
      return if item.nil? || item.name == "Empty"
    
      lines = []
      loop {
        lines = ELoot.silent_command("sell ##{item.id}", /You (ask|offer)|(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\.|That's basically worthless here|Can't say I'm interested in that|This is a pawnshop, sir, not a junkshop|The company don't buy trash/, true)
        if lines.any? { |l| l =~ /(?:Roundtime:|\.\.\.wait) (\d+) [Ss]ec(?:onds)?\./i }
          waitrt?
          next
        else
          break
        end
      }
      
      return if lines.any? { |l| l =~ /That's basically worthless here|Can't say I'm interested in that|This is a pawnshop, sir, not a junkshop|The company don't buy trash/ }
      
      20.times {
        break if (![GameObj.right_hand, GameObj.left_hand].map(&:id).compact.include?(item.id))
        sleep 0.1
      }
        
    end

    def self.sell
    
      $sell_ignore ||= Array.new
      
      #Assume bags will be emptied after sell routine
      ELoot.data.sacks_full = Array.new
       
      fput('unhide') if (hidden? || invisible?)
           
      2.times{Sell.box_in_hand}
           
      #remember what is in our hands
      ELoot.data.right_hand = GameObj.right_hand
      ELoot.data.left_hand = GameObj.left_hand
      
      #Empty hands
      Inventory.free_hands(both: true)
     
      if !checkright.nil? || !checkleft.nil?
        ELoot.msg("error", "** Something is wrong. Can't empty hands! Report this to Elanthia-Online. A log is helpful. Exiting...")
        exit
      end
      
      ELoot.msg("debug", "ELoot.sell: Locating boxes")
      boxes = ELoot.find_boxes
      cur_len = boxes.length.to_i
      ELoot.msg("debug", "ELoot.sell: Boxes length = #{cur_len}")

      #Process boxes in the locksmithpool
      if ELoot.data.settings[:sell_locksmith_pool] && boxes.length.positive?
        Sell.locksmith_pool(boxes)

        # refresh the boxes
        boxes = ELoot.find_boxes
      end

      #Sell off any remaining boxes
      Sell.locksmith(boxes) if ELoot.data.settings[:sell_locksmith] && boxes.length.positive?
   
      selling = Array.new  
      all_contents = Array.new
      
      ELoot.data.sacks.keys.each{ |item|
        next unless ELoot.data.settings[:sell_container].include?(item)
        Inventory.check_sell_container(item)
        all_contents += ELoot.data.sacks[item].contents.to_a
      }
   
      if ELoot.data.settings[:use_disk] 
        ELoot.wait_for_disk
        Inventory.check_sell_container(ELoot.data.disk)
        all_contents += ELoot.data.disk.contents.to_a
      end
     
      all_contents.each{ |thing|
      
        next if $sell_ignore.include?(thing.id)
        next if ELoot.data.ready_list.find { |k,v| v.id == thing.id}
        next if !ELoot.data.settings[:sell_exclude].empty? && thing.name =~ /#{ELoot.data.settings[:sell_exclude].join('|')}/
        next if thing.name =~ /bound/
        next if selling.include?(thing.type) && !thing.type.nil?

        if thing.name =~ ELoot.data.regex_gold_rings && ELoot.data.settings[:sell_gold_rings]
          selling.push("chronomage") unless selling.include?("chronomage")
        elsif thing.type =~ /scarab/ && ELoot.data.settings[:sell_loot_types].include?("scarab")
          selling.push("gemshop") unless selling.include?("gemshop")
        elsif thing.type == "gem" && ELoot.data.settings[:sell_loot_types].include?("gem") && thing.noun =~ /thorn|berry/
          selling.push("gemshop") unless selling.include?("gemshop")
        elsif thing.type == "collectible" && ELoot.data.settings[:sell_collectibles]
          selling.push("collectibles") unless selling.include?("collectibles")
        elsif ELoot.data.settings[:sell_loot_types].include?("box") && thing.name =~ /gold|mithril|silver/ && thing.type == "box"
          selling.push("pawnshop") unless selling.include?("pawnshop")
        elsif !thing.sellable.nil? && thing.type.split(',').any? { |type| type =~ /^#{ELoot.data.settings[:sell_loot_types].join('|')}$/ } 
          thing.sellable.to_s.split(',').each{ |location|
            selling.push(location) unless selling.include?(location)             
          }       
        end     
      }

      ELoot.msg("debug", "Places to go: #{selling}")
 
      if selling.length.positive?
      
        Sell.glam_and_shroud if ELoot.data.settings[:sell_shroud]
     
        rooms = Array.new
        selling.each{ |shop| 
          if shop == "collectibles"
            col = Array.new
            col.push(Room.current.find_nearest_by_tag("collectible")) unless Room.current.find_nearest_by_tag("collectible").nil?
            col.push(Room.current.find_nearest_by_tag("collectibles")) unless Room.current.find_nearest_by_tag("collectibles").nil?
            rooms.push(Room.current.find_nearest(col))
          elsif shop == "chronomage"
            next if Room.current.location =~ /Mist Harbor|Isle of Four Winds|Western Harbor/
            rooms.push(Room.current.find_nearest_by_tag(shop))
          else
            rooms.push(Room.current.find_nearest_by_tag(shop))
          end
        }
   
        rooms = rooms.reject do |room| room.nil? end
   
        where_is_previous_var, where_is_shortest_distances_var = Room.current.dijkstra
        shortest_path = rooms.uniq.sort { |a,b| where_is_shortest_distances_var[a] <=> where_is_shortest_distances_var[b] }
    
        shortest_path.each{ |location|
          Sell.furrier if Room[location].tags.include?("furrier")
          Sell.gemshop if Room[location].tags.include?("gemshop")
          Sell.consignment if Room[location].tags.include?("consignment")
          Sell.pawnshop if Room[location].tags.include?("pawnshop")
          Sell.collectibles if Room[location].tags.include?("collectibles") || Room[location].tags.include?("collectible")
          Sell.gold_rings if Room[location].tags.include?("chronomage")           
        }
      end     
     
      #use coin hand if we have it
      ELoot.use_coin_hand
     
      ELoot.silver_deposit
      
      #If herb or junk is checked for selling we dump it. Only default and overflow
      Sell.dump_herbs_junk
      
      Inventory.return_hands
      
      #Close any containers that were opened
      Inventory.close_sell_containers if ELoot.data.settings[:keep_closed]
      	     
    end
       
  end #End of Sell
end

if script.vars.any? { |var| var =~ /^--debug=(on|off|true|false|yes|no)$/i }
  fix_option = { 'on' => true, 'true' => true, 'yes' => true, 'off' => false, 'false' => false, 'no' => false }
  ELoot.load(ELoot.load_profile()) unless ELoot.data
  ELoot::Setup.update_setting(:debug, fix_option[$1])
  ELoot.data.settings[:debug] = fix_option[$1]
  ELoot.save_profile()
  exit
end

if script.vars[1] =~ /ver/i
  echo " Eloot Version: #{ELoot_version}"
  exit
end
  

if Spell['Berserk'].active?
  ELoot.msg("info", " Berserk is active, preventing you from looting.")
  exit
end

# Silence
silence_me if ELoot.data.settings[:silence]

# Initialize default settings
unless ELoot.data
  ELoot.load(ELoot.load_profile())
  ELoot.container_check
end

#If used in autostart exit  
exit if script.vars[1] =~ /start/i
    
#Sorter shows inventory checks so we kill it and restart
ELoot.manage_sorter

# Default to loot
if script.vars[1].nil?

  ELoot.disk_usage

  ELoot.loot

  #Close any containers that were opened
  ELoot::Inventory.close_sell_containers if ELoot.data.settings[:keep_closed]

  exit
end

# This allows partial matches the same way Gemstone works.
# e.g., ;eloot sel would match ;eloot sell
command = '^box^help^setup^sell^pool^load^list^test^deposit'

# No match - show help message
unless (index = (command =~ /\^#{script.vars[1]}/))
  ELoot.help
  exit
end

# Got a match, strip the command down to the parts in between the ^
start = index + 1
stop = command.index('^', index + 1) - 1
room = Room.current.id

case command[start..stop]
when 'help'
  ELoot.help
when 'list'
  ELoot::Setup.new(ELoot.data.settings).list if script.vars[2].nil?
  ELoot::Setup.new(ELoot.data.settings).list(cat_to_list: script.vars[2]) if !script.vars[2].nil?
when 'box'
  if GameObj.right_hand.type =~ /box/
    box = GameObj.right_hand
    ELoot::Inventory.free_hands(left: true)
  elsif GameObj.left_hand.type =~ /box/
    box = GameObj.left_hand
    ELoot::Inventory.free_hands(right: true)
  end
  ELoot::Loot.box_loot(box)
  ELoot.go2(room)
when 'sell'
  ELoot.disk_usage 
  ELoot.sell
  ELoot.go2(room)
when 'pool'
  ELoot::Sell.pool
when 'setup'
  ELoot::Setup.new(ELoot.data.settings).start
  ELoot.load(ELoot.load_profile())
  ELoot.container_check
when 'load'
  ELoot.load(ELoot.load_profile)
  ELoot.container_check
when 'deposit'
  ELoot.silver_deposit
  ELoot.go2(room)
when 'test'
  ELoot.test
end
