=begin
   Script to add SK spells to be known and used with Spell API calls.

  ;sk add <SPELL_NUMBER>  - Add spell number to saved list
  ;sk rm <SPELL_NUMBER>   - Remove spell number from saved list
  ;sk list                - Show all currently saved SK spell numbers

            author: Elanthia-Online
              game: Gemstone
              tags: sk, self knowledge
          requires: Lich >= 4.6.0
           version: 1.2.3

  v1.2.3 (2025-05-30)
    - Fix to only allow integer string values to be stored
  v1.2.2 (2025-02-01)
    - Add exception to not run if on Lich5 with built-in support for SKs
  v1.2.1 (2024-08-24)
    - Fix to use old time_per calc if exists and < 10mins
  v1.2.0 (2024-02-22)
    - Add ";sk help" output
  v1.1.0 (2023-08-21)
    - Fix for Ruby 3.2
    - Add ability to list all current saved SK spell numbers
  v1.0.0 (2021-08-11)
    - initial release
=end

if defined?(Lich::Gemstone::SK)
  echo("Version of Lich5 has built-in support for ;sk manipulation.")
  echo("No longer need to run the script.")
  if DB_Store.read(":", "autostart")["scripts"].any? { |script| script.any? { |_k, v| v == 'sk' } }
    sleep(0.1) while Script.running?("autostart")
    echo("Found ;sk in your global autostarts, removing now!")
    Script.run("autostart", "remove --global sk")
  end
  if DB_Store.read("#{XMLData.game}:#{XMLData.name}", "autostart")["scripts"].any? { |script| script.any? { |_k, v| v == 'sk' } }
    sleep(0.1) while Script.running?("autostart")
    echo("Found ;sk in your character autostarts, removing now!")
    Script.run("autostart", "remove sk")
  end
  exit
end

module Games
  module Gemstone
    class Spell
      OLD_KNOWN_METHOD ||= Spell.instance_method(:known?)
      def known?
        SK.known?(self) or OLD_KNOWN_METHOD.bind(self).call()
      end

      OLD_TIME_PER_METHOD ||= Spell.instance_method(:time_per)
      def time_per(arg = nil)
        # dumb time per of 10m because lots of things break otherwise
        return 10.0 if SK.known?(self) && (OLD_TIME_PER_METHOD.bind(self).call(arg).nil? || OLD_TIME_PER_METHOD.bind(self).call(arg) < 10)
        return OLD_TIME_PER_METHOD.bind(self).call(arg)
      end
    end
  end
end

module SK
  NAMESPACE = "sk/known"

  Vars[NAMESPACE] ||= []

  def self.known?(spell)
    Vars[NAMESPACE].include?(spell.num.to_s)
  end

  def self.list
    respond "Current SK Spells: #{Vars[NAMESPACE].inspect}"
  end

  def self.help
    respond "   Script to add SK spells to be known and used with Spell API calls."
    respond ""
    respond "   ;sk add <SPELL_NUMBER>  - Add spell number to saved list"
    respond "   ;sk rm <SPELL_NUMBER>   - Remove spell number from saved list"
    respond "   ;sk list                - Show all currently saved SK spell numbers"
    respond "   ;sk help                - Show this menu"
    respond ""
  end

  def self.add(*numbers)
    Vars[NAMESPACE] = (Vars[NAMESPACE] + numbers).uniq
  end

  def self.remove(*numbers)
    Vars[NAMESPACE] = (Vars[NAMESPACE] - numbers).uniq
  end

  def self.main()
    action = Script.current.vars[1].to_sym
    spells = Script.current.vars[2..-1].select { |var| var.match?(/^\d+$/) }
    case action
    when :add
      self.add(*spells)
    when :rm
      self.remove(*spells)
    when :list
      self.list
    when :help
      self.help
    else
      fail "unknown action #{action}"
    end
  end

  self.main() if Script.current.vars.size > 1
end
