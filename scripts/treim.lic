=begin
    REIM Reactive Script
    Will do one round of attack per spawned wave of creatures.
    Automatically tries to target rare/boss creature if spawned during wave.
    Has coding built in to avoid REIM traps as well.
    Brought to you by the Hand of the Arkati!
	
    SYNTAX - ;treim <ATTACKOPTION>
    Will remember last used attack option if none given.
	
    ATTACKOPTION Selections Include:
         <SPELLNUMBER> - use a spell to cast once per wave/boss IE. 908 Major Fire
         SLEEP         - symbol of voln sleep
	 ATTACK	       - single-target attack
	 FIRE	       - single-target ranged attack
         MSTRIKE       - mstrike attack (works for ranged if you set FIRE as default)
         UAC           - mstrike punch and punch boss for all your UAC needs
         JAB	       - single-target jab
	 PUNCH	       - single-target punch
	 GRAPPLE       - single-target grapple
	 KICK	       - single-target kick
	 SCRUB         - combination mstrike and 435 cast routine
	 BARDASS       - combination mstrike and 1030 cast routine
	 DREDD         - combination mstrike and 1630 cast routine
         NONE          - won't attack, useful if manually wish to attack
	
    Running Commands
         ;send reimcount   - shows current group leader, group count, and previous group count
         whisper ooc group clearcheck - if group members are running script,
                    reports back clear and scrip status
                    MUST BE LEADER TO HAVE GROUP MEMBERS RESPOND

    Variables to set:
         Stance-dance back from offensive back to defensive after an attack, default is TRUE
         ;e echo UserVars.treim[:stance_dance] = FALSE

         Add scripts to be auto-started and killed with TREIM, default is NONE
         ;e echo UserVars.treim[:activescripts] = ["stand", "symbolz"]

         Enable auto-clearing of Reim titles upon complition, default is FALSE
         ;e echo UserVars.treim[:clear_title] = true

         Enable SPAM filtering scripts, default is TRUE
         ;e echo UserVars.treim[:spam_control] = false

         Enable killing of known lag enducing scripts, default is FALSE
         ;e echo UserVars.treim[:lag_control] = TRUE

         Enable toggling of FLAG NoAmbientMsg, default is FALSE
         ;e echo UserVars.treim[:toggle_ambients] = TRUE

       todo: add parsing of reim info command and show condensed info
     author: Tysong (horibu on PC)
       name: treim
       tags: reim
    version: 2.24.1

  To help contribute or open an issue: https://github.com/elanthia-online/scripts

    changelog:
    	2.24.1 (2023-01-10)
	    Bug fix for using custom attack
    	2.24.0 (2022-04-14)
	    Add option to start custom attack script (eg ;treim tysong-duskattack.lic)
    	2.23.1 (2021-03-08)
	    Add UserVars.treim[:script_args] to launch spam_scripts or activescripts with arguments
	    Set via ;e UserVars.treim[:script_args] = { "scriptname1" => "args", "scriptname2" => "args" }
    	2.22 (2020-12-27)
	    Recognize "KILL THY SCRIPTS" as a "cease fire" command
    	2.21 (2020-05-23)
	    Added support for "cease fire" and "resume fire"
    	2.20 (2020-05-19)
	    Added "FIRE" routine for single target attacks
	    Removed "FURY" routine
	    Simplified a bunch of routines
	    Removed mstrike_limit variable
=end
=begin
    	2.19 (2020-05-17)
	    Added "ATTACK" routine for single target attacks
	    Added a 2 second pause for 635 and 1030
        2.18 (2020-05-01)
	    Added FLAG NOAMBIENTMSG toggling, default FALSE (if true, toggles on while running treim and toggles off after)
        2.17 (2020-04-29)
	    Adding a new variable to define focused mstrike targets (default of 2)
        2.16 (2020-04-06)
	    Added "FURY" routine
        2.15 (2020-01-05)
	    Added "DREDD" routine
        2.14 (2019-11-02)
	    Improved 1030 performance
        2.13 (2019-10-05)
	    Added the "bardass" option
        2.12 (2019-09-03)
            Adding scrub option
        2.11 (2019-08-05)
            Stopped spam control scripts IF enabled.
        2.10 (2019-07-21)
            Changed the 709 stop to only be for lvl 90+ characters (for capped Reim)
        2.9 (2019-05-01)
            Added forced 335 incant evoke and 312 for boss waves if using 335.
        2.8.3 (2019-04-21)
            Added some additional pause/unpause/kill for specific addon scripts
        2.8.2 (2019-04-04)
            Added a max 2.5 to the sleep for populating GameObj.npcs in case they die before populating.
        2.8.1 (2019-03-28)
            Fixed issue with title reseting.
        2.8 (2019-03-26)
            Added sleep until GameObj.npcs > 0 after wave spawn to wait for XML feed update due to Room window changes
        2.7.1 (2019-03-17)
            Added 635 forced incant due to spell-list.xml forcing prep/cast
        2.7 (2018-11-15)
            Added detection of existing prename title at start of script if using clear_title option
        2.6 (2018-03-27)
            Added spam/lag routine to auto-kill scripts and start others that help.
        2.5 (2018-01-12)
            Changed boss wave detection for Road through Royal to hold attack if cleared already
        2.4 (2017-11-29)
            Added clear_title variable to clear prename title upon completion
        2.3 (2017-11-29)
            Updated spawn detection to decrease "lag" issue.
        2.2 (2017-11-18)
            Fixed stance dancing for casting to respect UserVar
        2.1 (2017-11-18)
            Added some help verbage
        2.0 (2017-11-11)
            Rewrite of mob detection mechanic
            Added ability to use 1030 for Bards
            Attempt at adding initial "pause attack" on moving rooms.
                      (pause attack & resume attack)
        1.8 (2017-04-08)
            Corrected bug with bosscheck for physical/uac attack
            Added timeleft to clearcheck command
        1.7 (2017-03-22)
            Changed physical roundtime wait, added NONE command
        1.6 (2017-03-17)
            Believe to have fixed double/triple attacks on boss waves
        1.5 (2017-03-17)
            Added skip boss/named creature check if clear to next area
            Added a few other otions for leaders.
        1.1 (2017-03-16)
            Fixed some bugs
        1.0 (2017-03-15)
            Initial Release
			
    credit & thanks:
        Durakar for his help/collaboration in general for a lot of this script.
        Nishma as I canabalized all of his ;reimtrap script.
        Tgo01 as I canabalized his silence routine from ;dreavening.
        Ragz for his assistance with physical attacking and hold hands idea.
=end
=begin
;e echo GameObj.npcs.each { |npc| echo "Name: #{npc.name} - Type: #{npc.type}" }
;e echo GameObj.npcs.select{|npc| ((npc.type !~ /familiar|companion|passive|skin/) && (npc.noun !~ /arm|arms/))}.each { |npc| echo "Name: #{npc.name} - Type: #{npc.type}" }
;e echo GameObj.type_data['aggressive npc']
;e echo GameObj.npcs.count { |npc| ((npc.name !~ /arm}/) && !(npc.type !~ /companion|familiar|passive/)) }

scripts to kill: rnum, duskruin_watch, prettiernum, killcounter, title, sorter, inspectweight, inspectarmor, uberbounty, autovote, chatfail, enchantnotes
=end



Village         = Array[24888,24900,24904,24909,24935,24936,24912,24919,24946,24945,24952,24964,24971,24972,24958,24959,24931,24932,24966,24953,25300,24901,24930,23484,24941,23650]
Road            = Array[24977,24978,24989,24990,24991,24994,24995,24996,24998,25003,25004,25020,25019,25021,24997,25022,25029,25030,25035,25042,25047,25046,25043,25041,25048,25049,25050,25051,25052,25053,25054,25056,25057,25058,25059,25064,25055,25060,25061,25062,25063]
Courtyard       = Array[25104,25103,25101,25100,25105,25102,25106,25107,25108,25099,25098,25097,25069,25068,25070,25071,25072,25082,25084,25083,25081,25078,25085,25086,25087,25088,25096,25095,25094,25093,25092,25091,25090,25089,25080,25079,25077,25075,25073,25076,25074,25067,25066,25065]
Servant         = Array[25113,25114,25115,25119,25118,25117,25116,25112,25111,25110,25109]
Visitor         = Array[25125,25124,25123,25129,25128,25127,25126,25122,25121,25120]
Royal           = Array[25141,25140,25132,25134,25136,25135,25137,25138,25139,25133,25131,25130]
MiscAreas       = Array[24965]
AreaReim        = (Village | Road | Courtyard | Servant | Visitor | Royal | MiscAreas).sort
ReimBosses      = Array["The Shopkeeper","The Innkeeper","The Bartender","The Patrol Leader","The Bandit Lord","The Bandit Lady","The Gypsy Queen","The Gypsy King","The Guard Captain","The Wall Captain","The The Drill Sergeant","The Stable Hostler","The Dungeon Master","The Master Torturer","The Butler","The Cook","The Knight Captain","The Foreign Dignitary","The Royal Prince","The Royal Princess","The Royal Jester","The Emperor","The Empress"]
ReimBossSearch  = Regexp.union(ReimBosses)
reim_npcs       = "ethereal (?:commoner|denizen|guard|guardsman|guardswoman|inmate|lunatic|madman|madwoman|peasant|prisoner|squire|swordsman|swordswoman|traveller|townsman|townswoman|villager)|ghostly (?:bandit|highwayman|highwaywoman|marauder|waylayer)|unworldly (?:guest|maid|noble|royal guard|royal knight|servant|slave|steward|visitor)|celestial (?:dancer|juggler|nomad|traveller)|Shopkeeper|Innkeeper|Bartender|Patrol Leader|Bandit Lord|Bandit Lady|Gypsy Queen|Gypsy King|Guard Captain|Wall Captain|Drill Sergeant|Stable Hostler|Dungeon Master|Master Torturer|Butler|Cook|Knight Captain|Foreign Dignitary|Royal Prince|Royal Princess|Royal Jester|Royal Emperor|Royal Empress"
npc_commons     = ["commoner","denizen","guard","guardsman","guardswoman","inmate","lunatic","madman","madwoman","peasant","prisoner","squire","swordsman","swordswoman","traveller","townsman","townswoman","villager","bandit","highwayman","highwaywoma","marauder","waylayer","guest","maid","noble","guard","knight","servant","slave","steward","visitor","dancer","juggler","nomad","traveller"]
npc_bosses      = ["Cook","Shopkeeper","Innkeeper","Bartender","Leader","Lord","Lady","Queen","King","Captain","Captain","Sergeant","Hostler","Master","Torturer","Butler","ook","Captain","Dignitary","Prince","Princess","Jester","Emperor","Empress"]
bossname        = ""
leader          = ""
title_prename   = nil
members         = 0
previousmembers = 0
reim_current_room = 0
last            = Time.now
lag_scripts    = Array["rnum", "duskruin_watch", "prettiernum", "killcounter", "title", "sorter", "inspectweight", "inspectarmor", "uberbounty", "autovote", "chatfail", "enchantnotes"]
spam_scripts   = Array["briefcombat", "spellmerge"]

UserVars.treim                    ||= {}
UserVars.treim[:stance_dance]       = true		if UserVars.treim[:stance_dance].nil?
UserVars.treim[:attack_type]		= ""		if UserVars.treim[:attack_type].nil?
UserVars.treim[:activescripts]		= Array[]	if UserVars.treim[:activescripts].nil?
UserVars.treim[:clear_title]		= false		if UserVars.treim[:clear_title].nil?
UserVars.treim[:spam_control]		= true		if UserVars.treim[:spam_control].nil?
UserVars.treim[:script_args]		= {}		if UserVars.treim[:script_args].nil?
UserVars.treim[:lag_control]		= false		if UserVars.treim[:lag_control].nil?
UserVars.treim[:toggle_ambients]	= false		if UserVars.treim[:toggle_ambients].nil?

UserVars.treim[:script_args].default = ""

if UserVars.treim[:announce_rares].nil?
	if Char.name =~ /Tysong|Durakar|Siierra|Ragz|Nairdin|Ylandra|Gharr|Ordim/
		UserVars.treim[:announce_rares] = true
	else
		UserVars.treim[:announce_rares] = false
	end
end

KillNouns = Array['Murder','Kill','Slaughter','Abolish','Exterminate','Wreck','Demolish','Massacre','Obliterate','Crush','Tickley tickle','Kiss','Hug']

if $frontend =~ /stormfront|profanity/
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

class CappedCollection
	MAX_SIZE = 200
	attr_accessor :list, :max_size

	def initialize(max_size = MAX_SIZE)
		@list     = []
		@max_size = max_size
	end

	def <<(id)
		@list << id
		while @list.size > @max_size
			@list.shift
		end
	end

	def include?(id)
		@list.include?(id)
	end
end

npc_ids	= CappedCollection.new

def attack_routine(attack_target)
	if UserVars.treim[:attack_type] =~ /\.lic$/i
		Script.start(UserVars.treim[:attack_type].gsub('.lic', ''))
	elsif UserVars.treim[:attack_type] == "sleep"
		waitcastrt?
		fput "symbol of sleep"
	elsif UserVars.treim[:attack_type] =~ /physical|mstrike/
		waitrt?
		if UserVars.treim[:stance_dance]
			fput "stance offensive" if checkstance != "offensive"
		end
		fput "mstrike"
		if UserVars.treim[:stance_dance]
			pause 1
			waitrt?
			fput "stance defensive"
		end
		return 1
	elsif UserVars.treim[:attack_type] == "attack"
		waitrt?
		if UserVars.treim[:stance_dance]
			fput "stance offensive" if checkstance != "offensive"
		end
		fput "attack"
		if UserVars.treim[:stance_dance]
			pause 1
			waitrt?
			fput "stance defensive"
		end
		return 1
	elsif UserVars.treim[:attack_type] =~ /fire|ranged/
		waitrt?
		if UserVars.treim[:stance_dance]
			fput "stance offensive" if checkstance != "offensive"
		end
		fput "fire"
		if UserVars.treim[:stance_dance]
			pause 1
			waitrt?
			fput "stance defensive"
		end
		return 1
	elsif UserVars.treim[:attack_type] =~ /jab|punch|grapple|kick/
		waitrt?
		if UserVars.treim[:stance_dance]
			fput "stance offensive" if checkstance != "offensive"
		end
		fput "#{UserVars.treim[:attack_type]}"
		if UserVars.treim[:stance_dance]
			pause 1
			waitrt?
			fput "stance defensive"
		end
		return 1
	elsif UserVars.treim[:attack_type] == "uac"
		waitrt?
		if UserVars.treim[:stance_dance]
			fput "stance offensive" if checkstance != "offensive"
		end
		fput "mstrike punch"
		if UserVars.treim[:stance_dance]
			pause 1
			waitrt?
			fput "stance defensive"
		end
		return 1
	elsif UserVars.treim[:attack_type] == "scrub"
		if Spell[435].affordable?
			waitrt?
			waitcastrt?
			put "incant 435"
            		pause 1
			waitcastrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			fput "mstrike"
			return 1
		else 
			waitrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			fput "mstrike"
			if UserVars.treim[:stance_dance]
				pause 1
				waitrt?
				fput "stance defensive"
			end
			return 1
		   end
	elsif UserVars.treim[:attack_type] == "bardass"
		if Spell[1030].affordable?
			waitrt?
			waitcastrt?
			put "incant 1030 open"
            		pause 1
			waitcastrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			fput "mstrike"
			return 1
		else 
			waitrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			fput "mstrike"
			if UserVars.treim[:stance_dance]
				pause 1
				waitrt?
				fput "stance defensive"
			end
			return 1
		   end
	elsif UserVars.treim[:attack_type] == "dredd"
		if Spell[1630].affordable?
			waitrt?
			waitcastrt?
			put "incant 1630 open"
            		pause 1
			waitcastrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			fput "mstrike"
			return 1
		else 
			waitrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			fput "mstrike"
			if UserVars.treim[:stance_dance]
				pause 1
				waitrt?
				fput "stance defensive"
			end
			return 1
		   end
	elsif UserVars.treim[:attack_type] == "none"
		return 1
	elsif UserVars.treim[:attack_type] == "1030"
		if Spell[1030].affordable?
			waitrt?
			waitcastrt?
			pause 2
			put "incant 1030 open"
		end
		return 1
	elsif UserVars.treim[:attack_type] == "709"
		if Spell[709].affordable?
			waitrt?
			waitcastrt?
			put "incant 709"
			put "stop 709"
		end
		return 1
	elsif UserVars.treim[:attack_type] =~ /435|635/
		if Spell[UserVars.treim[:attack_type]].affordable?
			waitrt?
			waitcastrt?
			pause 2
			put "incant #{UserVars.treim[:attack_type]}"
		end
		return 1
	else
		if Spell[UserVars.treim[:attack_type]].affordable?
			waitrt?
			waitcastrt?
			if UserVars.treim[:stance_dance]
				fput "stance offensive" if checkstance != "offensive"
			end
			put "incant #{UserVars.treim[:attack_type]}"
			if UserVars.treim[:stance_dance]
				pause 1
				waitrt?
				fput "stance defensive"
			end
		end
		return 1
	end
end

def checkclear(bossname)
	# GameObj.npcs.select{ |npc| npc.id == bossname.id }.count
	while GameObj.npcs.select{ |npc| npc.id == bossname && !npc.status.include?("dead") }.count > 0 do
		pause 0.5
	end
	waitrt?
	pause 0.5
	waitrt?
	fput "REIM INFO"
	line = get
	until line =~ /You have slain a total of (.*) creatures within Reim./
		if line =~ /currently flagged for entry for up to the(.*)./
			clearto = $1.split.first
		elsif line =~ /Total Ethereal Scrip for this run: (.*)\/./
			scrip = $1.to_i
		elsif line =~ /You have (.*) hour and (.*) minutes? remaining/
			timeleft = "#{$1}H #{$2}M"
		elsif line =~ /You have ([0-9]{1,2}) minutes? remaining./
			timeleft = "#{$1}M"
		end
		line = get
	end
	return clearto, scrip, timeleft
end

def checkgroup()
	fput "GROUP"
	members = 0
	line = get
	until line =~ /for a list of other options./
		if line =~ /^(.*) is the leader of your group./
			groupleader = $1.split.first
			members += 1
		elsif line =~ /^(.*) is following you./
			groupleader = Char.name
			members += 1
		elsif line =~ /^(.*) is also a member of your group./
			members += 1
		end
		line = get
	end
	return groupleader, members
end

silence = proc {
	action = proc { |server_string|
		if server_string.strip.length == 0
			nil
			next
		end
#		if server_string =~ /Current quest status\:|Time until next premium entry\:|Your reputation rank with the Reim Base Camp|Total Reputation|Total Quest Energy|Total Ethereal Scrip|Total Ethereal Scrip for this run|You are currently questing in the Settlement of Reim.|You are currently flagged for entry for up to the|You have slain a total of|REIM INFO|Your group status is currently|for a list of other options|is following you|is also a member of your group|is the leader of your group/
		if server_string =~ /Current quest status\:|Time until next premium entry\:|Your reputation rank with the Reim Base Camp|Total Reputation|Total Quest Energy|Total Ethereal Scrip|Total Ethereal Scrip for this run|You are currently questing in the Settlement of Reim.|You are currently flagged for entry for up to the|You have slain a total of|REIM INFO|Your group status is currently|for a list of other options|is following you|is also a member of your group|is the leader of your group|Reim Fortress Defense|Current quest status|Times Defended|Times Failed|Highest Round Completed|Highest Score|Total Contribution|General Information|The Settlement of Reim/
			nil
		else
			server_string
		end
	}
	DownstreamHook.add("#{script.name}_silence", action)
}

before_dying { 
	DownstreamHook.remove("#{script.name}_silence")
	if variable[2] == "leader"
		kill_script "holdhands"
	end
	UserVars.treim[:activescripts].each { |script|
		kill_script script if Script.running?(script)
	}
	Script.kill("tspam") if Script.running?("tspam")
	Script.kill("tkill") if Script.running?("tkill")
	Script.kill("looploot") if Script.running?("looploot")
	if UserVars.treim[:spam_control]
		spam_scripts.each { |script|
			Script.kill(script) if Script.running?(script)
		}
	end
	fput "FLAG NOAMBIENTMSG OFF" if UserVars.treim[:toggle_ambients]
}

blacklist = Array[]
if blacklist.include? Char.name
	exit
end

if variable[1] && variable[1].downcase != "help"
	UserVars.treim[:attack_type] = variable[1].downcase
elsif ((variable[1] == nil || variable[1].downcase == "help") && UserVars.treim[:attack_type] == "") || variable[1].downcase == "help"
	_respond "\n
  SYNTAX - ;treim <ATTACKOPTION>
  Will remember last used attack option if none given.
	
  ATTACKOPTION Selections Include:
      <SPELLNUMBER> - use a spell to cast once per wave/boss IE. 908 Major Fire
      SLEEP         - symbol of voln sleep
      PHYSICAL      - mstrike and attack boss for all you physical attackers
      UAC           - mstrike punch and punch boss for all your UAC needs
      RANGED        - ranged attack
      NONE          - won't attack, useful if manually wish to attack
	
  Running Commands
     ;send reimcount   - shows current group leader, group count, and previos group count
     whisper ooc group clearcheck - if group members are running script,
                    reports back clear and scrip status
                    MUST BE LEADER TO HAVE GROUP MEMBERS RESPOND
					
					
  Variables to set:
     Stance dance back to defensive after attack, default is TRUE
     ;e echo UserVars.treim[:stance_dance] = FALSE

     Add scripts to be auto-started and killed with TREIM, default is NONE
     ;e echo UserVars.treim[:activescripts] = [\"stand\", \"symbolz\"]
     
     Add script arguments to use at launch of of an activescript or spam_script
     ;e UserVars.treim[:script_args] = { \"scriptname1\" => \"args\", \"scriptname2\" => \"args\" }

     Enable auto-clearing of Reim titles upon complition, default is FALSE
     ;e echo UserVars.treim[:clear_title] = true

     Enable SPAM filtering scripts, default is TRUE
     ;e echo UserVars.treim[:spam_control] = false

     Enable killing of known lag enducing scripts, default is FALSE
     ;e echo UserVars.treim[:lag_control] = TRUE

     Enable announcing of rares on wave spawn, default is FALSE
     ; echo UserVars.treim[:announce_rares] = TRUE
     
     Enable toggling of FLAG NoAmbientMsg, default is FALSE
     ;e echo UserVars.treim[:toggle_ambients] = TRUE"
	exit
end

if variable[2].downcase == "leader"
	start_script "holdhands", [ "reim" ]
end

fput "FLAG NOAMBIENTMSG ON" if UserVars.treim[:toggle_ambients]

if UserVars.treim[:lag_control]
	lag_scripts.each { |script|
		if Script.running?(script)
			Script.kill(script)
		end
	}
	put "FLAG COMBATBRIEF ON"
	put "FLAG COMBATNONUMBERS ON"
end
if UserVars.treim[:spam_control]
	spam_scripts.each { |script|
		if Script.exists?(script)
			Script.start(script, UserVars.treim[:script_args][script]) if !Script.running?(script)
		else
			echo "You should strongly consider downloading ;repo download #{script} to help with spam/lag while here"
		end
	}
end
if UserVars.treim[:clear_title]
	result = dothistimeout "title show", 5, /(.*?)#{Char.name}/
	if result =~ /(.*?) #{Char.name}/
		title_prename = $1
	end
end

loop {
	if AreaReim.include? Room.current.id
		respond "You're in REIM, lets get to work!!!!"
		silence.call
		clearto, scrip, timeleft = checkclear(bossname)
		echo scrip if Char.name =~ /Tysong/
		DownstreamHook.remove("#{script.name}_silence")
		#Script.unpause("tspam") if Script.running?("tspam")
		#Script.unpause("tkill") if Script.running?("tkill")
		Script.unpause("looploot") if Script.running?("looploot")
		UserVars.treim[:activescripts].each { |script|
			Script.start(script, UserVars.treim[:script_args][script])
		}
		while AreaReim.include? Room.current.id do
			line = get
			if reim_current_room != Room.current.id
				if line =~ /(?:strides|rushes|leaps|strolls) toward/
					counter_time = Time.now
					sleep 0.1 until (GameObj.npcs.count{ |npc| ((npc_commons.include? npc.noun) && !(npc_ids.include? npc.id)) } > 0 || Time.now - counter_time > 2.5)
					#sleep 0.1 until (GameObj.npcs.count{ |npc| ((npc_commons.include? npc.noun) && !(npc_ids.include? npc.id)) } > 0)
					if GameObj.npcs.count { |npc| ((npc.name =~ /#{reim_npcs}/) && !(npc_ids.include? npc.id)) } > 30 && Char.name =~ /Tysong/
						_respond("#{fam_window_begin}Mob Count: #{GameObj.npcs.count { |npc| (npc.name =~ /#{reim_npcs}/ && !(npc_ids.include? npc.id)) }} \r\n#{fam_window_end}") if Char.name =~ /Tysong|Gharr|Rasko/
						put "incant 435"
						#put "stance offensive"
						#put "incant 950 413 512 512 510 510 510"
						#pause 0.5
						#put "stance defensive"
						GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id)}
					elsif GameObj.npcs.count{ |npc| ((npc_bosses.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) } > 0
						_respond("#{fam_window_begin}Mob Count: #{GameObj.npcs.count { |npc| npc.name =~ /#{reim_npcs}/ }} \r\n#{fam_window_end}") if Char.name =~ /Tysong|Gharr|Rasko/
						bossname = GameObj.npcs.select{ |npc| ((npc_bosses.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) }.sample
						bosses_found = GameObj.npcs.select{ |npc| ((npc_bosses.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) }
						bosses_found.each { |boss|
							put "'#{KillNouns.sample} the #{boss.name}" if UserVars.treim[:announce_rares]
							npc_ids << boss.id
						}
						if Village.include? Room.current.id and clearto == "road"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							next
							until attack_routine(""); end
						elsif Road.include? Room.current.id and clearto == "courtyard"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							pause 2
							next #if UserVars.treim[:attack_type] !~ /410|909|709|512|sleep/
							until attack_routine(""); end
						elsif Courtyard.include? Room.current.id and clearto == "servant"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							pause 2
							next #if UserVars.treim[:attack_type] !~ /410|909|709|512|sleep/
							until attack_routine(""); end
						elsif Servant.include? Room.current.id and clearto == "visitor"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							pause 2
							next #if UserVars.treim[:attack_type] !~ /410|909|709|512|sleep/
							until attack_routine(""); end
						elsif Visitor.include? Room.current.id and clearto == "royal"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							pause 2
							next #if UserVars.treim[:attack_type] !~ /410|909|709|512|sleep/
							until attack_routine(""); end
						elsif Royal.include? Room.current.id and clearto == "throne"
							GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id) && (npc_bosses.include? npc.noun)}
							pause 2
							next #if UserVars.treim[:attack_type] !~ /410|909|709|512|sleep/
							until attack_routine(""); end
						else
							echo bossname.noun if Char.name =~ /Tysong/
							until attack_routine("#{bossname.noun}"); end
							silence.call
							clearto, scrip, timeleft = checkclear(bossname.id)
							_respond "\nCleared Through: #{clearto}
							Total Scrip: #{scrip}"
							DownstreamHook.remove("#{script.name}_silence")
						end
					elsif GameObj.npcs.count{ |npc| ((npc_commons.include? npc.noun) && (npc.status !~ /dead|gone/) && !(npc_ids.include? npc.id)) } > 0
						total_mobs = GameObj.npcs.count { |npc| npc.name =~ /#{reim_npcs}/ }
						_respond("#{fam_window_begin}Mob Count: #{total_mobs} - Players: #{checkpcs.count.to_i + 1} \r\n#{fam_window_end}") if Char.name =~ /Tysong|Gharr|Rasko/
						GameObj.npcs.each { |npc| npc_ids << npc.id if !(npc_ids.include? npc.id)}
						until attack_routine(""); end
					end
				elsif line =~ /reimcount/
					silence.call
					leader, members = checkgroup
					DownstreamHook.remove("#{script.name}_silence")
					respond "Group Leader:    #{leader}"
					respond "Group Members:   #{members}"
					respond "Previous Check:  #{previousmembers}"
					previousmembers = members
				elsif line =~ /\(OOC\) (.*)'s player whispers to the group, "Clearcheck."/
					whisperperson = $1.split.first
					silence.call if Char.name !~ /Tysong|Rasko/
					echo "Current Leader: #{leader}" if Char.name =~ /Tysong/
					leader, members = checkgroup
					echo "Current Leader: #{leader}" if Char.name =~ /Tysong/
					#echo leader 
					#echo members
					#echo whisperperson
					if whisperperson == leader
						clearto, scrip, timeleft = checkclear(bossname)
						fput "whisper ooc #{leader} Clear: #{clearto}, Scrip: #{scrip}, Timeleft: #{timeleft}"
					else
						put "whisper ooc #{whisperperson} You're not the leader, #{whisperperson}!"
					end
					DownstreamHook.remove("#{script.name}_silence") if Char.name !~ /Tysong|Rasko/
				elsif line =~ /\(OOC\) (.*)'s player whispers to the group, "Pause attack."/
					whisperperson = $1.split.first
					silence.call
					leader, members = checkgroup
					DownstreamHook.remove("#{script.name}_silence")
					if whisperperson == leader
						echo "PAUSING TREIM UNTIL RESUMED BY LEADER"
						while line !~ /\(OOC\) (.*)#{whisperperson}'s player whispers to the group, "Resume attack."/ do
							line = get
						end
						echo "RESUMING TREIM"
					else
						put "whisper ooc #{whisperperson} You're not the leader, #{whisperperson}!" 
					end
				elsif line =~ /\(OOC\) (.*)'s player whispers to the group, "Cease fire."/ || line =~ /\(OOC\) (.*)'s player whispers to the group, ".*KILL THY SCRIPTS/i
					whisperperson = $1.split.first
					silence.call
					leader, members = checkgroup
					DownstreamHook.remove("#{script.name}_silence")
					if whisperperson == leader
						while line !~ /\(OOC\) (.*)#{whisperperson}'s player whispers to the group, "Resume fire."/
							break unless AreaReim.include?(Room.current.id)
							line = get
						end
					end
				elsif line =~ /You realize that (.*) (?:were|was) left behind./
					_respond "#{monsterbold_start}You left #{$1} behind#{monsterbold_end}"
					fput "say We left #{$1} behind"
					send_to_script('lnet',"chat to #{Char.name} You left #{$1} behind") if Script.running?("lnet")
					send_to_script('0net',"chat to #{Char.name} You left #{$1} behind") if Script.running?("0net")
				end
			else
				reim_current_room = Room.current.id
				echo "Setting reim_current_room(#{reim_current_room}) = Room.current.id(#{Room.current.id})" if Char.name =~ /Tysong/
			end
			#TRAP Stuff
			if line == "A slender ethereal blowgun appears from the shadows nearby, aimed right for you!"
				waitrt?
				fput "lean"
			elsif line == "An ethereal bow appears from the shadows nearby, aimed right for you!"
				waitrt?
				fput "lean"
			elsif line == "A pair of ethereal hands shoot up from the ground, straight for your legs!"
				waitrt?
				fput "jump"
			elsif line == "An ethereal chain lashes out from the shadows straight for your head!"
				waitrt?
				fput "duck"
			elsif line == "An ethereal chain lashes out from the shadows straight for your legs!"
				waitrt?
				fput "jump"
			end
			XMLData.reset
		end
	elsif Room.current.id == 25142
		_respond "\n
		###############################################################
		##                                                           ##
		##               You're in the throne room                   ##
		##                  IDLING TREIM SCRIPT                      ##
		##                                                           ##
		###############################################################\n\n\n"
		kill_script "tkill" if Script.running?("tkill")
		kill_script "tspam" if Script.running?("tspam")
		kill_script "looploot" if Script.running?("looploot")
		until (Room.current.id != 25142) do
			XMLData.reset
			sleep(1)
		end
	elsif Room.current.id == 25143
		respond "DONE WITH REIM, EXITING"
		if UserVars.treim[:clear_title]
			if title_prename.length > 0
				multifput "title set prename #{title_prename}"
			else
				multifput "title set prename Lord","title clear Lord"
			end
		end
		exit
	else
		_respond "\nScript will only run in creature only REIM rooms.              
		The script will wait until you get your arse inside REIM!!!"
		Script.pause("tspam") if Script.running?("tspam")
		Script.pause("tkill") if Script.running?("tkill")
		Script.pause("looploot") if Script.running?("looploot")
		until (AreaReim.include? Room.current.id) do
			XMLData.reset
			sleep(1)
		end
	end
}
