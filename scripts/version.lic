=begin
  Reports versions of Lich, Ruby, and other important builtins, as well as other diagnostic information.

        author: elanthia-online
  contributors: LostRanger, Doug, Tysong
          game: gs
          tags: utility, version
       version: 1.1.5

  Version Control:
    Major_change.feature_addition.bugfix
  v1.1.5 (2025-06-17)
    - show DR dependency version in list
  v1.1.4 (2025-03-27)
    - fix for autostart list  when dependency isn't running in DR
  v1.1.3 (2024-08-25)
    - fix for autostart list to not be hardcoded to GSIV
  v1.1.2 (2024-07-10)
    - fix to allow for - character in script version check
  v1.1.1 (2024-05-08)
    - remove unnecessary code
    - cleanup output to use $clean_lich_char
    - use File.join where appropriate
  v1.1.0 (2024-05-06)
    - add $frontend to output
    - change Account type to show unknown if non-Lich authenticated
  v1.0.1 (2024-05-05)
    - add Lich Location to report
  v1.0.0 (2024-04-01)
    - add account and game type to output

=end
=begin
    version 0.62 (2024-02-20)
      * bugfix for nil autostart lists
    version 0.61 (2024-02-15)
      * add autostart scripts to output
      * only show spell-list.xml/effect-list.xml if exists
    version 0.60 (2024-01-04)
      * upstream/downstream hook sources support with Lich 5.8.0
    version 0.59 (2023-11-18)
      * Change version check for self to grab header version
      * Convert to module
    version 0.58 (2023-06-04)
      * Rubocop cleanup
      * Add effect-list.xml output
    version 0.57 (2023-02-20)
      * Support for showing custom scripts
    version 0.56 (2023-01-23)
      * Update for Ruby v3 compatibility
    version 0.55 (2022-11-24)
      * removed references to $SAFE
    version 0.54 (2022-03-10)
      * add support for lib and ui folder.
    version 0.53 (2021-03-07)
      * fix ruby location report to RbConfig.bindir and rubyw
      * detection to avoid special gem directory kerfuffles
    version 0.52 (2021-03-04)
      * fix ruby location report to Gem.bindir for cross platform use
    version 0.51 (2020-12-19)
      * add core engine algorithm to detect Cabal and LICH
      * add json to regex for file extension naming
    version 0.5 (2020-03-19)
      * Fix our exception handling not actually working.
      * Fix GTK version reporting, particularly w/ GTK3
    version 0.4 (2019-11-17)
      * Minor improvements.
    version 0.3 (2019-10-13)
      * ;version SCRIPT reports the currently-installed version of the specified script, if available.
        SCRIPT may be a partial name or 'all' for all installed scripts.
    version 0.2 (2019-10-07)
      * Now reports where the Ruby interpreter is.
    version 0.1 (2019-07-09)
      * First release.
=end
module VersionScript
  def self.get_self_version
    data = Script.list.find { |x| x.name == Script.current.name }.inspect
    return data[/version: ([\d\.]+)/i, 1]
  end

  def self.const_get(sym, parent: Object, missing: 'not installed')
    return missing unless parent.const_defined?(sym)
    return parent.const_get(sym).to_s
  end

  def self.module_version(sym)
    begin
      return 'not installed' unless Object.const_defined?(sym)
      o = Object.const_get(sym)
      return 'unknown' unless o.const_defined?(:VERSION)
      v = o::VERSION
      return v.join('.') if v.is_a?(Array)
      return v.to_s
    rescue
      return 'error'
    end
  end

  def self.gtk_version
    begin
      return 'not installed' unless Object.const_defined?(:Gtk)
      return 'unknown' unless Gtk.const_defined?(:Version)
      return Gtk::Version::STRING
    rescue
      return 'error'
    end
  end

  def self.format_report(report, width)
    report.map { |k, v| "#{k.ljust(width, '.')}: #{v}" }
  end

  def self.get_script_version(filename)
    data = File.open(filename, 'r').read
    if data =~ /^=begin\r?\n?(.+?)^=end/m
      comments = $1.split("\n")
    else
      comments = []
      data.split("\n").each { |line|
        if line =~ /^[\t\s]*#/
          comments.push(line)
        elsif line !~ /^[\t\s]*$/
          break
        end
      }
    end

    for line in comments
      if line =~ /^[\s\t#]*version:[\s\t]*([\w\s\d\.,-]+)/i
        return $1.sub(/\s\(.*?\)/, '').strip
      end
    end

    return nil
  end

  def self.main
    if Script.current.vars[1]
      if Script.current.vars[1] =~ /^(?:all|full|details?)$/i
        show_report = true
        scripts_to_check = Dir[File.join(SCRIPT_DIR, "*")].find_all { |x| x =~ /\.lic$/i }
      else
        show_report = false
        scripts_to_check = Set.new
        Script.current.vars[1..-1].each do |prefix|
          scripts = Dir[File.join(SCRIPT_DIR, "#{prefix}*")].find_all { |x| x =~ /\.lic$/i }
          scripts += Dir[File.join(SCRIPT_DIR, 'custom', "#{prefix}*")].find_all { |x| x =~ /\.lic$/i }
          if scripts.length == 0
            echo "#{prefix}: No matching scripts found!"
          end
          scripts.each { |x| scripts_to_check << x }
        end
        scripts_to_check = scripts_to_check.to_a
        scripts_to_check.sort!
      end
    else
      show_report = true
      scripts_to_check = []
    end

    msg = []

    if show_report
      msg << "```"
      report = {}
      report["Ruby version"]         = const_get(:RUBY_VERSION, missing: 'unknown')
      report["Ruby platform"]        = const_get(:RUBY_PLATFORM, missing: 'unknown')
      report["Ruby engine"]          = const_get(:RUBY_ENGINE, missing: 'unknown')
      report["Lich version"]         = const_get(:LICH_VERSION, missing: 'unknown')
      report["Dependency"]           = $DEPENDENCY_VERSION if XMLData.game =~ /^DR/
      report["SQLite3 version"]      = module_version(:SQLite3)
      report["Gtk version"]          = gtk_version
      report["Cairo version"]        = module_version(:Cairo)
      if defined?(Account) && !Account.subscription.nil?
        report["Account type"]         = Account.subscription
      elsif !UserVars.subscription.nil? && XMLData.game =~ /^DR/
        report["Account type"]         = UserVars.subscription
      else
        report["Account type"]         = "unknown"
      end
      report["Game type"]            = XMLData.game
      report["FrontEnd"]             = $frontend
      report["#{$clean_lich_char}version"] = get_self_version

      msg += format_report(report, 20)
      msg << ''
      report = {}
      [:LICH_DIR, :SCRIPT_DIR, :DATA_DIR, :TEMP_DIR, :LOG_DIR, :MAP_DIR, :BACKUP_DIR].each do |sym|
        report[sym.to_s] = const_get(sym, missing: 'unknown')
      end

      begin
        report["Lich location"] = File.join(LICH_DIR, "lich.rbw")
      rescue
        report["Lich location"] = 'error'
      end

      begin
        report["Ruby location"] = RbConfig::CONFIG['bindir'] + '/' + \
                                  (RbConfig::CONFIG['RUBYW_INSTALL_NAME'].empty? ? \
                                    RbConfig::CONFIG['RUBY_INSTALL_NAME'] : \
                                    RbConfig::CONFIG['RUBYW_INSTALL_NAME']) + \
                                  RbConfig::CONFIG['EXEEXT']
      rescue
        report["Ruby location"] = 'error'
      end

      msg += format_report(report, 20)
      msg << ''

      report = {}
      begin
        fn = Dir.entries(File.join(DATA_DIR, XMLData.game)).find_all { |filename| filename =~ /^map\-[0-9]+\.(?:dat|xml|json)$/ }.collect { |filename| File.join(DATA_DIR, XMLData.game, filename) }.sort[-1]
        if fn
          report["MapDB filename"] = File.basename(fn)
          report["MapDB last modified"] = File.mtime(fn).to_s
        else
          report["MapDB filename"] = 'not found'
        end
      rescue
        report["MapDB filename"] = 'error'
      end

      ["gameobj-data", "spell-list", "effect-list"].each do |file|
        time = nil
        [DATA_DIR, SCRIPT_DIR].each do |dir|
          begin
            fn = File.join(dir, "#{file}.xml")
            time = File.mtime(fn) if File.exist?(fn)
            break
          rescue
            time = nil
          end
        end
        if time
          time = time.to_s
          report["#{file} last modified"] = time
        end
      end
      msg += format_report(report, 30)
      msg << ''

      custom_scripts = []
      Dir[File.join(SCRIPT_DIR, 'custom', "*")].find_all { |x| x =~ /\.lic$/i }.each { |filename|
        name = File::basename(filename)
        name.gsub!(/\.lic$/i, '')
        custom_scripts << name
      }

      report = {}
      unless Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', "autostart".encode('UTF-8'), ":".encode('UTF-8')).nil?
        report["Autostart global"]       = Marshal.load(Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', "autostart".encode('UTF-8'), ":".encode('UTF-8')))['scripts'].map { |hash| hash[:name] }.join(', ')
      end
      unless Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', "autostart".encode('UTF-8'), "#{XMLData.game}:#{XMLData.name}".encode('UTF-8')).nil?
        report["Autostart #{Char.name}"] = Marshal.load(Lich.db.get_first_value('SELECT hash FROM script_auto_settings WHERE script=? AND scope=?;', "autostart".encode('UTF-8'), "#{XMLData.game}:#{XMLData.name}".encode('UTF-8')))['scripts'].map { |hash| hash[:name] }.join(', ')
      end
      report["DR autostarts"]          = (Script.running?('dependency') ? list_autostarts.join(', ') : "Dependency not running") if XMLData.game =~ /^DR/
      report["Running scripts"]        = Script.list.map { |x| x.name }.join(', ')
      report["Downstream hooks"]       = (defined?(DownstreamHook.hook_sources) ? DownstreamHook.hook_sources.map { |k, v| "#{v}(#{k})" }.join(', ') : DownstreamHook.list.join(', '))
      report["Upstream hooks"]         = (defined?(UpstreamHook.hook_sources) ? UpstreamHook.hook_sources.map { |k, v| "#{v}(#{k})" }.join(', ') : UpstreamHook.list.join(', '))
      report["Current threads"]        = Thread.list.length.to_s
      report["Custom scripts"]         = custom_scripts.flatten.join(', ')

      msg += format_report(report, 26)
      msg << "```"
    end

    if scripts_to_check.length > 0
      msg << "```"
      known_versions = []
      unknown_versions = []
      error_versions = []

      if scripts_to_check.length > 20
        echo "Checking the versions of #{scripts_to_check.length} scripts.  This may take a moment..."
        if scripts_to_check.length > 100
          echo "... or several moments, depending on just how many scripts you have and the speed of your PC..."
        end
      end

      scripts_to_check.each do |filename|
        name = File::basename(filename)
        name.gsub!(/\.lic$/i, '')
        name = "#{filename.to_s.match(/\/custom\//) ? 'custom/' : ''}#{name}"

        begin
          version = get_script_version(filename)
          if version
            known_versions << "#{name}==#{version}"
          else
            unknown_versions << name
          end
        rescue
          error_versions << name
        end
      end

      msg << "Installed script versions: #{known_versions.join(', ')}" if known_versions.length > 0
      msg << "Unknown script versions: #{unknown_versions.join(', ')}" if unknown_versions.length > 0
      msg << "Failed to retrieve data for: #{error_versions.join(', ')}" if error_versions.length > 0
      msg << "```"
    end

    if scripts_to_check.length == 0
      msg << "Use `#{$clean_lich_char}version SCRIPT [SCRIPT2 [SCRIPT3...]]` to report the installed versions of one or more Lich scripts."
      msg << "Use `#{$clean_lich_char}version ALL` to report the installed versions of ALL downloaded Lich scripts."
    end

    respond msg
  end
end

VersionScript.main
