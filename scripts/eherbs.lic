=begin

   Script to heal yourself with herbs.

   Will use herbs in your herbsack, or on a bench or something.
   Works with any combination of herbs from any town.
   Can buy herbs.
   Might heal your traveler.

  ;eherbs help

            author: Elanthia-Online
   original author: Tillmen
      contributers: Tillmen, Tysong, Doug, Rinualdo, Xanlin
              game: Gemstone
              tags: healing, herbs
          requires: Lich >= 4.6.0
           version: 1.4.3
  1.4.3 (2022-09-22): Xanlin: Fix override behavior 

=end
=begin
  Version Semantics:
    Major_change.feature_addition.bugfix
  1.4.3 (2022-09-22): Xanlin: Fix override behavior 
  1.4.2 (2022-09-18): Xanlin: River's Rest winterberry brew
  1.4.1 (2022-09-17): Xanlin: update instance variable when preferences set. Changed internal name for skip-scars to skip_scars and use-mending to use_mending.
  1.4.0 (2022-09-12): Xanlin: added ;eherbs check, fixed under and behind containers,
    converted to module, replaced version check with shims, refactored procs to methods.
  1.3.0 (2022-07-16):
    Updated River's Rest herbs, removed minor head wound from available herbs
      in River's Rest.
    Refactored stock function to count appropriately and track stocking measures
    Added feature to stock specifc herb type (;eherbs stock major head wound)
    Added feature to get blood only (;eherbs blood) and ignore wounds
    Improved (;eherbs list) to accept herb type (;eherbs list major head wound)
      this feature also accepts partials (;eherbs list minor)
  1.2.0 (2022-05-23):
    Fix for gambling kit open/close/get/put regex.
  1.1.3 (2022-05-19):
    Fix for gambling kit open/close/get/put regex.
  1.1.2 (2022-04-06):
    Fix for a/an ordering from menus
  1.1.1 (2022-04-04):
    Add LICH_VERSION check
  1.1.0 (2022-04-03):
    Rewrote fill and stock functions to detect those regions that only
    sell tinctures, tarts and various assorted non-bundling type herbs
    Corrected multiple errors in initial data tables for locations / herbs
  1.0.0 (2022-02-27):
    Global RENAME to ;eherbs
    Rewrote stock function to work at any herbalist
    Rewrote stock function to account for any 'type' of herb, so for example
    acantha leaf, acantha tea, Bloody Krolvin ale all count towards
    total doses of 'blood' herb.

  Previously as ;useherbs
  0.14 (2022-01-25):
    fix for handedness and herbs (mistaken stick for sticky and so on)
  0.13 (2021-12-17):
    updated for KF herbs
  0.12 (2020-10-10):
    response message for buying herbs now has commas
  0.11 (2020-10-07):
    changed fill function to go to closest herbalist instead of a single hardcoded one, update for commas
  0.10 (2017-09-30):
    add feature to fill your herbsack with herbs (;useherbs stock herbs)
  0.9 (2017-03-04):
    remove 506 from the script, since it doesn't affect eating herbs anymore
  0.8 (2017-01-14):
    withdraw @silvers first when using the "stock potions" command
  0.7 (2015-04-26):
    fix for working with hidden containers, like the basket in Ta'Vaalor
  0.6 (2015-03-28):
    remember to look on/under/behind a container instead of "in" if a second look is required
    fix bug with finding a herbsack given on the command line
  0.5 (2015-02-23):
    better method of finding container from herbsack setting
  0.4 (2014-12-12):
    make "stock potions" track potion use instead of measuring every time
  0.3 (2014-11-14):
    set herbsack with ;useherbs set herbsack <container>

=end

# fixme: escort healing doesn't heal blood
# fixme: garland of sovyn cloves
# fixme: skip more better
# fixme: buy herbs/right hand full
# fixme: use bank note

# possible eherbs to do: clean up dupes. Find missing herbs. Maybe add big/small blood, add backroom items

module EHerbs

  $known_herbs = [
    # Wehnimer's Landing 325/1028
    # Solhaven 5722/4740011
    # Northern Caravanasary 9276/4746124
    # Ta'Illistim 640/13104200
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some acantha leaf",    :type => "blood",             :short_name => "some acantha leaf",     :store_doses => 10 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some wolifrew lichen", :type => "minor nerve wound", :short_name => "some wolifrew lichen",  :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "bolmara potion",       :type => "major nerve wound", :short_name => 'bolmara potion',        :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some woth flower",     :type => "major nerve scar",  :short_name => "some woth flower",      :store_doses => 2 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some torban leaf",     :type => "minor nerve scar",  :short_name => "some torban leaf",      :store_doses => 3 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some ambrominas leaf", :type => "minor limb wound",  :short_name => "some ambrominas leaf",  :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some ephlox moss",     :type => "major limb wound",  :short_name => "some ephlox moss",      :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some cactacae spine",  :type => "minor limb scar",   :short_name => "some cactacae spine",   :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some calamia fruit",   :type => "major limb scar",   :short_name => "some calamia fruit",    :store_doses => 2 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim"],                             :name => "rose-marrow potion",   :type => "minor head wound",  :short_name => "rose-marrow potion",    :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some aloeas stem",     :type => "major head wound",  :short_name => "some aloeas stem",      :store_doses => 2 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some haphip root",     :type => "minor head scar",   :short_name => "some haphip root",      :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "brostheras potion",    :type => "major head scar",   :short_name => "brostheras potion",     :store_doses => 2 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some basal moss",      :type => "minor organ wound", :short_name => "some basal moss",       :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some pothinir grass",  :type => "major organ wound", :short_name => "some pothinir grass",   :store_doses => 2 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "talneo potion",        :type => "minor organ scar",  :short_name => "talneo potion",         :store_doses => 4 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "wingstem potion",      :type => "major organ scar",  :short_name => "wingstem potion",       :store_doses => 2 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "bur-clover potion",    :type => "missing eye",       :short_name => "bur-clover potion",     :store_doses => 1 },
    { :location => ["Wehnimer's Landing", "the free port of Solhaven", "the Northern Caravansary", "Ta'Illistim", "the town of River's Rest"], :name => "some sovyn clove",     :type => "severed limb",      :short_name => "some sovyn clove",      :store_doses => 1 },

    # Zul Logoth 9505/13010004
    { :location => ["Zul Logoth"],     :name => "grey mushroom potion",    :type => "blood",              :short_name => "grey mushroom potion",     :store_doses => 7 },
    { :location => ["Zul Logoth"],     :name => "green mushroom potion",   :type => "blood",              :short_name => "green mushroom potion",    :store_doses => 5 },
    { :location => ["Zul Logoth"],     :name => "bubbling brown ale",      :type => "minor limb wound",   :short_name => "bubbling brown ale",       :store_doses => 3 },
    { :location => ["Zul Logoth"],     :name => "thick foggy ale",         :type => "minor nerve wound",  :short_name => "thick foggy ale",          :store_doses => 3 },
    { :location => ["Zul Logoth"],     :name => "rusty red ale",           :type => "minor head wound",   :short_name => "rusty red ale",            :store_doses => 3 },
    { :location => ["Zul Logoth"],     :name => "chunky black ale",        :type => "minor organ wound",  :short_name => "chunky black ale",         :store_doses => 3 },
    { :location => ["Zul Logoth"],     :name => "crushed cavegrass tea",   :type => "major limb wound",   :short_name => "crushed cavegrass tea",    :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "glowing mold tea",        :type => "major nerve wound",  :short_name => "glowing mold tea",         :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "sticky lichen tea",       :type => "major head wound",   :short_name => "sticky lichen tea",        :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "roasted ratweed tea",     :type => "major organ wound",  :short_name => "roasted ratweed tea",      :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "spotted toadstool ale",   :type => "minor limb scar",    :short_name => "spotted toadstool ale",    :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "dark frothing ale",       :type => "minor nerve scar",   :short_name => "dark frothing ale",        :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "dull crimson ale",        :type => "minor head scar",    :short_name => "dull crimson ale",         :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "brown weedroot ale",      :type => "minor organ scar",   :short_name => "brown weedroot ale",       :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "stalactite brew",         :type => "major limb scar",    :short_name => "stalactite brew",          :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "stalagmite brew",         :type => "major nerve scar",   :short_name => "stalagmite brew",          :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "stone soot brew",         :type => "major head scar",    :short_name => "stone soot brew",          :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "dirty crevice brew",      :type => "major organ scar",   :short_name => "dirty crevice brew",       :store_doses => 2 },
    { :location => ["Zul Logoth"],     :name => "dirty rat fur potion",    :type => "missing eye",        :short_name => "dirty rat fur potion",     :store_doses => 1 },
    { :location => ["Zul Logoth"],     :name => "grainy black potion",     :type => "severed limb",       :short_name => "grainy black potion",      :store_doses => 1 },
    { :location => ["Zul Logoth"],     :name => "milky white potion",      :type => "lifekeep",           :short_name => "milky white potion",       :store_doses => 3 },

    # Cysaegir 4647/14051034
    # Ravelin 13943/14201010
    # Sylvarraend 13137/13051014 NOTE-  the Lich location for Sylvarraend is "Ta'Illistim", but the tincture values match Cesaegir values, not the ones from Herablist2 in TI.
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of acantha",      :type => "blood",             :short_name => "tincture of acantha",           :store_doses => 10 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of ambrominas",   :type => "minor limb wound",  :short_name => "tincture of ambrominas",        :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of wolifrew",     :type => "minor nerve wound", :short_name => "tincture of wolifrew",          :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of rose-marrow",  :type => "minor head wound",  :short_name => "tincture of rose-marrow",       :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of basal",        :type => "minor organ wound", :short_name => "tincture of basal",             :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of ephlox",       :type => "major limb wound",  :short_name => "tincture of ephlox",            :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of bolmara",      :type => "major nerve wound", :short_name => "tincture of bolmara",           :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of aloeas",       :type => "major head wound",  :short_name => "tincture of aloeas",            :store_doses => 2 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of pothinir",     :type => "major organ wound", :short_name => "tincture of pothinir",          :store_doses => 2 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of cactacae",     :type => "minor limb scar",   :short_name => "tincture of cactacae",          :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of torban",       :type => "minor nerve scar",  :short_name => "tincture of torban",            :store_doses => 3 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of haphip",       :type => "minor head scar",   :short_name => "tincture of haphip",            :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of talneo",       :type => "minor organ scar",  :short_name => "tincture of talneo",            :store_doses => 4 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of calamia",      :type => "major limb scar",   :short_name => "tincture of calamia",           :store_doses => 2 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of woth",         :type => "major nerve scar",  :short_name => "tincture of woth",              :store_doses => 2 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of brostheras",   :type => "major head scar",   :short_name => "tincture of brostheras",        :store_doses => 2 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of wingstem",     :type => "major organ scar",  :short_name => "tincture of wingstem",          :store_doses => 2 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of bur-clover",   :type => "missing eye",       :short_name => "tincture of bur-clover",        :store_doses => 1 },
    { :location => ["Cysaegir", "the hamlet of Ravelin"],   :name => "tincture of sovyn",        :type => "severed limb",      :short_name => "tincture of sovyn",             :store_doses => 1 },

    # Ta'Illistim 2 19282/13204008
    { :location => ["Ta'Illistim"],   :name => "tincture of acantha",     :type => "blood",              :short_name => "tincture of acantha",     :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of wolifrew",    :type => "minor nerve wound",  :short_name => "tincture of wolifrew",    :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of torban",      :type => "minor nerve scar",   :short_name => "tincture of torban",      :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of woth",        :type => "major nerve scar",   :short_name => "tincture of woth",        :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of ambrominas",  :type => "minor limb wound",   :short_name => "tincture of ambrominas",  :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of basal",       :type => "minor organ wound",  :short_name => "tincture of basal",       :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of ephlox",      :type => "major limb wound",   :short_name => "tincture of ephlox",      :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of pothinir",    :type => "major organ wound",  :short_name => "tincture of pothinir",    :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of aloeas",      :type => "major head wound",   :short_name => "tincture of aloeas",      :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of rose-marrow", :type => "minor head wound",   :short_name => "tincture of rose-marrow", :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of cactacae",    :type => "minor limb scar",    :short_name => "tincture of cactacae",    :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of calamia",     :type => "major limb scar",    :short_name => "tincture of calamia",     :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of haphip",      :type => "minor head scar",    :short_name => "tincture of haphip",      :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of brostheras",  :type => "major head scar",    :short_name => "tincture of brostheras",  :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of bolmara",     :type => "major nerve wound",  :short_name => "tincture of bolmara",     :store_doses => 20 },
    { :location => ["Ta'Illistim"],   :name => "tincture of talneo",      :type => "minor organ scar",   :short_name => "tincture of talneo",      :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of bur-clover",  :type => "missing eye",        :short_name => "tincture of bur-clover",  :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of wingstem",    :type => "major organ scar",   :short_name => "tincture of wingstem",    :store_doses => 10 },
    { :location => ["Ta'Illistim"],   :name => "tincture of sovyn",       :type => "severed limb",       :short_name => "tincture of sovyn",       :store_doses => 10 },

    # Teras 1851/3003056
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Olak's Ol'style ale",    :type => "blood",              :short_name => "Olak's Ol'style ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Olak's Ol'style ale",    :type => "blood",              :short_name => "Olak's Ol'style ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Lost Dogwater ale",      :type => "minor limb wound",   :short_name => "Lost Dogwater ale",          :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Lost Dogwater ale",      :type => "minor limb wound",   :short_name => "Lost Dogwater ale",          :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Orc's Head ale",         :type => "minor nerve wound",  :short_name => "Orc's Head ale",             :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Orc's Head ale",         :type => "minor nerve wound",  :short_name => "Orc's Head ale",             :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Semak's Smooth ale",     :type => "minor head wound",   :short_name => "Semak's Smooth ale",         :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Semak's Smooth ale",     :type => "minor head wound",   :short_name => "Semak's Smooth ale",         :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Mama Dwarf's ale",       :type => "minor organ wound",  :short_name => "Mama Dwarf's ale",           :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Mama Dwarf's ale",       :type => "minor organ wound",  :short_name => "Mama Dwarf's ale",           :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Bloody Krolvin ale",     :type => "blood",              :short_name => "Bloody Krolvin ale",         :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Bloody Krolvin ale",     :type => "blood",              :short_name => "Bloody Krolvin ale",         :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Golden Goose ale",       :type => "major limb wound",   :short_name => "Golden Goose ale",           :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Golden Goose ale",       :type => "major limb wound",   :short_name => "Golden Goose ale",           :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Kenar's Dropjaw ale",    :type => "major nerve wound",  :short_name => "Kenar's Dropjaw ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Kenar's Dropjaw ale",    :type => "major nerve wound",  :short_name => "Kenar's Dropjaw ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Dark Swampwater ale",    :type => "major head wound",   :short_name => "Dark Swampwater ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Dark Swampwater ale",    :type => "major head wound",   :short_name => "Dark Swampwater ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Aged Schooner ale",      :type => "major organ wound",  :short_name => "Aged Schooner ale",          :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Aged Schooner ale",      :type => "major organ wound",  :short_name => "Aged Schooner ale",          :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Bearded Ladies' ale",    :type => "minor limb scar",    :short_name => "Bearded Ladies' ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Bearded Ladies' ale",    :type => "minor limb scar",    :short_name => "Bearded Ladies' ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Miner's Muddy ale",      :type => "minor nerve scar",   :short_name => "Miner's Muddy ale",          :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Miner's Muddy ale",      :type => "minor nerve scar",   :short_name => "Miner's Muddy ale",          :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Agrak's Amber ale",      :type => "minor head scar",    :short_name => "Agrak's Amber ale",          :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Agrak's Amber ale",      :type => "minor head scar",    :short_name => "Agrak's Amber ale",          :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Gert's Homemade ale",    :type => "minor organ scar",   :short_name => "Gert's Homemade ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Gert's Homemade ale",    :type => "minor organ scar",   :short_name => "Gert's Homemade ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Mad Mutt Frothy ale",    :type => "major limb scar",    :short_name => "Mad Mutt Frothy ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Mad Mutt Frothy ale",    :type => "major limb scar",    :short_name => "Mad Mutt Frothy ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Dacra's Dream ale",      :type => "major nerve scar",   :short_name => "Dacra's Dream ale",          :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Dacra's Dream ale",      :type => "major nerve scar",   :short_name => "Dacra's Dream ale",          :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Reaper's Red ale",       :type => "major head scar",    :short_name => "Reaper's Red ale",           :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Reaper's Red ale",       :type => "major head scar",    :short_name => "Reaper's Red ale",           :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Reaper's Red ale",       :type => "major head scar",    :short_name => "Reaper's Red ale",           :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Wort's Winter ale",      :type => "major organ scar",   :short_name => "Wort's Winter ale",          :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Wort's Winter ale",      :type => "major organ scar",   :short_name => "Wort's Winter ale",          :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Volcano Vision ale",     :type => "missing eye",        :short_name => "Volcano Vision ale",         :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Volcano Vision ale",     :type => "missing eye",        :short_name => "Volcano Vision ale",         :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Captn' Pegleg's ale",    :type => "severed limb",       :short_name => "Captn' Pegleg's ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Captn' Pegleg's ale",    :type => "severed limb",       :short_name => "Captn' Pegleg's ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Dead Man's Pale ale",    :type => "lifekeep",           :short_name => "Dead Man's Pale ale",        :store_doses => 3 },
    { :location => ["the town of Kharam-Dzu"],  :name => "barrel of Dead Man's Pale ale",    :type => "lifekeep",           :short_name => "Dead Man's Pale ale",        :store_doses => 10 },
    { :location => ["the town of Kharam-Dzu"],  :name => "flagon of Dragon's Blood porter",  :type => "raisedead",          :short_name => "Dragon's Blood porter",      :store_doses => 1 },

    # Icemule 3363/4043866
    # Hinterwilds 31061/7503257
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "Dabbings Family special tart",      :type => "minor limb wound",    :short_name => 'Family special tart',       :store_doses => 10 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "Leaftoe's lichen tart",             :type => "minor nerve wound",   :short_name => 'lichen tart',               :store_doses => 10 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "candied ptarmigan feather",         :type => "severed limb",        :short_name => 'ptarmigan feather',         :store_doses => 1 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "earthworm potion",                  :type => "major organ scar",    :short_name => "earthworm potion",          :store_doses => 2 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "elk horn potion",                   :type => "minor head wound",    :short_name => "elk horn potion",           :store_doses => 4 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "gelatinous elk fat tart",           :type => "minor limb scar",     :short_name => 'elk fat tart',              :store_doses => 10 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "iceberry tart",                     :type => "blood",               :short_name => "iceberry tart",             :store_doses => 10 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "rock lizard potion",                :type => "minor organ scar",    :short_name => "rock lizard potion",        :store_doses => 4 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "slice of Ma Leaftoe's Special",     :type => "minor nerve scar",    :short_name => "Ma Leaftoe's Special",      :store_doses => 5 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "slice of pickled walrus blubber",   :type => "major limb scar",     :short_name => 'pickled walrus blubber',    :store_doses => 2 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "slice of sparrowhawk pie",          :type => "minor head scar",     :short_name => 'sparrowhawk pie',           :store_doses => 5 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "small egg and tundra grass tart",   :type => "minor organ wound",   :short_name => 'tundra grass tart',         :store_doses => 5 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "snowflake elixir",                  :type => "major nerve wound",   :short_name => "snowflake elixir",          :store_doses => 4 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "some frog's bone porridge",         :type => "major limb wound",    :short_name => "frog's bone porridge",      :store_doses => 4 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "starfish potion",                   :type => "missing eye",         :short_name => "starfish potion",           :store_doses => 1 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "tiny cup of polar bear fat soup",   :type => "major head scar",     :short_name => 'polar bear fat soup',       :store_doses => 2 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "tiny flower-shaped tart",           :type => "major nerve scar",    :short_name => 'flower-shaped tart',        :store_doses => 2 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "tiny musk ox tart",                 :type => "major organ wound",   :short_name => 'musk ox tart',              :store_doses => 2 },
    { :location => ["Icemule Trace", "Hinterwilds"], :name => "tiny ram's bladder tart",           :type => "major head wound",    :short_name => "ram's bladder tart",        :store_doses => 2 },

    # Pinefar 2782/4564010
    { :location => ["the Pinefar Trading Post"], :name => "some acantha leaf tea",    :type => "blood",              :short_name => "acantha leaf tea",        :store_doses => 10 },
    { :location => ["the Pinefar Trading Post"], :name => "some sweetfern tea",       :type => "minor limb wound",   :short_name => "sweetfern tea",           :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "some red lichen tea",      :type => "minor nerve wound",  :short_name => "red lichen tea",          :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "some feverfew tea",        :type => "minor head wound",   :short_name => "feverfew tea",            :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "some ginkgo nut tea",      :type => "minor organ wound",  :short_name => "ginkgo nut tea",          :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "some sassafras tea",       :type => "blood",              :short_name => "sassafras tea",           :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "sweetfern potion",         :type => "major limb wound",   :short_name => "sweetfern potion",        :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "red lichen potion",        :type => "major nerve wound",  :short_name => "red lichen potion",       :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "feverfew potion",          :type => "major head wound",   :short_name => "feverfew potion",         :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "ginkgo nut potion",        :type => "major organ wound",  :short_name => "ginkgo nut potion",       :store_doses => 4 },
    { :location => ["the Pinefar Trading Post"], :name => "manroot tea",              :type => "minor limb scar",    :short_name => "manroot tea",             :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "valerian root tea",        :type => "minor nerve scar",   :short_name => "valerian root tea",       :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "pennyroyal tea",           :type => "minor head scar",    :short_name => "pennyroyal tea",          :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "wyrmwood root tea",        :type => "minor organ scar",   :short_name => "wyrmwood root tea",       :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "manroot potion",           :type => "major limb scar",    :short_name => "manroot potion",          :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "valerian root potion",     :type => "major nerve scar",   :short_name => "valerian root potion",    :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "pennyroyal potion",        :type => "major head scar",    :short_name => "pennyroyal potion",       :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "wyrmwood root potion",     :type => "major organ scar",   :short_name => "wyrmwood root potion",    :store_doses => 2 },
    { :location => ["the Pinefar Trading Post"], :name => "daggit root potion",       :type => "missing eye",        :short_name => "daggit root potion",      :store_doses => 1 },
    { :location => ["the Pinefar Trading Post"], :name => "angelica root potion",     :type => "severed limb",       :short_name => "angelica root potion",    :store_doses => 1 },
    { :location => ["the Pinefar Trading Post"], :name => "earwort potion",           :type => "disease",          :short_name => "earwort potion",          :store_doses => 1 },

    # Kraken's Fall 28938/7118357
    { :location => ["Kraken's Fall"], :name => "some acantha leaf",            :type => "blood",               :short_name => "acantha leaf",       :store_doses => 10 },
    { :location => ["Kraken's Fall"], :name => "some wolifrew lichen",         :type => "minor nerve wound",   :short_name => "wolifrew lichen",    :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some torban leaf",             :type => "minor nerve scar",    :short_name => "torban leaf",        :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "bolmara elixir",               :type => "major nerve wound",   :short_name => "bolmara elixir",     :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some woth flower",             :type => "major nerve scar",    :short_name => "woth flower",        :store_doses => 3 },
    { :location => ["Kraken's Fall"], :name => "rose-marrow elixir",           :type => "minor head wound",    :short_name => "rose-marrow elixir", :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some haphip root",             :type => "minor head scar",     :short_name => "haphip root",        :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some aloeas stem",             :type => "major head wound",    :short_name => "aloeas stem",        :store_doses => 2 },
    { :location => ["Kraken's Fall"], :name => "brostheras elixir",            :type => "major head scar",     :short_name => "brostheras elixir",  :store_doses => 2 },
    { :location => ["Kraken's Fall"], :name => "ball of basal moss",           :type => "minor organ wound",   :short_name => "basal moss",         :store_doses => 7 },
    { :location => ["Kraken's Fall"], :name => "talneo elixir",                :type => "minor organ scar",    :short_name => "talneo elixir",      :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some pothinir grass",          :type => "major organ wound",   :short_name => "pothinir grass",     :store_doses => 2 },
    { :location => ["Kraken's Fall"], :name => "wingstem elixir",              :type => "major organ scar",    :short_name => "wingstem elixir",    :store_doses => 2 },
    { :location => ["Kraken's Fall"], :name => "some ambrominas leaf",         :type => "minor limb wound",    :short_name => "ambrominas leaf",    :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some cactacae spine",          :type => "minor limb scar",     :short_name => "cactacae spine",     :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "ball of ephlox moss",          :type => "major limb wound",    :short_name => "ephlox moss",        :store_doses => 4 },
    { :location => ["Kraken's Fall"], :name => "some calamia fruit",           :type => "major limb scar",     :short_name => 'calamia fruit',      :store_doses => 2 },
    { :location => ["Kraken's Fall"], :name => "cumin-rubbed sovyn clove",     :type => "severed limb",        :short_name => "sovyn clove",        :store_doses => 1 },
    { :location => ["Kraken's Fall"], :name => "bur-clover elixir",            :type => "missing eye",         :short_name => "bur-clover elixir",  :store_doses => 1 },

    # Mist Harbor 3363/4043866
    { :location => ["the Isle of Four Winds"], :name => "some fragrant woth flower",      :type => "major nerve scar",   :short_name => "fragrant woth flower",       :store_doses => 2 },
    { :location => ["the Isle of Four Winds"], :name => "some dirty haphip root",         :type => "minor head scar",    :short_name => "dirty haphip root",          :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "sticky ball of basal moss",      :type => "minor organ wound",  :snort_name => "sticky ball of basal moss",  :store_doses => 7 },
    { :location => ["the Isle of Four Winds"], :name => "gooey ball of ephlox moss",      :type => "major limb wound",   :short_name => "gooey ball of ephlox moss",  :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "some sugary ambrominas leaf",    :type => "minor limb wound",   :short_name => "sugary ambrominas leaf",     :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "some fresh torban leaf",         :type => "minor nerve scar",   :short_name => "fresh torban leaf",          :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "some spicy acantha leaf",        :type => "blood",              :short_name => "spicy acantha leaf",         :store_doses => 10 },
    { :location => ["the Isle of Four Winds"], :name => "small sovyn clove",              :type => "severed limb",       :short_name => "small sovyn clove",          :store_doses => 1 },
    { :location => ["the Isle of Four Winds"], :name => "some bright pothinir grass",     :type => "major organ wound",  :short_name => "some bright green pothinir grass", :store_doses => 2 },
    { :location => ["the Isle of Four Winds"], :name => "some withered aloeas stem",      :type => "major head wound",   :short_name => "withered aloeas stem",       :store_doses => 2 },
    { :location => ["the Isle of Four Winds"], :name => "some ripe calamia fruit",        :type => "major limb scar",    :short_name => "ripe calamia fruit",         :store_doses => 2 },
    { :location => ["the Isle of Four Winds"], :name => "some prickly cactacae spine",    :type => "minor limb scar",    :short_name => "prickly cactacae spine",     :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "some dry wolifrew lichen",       :type => "minor nerve wound",  :short_name => "dry wolifrew lichen",        :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "crystalline rose-marrow elixir", :type => "minor head wound",   :short_name => "rose-marrow elixir",         :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "crystalline talneo elixir",      :type => "minor organ scar",   :short_name => "talneo elixir",              :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "crystalline brostheras elixir",  :type => "major head scar",    :short_name => "brostheras elixir",          :store_doses => 2 },
    { :location => ["the Isle of Four Winds"], :name => "crystalline bolmara elixir",     :type => "major nerve wound",  :short_name => "bolmara elixir",             :store_doses => 4 },
    { :location => ["the Isle of Four Winds"], :name => "crystalline wingstem elixir",    :type => "major organ scar",   :short_name => "wingstem elixir",            :store_doses => 2 },
    { :location => ["the Isle of Four Winds"], :name => "crystalline bur-clover elixir",  :type => "missing eye",        :short_name => "bur-clover elixir",          :store_doses => 1 },
    
    # River's Rest 10863/2101012
    { :location => ["River's Rest"], :name => "beaker of winterberry brew", :type => "minor head wound",   :short_name => "winterberry brew",         :store_doses => 4 },

    # I don't have a location or details for the following
    # foragable only?
    { :location => ["Forageable"],    :name => "yabathilium fruit",                :type => "blood",    :short_name => "yabathilium fruit", :store_doses => 1 },
    # alchemical only?
    { :location => ["Alchemical"],    :name => "tincture of yabathilium",          :type => "blood",    :short_name => "tincture of yabathilium", :store_doses => 1 },
    { :location => ["Alchemical"],    :name => "dimly glowing sky-blue potion",    :type => "disease",  :short_name => "sky-blue potion",  :store_doses => 4 },
    { :location => ["Alchemical"],    :name => "dimly glowing sea-green potion",   :type => "poison",   :short_name => "sea-green potion", :store_doses => 4 },
  ]

  # silence_me

  @drinkable         = /potion|tea|elixir|brew|tincture|ale|soup/;
  @skippable         = Array.new;
  @close_herbsack    = false;
  @done_empty_hand   = false;
  @preposition       = nil;
  @return_to_stow    = false;
  @herb_container    = nil;
  @shopping_list     = Array.new;
  @right_hand_save   = nil;
  @left_hand_save    = nil;
  @buy_missing       = CharSettings['buy_missing'];
  @use_mending       = CharSettings['use_mending'];
  @skip_scars        = CharSettings['skip_scars'];
  @start_room        = Room.current;
  @herb_shop_menu    = nil;
  @silvers           = nil;
  @withdraw_amount   = 8000;
  @should_deposit    = false;
  @used_herbs        = Array.new;
  @open_regex        = /^You (?:reach over your \w+ and )?open|^That is already open\.$|^There doesn't seem to be any way to do that\.$|^What were you referring to\?|^I could not find what you were referring to\./;
  @close_regex       = /^You (?:reach over your \w+ and )?close|^That is already closed\.$/;
  @put_regex         = /^You (?:attempt to shield .*? from view as you |discreetly |carefully |absent-mindedly )?(?:put|place|plop|slip|tuck|add|hang|drop|untie your|find an incomplete bundle|wipe off .*? and sheathe)|^A sigh of grateful pleasure can be heard as you feed .*? to your|^As you place|^I could not find what you were referring to\.$|^Your bundle would be too large|^The .+ is too large to be bundled\.|^As you place your|^The .*? is already a bundle|^Your .*? won't fit in .*?\.$|^You can't .+ It's closed!$/;
  @put_fail_regex    = /^Your .*? won't fit in .*?\.$|^You can't .+ It's closed!$||^I could not find what you were referring to\.$/;
  @get_regex         = /^You (?:shield the opening of .*? from view as you |discreetly |carefully |deftly )?(?:remove|collect|draw|grab|reach|slip|tuck|retrieve|already have|unsheathe|detach)|^Get what\?$|^Why don't you leave some for others\?$|^You need a free hand|^You already have that/;
  @get_from          = nil;
  @heal_cutthroat    = true;
  @use_npchealer     = true;
  @blood_herb_only   = false;
  @no_get            = false;
  @blood_only        = false;

  @min_stock_doses = {
    'major head scar'   => 6,
    'minor head wound'  => 4,
    'major nerve wound' => 4,
    'minor organ scar'  => 4,
    'major organ scar'  => 6,
    'missing eye'       => 7,
    'blood'             => 50,
    'major head wound'  => 25,
    'minor head scar'   => 25,
    'major organ wound' => 25,
    'minor organ wound' => 25,
    'major limb wound'  => 25,
    'minor limb wound'  => 25,
    'major limb scar'   => 25,
    'minor limb scar'   => 25,
    'severed limb'      => 25,
    'minor nerve wound' => 25,
    'major nerve scar'  => 25,
    'minor nerve scar'  => 25
  }

  @fix_option = { 'on' => true, 'true' => true, 'yes' => true, 'off' => false, 'false' => false, 'no' => false }

  @var_names = {
    'buy'         => 'buy_missing',
    'buy-missing' => 'buy_missing',
    'mending'     => 'use_mending',
    'skipscars'   => 'skip_scars'
  };

  @script_name = Script.current.name;
  def self.anon_hook(prefix = '');now = Time.now;"#{@script_name}::#{prefix}-#{now.tv_sec}.#{now.tv_usec}-#{Random.rand(10000)}";end;
  def self.dothisquiet(command, timeout=5, start_pattern=/.*?/, quiet = true, end_pattern = /^(?:<popBold\/>)?<prompt/, include_end = false);result = [];name   = self.anon_hook;filter = false;begin;Timeout::timeout(timeout, Interrupt) {DownstreamHook.add(name, proc {|xml|if filter;if xml =~ end_pattern;DownstreamHook.remove(name);filter = false;else;next(nil) if quiet;xml if !quiet;end;elsif xml =~ start_pattern;filter = true;next(nil) if quiet;xml if !quiet;else;next(nil) if xml.strip.length == 0;xml;end;});fput command;until (xml = get) =~ start_pattern; end;result << xml.rstrip;until (xml = get) =~ end_pattern;result << xml.rstrip;end;if include_end;result << xml.rstrip;end;};rescue Interrupt;DownstreamHook.remove(name);nil;end;return result;end;

  def self.wealth_quiet();
    wealth_quiet_pattern = /^You have no|^You have ([\d,]+) coins|^You have but one coin with you./;
    coins = 0;
    save_want_downstream = Script.current.want_downstream;
    save_want_downstream_xml = Script.current.want_downstream_xml;
    Script.current.want_downstream = false;
    Script.current.want_downstream_xml = true;
    result = dothisquiet "wealth quiet", 3 ,wealth_quiet_pattern, true;
    data = result.join("\n");
    if data  =~ /You have ([\d,]+) coins/;
      coins = $1.gsub(',','').to_i;
    elsif data =~ /You have but one coin/;
      coins = 1;
    end;
    Script.current.want_downstream_xml = save_want_downstream_xml;
    Script.current.want_downstream = save_want_downstream;
    return coins;
  end;

  def self.format_monsterbold(msg);return monsterbold_start + msg.encode(:xml => :text) + monsterbold_end;end;
  def self.format_monsterbold_noescape(msg);return monsterbold_start + msg + monsterbold_end;end;

  def self.check_silver;
    if defined?(Lich::Util.wealth_quiet);
      return Lich::Util.wealth_quiet;
    else;
      return self.wealth_quiet;
    end;
  end;

  def self.monsterbold(msg);
    if defined?(Lich::Messaging);
      return Lich::Messaging.monsterbold(msg);
    else;
      return self.format_monsterbold(msg);
    end;
  end;

  def self.drag_to_container(item_id, container_id, preposition = nil);
    preposition = @preposition if preposition.nil?;
    restore_want_downstream = Script.current.want_downstream;
    restore_want_downstream_xml = Script.current.want_downstream_xml;
    Script.current.want_downstream = false;
    Script.current.want_downstream_xml = true;
    result = nil;
    if !["behind","under"].include?(preposition.downcase)
      result = dothistimeout "_drag ##{item_id} ##{container_id}", 5, /<(?:right|left)>Empty<|^You can't .+ It's closed!|I could not find what you were referring to|Your .*? won't fit in|Do you want to put that|I could not find what you were referring to/;
    end
    if result.nil? or result =~ /Do you want to put that/
      result = dothistimeout "put ##{item_id} #{preposition} ##{container_id}", 5, /<(?:right|left)>Empty<|^You can't .+ It's closed!|I could not find what you were referring to|Your .*? won't fit in|Do you want to put that|I could not find what you were referring to/;
    end
    Script.current.want_downstream = restore_want_downstream;
    Script.current.want_downstream_xml = restore_want_downstream_xml;
    return result;
  end;

  def self.drag_to_hand(item_id, hand);
    if hand.nil?;
      hand = 'left'  if GameObj.left_hand.id.nil?;
      hand = 'right' if GameObj.right_hand.id.nil?;
    end;
    restore_want_downstream = Script.current.want_downstream;
    restore_want_downstream_xml = Script.current.want_downstream_xml;
    Script.current.want_downstream = false;
    Script.current.want_downstream_xml = true;
    result = dothistimeout "_drag ##{item_id} #{hand}", 5, /<(?:right|left) exist="#{item_id}"/;
    Script.current.want_downstream = restore_want_downstream;
    Script.current.want_downstream_xml = restore_want_downstream_xml;
    return result;
  end;

  def self.assert_herbsack_var();
    if UserVars.herbsack.nil? or UserVars.herbsack.empty?;
      echo "herbsack is not set (#{$clean_lich_char}#{Script.current.name} set herbsack <container name>)";
      exit;
    end;
  end;

  def self.withdraw;
    if $infomon_cutthroat
      echo "Cannot order without spewing blood everywhere."
      if @heal_cutthroat && @use_npchealer
        Script.run('go2', 'npchealer')
        fput 'lie'
        _respond self.monsterbold('This may take a minute! Exiting. . . '); _respond
        Script.self.kill
      elsif @heal_cutthroat && !@use_npchealer
        Script.run('go2', 'town')
        sleep 1
        fput 'act gasps while trying to hold the blood back from the throat gash'
        sleep 1
        fput 'say Help me?'
        _resopnd self.monsterbold('While we\'re waiting on a healer - exiting. . .'); _respond
        Script.self.kill
      end
      _respond self.monsterbold('Your cut throat requires attention! Exiting. . . '); _respond
      _respond self.monsterbold('Waiting on a healer. . . '); _respond
      Script.self.kill
    end
    Script.run('go2', 'bank --disable-confirm')
    fput 'unhide' if invisible?
    if XMLData.room_title == '[Pinefar, Depository]'
      if GameObj.npcs.any? { |npc| npc.noun == 'banker' }
        result = dothistimeout "ask banker for #{[@withdraw_amount.to_i, 20].max} silvers", 1, /suspicious/
        if result =~ /suspicious/
          _respond self.monsterbold('You have no coins in the bank, moving back to starting point'); _respond
          sleep 2
          unless Room.current.id == @start_room.id
            Script.run('go2', @start_room.id.to_s)
          end
          exit
        end
      # The banker nods and says, "Alright, here ye go.  Ye understand I be takin' a little more than that from ye account in the 'Mule.  I don't works for free!"
      # The banker looks at you suspiciously and says, "Hmm, I don't think ye be havin' enough in ye account to cover that and my fee.  Ye tryin' to pull one over on me?"
      else
        if icemule_bank = Room.list.find { |room| room.location == 'Icemule Trace' and room.tags.include?('bank') }
          Script.run('go2', icemule_bank.id.to_s)
          result = dothistimeout "withdraw #{@withdraw_amount} silvers", 1, /debt collector|suspicious/
          if result =~ /debt collector/
            fput "withdraw #{@withdraw_amount} silvers"
          elsif result =~ /suspicious/
            _respond self.monsterbold('You have no coins in the bank, moving back to starting point'); _respond
            sleep 2
            unless Room.current.id == @start_room.id
              Script.run('go2', @start_room.id.to_s)
            end
            exit
          end
        else
          echo 'waiting for banker...'
          wait_until { GameObj.npcs.any? { |npc| npc.noun == 'banker' } }
          fput "ask banker for #{[@withdraw_amount.to_i, 20].max} silvers"
        end
      end
    else
      result = dothistimeout "withdraw #{@withdraw_amount} silvers", 1, /debt collector|suspicious|chuckles at you/
      if result =~ /debt collector/
        fput "withdraw #{@withdraw_amount} silvers"
      elsif result =~ /suspicious|chuckles at you/
        _respond self.monsterbold('You have no coins in the bank, moving back to starting point'); _respond
        sleep 2
        unless Room.current.id == @start_room.id
          Script.run('go2', @start_room.id.to_s)
        end
        exit
      end
    end
    @silvers += @withdraw_amount
    @should_deposit = true
  end;

  def self.deposit;
    if @should_deposit
      Script.run('go2', 'bank --disable-confirm')
      if XMLData.room_title == '[Pinefar, Depository]'
        if GameObj.npcs.any? { |npc| npc.noun == 'banker' }
          fput "give banker #{self.check_silver} silvers"
        end
      else
        fput "deposit #{self.check_silver}"
      end
    end
  end;

  def self.go_to_herbalist;
    if working_herbalist = Room.current.find_nearest(Room.list.find_all { |room| (room.tags.include?('herbalist') or room.tags.include?('herbalist2')) and not room.title.any? { |t| t =~ /Valina's Herbs and Tinctures/ } }) # |Marroux and Haert, Chirurgeons/ } })
      Script.run('go2', working_herbalist.to_s)
    else
      Script.run('go2', 'herbalist --disable-confirm')
    end
  end;

  # 5 main areas: 'head', 'neck', 'torso', 'limbs', 'nerves'
  # Wound method => herb area
  @areas = { 'head' => 'head', 'neck' => 'head', 'torso' => 'organ', 'limbs' => 'limb', 'nerves' => 'nerve'};
  def self.next_herb_type;
    herb_type = nil
    unless herb_type
      herb_type = 'blood' if (percenthealth < 50) and not @skippable.include?('blood')
    end
    unless herb_type
      for area in ['head', 'neck', 'torso', 'limbs', 'nerves'] - @skippable
        if Wounds.send(area) > 1
          herb_type = "major #{@areas[area]} wound"
          break
        end
      end
    end
    unless herb_type
      for area in ['head', 'neck', 'torso', 'limbs', 'nerves'] - @skippable
        if Wounds.send(area) == 1
          herb_type = "minor #{@areas[area]} wound"
          break
        end
      end
    end
    unless herb_type
      herb_type = 'severed limb' if (Scars.limbs == 3) and not @skippable.include?('limbs')
    end
    unless herb_type
      herb_type = 'missing eye' if (Scars.reye == 3 or Scars.leye == 3) and not @skippable.include?('torso')
    end
    unless herb_type
      for area in ['head', 'neck', 'torso', 'limbs', 'nerves'] - @skippable
        if Scars.send(area) > 1
          herb_type = "major #{@areas[area]} scar"
          break
        end
      end
    end
    unless herb_type
      for area in ['head', 'neck', 'torso', 'limbs', 'nerves'] - @skippable
        if Scars.send(area) == 1 && !@skip_scars
          herb_type = "minor #{@areas[area]} scar"
          break
        end
      end
    end
    unless herb_type
      herb_type = 'blood' if (checkhealth + 7) < maxhealth and not @skippable.include?('blood')
    end
    return herb_type
  end;

  def self.stow_herb;
    relook = false;
    if @return_to_stow and (Room.current.id != @start_room.id)
      Script.run('go2', @start_room.id.to_s)
    end
    if @used_herbs.include?(GameObj.right_hand.id)
      self.drag_to_container(GameObj.right_hand.id,@herb_container.id,@preposition)
      fput('stow right') if checkright
      relook = true;
    end
    if @used_herbs.include?(GameObj.left_hand.id)
      self.drag_to_container(GameObj.left_hand.id,@herb_container.id,@preposition)
      fput('stow left') if checkleft
      relook = true;
    end
    self.herb_container_contents_load if ["under","behind"].include?(@preposition) and relook == true;
  end;

  def self.read_menu;
    if $infomon_cutthroat
      echo "Cannot order without spewing blood everywhere."
      if @heal_cutthroat && @use_npchealer
        Script.run('go2', 'npchealer')
        fput 'lie'
        _respond self.monsterbold('This may take a minute! Exiting. . . '); _respond
        Script.self.kill
      elsif @heal_cutthroat && !@use_npchealer
        Script.run('go2', 'town')
        sleep 1
        fput 'act gasps while trying to hold the blood back from the throat gash'
        sleep 1
        fput 'say Help me?'
        _resopnd self.monsterbold('While we\'re waiting on a healer - exiting. . .'); _respond
        Script.self.kill
      else
        _respond self.monsterbold('Your cut throat requires attention! Exiting. . . '); _respond
        _respond self.monsterbold('Waiting on a healer. . . '); _respond
        Script.self.kill
      end
    end
    status_tags(onoff = "on")
    clear
    fput 'unhide' if hidden? or invisible?
    @menu = Hash.new
    fput 'order'
    while (line = get) and (line !~ /ORDER|BUY/)
      for item in line.scan(/<d.*?cmd="order ([0-9]+).*?>(.*?)<\/d>/)
        @menu[item[1].sub(/^a |^an /, '')] = item[0]
      end
    end
    status_tags(onoff = "off")
    clear
    return @menu
  end;

  def self.buy_herb(herb_type);
    unless @silvers
      @silvers = self.check_silver();
    end
    unless @herb_shop_menu
      @herb_shop_menu = self.read_menu;
    end
    herb_name = @herb_shop_menu.keys.find { |name| $known_herbs.any? { |h| (h[:type] == herb_type) and (name == h[:name] || name == h[:short_name]) } }
    unless order_number = @herb_shop_menu[herb_name]
      echo "error: failed to find a herb for #{herb_type} in the menu"
      exit
    end
    order_result = dothistimeout "order #{order_number}", 3, /^You will need a free hand|BUY/
    if order_result =~ /You will need a free hand/
      fput "put ##{GameObj.right_hand.id} in #{@herb_container}"
      fput "put ##{GameObj.left_hand.id} in #{@herb_container}"
    end
    buy_result = dothistimeout 'buy', 3, /Sold for [0-9,]+ silver|^But you do not have enough silver!|You're going to need a free hand/
    if buy_result =~ /Sold for ([0-9,]+) silver/
      @silvers -= $1.gsub(',', '').to_i
    elsif buy_result =~ /^But you do not have enough silver!/
      self.withdraw
      self.go_to_herbalist if !(Room.current.tags.include?('herbalist'))
      return self.buy_herb(herb_type)
    elsif buy_result =~ /You're going to need a free hand/
      @done_empty_hand = true
      empty_hands
    else
      @silvers = self.check_silver();
    end
    # potential fixme - no left hand check and no stow hands?
    if checkright
      return GameObj.right_hand
    else
      return nil
    end
  end;

  def self.bundle_herb;
    same_potion = same_herb = false
    # first get type in each hand (@drinkable/munchable)
    got_salad = (GameObj.right_hand.noun !~ @drinkable)
    got_croutons = (GameObj.left_hand.noun !~ @drinkable)
    got_milk = (GameObj.right_hand.noun =~ @drinkable)
    got_syrup = (GameObj.left_hand.noun =~ @drinkable)
    # second get full name in each hand - if not the same, move on to prevent mixing
    # potion types inappropriately.
    unless got_milk.nil? or got_syrup.nil?
      same_potion = GameObj.right_hand.name.sub(GameObj.right_hand.noun, '').rstrip == GameObj.left_hand.name.sub(GameObj.left_hand.noun, '').rstrip
    end

    unless got_salad.nil? or got_croutons.nil?
      same_herb = GameObj.right_hand.name.sub(GameObj.right_hand.noun, '').rstrip == GameObj.left_hand.name.sub(GameObj.left_hand.noun, '').rstrip
    end

    if same_potion
      old_herb = GameObj.right_hand
      new_herb = GameObj.left_hand
      10.times {
        if (GameObj.right_hand.id == old_herb.id) or (GameObj.left_hand.id == new_herb.id)
          result = dothistimeout "pour ##{new_herb.id} in ##{old_herb.id}", 5, /^You carefully pour a little bit from your|^You can't pour|^I can't find that|^I could not find what you were referring to/
          if result =~ /^You can't pour any more in there without spilling it\./
            $eherbs_measure[old_herb.id] = 10 if old_herb.name =~ /barrel/
            $eherbs_measure[old_herb.id] = 7 if old_herb.name !~ /barrel/
            break
          elsif GameObj.left_hand.name == "Empty"
            break
          elsif result =~ /^You can't pour|^I can't find that|^I could not find what you were referring to/
            break
          end
        else
          break
        end
      }
    elsif same_herb
      old_herb = GameObj.right_hand
      new_herb = GameObj.left_hand
      bundle_result = dothistimeout 'bundle', 5, /^Carefully, you combine|^If you add anything more to this bundle|^You do not have anything to bundle!$|^You can't put .* together in a bundle!/
      # SIMU does not send the full descriptions of items in right / left hands in XML
      # so we have to do this work-around.
      if bundle_result =~ /^You can't put (.*)<a exist=.*noun=.*>(.*), and (.*)<a exist=.*noun=.*>(.*) together in a bundle!/
        herb_right = $1.dup + $2.dup
        herb_left = $3.dup + $4.dup
        if herb_right != herb_left
          respond
          respond self.monsterbold("The herbs don't match! Your old herb is #{herb_right}, and you bought #{herb_left}."); respond
          respond
          respond "This happens when you move areas.  What you should do depends on how long you'll be in the area.  If you're moving permanently, throw the herbs in your right hand away and put the herbs in your left hand in your #{@herb_container}."
          respond "If you're only visiting temporarily, put the herbs in your right hand in another container for your return and put the herbs in your left hand in your #{@herb_container}."
          respond
          respond "When finished, run #{$clean_lich_char}#{Script.current.name} with your stocking options again."
          exit
        end
      end
    end
  end;

  def self.find_herbsack;
    unless herbsack = (GameObj.inv.find { |obj| obj.noun == UserVars.herbsack } || GameObj.inv.find { |obj| obj.name == UserVars.herbsack } || GameObj.inv.find { |obj| obj.name =~ /\b#{Regexp.escape(UserVars.herbsack)}$/i } || GameObj.inv.find { |obj| obj.name =~ /\b#{UserVars.herbsack.split(' ').collect { |n| Regexp.escape(n) }.join(".*\\b")}/i })
      echo "error: unable to find container \"#{UserVars.herbsack}\" in your inventory."
      exit
    end
    return herbsack
  end;

  def self.get_current_stock(seek_type_list);
    @herb_container.contents.each { |obj|
      if $known_herbs.any? { |h| seek_type_list.include?(h[:type]) and (h[:name] == obj.name || h[:short_name] == obj.name) } and $eherbs_measure[obj.id].nil?
        dothistimeout "get ##{obj.id}", 10, @get_regex
        dothistimeout "measure ##{obj.id}", 10, /^The .*? left/
        dothistimeout "put ##{obj.id} in ##{@herb_container.id}", 10, @put_regex
      end
    }
    for bippity in seek_type_list
      last_total_doses = -1
      loop {
        herb_list = @herb_container.contents.find_all { |obj| $known_herbs.find { |h| (h[:name] == obj.name || h[:short_name] == obj.name || h[:short_name].include?(obj.name.sub('elixir', ''))) and h[:type] == bippity } }
        total_doses = 0; herb_list.each { |h| total_doses += $eherbs_measure[h.id].to_i }
        echo "#{bippity}: #{total_doses}"
        break unless total_doses < @min_stock_doses[bippity]
        break unless total_doses > last_total_doses

        last_total_doses = total_doses
        # let's try to get the current location and fill in the missing herb info
        # if we can't get the current location, we'll cheat a bit with a generic entry
        if herb_list.empty?
          details = $known_herbs.find { |h| h[:type] == bippity && h[:location].include?("#{Room.current.location}") }
          unless details.nil?
            @shopping_list.push(:category => bippity, :herb_name => details[:short_name], :herb_list => [''], :needed => ((@min_stock_doses[bippity] - total_doses) / details[:store_doses]))
            break
          else
            @shopping_list.push(:category => bippity, :herb_name => "any", :herb_list => ["missing"], :needed => 2)
            break
          end
        else
          herb_list.each { |h| @herb_name = h.name || @herb_name = h.short.name }
          #        herb_list.each { |h| @herb_name = h[:short_name] }
          details = $known_herbs.find { |h| (h[:name] == @herb_name || h[:short_name] == @herb_name) } # && h[:location].include?(Room.current.location) }
          if ((@min_stock_doses[bippity] - total_doses) / details[:store_doses]) >= 1
            @shopping_list.push(:category => bippity, :herb_name => @herb_name, :herb_list => herb_list, :needed => ((@min_stock_doses[bippity] - total_doses) / details[:store_doses]))
            echo "need more #{bippity}"
          end
          break
        end
      }
    end
  end;

  def self.stock_requested_herbs;
    done_gone_to_herbalist = false
    respond
    respond "shopping list:"
    for thing in @shopping_list
      unless thing[:herb_name] == 'any'
        respond "#{thing[:herb_name].rjust(25)} (#{thing[:needed]})"
      else
        respond "any #{thing[:category]}".rjust(25) + " (#{thing[:needed]})"
      end
    end
    respond

    for thing in @shopping_list
      unless done_gone_to_herbalist
        if self.check_silver < 1500
          self.withdraw
        end
        self.go_to_herbalist if !(Room.current.tags.include?('herbalist'))
        done_gone_to_herbalist = true
      end
      unless @done_empty_hand
        empty_hands
        @done_empty_hand = true
      end
      current_location = Room.current.location
      @shopping_list.reject! { |r| r[:category] =~ /minor head wound/ } if current_location =~ /River's Rest/
      herb_type = $known_herbs.find { |h| h[:type] == thing[:category] && h[:location].include?("#{current_location}") }[:type]
      unless thing[:herb_name] == 'any'
        while old_herb = thing[:herb_list].shift
          unless old_herb.empty?
            fput "get ##{old_herb.id}"
            30.times do
              break if GameObj.right_hand.id == old_herb.id || GameObj.left_hand.id == old_herb.id
              sleep(0.10)
            end
          end
        end
        if checkleft and checkright
          self.bundle_herb
        end
      else
        while missing_herb = thing[:herb_list].shift
          echo "Buying a new herb: #{missing_herb}"
        end
      end
      thing[:needed].times {
        if self.buy_herb(herb_type)
          if checkleft and checkright
            self.bundle_herb
          end
        end
      }
      dothistimeout "put ##{GameObj.right_hand.id} in ##{@herb_container.id}", 5, @put_regex if checkright
      dothistimeout "put ##{GameObj.left_hand.id} in ##{@herb_container.id}", 5, @put_regex if checkleft
    end
  end

  if $eherbs_measure.nil?
    exec_string = "
         #hide_me
         #echo 'starting eherbs_measure'
         status_tags
         $eherbs_measure = Hash.new
         @doses = 0
         using = nil
         last_left_hand_id = nil
         begin
            while line = get
               if line =~ /<left exist=\"([0-9]+)\"/
                  last_left_hand_id = $1
               end
               if line =~ /<prompt/
                  using = nil
               elsif using
                  if line =~ /^You have only about ([0-9]+) quaffs left\\./
                     $eherbs_measure[using] = $1.to_i
                  elsif line =~ /^You have (?:about )?([0-9]+) (?:doses|bites) left\\./
                     $eherbs_measure[using] = $1.to_i
                  elsif line =~ /^You (?:only )?have one bite left\\./
                     $eherbs_measure[using] = 1
                  elsif line =~ /^You have only about one quaff left\\.|You only have one (?:dose|quaff) left\\./
                     $eherbs_measure[using] = 1
                  elsif line =~ /^That was the last (?:drop|of it)\\./
                     $eherbs_measure[using] = 0
                  end
               elsif line =~ /^You take a (?:drink from|bite of) your .*? exist=\"([0-9]+)\"/
                  using = $1
               elsif line =~ /^You carefully pour a little bit from your .*? exist=\"([0-9]+)\" .*? into .*? exist=\"([0-9]+)\"/
                  using = $1
                  if $eherbs_measure[$2]
                     $eherbs_measure[$2] += 1
                  end
               elsif line =~ /^The .*? exist=\"([0-9]+)\" .*? has several doses left\\./
                  if $eherbs_measure[$1].nil? or ($eherbs_measure[$1] < 5) or ($eherbs_measure[$1] > 10)
                     $eherbs_measure[$1] = 7
                  end
               elsif line =~ /^The .*? exist=\"([0-9]+)\" .*? has a few doses left\\./
                  if $eherbs_measure[$1].nil? or ($eherbs_measure[$1] < 3) or ($eherbs_measure[$1] > 4)
                     $eherbs_measure[$1] = 4
                  end
               elsif line =~ /^The .*? exist=\"([0-9]+)\" .*? has ([0-9]+) doses left\\./
                  $eherbs_measure[$1] = $2.to_i
               elsif line =~ /^The .*? exist=\"([0-9]+)\" .*? has 1 dose left\\./
                  $eherbs_measure[$1] = 1
               elsif line =~ /^You can't tell exactly, but .*? exist=\"(.*?)\" .*? seems to have plenty of bites left\\.$/
                  if $eherbs_measure[$1].nil? or ($eherbs_measure[$1] < 11) or ($eherbs_measure[$1] > 50)
                     $eherbs_measure[$1] = 50
                  end
               elsif line =~ /^The .*? exist=\"(.*?)\" .*? looks like it has several bites left\\.$/
                  if $eherbs_measure[$1].nil? or ($eherbs_measure[$1] < 5) or ($eherbs_measure[$1] > 10)
                     $eherbs_measure[$1] = 10
                  end
               elsif line =~ /^The .*? exist=\"(.*?)\" .*? looks like it has a few bites left\\.$/
                  if $eherbs_measure[$1].nil? or ($eherbs_measure[$1] < 3) or ($eherbs_measure[$1] > 4)
                     $eherbs_measure[$1] = 4
                  end
               elsif line =~ /^The .*? exist=\"(.*?)\" .*? has ([0-9]+) bites left\\.$/
                  $eherbs_measure[$1] = $2.to_i
               elsif line =~ /^The .*? exist=\"(.*?)\" .*? has (?:one|1) bite left\\.$/
                  $eherbs_measure[$1] = 1
               elsif line =~ /^(?:Sh|H)e hands you <a exist=\"[0-9]+\".*?>(.*)<\\/a> and says, \"Here's your purchase\./o
                  @doses = $known_herbs.find { |h| h[:name] == $1.dup }[:store_doses]
                  if @doses.nil?
                     echo \"warning: no store_doses entry for \#{$1}\"
                     @doses = 4
                  end
               elsif line =~ /^Carefully, you combine all your .*? into one bundle\\./
                  bundle_id = GameObj.right_hand.id
                  if $eherbs_measure[bundle_id] and !@doses.nil?
                     $eherbs_measure[bundle_id] += @doses.to_i
                     @doses = nil
                  elsif ($eherbs_measure[$1] and $eherbs_measure[$1] > 10) or ($eherbs_measure[last_left_hand_id] and $eherbs_measure[last_left_hand_id] > 10)
                     # bundle has 11 - 50 bytes
                     # overestimate so that we don't buy more than we can bundle
                     # exact count will be found if the herb is used
                     $eherbs_measure[$1] = 50
                     $eherbs_measure.delete(last_left_hand_id)
                  else
                     # bundle has 2-50 bytes
                     # clear count so the bundle gets measured
                     $eherbs_measure.delete($1)
                     $eherbs_measure.delete(last_left_hand_id)
                  end
               elsif line =~ /^You carefully remove one dose from your <a exist=\"([0-9]+)\"/
                  if $eherbs_measure[$1]
                     $eherbs_measure[$1] -= 1
                  end
                  $eherbs_measure[last_left_hand_id] = 1
               end
               line
            end
         ensure
            $eherbs_measure = nil
         end
      "
    start_exec_script(exec_string, flags = { :quiet => false })
  end;

  def self.print_help();
    respond
    respond "To use the herbs in your herbsack (see below for setting your herbsack):"
    respond "   #{$clean_lich_char}#{Script.current.name}"
    respond
    respond "To heal only hitpoints but no other wounds (squares rejoice!):"
    respond "   #{$clean_lich_char}#{Script.current.name} blood"
    respond
    respond "To check a container and report a table of herb types with counts:"
    respond "   #{$clean_lich_char}#{Script.current.name} check <in|on|under|behind> <container>"
    respond
    respond "To replace any missing herbs:"
    respond "   #{$clean_lich_char}#{Script.current.name} fill"
    respond
    respond "To stock herbs for a big hunt (purchase multiple doses of herbs):"
    respond "   #{$clean_lich_char}#{Script.current.name} stock"
    respond
    respond "Optionally you can specify if you only want herbs or potions:"
    respond "   #{$clean_lich_char}#{Script.current.name} stock [herbs|potions]"
    respond
    respond "Additionally, you can specify if you only want a particular herb stocked:"
    respond "   #{$clean_lich_char}#{Script.current.name} stock major head wound <- to stock stem only"
    respond
    respond "To look up what herbs heal what (to help with the preceding command):"
    respond "   #{$clean_lich_char}#{Script.current.name} list"
    respond
    respond "To use the herbs on a bench or something:"
    respond "   #{$clean_lich_char}#{Script.current.name} on bench"
    respond "     or"
    respond "   #{$clean_lich_char}#{Script.current.name} behind altar"
    respond
    respond "To use the herbs on a bench without picking up the edible herbs:"
    respond "   #{$clean_lich_char}#{Script.current.name} on bench --no-get"
    respond
    respond "To heal your Adventurer's Guild escort (not well tested):"
    respond "   #{$clean_lich_char}#{Script.current.name} escort"
    respond
    respond "Options (add these to the end of the command; these override default options):"
    respond "   --buy=<on/off>         Go to the herbalist to buy herbs if needed"
    respond "   --mending=<on/off>     Use sigil of mending before using herbs"
    respond "   --skipscars=<on/off>   Skip rank 1 scar healing"
    respond
    respond "Change default options (so you don't have to specify the option every time):"
    respond "   #{$clean_lich_char}#{Script.current.name} set buy <on/off>           same as above"
    respond "   #{$clean_lich_char}#{Script.current.name} set mending <on/off>       same as above"
    respond "   #{$clean_lich_char}#{Script.current.name} set skipscars <on/off>     same as above"
    respond "   #{$clean_lich_char}#{Script.current.name} set herbsack <container>   sets which container you use if one isn't"
    respond "                                        specified on the command line"
  end

  def self.print_herb_list();
    known_herbs = $known_herbs.dup
    if (Script.current.vars[0] =~ /major|severed|missing/i) and (Script.current.vars[0] !~ /minor/i)
      known_herbs.delete_if { |herb| herb[:type] !~ /major|severed|missing/i }
    elsif (Script.current.vars[0] =~ /minor/i) and (Script.current.vars[0] !~ /major|severed|missing/i)
      known_herbs.delete_if { |herb| herb[:type] !~ /minor/ }
    end
    if (Script.current.vars[0] =~ /wound/i) and (Script.current.vars[0] !~ /scar|missing|severed/i)
      known_herbs.delete_if { |herb| herb[:type] !~ /wound/ }
    elsif (Script.current.vars[0] =~ /scar|missing|severed/i) and (Script.current.vars[0] !~ /wound/i)
      known_herbs.delete_if { |herb| herb[:type] !~ /scar|missing|severed/ }
    end
    if Script.current.vars[0] =~ /head|neck|organ|limb|leg|arm|hand|nerve|eye|blood|health|poison|posion|disease/
      known_herbs.delete_if { |herb| herb[:type] =~ /head/ } unless Script.current.vars[0] =~ /head|neck/
      known_herbs.delete_if { |herb| herb[:type] =~ /organ|eye/ } unless Script.current.vars[0] =~ /organ|eye/
      known_herbs.delete_if { |herb| herb[:type] =~ /limb/ } unless Script.current.vars[0] =~ /limb|leg|arm|hand/
      known_herbs.delete_if { |herb| herb[:type] =~ /nerve/ } unless Script.current.vars[0] =~ /nerve/
      known_herbs.delete_if { |herb| herb[:type] =~ /blood/ } unless Script.current.vars[0] =~ /blood|health/
      known_herbs.delete_if { |herb| herb[:type] =~ /poison/ } unless Script.current.vars[0] =~ /poison|posion/
      known_herbs.delete_if { |herb| herb[:type] =~ /disease/ } unless Script.current.vars[0] =~ /disease/
    end
    list = Hash.new
    for herb in known_herbs
      list[herb[:type]] ||= Array.new
      list[herb[:type]].push(herb[:name]) if !list[herb[:type]].include?(herb[:name]);
    end
    output = "\n"
    for type, herbs in list
      output.concat monsterbold_start + "#{type}:" + monsterbold_end + " #{herbs.join(', ')}\n"
    end
    output.concat "\n"
    if defined?(_respond)
      _respond output
    else
      puts output
    end
  end;

  def self.set_herbsack();
    if Script.current.vars[2] == 'herbsack'
      old_herbsack = UserVars.herbsack
      if Script.current.vars[3]
        name = Script.current.vars[3..-1].join(' ')
        obj_list = GameObj.inv.find_all { |obj| obj.noun == name }
        if obj_list.empty?
          obj_list = GameObj.inv.find_all { |obj| obj.name == name }
        end
        if obj_list.empty?
          obj_list = GameObj.inv.find_all { |obj| obj.name =~ /\b#{Regexp.escape(name)}$/i }
        end
        if obj_list.empty?
          obj_list = GameObj.inv.find_all { |obj| obj.name =~ /\b#{name.split(' ').collect { |n| Regexp.escape(n) }.join(".*\\b")}/i }
        end
        if obj_list.empty?
          echo "error: failed to find a container in your inventory by the name of \"#{name}\""
        elsif obj_list.length > 1
          echo "error: multiple containers in your inventory match the name \"#{name}\""
        else
          UserVars.herbsack = name
          _respond "#{Script.current.name} setting saved: herbsack is now #{self.monsterbold(name)}.#{old_herbsack.nil? ? "" : " (previous value: '#{old_herbsack}')"}"
        end
      else
        echo 'error: no container name given'
      end
    end
  end;

  def self.set_preferences(var_name,var_value,save=false);
    name = @var_names[var_name.downcase];
    value = @fix_option[var_value.downcase];
    echo "unknown setting #{var_name}" if name.nil?;
    echo "unknown value #{var_value} for #{var_name}" if value.nil?;
    return false if name.nil? or value.nil?;
    instance_variable_set("@#{name}", value)
    if save == false;
      #_respond "#{Script.current.name} override: #{self.monsterbold(var_name)} set to #{self.monsterbold(value.inspect)}."
      return 
    end
    old_value = CharSettings[name]; 
    if value.inspect != old_value.inspect
      CharSettings[name] = value;
      _respond "#{Script.current.name} setting saved: #{self.monsterbold(var_name)} is now #{self.monsterbold(value.inspect)}. #{old_value.nil? ? "" : " (previous value: #{old_value})"}";
    end;
  end;

  #------------------------------------------------------------------------------#
  # fill
  #------------------------------------------------------------------------------#
  def self.fill_herbs();
    # 5-7 doses: There is a good bit left in the rose-marrow potion.
    # 3-4 doses: There is a small amount in the rose-marrow potion.
    # 1-2 doses: There is just a little left in the rose-marrow potion.
    @done_empty_hands = false
    self.assert_herbsack_var;
    if @herb_container.nil?
      @herb_container = self.find_herbsack
    end
    if @herb_container.contents.nil?
      open_result = dothistimeout "open ##{@herb_container.id}", 10, @open_regex
      if open_result =~ /^You open/
        @close_herbsack = true
      else
        dothistimeout "look in ##{@herb_container.id}", 10, /In the .*? you see/
        if @herb_container.contents.nil?
          echo 'fixme 2'
          exit
        end
      end
    end
    if checkright
      if GameObj.right_hand.type =~ /herb/
        self.drag_to_container(GameObj.right_hand.id,@herb_container.id,@preposition)
      else
        empty_hands
        @done_empty_hands = true
      end
    end
    if checkleft
      if GameObj.left_hand.type =~ /herb/
        self.drag_to_container(GameObj.left_hand.id,@herb_container.id,@preposition)
      else
        empty_hands
        @done_empty_hands = true
      end
    end
    herb_type_fill = []
    for herb_type in ['blood', 'major head wound', 'minor head wound', 'major head scar', 'minor head scar', 'major organ wound', 'minor organ wound', 'major organ scar', 'minor organ scar', 'missing eye', 'major limb wound', 'minor limb wound', 'major limb scar', 'minor limb scar', 'severed limb', 'major nerve wound', 'minor nerve wound', 'major nerve scar', 'minor nerve scar']
      unless @herb_container.contents.any? { |obj| $known_herbs.any? { |herb| (herb[:name] == obj.name || herb[:short_name] == obj.name) and herb[:type] == herb_type } }
        herb_type_fill.push(herb_type)
      end
    end
    herb_type_fill.delete('minor head wound') if Room.current.location =~ /River's Rest/
    unless herb_type_fill.empty?
      unless @silvers
        @silvers = self.check_silver();
      end
      unless @silvers > 4000
        self.withdraw
      end
      self.go_to_herbalist if !(Room.current.tags.include?('herbalist'))
      @herb_shop_menu = self.read_menu
      herb_type_fill.each { |herb_type|
        herb_name = @herb_shop_menu.keys.find { |name| $known_herbs.any? { |h| (h[:type] == herb_type) and (name =~ /#{h[:name]}/ or name =~ /#{h[:name].sub(/sticky |gooey | green| fragrant| shiny| dirty/, '')}/) } }
        unless order_number = @herb_shop_menu[herb_name]
          echo "error: failed to find a herb for #{herb_type} in the menu"
          exit
        end
        dothistimeout "order #{order_number}", 3, /BUY/
        buy_result = dothistimeout 'buy', 3, /Sold for [0-9,]+ silver|^But you do not have enough silver!/
        if buy_result =~ /Sold for ([0-9,]+) silver/
          @silvers -= $1.gsub(',', '').to_i
          if checkright
            herb = GameObj.right_hand
            dothistimeout "_drag ##{herb.id} ##{@herb_container.id}", 5, @put_regex
            if herb_info = $known_herbs.find { |h| h[:name] == herb.name }
              $eherbs_measure[herb.id] = herb_info[:store_doses]
            end
          end
          if checkleft
            herb = GameObj.left_hand
            dothistimeout "_drag ##{herb.id} ##{@herb_container.id}", 5, @put_regex
            if herb_info = $known_herbs.find { |h| h[:name] =~ /#{herb.name}$/ }
              $eherbs_measure[herb.id] = herb_info[:store_doses]
            end
          end

        elsif buy_result =~ /^But you do not have enough silver!/
          self.withdraw
          self.go_to_herbalist if !(Room.current.tags.include?('herbalist'))
          return self.fill_herbs
        else
          @silvers = self.check_silver();
        end
      }

      fput "close ##{@herb_container.id}" if @close_herbsack
      self.deposit
      Script.run('go2', @start_room.id.to_s) if Room.current.id != @start_room.id
      fill_hands if @done_empty_hands
      exit
    else
      _respond self.monsterbold('Done - you have one of each herb available at this location.'); _respond
      exit
    end
  end

  #------------------------------------------------------------------------------#
  # stock
  #------------------------------------------------------------------------------#
  def self.stock_herbs();
    self.assert_herbsack_var;
    if @herb_container.nil?
      @herb_container = self.find_herbsack
    end
    if @herb_container.contents.nil?
      open_result = dothistimeout "open ##{@herb_container.id}", 10, @open_regex
      if open_result =~ /^You open/
        @close_herbsack = true
      else
        dothistimeout "look in ##{@herb_container.id}", 10, /In the .*? you see|In the .*?\:/
        if @herb_container.contents.nil?
          echo "error: timeout while trying to look in herb container (#{@herb_container.name}, #{@herb_container.id})"
          exit
        end
      end
    end
    if Script.current.vars[2].nil? or (Script.current.vars[2].downcase =~ /potions|herbs|major|minor|missing|severed|blood/)
      # The distinction of only edible herbs for certain wounds was lost with Teras.
      # This prevented the script from stocking anywhere but a few locations.  Now,
      # the script deals in categories rather than specific names, and can stock
      # anywhere.
      @shopping_list = Array.new
      herb_type_list = ['blood', 'major head wound', 'minor head scar', 'major organ wound', 'minor organ wound', 'major limb wound', 'minor limb wound', 'major limb scar', 'minor limb scar', 'severed limb', 'minor nerve wound', 'major nerve scar', 'minor nerve scar']
      potion_type_list = ['major head scar', 'minor head wound', 'major nerve wound', 'minor organ scar', 'major organ scar', 'missing eye']
      if Script.current.vars[2].downcase == 'potions'
        seek_type_list = potion_type_list
      elsif Script.current.vars[2].downcase == 'herbs'
        seek_type_list = herb_type_list
      elsif Script.current.vars[0].downcase =~ /major|minor|missing|severed|blood/
        Script.current.vars.delete_if { |var| var =~ /^stock$/i }
        Script.current.vars[0] = Script.current.vars[1..-1].join(' ')
        seek_type_list = [Script.current.vars[0]]
      else
        seek_type_list = potion_type_list + herb_type_list
      end
      @done_empty_hand = false

      # take stock of current herbs in herb_container, and populate @shopping_list
      unless Room.current.location =~ /Icemule Trace|the Pinefar Trading Post|the town of Kharam-Dzu|Ta'Illistim|Cysaegir|the hamlet of Ravelin|Zul Logoth/
        seek_type_list.delete('minor head wound') if Room.current.location =~ /River's Rest/
        self.get_current_stock(seek_type_list)
        self.stock_requested_herbs unless @shopping_list.empty?
      else
        _respond self.monsterbold('This location only uses @drinkable or non-bundling herbs, so bundling does not work.'); _respond
        _respond self.monsterbold('You should use the ') + "#{$clean_lich_char}#{Script.current.name} fill" + self.monsterbold(' feature for this location.'); _respond
      end
      dothistimeout "put ##{GameObj.right_hand.id} in ##{@herb_container.id}", 5, @put_regex if checkright
      dothistimeout "put ##{GameObj.left_hand.id} in ##{@herb_container.id}", 5, @put_regex if checkleft

      fill_hands if @done_empty_hand
      self.deposit
      unless Room.current.id == @start_room.id
        Script.run('go2', @start_room.id.to_s)
      end
    end
    exit
  end;

  #------------------------------------------------------------------------------#
  # escort
  #------------------------------------------------------------------------------#
  def self.escort;
    if Script.current.vars[2]
      unless escort = GameObj.npcs.find { |npc| (npc.id == Script.current.vars[2]) or (npc.noun == Script.current.vars[2]) }
        echo "Failed to find an npc with id or noun #{Script.current.vars[2]}."
        exit
      end
    else
      unless escort = GameObj.npcs.find { |npc| npc.type =~ /escort/ }
        echo "Failed to find an escort."
        exit
      end
    end
    if @herb_container.nil?
      @herb_container = self.find_herbsack
    end
    if @herb_container.contents.nil?
      open_result = dothistimeout "open ##{@herb_container.id}", 10, @open_regex
      if open_result =~ /^You open/
        @close_herbsack = true
      else
        dothistimeout "look in ##{@herb_container.id}", 10, /In the .*? you see|In the .*?\:/
        if @herb_container.contents.nil?
          echo "error: failed to find herb container contents (#{@herb_container.name}, #{@herb_container.id})"
          exit
        end
      end
    end
    look_result = dothistimeout "look ##{escort.id}", 10, /^(?:She|He) appears to be in good shape\.|^(?:She|He) has|^I could not find what you were referring to\./
    if look_result.nil?
      echo "error: timeout while trying to look at escort (#{escort.name}, #{escort.id})"
    elsif look_result =~ /^I could not find what you were referring to\./
      echo "error: can't see escort"
    elsif look_result =~ /^(?:She|He) appears to be in good shape\./
      echo 'nothing to do'
    elsif look_result =~ /^(?:She|He) has/
      escort_injuries = Array.new
      if look_result =~ /severe head trauma and bleeding from the ears/
        escort_injuries.push('major head wound')
        escort_injuries.push('major head wound')
        escort_injuries.push('minor head wound')
      end
      if look_result =~ /minor lacerations about the head and a possible mild concussion/
        escort_injuries.push('major head wound')
        escort_injuries.push('minor head wound')
      end
      if look_result =~ /snapped bones and serious bleeding from the neck/
        escort_injuries.push('major head wound')
        escort_injuries.push('major head wound')
        escort_injuries.push('minor head wound')
      end
      if look_result =~ /moderate bleeding from (?:his|her) neck/
        escort_injuries.push('major head wound')
        escort_injuries.push('minor head wound')
      end
      if look_result =~ /deep gashes and serious bleeding from (?:his|her) chest/
        escort_injuries.push('major organ wound')
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /deep lacerations across (?:his|her) chest/
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /deep gashes and serious bleeding from (?:his|her) abdomen/
        escort_injuries.push('major organ wound')
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /deep lacerations across (?:his|her) abdomen/
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /deep gashes and serious bleeding from (?:his|her) back/
        escort_injuries.push('major organ wound')
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /deep lacerations across (?:his|her) back/
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a blinded right eye/
        #        escort_injuries.push('missing eye')
        escort_injuries.push('major organ wound')
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a blinded left eye/
        #        escort_injuries.push('missing eye')
        escort_injuries.push('major organ wound')
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a swollen right eye/
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a swollen left eye/
        escort_injuries.push('major organ wound')
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a completely severed right leg/
        escort_injuries.push('major limb wound')
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a completely severed left leg/
        escort_injuries.push('major limb wound')
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a completely severed right arm/
        escort_injuries.push('major limb wound')
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a completely severed left arm/
        escort_injuries.push('major limb wound')
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a completely severed right hand/
        escort_injuries.push('major limb wound')
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a completely severed left hand/
        escort_injuries.push('major limb wound')
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a fractured and bleeding right leg/
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a fractured and bleeding left leg/
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a fractured and bleeding right arm/
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a fractured and bleeding left arm/
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a fractured and bleeding right hand/
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a fractured and bleeding left hand/
        escort_injuries.push('major limb wound')
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a case of uncontrollable convulsions/
        escort_injuries.push('major nerve wound')
        escort_injuries.push('minor nerve wound')
      end
      if look_result =~ /a case of sporadic convulsions/
        escort_injuries.push('major nerve wound')
        escort_injuries.push('minor nerve wound')
      end
      if look_result =~ /minor bruises about the head/
        escort_injuries.push('minor head wound')
      end
      if look_result =~ /minor bruises on (?:his|her) neck/
        escort_injuries.push('minor head wound')
      end
      if look_result =~ /minor cuts and bruises on (?:his|her) chest/
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /minor cuts and bruises on (?:his|her) abdomen/
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /minor cuts and bruises on (?:his|her) back/
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a bruised right eye/
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /a bruised left eye/
        escort_injuries.push('minor organ wound')
      end
      if look_result =~ /some minor cuts and bruises on (?:his|her) right leg/
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /some minor cuts and bruises on (?:his|her) left leg/
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /some minor cuts and bruises on (?:his|her) right arm/
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /some minor cuts and bruises on (?:his|her) left arm/
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /some minor cuts and bruises on (?:his|her) right hand/
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /some minor cuts and bruises on (?:his|her) left hand/
        escort_injuries.push('minor limb wound')
      end
      if look_result =~ /a strange case of muscle twitching/
        escort_injuries.push('minor nerve wound')
      end
      echo escort_injuries.inspect
      empty_right_hand
      for herb_type in escort_injuries
        herb = nil
        if $known_herbs.any? { |h| h[:type] == herb_type and (h[:name] == GameObj.right_hand.name or (h[:short_name] and h[:short_name] == GameObj.right_hand.name)) }
          herb = GameObj.right_hand
        elsif $known_herbs.any? { |h| h[:type] == herb_type and (h[:name] == GameObj.left_hand.name or (h[:short_name] and h[:short_name] == GameObj.left_hand.name)) }
          herb = GameObj.left_hand
        else
          self.stow_herb
          if herb = @herb_container.contents.find { |i| $known_herbs.find { |h| (h[:name] == i.name) and h[:type] == herb_type } }
            @used_herbs.push(herb.id) unless @used_herbs.include?(herb.id)
            get_result = dothistimeout "get ##{herb.id}", 5, @get_regex
            if get_result.nil? or (get_result =~ /^Get what\?/)
              echo "error: timeout while trying to get herb (#{herb.name}, #{herb.id})"
              dothistimeout "close ##{@herb_container.id}", 5, @close_regex if @close_herbsack
              exit
            elsif get_result =~ /^You need a free hand for that\./
              echo 'fixme 28382'
              dothistimeout "close ##{@herb_container.id}", 5, @close_regex if @close_herbsack
              exit
            end
          end
        end
        if herb
          dothistimeout "give ##{escort.id}", 10, /accepts your .* hands it back to you|ignores your offer/
        end
      end
      self.stow_herb
      fill_right_hand
    end
    if @close_herbsack
      dothistimeout "close ##{@herb_container.id}", 5, @close_regex
    end
    exit
  end;

  def self.herb_container_contents_load(preposition = nil, container_name = nil);
    preposition = @preposition if preposition.nil?;
    container_name = Script.current.vars[0] if container_name.nil?;
    save_want_downstream = Script.current.want_downstream;
    save_want_downstream_xml = Script.current.want_downstream_xml;
    Script.current.want_downstream = false;
    Script.current.want_downstream_xml = true;
    result = dothisquiet("look #{@preposition || 'in'} #{container_name}", 5, /(In|On|Under|Behind) .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a|There is nothing/, true).join(" ");
    Script.current.want_downstream_xml = save_want_downstream_xml;
    Script.current.want_downstream = save_want_downstream;
    if result =~ /^<.*?>(In|On) .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a/
      @preposition = $1.downcase
      @herb_container = GameObj.new($2, $3, $4)
    elsif result =~ /(Under|Behind) .*?exist="(\-?\d+)" noun="(.*?)">(.*?)<\/a>(?::| you see )(.*?)$/
      @preposition = $1.downcase
      @herb_container = GameObj.new($2, $3, $4)
      result_contents = $5
      contents = [];
      result_contents.scan(/<a exist="(.*?)" noun="(.*?)">(.*?)<\/a>/).each { |exist,noun,name|
        contents.push(GameObj.new_inv(exist,noun,name,container = @herb_container.id.to_s))
      }
      return contents
    end
    return @herb_container.contents
  end

  def self.boldif(condition, text);
      return self.format_monsterbold_noescape(text) if condition;
      return text;
  end;

  def self.item_link(id,noun,name,longdesc = nil);
    return "<a exist=\"#{id}\" noun=\"#{noun}\">#{name}</a>#{longdesc.nil? ? "" : " #{longdesc}"}"
  end

  def self.check_herbs_in_container(preposition = nil, container_name = nil);
    Script.current.vars.delete_if { |var| var =~ /^check$/i }
    Script.current.vars[0] = Script.current.vars[1..-1].join(' ');
    if @preposition.nil? and Script.current.vars.any? { |v| v =~ /^(in|on|behind|under)$/}
      @preposition = $1.downcase
      Script.current.vars.delete_at(1)
      Script.current.vars[0] = Script.current.vars[1..-1].join(' ')
    end
    @preposition = 'in' if @preposition.nil?
    preposition = @preposition if preposition.nil?;


    container_name = Script.current.vars[0] if container_name.nil?;
    container_name = "my "+UserVars.herbsack if container_name.nil? and !UserVars.herbsack.nil?;
    contents = self.herb_container_contents_load(preposition,container_name);

    if contents.nil?
      echo "Nothing found #{preposition} #{container_name}"
      exit
    end

    # so we can highlight relevant lines
    status_check = {}
    status_check['poison']           = checkpoison
    status_check['disease']          = checkdisease
    status_check['blood']            = ((checkhealth + 7) < maxhealth)
    status_check['minor head wound'] = [Wounds.head, Wounds.neck].include?(1)
    status_check['major head wound'] = [Wounds.head, Wounds.neck].max>1
    status_check['minor head scar']  = [Scars.head, Scars.neck].include?(1)
    status_check['major head scar']  = [Scars.head, Scars.neck].max>1
    status_check['minor nerve wound']= Wounds.nerves == 1
    status_check['major nerve wound']= Wounds.nerves > 1
    status_check['minor nerve scar'] = (Scars.nerves == 1 and Wounds.nerves == 0)
    status_check['major nerve scar'] = (Scars.nerves > 1 and Wounds.nerves == 0)
    status_check['minor organ wound']= [Wounds.chest, Wounds.torso, Wounds.back].include?(1)
    status_check['major organ wound']= [Wounds.chest, Wounds.torso, Wounds.back].max>1
    status_check['minor organ scar'] = [Scars.chest, Scars.torso, Scars.back].include?(1)
    status_check['major organ scar'] = [Scars.chest, Scars.torso, Scars.back].max>1
    status_check['missing eye']      = [Scars.reye, Scars.leye].max > 2
    status_check['minor limb wound'] = [Wounds.rhand, Wounds.rarm, Wounds.rleg, Wounds.lhand, Wounds.larm, Wounds.lleg].include?(1)
    status_check['major limb wound'] = [Wounds.rhand, Wounds.rarm, Wounds.rleg, Wounds.lhand, Wounds.larm, Wounds.lleg].max > 1
    status_check['minor limb scar']  = [Scars.rhand, Scars.rarm, Scars.rleg, Scars.lhand, Scars.larm, Scars.lleg].include?(1)
    status_check['major limb scar']  = [Scars.rhand, Scars.rarm, Scars.rleg, Scars.lhand, Scars.larm, Scars.lleg].include?(2)
    status_check['severed limb']     = [Scars.rhand, Scars.rarm, Scars.rleg, Scars.lhand, Scars.larm, Scars.lleg].include?(3)
    status_check['raisedead']        = checkdead
    status_check['lifekeep']         = checkdead

    # check contents against known herbs
    herb_types = ['poison', 'disease', 'blood', 'minor head wound', 'major head wound', 'minor head scar', 'major head scar', 'minor nerve wound', 'major nerve wound', 'minor nerve scar', 'major nerve scar', 'minor organ wound', 'major organ wound', 'minor organ scar', 'major organ scar',  'missing eye', 'minor limb wound', 'major limb wound', 'minor limb scar', 'major limb scar', 'severed limb']
    $known_herbs.each { |h| herb_types << h[:type] if !herb_types.include?(h[:type])};
    check_list = {};
    herb_types.each {|t| check_list[t] = {:count => 0}};
    @herb_container.contents.each { |obj|
      h = $known_herbs.find { |h| (h[:name] == obj.name) }
      if h
        n = h[:name]
        t = h[:type]
        check_list[t][:count] += 1
        check_list[t][:first] = self.item_link(obj.id, obj.noun, obj.name) if check_list[t][:first].nil?
      end
    }
    # format and output
    max_type_length = herb_types.max_by{|i| i.length || 1 }.length + 2
    output = []
    output << %{<output class="mono" />}

    table_format = " | %-#{max_type_length-2}s | %5s | %s"
    table_line   = " +#{"-"*max_type_length}+#{"-"*7}+#{"-"*35}"

    output << table_line
    output << " | Herbs found #{@preposition} #{self.item_link(@herb_container.id,@herb_container.noun,@herb_container.name)} by type:"
    output << table_line
    output << table_format % ['herb type','count', 'first']
    output << table_line
    check_list.each { |type, values|
      output <<  self.boldif(status_check[type],table_format % [type,(values[:count] == 0 ? "" : values[:count]), values[:first] ])
      }
    output << table_line
    output << %{<output class="" />}
    _respond output.join("\n")
    exit
  end;

  def self.blood_only();
    if ((checkhealth + 7) < maxhealth)
      if herb = @herb_container.contents.find { |i| $known_herbs.find { |h| (h[:name] == i.name || h[:short_name] == i.name) and h[:type] == 'blood' } }
        self.stow_herb
        unless @no_get and (herb.name !~ @drinkable)
          get_result = dothistimeout "get ##{herb.id}", 5, @get_regex
          if (get_result =~ /^Get what/) or get_result.nil?
            echo "error: timeout while trying to get herb (#{herb.name}, #{herb.id})"
          elsif (get_result =~ /^You need a free hand for that\.|^You need a free hand to pick that up\./) and (!checkright or !checkleft)
            herb = nil
          end
        end
      end
      if herb
        if @use_mending and (mending = Spell[9713]) and !mending.active? and mending.known? and mending.affordable?
          mending.cast
        end
        if herb.name =~ @drinkable
          use_cmd = "drink ##{herb.id}"
        else
          use_cmd = "eat ##{herb.id}"
        end
        while ((checkhealth + 7) < maxhealth)
          use_result = dothistimeout use_cmd, 5, /^You (?:manage to )?take a (?:bite|drink)/
          if use_result.nil?
            echo 'fixme 5'
            exit
          else
            @used_herbs.push(herb.id) unless @used_herbs.include?(herb.id)
            sleep 0.5
            waitrt?
          end
        end
      else
        if herb_type == 'blood'
          @skippable.push 'blood'
        end
        respond "\nMissing herb for #{herb_type}.\n\n   #{$known_herbs.find_all { |h| h[:type] == 'blood' }.collect { |h| h[:name] }.join(', ')}\n\n"
      end
    end;
  end;

  def self.use_herbs()
    missing_herbs = [];
    while (herb_type = self.next_herb_type)
      herb = nil
      if $known_herbs.any? { |h| h[:type] == herb_type and (h[:name] == GameObj.right_hand.name or (h[:short_name] == GameObj.right_hand.name)) }
        herb = GameObj.right_hand
      elsif ($known_herbs.any? { |h| h[:type] == herb_type and (h[:name] == GameObj.left_hand.name or (h[:short_name] and h[:short_name] == GameObj.left_hand.name)) })
        herb = GameObj.left_hand
      elsif ([Wounds.leftArm, Wounds.rightArm].min < 3)
        Script.run('go2', @start_room.id.to_s) if @return_to_stow and @start_room.id != Room.current.id;
        if @herb_container.contents.nil? or @herb_container.contents.empty?
          self.herb_container_contents_load;
        end
        if herb = @herb_container.contents.find { |i| $known_herbs.find { |h| (h[:name] == i.name || h[:short_name] == i.name) and h[:type] == herb_type } }
          self.stow_herb
          unless @no_get and (herb.name !~ @drinkable)
            get_result = dothistimeout "get ##{herb.id}#{@get_from}", 5, @get_regex
            if (get_result =~ /^Get what/) and @get_from.nil?
              @get_from = " from ##{@herb_container.id}"
              redo
            elsif get_result.nil? or (get_result == 'Get what?') or (get_result == "Why don't you leave some for others?")
              echo 'fixme 4'
              exit
            elsif (get_result =~ /^You need a free hand for that\.|^You need a free hand to pick that up\./) and (!checkright or !checkleft)
              herb = nil
            end
          end
        end
      end
      if @buy_missing == true and herb.nil?
        self.stow_herb
        unless @silvers
          @silvers = self.check_silver();
        end
        unless @silvers > 4000
          self.withdraw
        end

        self.go_to_herbalist if !(Room.current.tags.include?('herbalist'));
        self.buy_herb(herb_type);
        if $known_herbs.any? { |info| info[:name] =~ /#{GameObj.right_hand.name}/ }
          herb = GameObj.right_hand
        elsif $known_herbs.any? { |info| info[:name] =~ /#{GameObj.left_hand.name}/ }
          herb = GameObj.left_hand
        else
          echo 'fixme: 6'
          @buy_missing = false
        end
      end
      if herb
        if @use_mending and (mending = Spell[9713]) and !mending.active? and mending.known? and mending.affordable?
          mending.cast
        end
        @used_herbs.push(herb.id) unless @used_herbs.include?(herb.id)
        if herb.name =~ @drinkable
          use_cmd = "drink ##{herb.id}"
        else
          use_cmd = "eat ##{herb.id}"
        end
        use_result = dothistimeout use_cmd, 5, /^You (?:manage to )?take a (?:bite|drink)/
        if use_result.nil?
          echo 'fixme 5'
          exit
        else
          sleep 0.5
          waitrt?
        end
      else
        if herb_type =~ /head/
          @skippable.push 'head'
          @skippable.push 'neck'
        elsif herb_type =~ /organ|missing eye/
          @skippable.push 'torso'
        elsif herb_type =~ /limb/
          @skippable.push 'limbs'
        elsif herb_type =~ /nerve/
          @skippable.push 'nerves'
        elsif herb_type == 'blood'
          @skippable.push 'blood'
        else
          @skippable.push herb_type
        end
        respond "\nMissing herb for #{herb_type}.\n\n   #{$known_herbs.find_all { |h| h[:type] == herb_type }.collect { |h| h[:name] }.join(', ')}\n\n"
      end
    end
  end;

  # start of user input processing
  #------------------------------------------------------------------------------#
  # help / print / preferences
  #------------------------------------------------------------------------------#

  if Script.current.vars[0] =~ /^-?-?help/i
    self.print_help;
    exit;
  elsif Script.current.vars[1] =~ /^list$/i
    self.print_herb_list();
    exit;
  elsif (Script.current.vars[1].downcase == 'set' and Script.current.vars[2].downcase == 'herbsack')
    self.set_herbsack;
  elsif Script.current.vars[1].downcase == 'set' and @var_names.keys.include?(Script.current.vars[2].downcase)
    self.set_preferences(Script.current.vars[2], Script.current.vars[3], true);
    exit;
  elsif Script.current.vars[1] =~ /^(#{@var_names.keys.join('|')})=(on|off|true|false|yes|no)$/i
    self.set_preferences($1, $2, false);
    Script.current.vars.delete_at(1);
    exit;
  end

  #------------------------------------------------------------------------------#
  # more preferences, and no_get
  #------------------------------------------------------------------------------#
  Script.current.vars[1..-1].each { |v|
    if v =~ /^--(#{@var_names.keys.join('|')})=(on|off|true|false|yes|no)$/i
      self.set_preferences($1, $2, false);
      Script.current.vars.delete_if { |v| v == "--#{$1}=#{$2}" }
    end
  }
  Script.current.vars[0] = Script.current.vars[1..-1].join(' ')
  if Script.current.vars.any? { |var| var =~ /^(?:--)?no-?get$/i }
    @no_get = true
    Script.current.vars.delete_if { |var| var =~ /^(?:--)?no-?get$/i }
    Script.current.vars[0] = Script.current.vars[1..-1].join(' ')
  else
    @no_get = false
  end
  if Script.current.vars.any? { |var| var =~ /^blood$/i } # and not Script.current.vars.any? { |var| var =~ /^stock blood/ }
    @blood_only = true
    Script.current.vars.delete_if { |var| var =~ /^blood$/i }
    Script.current.vars[0] = Script.current.vars[1..-1].join(' ')
  end
  if Script.current.vars[1].downcase == 'escort'
    self.escort;
  elsif Script.current.vars[1].downcase == 'fill'
    self.fill_herbs;
  elsif Script.current.vars[1].downcase == 'stock'
    self.stock_herbs;
  elsif Script.current.vars[1].downcase == 'check'
    self.check_herbs_in_container;
  end;

  unless ([Wounds.head, Wounds.neck, Wounds.torso, Wounds.limbs, Wounds.nerves, Scars.head, Scars.neck, Scars.torso, Scars.limbs, Scars.nerves].max > 0) or ((checkhealth + 7) < maxhealth)
  #unless XMLData.injuries.any?{|key,value| value["wound"] > 0 or value["scar"] > 0} or
    #(checkhealth + 7) < maxhealth # or checkdisease or checkpoison
    respond
    respond 'Missing herb for Hypochondriasis.'
    respond
    exit
  end

  #------------------------------------------------------------------------------#
  # ???
  #------------------------------------------------------------------------------#
  if Script.current.vars[1]
    echo "Script.current.vars[1]:#{Script.current.vars[1]}"
    @return_to_stow = true
    if Script.current.vars[1] =~ /^(in|on|behind|under)$/i
      @preposition = $1.downcase
      Script.current.vars.delete_at(1)
      Script.current.vars[0] = Script.current.vars[1..-1].join(' ')
    end
    if Script.current.vars[1] =~ /^\#\-?[0-9]+$/
      @herb_container = GameObj.new(Script.current.vars[1].sub('#', ''), '', '')
    elsif Script.current.vars[1]
      @herb_container = (GameObj.loot.find { |o| o.name =~ /#{Script.current.vars[0]}/ } || GameObj.room_desc.find { |o| o.name =~ /#{Script.current.vars[0]}/ })
      GameObj.delete_container(@herb_container.id) if @herb_container and @preposition =~ /under|behind/i;
      #respond "@herb_container:#{@herb_container}"
      unless @herb_container
        self.herb_container_contents_load();
      end
    elsif UserVars.herbsack.nil? or UserVars.herbsack.empty?
      echo "error: no herbsack set or specified on the command line"
      eixt
    else
      if @herb_container.nil?
        @herb_container = self.find_herbsack
      end
    end
    if @preposition.nil?
      for prep in ['in', 'on', 'under', 'behind']
        look_result = dothistimeout "look #{prep} ##{@herb_container.id}", 5, /(?:In|On|Under|Behind) .*? you see|There is nothing|^That is closed\.$|^What were you referring to\?|^I could not find what you were referring to\./
        if look_result =~ /^(?:In|On|Under|Behind) .*? you see/
          @preposition = $1.downcase
          break
        elsif look_result =~ /^That is closed\./
          open_result = dothistimeout "open ##{@herb_container.id}", 5, @open_regex
          @close_herbsack = true
          redo if open_result =~ /^You open/
        end
      end
      if @preposition.nil?
        echo 'fixme'
        exit
      end
    end
    if @herb_container.contents.nil?
      open_result = dothistimeout "open ##{@herb_container.id}", 10, @open_regex
      if open_result =~ /^You open/
        @close_herbsack = true
      else
        #dothistimeout "look #{@preposition} ##{@herb_container.id}", 10, /(?:In|On|Under|Behind) .*? you see|^There is nothing|^What were you referring to\?|^I could not find what you were referring to\./
        self.herb_container_contents_load();
        if @herb_container.contents.nil?
          echo 'fixme 293743'
          exit
        end
      end
    end
  else
    if UserVars.herbsack.nil? or UserVars.herbsack.empty?
      echo 'no container was given and herbsack is not set'
      echo "  use  #{$clean_lich_char}#{Script.current.name} set herbsack <container name>"
      echo "  or   #{$clean_lich_char}#{Script.current.name} <in|on|behind|under> <container name>"
      exit
    end
    if @herb_container.nil?
      @herb_container = self.find_herbsack
    end
    if @herb_container.contents.nil?
      open_result = dothistimeout "open ##{@herb_container.id}", 10, @open_regex
      if open_result =~ /^You open/
        @close_herbsack = true
      else
        dothistimeout "look in ##{@herb_container.id}", 10, /In the .*? you see|In the .*?\:/
        if @herb_container.contents.nil?
          echo 'fixme 38923'
          exit
        end
      end
    end
  end

  #------------------------------------------------------------------------------#
  # use herbs
  #------------------------------------------------------------------------------#
  empty_hand  #fixme, this is just on its own

  if @blood_only == false;
    self.use_herbs();
  else
    Script.current.vars.delete_at(1);
    self.assert_herbsack_var;
    if @herb_container.nil?
      @herb_container = self.find_herbsack
    end
    if @herb_container.contents.nil?
      open_result = dothistimeout "open ##{@herb_container.id}", 10, @open_regex
      if open_result =~ /^You open/
        @close_herbsack = true
      else
        dothistimeout "look in ##{@herb_container.id}", 10, /In the .*? you see|In the .*?\:/
        if @herb_container.contents.nil?
          echo "error: timeout while trying to look in herb container (#{@herb_container.name}, #{@herb_container.id})"
          exit
        end
      end
    end
    self.blood_only();
  end;

  #------------------------------------------------------------------------------#
  # cleanup
  #------------------------------------------------------------------------------#
  self.stow_herb
  fill_hand
  dothistimeout "close ##{@herb_container.id}", 5, @close_regex if @close_herbsack
  self.deposit
  unless Room.current.id == @start_room.id
    Script.run('go2', @start_room.id.to_s)
  end

end;
