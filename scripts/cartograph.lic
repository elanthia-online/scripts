=begin
  This is the lich script for managing your Cartograph DB:

  repo: https://github.com/elanthia-online/cartograph
  Required: Lich 4.3.12
  Author: Ondreian
  version: 0.0.1-rc.2
  Tags: mapdb, cartograph
  
  v0.0.1-rc.2 - Update for Ruby v3 compatibility
  
=end

require "net/http"
require "rubygems/package"
require "benchmark"
require "zlib"
require "fileutils"
require "open-uri"
require "ostruct"
require "json"

module Cartograph
  ##
  ## contextual logging
  ##
  module Log  
    def self.out(msg, label: :debug)
      return _write _view(msg, label) unless msg.is_a?(Exception)
      ## pretty-print exception
      _write _view(msg.message, label)
      msg.backtrace.to_a.slice(0..5).each do |frame| _write _view(frame, label) end
    end

    def self._write(line)
      if Script.current.vars.include?("--headless") or not defined?(:_respond)
        $stdout.write(line + "\n")
      elsif line.include?("<") and line.include?(">")
        respond(line)
      else
        _respond Preset.as(:debug, line)
      end
    end

    def self._view(msg, label)
      label = [Script.current.name, label].flatten.compact.join(".")
      safe = msg.inspect
      #safe = safe.gsub("<", "&lt;").gsub(">", "&gt;") if safe.include?("<") and safe.include?(">")
      "[#{label}] #{safe}"
    end

    def self.pp(msg, label = :debug)
      respond _view(msg, label)
    end

    def self.dump(*args)
      pp(*args)
    end

    module Preset
      def self.as(kind, body)
        %[<preset id="#{kind}">#{body}</preset>]
      end
    end
  end
  ##
  ## minimal options parser
  ##
  module Opts
    FLAG_PREFIX = "--"
    
    def self.parse_command(h, c)
      h[c.to_sym] = true
    end

    def self.parse_flag(h, f)
      (name, val) = f[2..-1].split("=")
      if val.nil?
        h[name.to_sym] = true
      else
        val = val.split(",")

        h[name.to_sym] = val.size == 1 ? val.first : val
      end
    end

    def self.parse(args = Script.current.vars[1..-1])   
      @opts ||= _parse(args)
      @opts   = _parse(args) unless @script.eql?(Script.current) 
      @script = Script.current
      return @opts
    end

    def self._parse(args)
      OpenStruct.new(**args.to_a.reduce(Hash.new) do |opts, v|
        if v.start_with?(FLAG_PREFIX)
          Opts.parse_flag(opts, v)
        else
          Opts.parse_command(opts, v)
        end
        opts
      end)
    end

    def self.method_missing(method, *args)
      parse.send(method, *args)
    end
  end
end

module Cartograph
  CARTO_DIR       = File.join($data_dir, "_cartograph")
  CURRENT_MAP_DIR = File.join(Cartograph::CARTO_DIR, "current")
  STAGING_MAP_DIR = File.join(Cartograph::CARTO_DIR, "_staging")
end

module Cartograph::Updater
  REPO         = "https://github.com/elanthia-online/cartograph/tarball/master"
  CHECKSUM     = "https://raw.githubusercontent.com/elanthia-online/cartograph/master/checksum"
  RELEASES_URI = %[https://api.github.com/repos/elanthia-online/cartograph/releases]

  def self.setup_dirs()
    FileUtils.mkdir_p(Cartograph::STAGING_MAP_DIR)
  end

  def self.releases()
    @_releases ||= JSON.parse(
      Net::HTTP.get(URI.parse(RELEASES_URI)), symbolize_names: true)
  end

  def self.newest_release()
    OpenStruct.new releases.first
  end

  def self.newest_hmr()
    OpenStruct.new newest_release.assets.first
  end

  def self.get_remote_checksum()
    newest_release.tag_name.split(".").last
  end

  def self.staging_archive()
    staging_path(remote_checksum) + ".tar.gz"
  end

  def self.staging_path(*rest)
    File.join(Cartograph::STAGING_MAP_DIR, *rest)
  end

  def self.asset(*rest)
    File.join(Cartograph::CURRENT_MAP_DIR, "maps", XMLData.game.downcase, *rest)
  end

  def self.remote_checksum()
    @_remote_checksum ||= get_remote_checksum()
  end

  def self.current_checksum()
    local_checksum_file = File.join(Cartograph::CURRENT_MAP_DIR, "checksum")
    return nil unless File.exist? local_checksum_file
    File.read local_checksum_file
  end

  def self.download_mapdb()
    setup_dirs
    download = File.new(staging_archive, "wb")
    tarball_url = newest_release.tarball_url
    Log.out("... downloading tarball from #{tarball_url}", label: :download)
    stream = open URI.parse tarball_url
    download.write(stream.read)
    # extra the tarball path
    return File.basename stream.meta["content-disposition"].split(" ").last, ".tar.gz"
  end

  def self.extract_tarball_mapdb()
    Log.out("... extracting mapdb from #{staging_archive}", label: :download)
    extraction_dir = staging_path(remote_checksum)
    FileUtils.mkdir_p(extraction_dir)
    Gem::Package.new("mapdb/#{remote_checksum}").extract_tar_gz(
      File.open(staging_archive), 
      extraction_dir)
  end

  def self.download_hmr()
    new_mapdb = Dir[staging_path(remote_checksum, "/elanthia-online-cartograph-*")].first
    staging_hmr = File.join(new_mapdb, "map.hmr")
    download = File.new(staging_hmr, "wb")
    stream = open URI.parse newest_hmr.browser_download_url
    download.write(stream.read)
    Log.out("downloaded newest hmr for #{remote_checksum} to #{staging_hmr}")
  end

  def self.swap_staging_to_current()
    old_checksum = current_checksum
    new_mapdb = Dir[staging_path(remote_checksum, "/elanthia-online-cartograph-*")].first
    historical_copy = File.join(Cartograph::CARTO_DIR, "rev-#{old_checksum}")
    if File.directory? historical_copy
      historical_copy = historical_copy + "-#{Time.now.to_i}"
    end

    FileUtils.mv(Cartograph::CURRENT_MAP_DIR, historical_copy) unless old_checksum.nil?
    #Log.out("swapping #{new_mapdb} to :current")
    FileUtils.mv(new_mapdb, Cartograph::CURRENT_MAP_DIR)
    Log.out("updated mapdb from #{old_checksum || ":none"} -> #{current_checksum}", label: :ok)
  end

  def self.cleanup_stage()
    staging_dir = staging_path(current_checksum)
    staging_tarball = staging_path(current_checksum + ".tar.gz")
    FileUtils.remove_dir(staging_dir) if File.directory?(staging_dir)
    FileUtils.rm(staging_tarball) if File.exist?(staging_tarball)
    :ok
  end

  def self.try_update(force: false)
    return :noop if current_checksum.eql?(remote_checksum) and force.eql?(false)
    runtime = Benchmark.realtime { 
      download_mapdb() unless (File.exist?(staging_archive) and not force)
      extract_tarball_mapdb() unless (Dir.exist?(staging_path(remote_checksum)) and not force)
      download_hmr()
      swap_staging_to_current()
      cleanup_stage()
    }
    Log.out("updated mapdb in #{runtime.round}s", label: :perf)
    :ok
  end

  def self.update
    Log.out("comparing remote(#{remote_checksum}) against local(#{current_checksum})")
    return try_update(force: true) if Opts["force"]
    if try_update.eql?(:noop)
      Log.out("cartograph map already up to date")
    end
  end

  update() if Opts.update
end

module Cartograph
  class Graph
    @rooms        ||= {}
    @string_procs ||= {}

    def self.hmr()
      File.join(Cartograph::CARTO_DIR, "current", "map.hmr")
    end

    def self.dump()
      File.write(
        hmr,
        Marshal.dump({rooms: @rooms, string_procs: @string_procs}))
    end

    def self.rooms()
      @rooms
    end

    def self.string_procs()
      @string_procs
    end

    def self.clear()
      [@rooms, @string_procs].each(&:clear)
    end

    def self.load_room(id)
      JSON.parse File.read Cartograph.asset("rooms", "#{id}.json")
    end

    def self.load_string_proc(kind, from, to)
      from = from.to_i
      to   = to.to_i
      file = Cartograph.asset("string_procs", kind.to_s, "#{from}_#{to}.rb")
      @string_procs[kind.to_sym] ||= {}
      @string_procs[kind.to_sym][from] ||= {}
      @string_procs[kind.to_sym][from][to] = StringProc.new(%(eval File.read "#{file}"))
      return @string_procs[kind.to_sym][from][to]
    end

    def self.load_from_repo()
      Dir[Cartograph.asset("rooms", "*.json")].each do |file|
        room = load_room File.basename(file, ".json")
        @rooms[room["id"]] = room
        %w(wayto timeto).each do |kind|
          room[kind].map do |k, v|
            [k, 
              v.is_a?(Hash) ? load_string_proc(kind, room["id"], k) : v ]
          end
        end
      end
    end

    def self.load_hmr()
      Log.out("using hmr at #{hmr}", label: :hmr)
      cached = Marshal.load File.open(hmr, 'rb')
      @rooms = cached[:rooms]
      @string_procs = cached[:string_procs]
    end
      
    def self.init()
      Graph.clear()
      if File.exist?(hmr) and not Opts.marshal
        runtime = Benchmark.realtime { load_hmr }
        Log.out "marshal: loaded #{@rooms.size} rooms in #{runtime.round}s", label: :perf
      else
        runtime = Benchmark.realtime { load_from_repo }
        Graph.dump
        Log.out "json: loaded #{@rooms.size} rooms in #{runtime.round}s", label: :perf
      end
    end

    Graph.init  if Opts["graph-load"]
    Graph.dump  if Opts["graph-dump"]
    Graph.clear if Opts["graph-flush"]
  end
end
