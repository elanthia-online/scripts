=begin
  Cheat and do the EG Guidebook quest for you.

  known issues:
    - sometimes a task just doesn't complete. this was just kinda cobbled together
      but it's worked on a number of alts for me. Sometimes you just have to run it
      for a certain task multiple times. The worst culprit is chapter 8.

  examples:
    ;eg_docent help - for info on how to use this script

  version: 0.0.2
  Tags: ebon gate, eg, ebon, guidebook
  Author: Someone

  changelog:
    0.0.2 - add sanity checks for chapter 9
    0.0.1 - initial release

=end

# helper for chapter 8
# https://github.com/jeremyevans/ruby-subset_sum
class SubsetSum
  # Exception raised when timeout expires
  class TimeoutError < StandardError
  end

  # Return first subset of values that sum to want, using the meet in the
  # middle algorithm (O(n * 2^(n/2)).
  def subset_sum(values, want, max_seconds = nil)
    raise(TypeError, "values must be an array of Integers") unless values.is_a?(Array)
    raise(TypeError, "want must be an Integer") unless want.is_a?(Integer)

    # Optimization by removing 0 values and doing some simple checks
    values = values.reject { |x| x == 0 }
    values.each { |value| return [value] if value == want }
    return values if sum(values) == want
    pos, neg = values.partition { |x| x > 0 }
    sp, sn = sum(pos), sum(neg)
    return pos if sp == want
    return neg if sn == want

    # The pure ruby version
    sums = {}
    start_time = Time.now if max_seconds
    l = values.length / 2
    subsets(values[0...l]) do |subset|
      _check_timeout(start_time, max_seconds)
      sums[sum(subset)] = subset
    end
    subsets(values[l..-1]) do |subset|
      _check_timeout(start_time, max_seconds)
      if (subset2 = sums[want - sum(subset)])
        return subset2 + subset
      end
    end
    nil
  end

  private

  # Check time elapsed since start_time does not exceed max_seconds
  def _check_timeout(start_time, max_seconds)
    raise(TimeoutError, "timeout expired") if max_seconds and Time.now - start_time > max_seconds
  end

  # Yield all subsets of the array to the block.
  def subsets(array, skip = 0, &block)
    yield(array)
    (array.length - 1).downto(skip) { |i| subsets(array[0...i] + array[i + 1..-1], i, &block) }
  end

  # Return the sum of the values.
  def sum(values)
    values.inject(0) { |x, y| x += y } # rubocop:disable Lint/UselessAssignment
  end
end

class GuidebookQuest
  def initialize
    @rooms = { 'c1_guidestart'           => 'u8084004',
               'c2_rooms'                => ["healer", "gemshop", "pawnshop", "alchemist", "bank", "constable"],
               'c3_painting_1'           => 'u8087149',
               'c3_painting_2'           => 'u8087102',
               'c3_painting_3'           => 'u8087163',
               'c4_convict'              => 'u8083134',
               'c5_bear'                 => 'u8083123',
               'c5_fountain'             => 'u8083119',
               'c5_french'               => 'u8083122',
               'c5_destroyed'            => 'u8083116',
               'c6_legion'               => 'u8083102',
               'c6_site'                 => 'u8083326',
               'c6_residences_1'         => 'u8083096',
               'c6_residences_2'         => 'u8083089',
               'c6_residences_3'         => 'u8083098',
               'c6_residences_4'         => 'u8083097',
               'c6_residences_5'         => 'u8083101',
               'c7_snowkin'              => 'u8083070',
               'c8_scale'                => 'u8083068',
               'c9_tombstone'            => 'u8083327',
               'c9_grave_eternal_lilies' => 'u8083327',
               'c10_lily'                => 'u8083275',
               'c11_boatsman'            => 'u8083384',
               'c12_scarecrow'           => 'u8083174',
               'c13_patch'               => 'u8083177',
               'c13_carving_room'        => 'u8083179' }
    @checks = []
    @book = [GameObj.right_hand, GameObj.left_hand].find { |o| o.noun == 'guidebook' }
  end

  def book_check
    unless @book
      echo "have your guidebook in hand to start"
      echo "If you don't have one yet do: ;#{Script.current.name} start"
      exit
    end
  end

  def get_area_rooms(area)
    area_rooms = Room.list.find_all { |r| r.location && r.location =~ /Evermore Hollow|Naidem/ && r.title[0] =~ /#{area}/ }
    return area_rooms
  end

  def find_questgiver(area, npc)
    area_rooms = get_area_rooms(area)
    echo "Lazily searching #{area_rooms.length} rooms"
    area_rooms.each { |r|
      Script.run("go2", "u#{r.uid.first}")
      sleep 0.25
      qnpc = GameObj.npcs.find { |n| n.name =~ /#{npc}/ }
      return qnpc if qnpc
    }
  end

  def go2questroom(q_room)
    Script.run("go2", @rooms[q_room])
  end

  def status_check
    (1..13).each { |chap|
      fput "turn my guidebook to #{chap}"
      res = Lich::Util.quiet_command("read my guidebook", /~~/, /You completed this quest|incomplete/, true, 1)
      if res.any?(/You completed this quest/)
        @checks.push(true)
      elsif res.any?(/This quest is incomplete/)
        @checks.push(false)
      else
        echo "error check guidebook status"
        exit
      end
    }
    @checks.each_with_index { |r, c|
      c += 1
      if r
        _respond "#{c.to_s.rjust(2)}: COMPLETE"
      else
        _respond "#{c.to_s.rjust(2)}: X"
      end
    }
  end

  def dispatch(chapter = nil)
    if chapter =~ /^\d+$/
      missing = chapter.to_i
    else
      next_index = @checks.index(false)
      missing = (next_index + 1) unless next_index.nil?
      night_only = [9]
      if night_only.any?(missing)
        res = dothistimeout "time", 1, /It is currently/
        if res !~ /night|evening/
          echo "Skipping chapter #{missing} as it requires it to be night time to complete the task"
          next_chap = missing
          missing = @checks[next_chap..].index(false) + missing + 1
        end
      end
    end

    if missing == 1
      chapterone
    elsif missing == 2
      chaptertwo
    elsif missing == 3
      chapterthree
    elsif missing == 4
      chapterfour
    elsif missing == 5
      chapterfive
    elsif missing == 6
      chaptersix
    elsif missing == 7
      chapterseven
    elsif missing == 8
      chaptereight
    elsif missing == 9
      chapternine
    elsif missing == 10
      chapterten
    elsif missing == 11
      chaptereleven
    elsif missing == 12
      chaptertwelve
    elsif missing == 13
      chapterthirteen
    end
  end

  def spoilers
    tldr = ["get the book from the townhall. you did it!",
            "remember getting level 1 in the regular game? basically that\n(run to town shop NPCs, ask them about the quest",
            "find all the weird paintings at the hotel, go all columbo on them",
            "my regret is the skeleton doesn't also ask for a mop\n(find a 'witch', which has a different noun cause reasons, ask them for a drink)",
            "go to some rooms in this area that are mostly pretty obvious by the room titles\nbury or wave whatever Ted gave you",
            "wander around, find some old ghost stuff, go leave it on whatever dumb ghost persons dumb grave",
            "a quick quiz on weird things happening in the area",
            "wander around, dig junk out of PILEs. Find the scale in the area\nload it up with *exactly* 10 lbs",
            "find manic pixie goth dream girl an edgy flower (black vampire lily). *can only be foraged at night*",
            "find a dumb lily and drink out of it. enjoy your ecoli",
            "cruise around on the river on your boaty mcboatface and pick up some trash by OBSERVING for it randomly",
            "tap the scarecrows hat to make it blow away, then go find it and tap it again.\nnote: there will be a million hats from people who failed this scattered around",
            "make a jack-o-lantern and light it, have to find a room that doesnt already have a dozen of them"]
    tldr.each_with_index { |txt, i|
      chap = i + 1
      _respond "Chapter #{chap}:"
      _respond txt
      _respond "  important rooms:"
      @rooms.each { |rn, ruid|
        if rn =~ /c#{chap}_/
          _respond "    #{rn} => #{ruid}"
        end
      }
      _respond "_" * 80
    }
    _respond "\n\n*overall note*: many of the quests npcs / items can be in random rooms, or i was too lazy to figure out where they stay\nso for those steps this script just wanders\nthe area for that step (by location + room title) until it finds them"
  end

  def chapterone
    fput("turn my guide to 1")
    go2questroom('c1_guidestart')
    multifput "get guidebook from counter", "mark my guidebook"
  end

  def chaptertwo
    fput("turn my guide to 2")
    @rooms['c2_rooms'].each { |t|
      Script.run("go2", t)
      npc = GameObj.npcs.find_all { |n| n.id.to_i < 0 }.last
      if npc.nil?
        npc = GameObj.room_desc.find_all { |n| n.id.to_i < 0 }.last
      end
      fput "ask ##{npc.id} about quest"
    }
  end

  def chapterthree
    fput("turn my guide to 3")
    find_questgiver("Evermore Hotel", "bellhop")
    fput "ask bellhop about quest"
    (1..3).each { |i|
      go2questroom("c3_painting_#{i}")
      fput "wave my glass at painting"
    }
    find_questgiver("Evermore Hotel", "bellhop")
    fput "give my glass to bellhop"
  end

  def chapterfour
    fput("turn my guide to 4")
    go2questroom('c4_convict')
    fput "ask skeleton about quest"
    fates_rooms = get_area_rooms("Fate's Holding")
    fates_rooms.each { |r|
      Script.run("go2", "u#{r.uid.first}")
      sleep 0.25
      witch = GameObj.npcs.find { |n| n.name == "petite and waif-like gjenganger" }
      if witch
        fput "ask ##{witch.id} about drink"
        break
      end
    }
    go2questroom('c4_convict')
    fput "swap" unless checkright == "bottle"
    fput "give skeleton"
  end

  def chapterfive
    fput("turn my guide to 5")
    go2questroom('c5_bear')
    fput "stow my guidebook"
    2.times { fput("ask bear about quest") }
    room_verbs = [['c5_fountain', 'bury'],
                  ['c5_french', 'wave'],
                  ['c5_destroyed', 'wave']]
    room_verbs.each { |rv|
      qi = nil
      until qi
        qi = [GameObj.right_hand, GameObj.left_hand].reject { |n| [nil, 'monocle'].any?(n.noun) }.first
        sleep 1
      end
      r = rv[0]
      v = rv[1]
      go2questroom(r)
      fput("#{v} ##{qi.id}")
      go2questroom('c5_bear')
      2.times { fput("ask bear about quest") }
    }
    fput "get my guidebook"
  end

  def chaptersix
    fput("turn my guide to 6")
    go2questroom('c6_legion')
    fput("stow ##{@book.id}")
    2.times { fput("ask legionnaire about quest") }
    ghost_items = []
    (1..5).each { |i|
      go2questroom("c6_residences_#{i}")
      fput("observe my monocle")
      relic = nil
      until relic
        relic = [GameObj.right_hand, GameObj.left_hand].reject { |n| [nil, 'monocle'].any?(n.noun) }.first
        sleep 1
      end
      ghost_items.push(relic)
      fput("stow ##{relic.id}")
    }
    ghost_items.uniq!
    go2questroom('c6_site')
    ghost_items.each { |relic|
      fput("get ##{relic.id}")
      fput("drop ##{relic.id}")
    }
    go2questroom('c6_legion')
    fput "swap" unless checkright == 'monocle'
    fput "give legionnaire"
    fput("get ##{@book.id}")
  end

  def chapterseven
    fput("turn my guide to 7")
    snowman = find_questgiver("Winterbriar", "shambling pumpkin-headed snowman")
    fput("ask ##{snowman.id} about quest")
    answers = ["snowman", 'garden of shadows', '10', 'ianthine', 'unicorn', 'aconite']
    answers.each_with_index { |a, i|
      fput("whisper my pap #{i + 1} #{a}")
    }
    fput("swap") unless checkright == 'paper'
    fput("give ##{snowman.id}")
  end

  def chaptereight
    fput("turn my guide to 8")
    moor_rooms = get_area_rooms("Moorlyn")
    bad_moor_rooms = [8084245]
    moor_rooms.reject! { |r| bad_moor_rooms.any?(r.uid.first) }
    moor_rooms.each { |r|
      Script.run("go2", "u#{r.uid.first}")
      sleep 0.1
      if checknpcs.any?("ghoul")
        2.times { fput("ask ghoul about quest") }
        break
      end
    }
    qitem_weights = Hash.new
    weights = []
    solver = SubsetSum.new
    # may need multiple passes
    solution = nil
    7.times {
      moor_rooms.each { |r|
        Script.run("go2", r.id.to_s)
        res = dothistimeout "get pile", 1, /Get what|You reach|You already/
        if res =~ /You reach/
          sleep 0.5
          qi = [GameObj.right_hand, GameObj.left_hand].reject { |n| [nil, "guidebook"].any?(n.noun) }.first
          res = dothistimeout "weigh ##{qi.id}", 1, /weight.*pound/
          res =~ /exactly (\d+) pound/
          weights.push($1.to_i)
          qitem_weights[$1.to_i] += [qi.id]
          fput "stow ##{qi.id}"
        end
        # array of weights, target, timeout
        solution = solver.subset_sum(weights, 10, 30)
        break if solution
      }
      break if solution
    }
    go2questroom('c8_scale')
    _respond "available items:"
    _respond qitem_weights
    # array of weights, target, timeout
    solution = solver.subset_sum(weights, 10, 30)
    if solution.nil?
      echo "can't figure this out with the crap i have, go find more sorry. i'll wait around until you do"
      matchwait(/\[You have completed this quest.\]/)
    else
      solution.each { |s|
        qi = qitem_weights[s].pop()
        fput "get ##{qi}"
        fput "put ##{qi} on scale"
      }
    end
    fput "pull scale"
    qitem_weights.values.flatten.each { |qi|
      multifput "get ##{qi}", "toss ##{qi}"
    }
    fput("turn my guide to 8")
  end

  def chapternine
    unless Script.exists?("betazzherb")
      echo "This script requires ;betazzherb to continue for this chapter"
      echo "If you would like to cotinue download that script and try again"
      return false
    end
    Thread.new {
      matchwait(/^As you carefully forage around you can find no hint of what you are looking for right now, though you are fairly certain this is where it can be found/)
      before_dying {
        5.times { Lich::Messaging.msg("bold", "This step can only be completed at night!") }
      }
      Script.kill("betazzherb")
      Script.current.exit
    }
    fput("turn my guidebook to 9")
    go2questroom('c9_tombstone')
    Script.run("betazzherb", "black vampire lily 1")
    spirit = find_questgiver("Graveyard Temporalis", "veil-clad feminine spirit")
    fput("ask ##{spirit.id} about quest")
    fput "get black lily"
    fput "swap" unless checkright == 'lily'
    fput "give ##{spirit.id}"
  end

  def chapterten
    fput("turn my guidebook to 10")
    find_questgiver("Bittermere Woods", "cyan-hued spirit")
    fput "ask spirit about quest"
    go2questroom('c10_lily')
    fput "get lily"
  end

  def chaptereleven
    fput("turn my guidebook to 11")
    go2questroom('c11_boatsman')
    2.times { fput("ask boatsman about quest") }
    river_rooms = get_area_rooms("Gleyminn Anni River")
    river_rooms.each { |r|
      Script.run("go2", "u#{r.uid.first}")
      break if (fput("observe my sack") =~ /You found all of the lost items for the boatsman/)
    }
    go2questroom('c11_boatsman')
    fput "swap" unless checkright == "sack"
    fput("give boatsman")
  end

  def chaptertwelve
    fput("turn my guidebook to 12")
    ember_rooms = get_area_rooms("Ember Ridge")
    go2questroom('c12_scarecrow')
    fput "tap hat on scarecrow"
    bad_rooms = [32181]
    ember_rooms.each { |r|
      next if bad_rooms.any?(r.id)
      Script.run("go2", "u#{r.uid.first}")
      ordinals = ['', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth']
      res = nil
      until (ordinals.empty? || res =~ /You have completed this quest|What were/)
        nth = ordinals.shift()
        res = dothistimeout("tap #{nth} hat", 1, /What were|You have completed this quest|This is not the hat you need/)
      end
      break if res =~ /You have completed/
    }
    go2questroom('c12_scarecrow')
  end

  def chapterthirteen
    fput("turn my guidebook to 13")
    go2questroom('c13_patch')
    fput "get pumpkin from patch"
    fput "stow my guidebook"
    go2questroom('c13_carving_room')
    fput "kneel"
    fput "place feet"
    fput "get tool"
    fput "carve my pumpkin with my tool"
    fput "get votive from table"
    fput "put my votive in my jack"
    fput "look in my jack"
    fput "get my jack-o'-lantern"
    votive = nil
    10.times {
      sleep 0.5
      votive = GameObj.right_hand.contents.first
      break if votive
    }
    unless votive
      echo "error finding votive in my jack-o'-lantern"
      exit
    end
    gy_rooms = get_area_rooms("Graveyard Temporalis")
    moor_rooms = get_area_rooms("Moorlyn")
    fates_rooms = get_area_rooms("Fate's Holding")
    like_so_many_rooms = gy_rooms + moor_rooms + fates_rooms
    like_so_many_rooms.each { |r|
      Script.run("go2", "u#{r.uid.first}")
      res = dothistimeout "place my jack", 1, /Finding this location to be a suitable|Seeing that there are already a couple pumpkins on display/
      if res =~ /Finding this location to be a suitable/
        2.times { fput "light ##{votive.id}" }
        break
      end
    }
  end
end

if script.vars[1] == "start"
  Script.run('go2', 'u8084004')
  fput "get guidebook"
  fput "open my guide"
end
gq = GuidebookQuest.new()
if script.vars[1] =~ /^\d+$/
  gq.book_check()
  gq.dispatch(script.vars[1])
  exit
elsif script.vars[1] =~ /spoi/
  gq.spoilers()
  exit
elsif !script.vars[1] || script.vars[1] =~ /hel/
  # rubocop:disable Lint/ImplicitStringConcatenation
  gotcha = """    Sometimes a task doesn't complete. This was cobbled together as I went
    but it has worked on a number of alts for me. Sometimes you have to run it
    for a certain task multiple times. The worst culprit is chapter 8."""
  # rubocop:enable Lint/ImplicitStringConcatenation
  commands = { 'help'    => 'show this dialogue',
               'start'   => 'go pickup your guidebook to start',
               'spoiler' => "shows spoiler info for each task in case you just want some help.\n    Shows them all so, read at your own caution!",
               'status'  => 'shows current status for each chapter',
               'X'       => 'try to complete task X (where X is any number 1-13)',
               'next'    => 'try to complete the first chapter still remaining' }
  commands.each { |k, v|
    _respond ";#{Script.current.name} #{k}"
    _respond "    #{v}"
  }
  _respond "\n\n"
  Lich::Messaging.msg("bold", "***** NOTE *****")
  _respond "#{gotcha}"
  exit
elsif script.vars[1] =~ /stat|che|cha/
  gq.book_check()
  gq.status_check()
  exit
elsif script.vars[1] =~ /ne/
  gq.book_check()
  gq.status_check()
  gq.dispatch()
  exit
end
