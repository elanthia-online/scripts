=begin
    Updated version of Raffle Script by Cait to include more information.
    Includes FULL description of ticket, Prize per ticket, and ticket quantity.
    Sorts output according to time.

    ;TRAFFLE HELP - for more info

      todo: none
    author: elanthia-online
      name: traffle
      tags: raffle, raffles
   version: 2.0.0

  changelog:
    2.0 (2025-10-18)
      Complete refactor to object-oriented architecture
      Moved to TRaffle namespace
      Replaced Settings with YAML file storage
=end

require 'yaml'
require 'time'

module TRaffle
  DATA_FILE = File.join(DATA_DIR, XMLData.game, "traffle.yaml")
  LOOK_ON_EXCLUSIONS = ["disk", "sign", "list", "kitten", "cat", "spirit",
                        "falcon", "placard", "rat", "wolf", "raven", "figure", "hamster"]
  TIME_LIMIT = 15 # minutes to remove old raffles

  class RaffleEntry
    attr_accessor :pretty_date, :description, :room_name, :time, :room_id,
                  :cost, :winners, :table_description

    def initialize(pretty_date, description, room_name, time, room_id, cost, winners, table_description)
      @pretty_date = pretty_date
      @description = description
      @room_name = room_name
      @time = time
      @room_id = room_id
      @cost = cost
      @winners = winners
      @table_description = table_description
    end

    def to_a
      [pretty_date, description, room_name, time, room_id, cost, winners, table_description]
    end

    def self.from_array(arr)
      new(*arr)
    end

    def time_remaining
      @time - Time.now
    end

    def completed?
      time_remaining < 0
    end

    def formatted_cost
      @cost.to_s.reverse.gsub(/(\d{3})(?=\d)/, '\\1,').reverse
    end
  end

  class Storage
    def self.load
      return [] unless File.exist?(DATA_FILE)

      begin
        data = YAML.load_file(DATA_FILE, permitted_classes: [Time, Symbol])
        return [] unless data.is_a?(Array)

        # Convert loaded data back to RaffleEntry objects
        raffles = data.map do |entry|
          # Ensure time is a Time object (in case it was stored differently)
          entry[3] = Time.parse(entry[3].to_s) unless entry[3].is_a?(Time)
          RaffleEntry.from_array(entry)
        end

        echo "Loaded #{raffles.count} raffles from #{DATA_FILE}" if UserVars.traffle && UserVars.traffle[:debug_my_script]
        raffles
      rescue => e
        echo "Error loading raffle data: #{e.message}"
        []
      end
    end

    def self.save(raffles)
      FileUtils.mkdir_p(File.dirname(DATA_FILE))
      File.open(DATA_FILE, 'w') do |file|
        file.write(YAML.dump(raffles.map(&:to_a)))
      end
      echo "Saved #{raffles.count} raffles to #{DATA_FILE}" if UserVars.traffle && UserVars.traffle[:debug_my_script]
    end
  end

  class TimeFormatter
    def self.format(seconds)
      days    = (seconds / 86_400).floor
      seconds = seconds - (days * 86_400)
      hours   = (seconds / 3_600).floor
      seconds = seconds - (hours * 3_600)
      minutes = (seconds / 60).floor
      seconds = (seconds - (minutes * 60)).floor

      [days, hours, minutes, seconds]
        .zip(%w(d h m s))
        .select { |f| f.first > 0 }
        .map { |f| f.first.to_s.rjust(2, "0") + f.last }
        .reduce("") { |acc, col| acc + " " + col }
        .strip
    end
  end

  class RoomScanner
    def self.scan_room
      Script.current.want_downstream_xml = true
      room_objs = []

      line = dothistimeout "look", 1, /^<style id=""\/><style id="roomDesc"\/>.*<a\sexist="(?<id>[^"]+)"\snoun="(?<noun>[^"]+)">(?<desc>[^<]+)<\/a>|<compass><\/compass><prompt time=".*">&gt;<\/prompt>|is hovering in mid-air around/

      if line =~ /^<style id=""\/><style id="roomDesc"\/>.*<a\sexist="(?<id>[^"]+)"\snoun="(?<noun>[^"]+)">(?<desc>[^<]+)<\/a>/
        room_objs_found = line.scan(/<a\sexist="(?<id>[^"]+)"\snoun="(?<noun>[^"]+)">(?<desc>[^<]+)<\/a>/)
        room_objs_found.each do |obj_id, obj_noun, obj_desc|
          next if LOOK_ON_EXCLUSIONS.include?(obj_noun)
          room_objs << [obj_id, obj_noun, obj_desc]
        end
      end

      Script.current.want_downstream_xml = false
      room_objs
    end

    def self.find_raffles(room_objs)
      Script.current.want_downstream_xml = true
      raffles = []

      room_objs.each do |table_id, _table_noun, table_desc|
        line = dothistimeout "look on ##{table_id.to_i}", 1, /<a\sexist="(?<id>\d+)"\snoun="tickets">(?<desc>[\w\s]+)<\/a>|There is nothing on there\.|There is nothing on the .+\./

        if line =~ /<a\sexist="(?<id>\d+)"\snoun="tickets">(?<desc>[\w\s]+)<\/a>/
          raffle_found = line.scan(/<a\sexist="(?<id>\d+)"\snoun="tickets">(?<desc>[\w\s]+)<\/a>/)
          raffle_found.each do |raffle_id, raffle_desc|
            raffles << [raffle_id, raffle_desc, table_desc]
          end
        elsif line =~ /^<prompt time=".*">&gt;<\/prompt>$/
          break
        end
      end

      Script.current.want_downstream_xml = false
      raffles
    end
  end

  class RaffleParser
    def self.parse(raffle_id)
      info = {
        tickets: nil,
        item: nil,
        cost: nil,
        timeleft: 0
      }

      fput "look at ##{raffle_id.to_i}"

      loop do
        line = get

        if line =~ /The drawing will be in (?:.*) for (.*) (?:winner|winners)\./
          info[:tickets] = $1
        end

        if line =~ /The drawing for (?<tickets>\d+) winners? will be in (?:(?<hours>\d+) hours and )?(?<minutes>\d+) minutes \(at (?<date>.*?)\)\./
          matches = Regexp.last_match
          info[:tickets] = matches[:tickets]
          info[:timeleft] = (Time.parse(matches[:date]) - Time.now).to_i
          break
        end

        if line =~ /I could not find what you were referring to./
          info[:timeleft] = 0
          break
        elsif line =~ /The drawing has been held with the following winner/
          info[:timeleft] = 0
          break
        elsif line =~ /The drawing will be in ([0-9]+) (minute|minutes)/
          info[:timeleft] += $1.to_i * 60
          break
        elsif line =~ /The drawing will be in ([0-9]+) (hour|hours) and ([0-9]+) (minute|minutes)/
          info[:timeleft] += ($1.to_i * 3600) + ($3.to_i * 60)
          break
        end

        if line =~ /^The raffle is for (.*)/
          info[:item] = $1
        elsif line =~ /^Raffle for (.*)/
          info[:item] = $1
        elsif line =~ /^This raffle is (.*)/
          info[:item] = $1
        elsif line =~ /^The raffle for (.*)/
          info[:item] = $1
        elsif line =~ /raffle will receive (.*)/
          info[:item] = $1
        elsif line =~ /winner will receive (.*)/
          info[:item] = $1
        elsif line =~ /This raffle is for "(.*)"\./
          info[:item] = $1
        end

        if line =~ /^The tickets sell for (.*) silvers each./
          info[:cost] = $1
        elsif line =~ /The tickets? sell for (.*) \w+ each\./
          info[:cost] = $1
        end

        if line =~ /the drawing will be held on (.+)elven standard time \((.+)\)\./
          datestring = $2
          date = Time.parse(datestring)
          info[:timeleft] = (date - Time.now).to_i
          break
        end
      end

      info
    end
  end

  class OutputFormatter
    def format_list(raffles)
      return no_raffles_message if raffles.empty?

      output = "================"
      raffles.each_with_index do |raffle, idx|
        output += "\n<pushBold/>"
        output += "#{idx} - " if UserVars.traffle[:debug_my_script]
        output += raffle.pretty_date

        if raffle.completed?
          output += " (COMPLETED)"
        else
          output += " ("
          output += TimeFormatter.format(raffle.time_remaining)
          output += " remaining)"
        end

        output += "<popBold/>\n"
        output += raffle.room_name

        if raffle.room_id
          output += " Room#:"
          output += '<d cmd=";go2 ' + raffle.room_id.to_s + '">' + raffle.room_id.to_s + '</d>'
        end

        output += "\n"
        output += "Ticket cost: "
        output += raffle.formatted_cost
        output += " silvers | Winners: "
        output += raffle.winners.to_s
        output += "\n"
        output += "Located On: "
        output += raffle.table_description.to_s
        output += "\n"
        output += raffle.description.to_s
        output += "\n"
      end

      output += "================\n"
      output += " #{raffles.count} Total Raffles\n"
      output += "================\n"
      output
    end

    def format_wiki(raffles)
      return no_raffles_message if raffles.empty?

      output = ""
      raffles.each do |raffle|
        output += "\n==="
        output += "#{raffle.pretty_date} | #{raffle.time.strftime("%H:%M")}"
        output += "===\n<pre>"
        output += raffle.room_name
        output += "\nLich Room#:" + raffle.room_id.to_s if raffle.room_id
        output += "\n"
        output += "Ticket cost: "
        output += raffle.formatted_cost
        output += " silvers\nWinners: "
        output += raffle.winners.to_s
        output += "\n"
        output += "Located On: "
        output += raffle.table_description.to_s
        output += "\n"
        output += raffle.description.to_s
        output += "\n</pre>"
      end
      output
    end

    def format_csv(raffles)
      return no_raffles_message if raffles.empty?

      csv_file = File.join($script_dir, "raffle.csv")
      File.open(csv_file, "w") do |file|
        file.puts("Subject,Start date,Start time,End date,End time,All day event,Description,Location,Private")

        raffles.each do |raffle|
          output = "\"\","
          output += raffle.time.strftime("%m/%d/%Y").to_s
          output += ","
          output += raffle.time.strftime("%I:%M %p").to_s
          output += ",,,False,"
          output += "\"Ticket cost: "
          output += raffle.formatted_cost
          output += " silvers | Winners: "
          output += raffle.winners.to_s
          output += "<br \>"
          output += "Located On: "
          output += raffle.table_description.to_s
          output += "<br \>"
          output += raffle.description.to_s.gsub(/"/, "&quot;")
          output += "\",\""
          output += raffle.room_name.to_s
          output += " | "
          output += raffle.room_id.to_s
          output += "\",False"
          file.puts output
        end
      end

      "#{csv_file} created!"
    end

    private

    def no_raffles_message
      "No raffles being tracked. Run this script while at the raffle table!\n" +
        "Completed raffles are removed after #{TIME_LIMIT} minutes."
    end
  end

  class RaffleManager
    attr_reader :raffles

    def initialize
      @raffles = Storage.load
      @formatter = OutputFormatter.new

      echo "Initial raffle count: #{@raffles.count}" if UserVars.traffle && UserVars.traffle[:debug_my_script]
      prune_old_raffles
      echo "After pruning: #{@raffles.count}" if UserVars.traffle && UserVars.traffle[:debug_my_script]
    end

    def save
      Storage.save(@raffles)
    end

    def prune_old_raffles
      original_count = @raffles.count
      @raffles.reject! { |r| (r.time - Time.now) < (-TIME_LIMIT * 60) }
      pruned = original_count - @raffles.count
      echo "Pruned #{pruned} old raffles" if pruned > 0 && UserVars.traffle && UserVars.traffle[:debug_my_script]
    end

    def clear
      @raffles = []
      save
    end

    def delete(index)
      @raffles.delete_at(index) if index < @raffles.length
      save
    end

    def add_from_current_room
      room_name = checkroom
      room_id = Room.current.id

      room_objs = RoomScanner.scan_room
      raffles_found = RoomScanner.find_raffles(room_objs)

      if UserVars.traffle[:debug_my_script]
        room_objs.each { |obj| echo "Room Objs Found: #{obj}" }
        raffles_found.each { |raffle| echo "Raffles Found: #{raffle}" }
      end

      pause 0.5

      raffles_found.each do |raffle_id, _raffle_desc, table_desc|
        info = RaffleParser.parse(raffle_id)

        next if info[:item].nil? || info[:timeleft] == 0

        absolute_time = Time.now + info[:timeleft]
        pretty_date = absolute_time.strftime("%A, %B %e, %Y at %I:%M %p")

        # Remove duplicate/similar entries
        @raffles.reject! do |raffle|
          raffle.description == info[:item] &&
            raffle.room_name == room_name &&
            (raffle.time - absolute_time).abs < 60
        end

        @raffles << RaffleEntry.new(
          pretty_date,
          info[:item],
          room_name,
          absolute_time,
          room_id,
          info[:cost],
          info[:tickets],
          table_desc
        )
      end

      sort_by_time
      save
    end

    def sort_by_time
      @raffles.sort_by!(&:time)
    end

    def find(term)
      @raffles.select do |raffle|
        raffle.pretty_date =~ /#{term}/i ||
          raffle.room_name =~ /#{term}/i ||
          raffle.description =~ /#{term}/i
      end
    end

    def buy_all
      total_cost = @raffles.sum { |r| r.cost.to_i }
      starting_room = Room.current.id

      Script.run("go2", "bank")
      fput "deposit all"
      fput "withdraw #{total_cost} silver"

      @raffles.each do |raffle|
        Script.run("go2", raffle.room_id.to_s)
        fput "buy ticket on #{raffle.table_description.split.last}" if raffle.room_id.to_i == Room.current.id
      end

      Script.run("go2", "bank")
      fput "deposit all"
      Script.run("go2", starting_room.to_s)
    end

    def to_towncrier
      load_towncrier = proc {
        begin
          TownCrier_API.inspect
        rescue NameError
          Script.run("towncrier_api")
        end
      }

      load_towncrier.call
      sleep 1

      @raffles.each do |raffle|
        response = TownCrier_API.post_raffle(
          raffle.time,
          "#{raffle.description.gsub(/"/, "&quot;")}, Number of Winners: #{raffle.winners}",
          "#{raffle.formatted_cost} silvers",
          "Located On: #{raffle.table_description}, Room Name: #{raffle.room_name}",
          raffle.room_id.to_s,
          XMLData.name
        )

        if response.code.to_i != 200
          _respond "response code: #{response.code}"
          _respond "response body: #{response.body}" if response.body =~ /error/i
        end
      end
    end

    def list(reverse: false)
      raffles_to_show = reverse ? @raffles.reverse : @raffles
      @formatter.format_list(raffles_to_show)
    end

    def find_and_list(term)
      found = find(term)

      if found.empty?
        output = "================\n"
        output += "\n"
        output += "================\n"
        output += " 0 Total Raffles\n"
        output += "================\n"
        return output
      end

      formatter = OutputFormatter.new
      formatter.format_list(found)
    end

    def to_wiki
      @formatter.format_wiki(@raffles)
    end

    def to_csv
      @formatter.format_csv(@raffles)
    end
  end

  class CLI
    def initialize(args)
      @args = args
      @manager = RaffleManager.new
    end

    def run
      silence_me unless UserVars.traffle[:debug_my_script]

      before_dying { @manager.save }

      command = @args[1].to_s.downcase

      case command
      when "clear"
        @manager.clear
        respond "Raffle entries have been cleared."
      when "delete"
        @manager.delete(@args[2].to_i)
        @manager.save
      when "help"
        show_help
      when "find"
        _respond @manager.find_and_list(@args[2])
      when "csv"
        respond @manager.to_csv
      when "towncrier"
        @manager.to_towncrier
      when "wiki"
        respond @manager.to_wiki
      when "list", "view"
        _respond @manager.list
      when "reverse"
        _respond @manager.list(reverse: true)
      when "buy"
        @manager.buy_all
      when ""
        # Default case: scan room
        @manager.add_from_current_room
        @manager.save
        _respond @manager.list
      else
        # Also handle any other input as room scan
        @manager.add_from_current_room
        @manager.save
        _respond @manager.list
      end
    end

    private

    def show_help
      respond "Type ;traffle at a raffle table to keep track of the raffle"
      respond "Thank you for downloading and using ;TRAFFLE."
      respond "The various commands available are below:"
      respond ""
      respond "   ;TRAFFLE                - will scan all objects in the room to detect if a raffle table is present"
      respond "   ;TRAFFLE LIST           - will show a list of known raffles"
      respond "   ;TRAFFLE REVERSE        - will show above list in reverse order"
      respond "   ;TRAFFLE FIND <TERM>    - will search known raffles for single word term given"
      respond "   ;TRAFFLE CLEAR          - will completely clear your entire raffles list"
      respond "   ;TRAFFLE DELETE <#HERE> - will delete specific # raffle, list starts at 0. You can see the #'s by enabling debuging."
      respond ""
      respond "   To enable debuging, issue the following command:"
      respond "     ;e echo UserVars.traffle[:debug_my_script] = true"
      respond ""
    end
  end
end

TRaffle::CLI.new(Script.current.vars).run
