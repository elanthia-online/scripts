=begin
    Ebon Gate Fishing Script

      Need to put stuff here

      Requires your lootsack to be set for bundling seashells and storing loot
      ;vars set lootsack=cloak

      ;TFISH HELP
      Show additional help.

       todo: none
     author: Tysong (horibu on PC)
       name: tfish
       tags: EG, Ebon Gate, fish, fishing
    version: 1.8.3
    website: https://github.com/elanthia-online/scripts/

    changelog:
        1.8.3 (2022-10-13)
            Toggle silence_me with UserVars.tfish[:debug_my_script]
        1.8.2 (2022-10-06)
            Update some regex matching
        1.8.1 (2022-10-06)
            Add additional container messaging
        1.8 (2022-10-05)
            Initial 2022 EG updates
        1.7 (2020-10-18)
            Add additional get messaging.
        1.6 (2020-10-13)
            Fix for supplies readout regex issue.
        1.5 (2020-10-13)
            Cleanup on weight cycling.
        1.4 (2020-10-13)
            Added some cleanup when killing script to store supplies
        1.3 (2020-10-13)
            Fixes for lure descriptions and other things, credit to Ziled
        1.2 (2019-10-17)
            Handling an issue where you attempt to GO PATHWAY but are prone, causing the script to exit
            Modifying the knife functionality to specify a specific container for the knife (variables: fillet_knife and knife_container)
        1.1 (2018-10-07)
            Updated UserVars to allow you to change weight descriptors
            Changed regex for 25->50 for seashell cost
        1.0 (2017-10-08)
            Initial Release, based on Taleph's 3.3.3 script.
=end
=begin
;e echo GameObj['cloak'].contents.count { |item| item.noun == "ragworm" }
;e checkrt
;e _respond "<castTime value='#{Time.now.to_i - XMLData.server_time_offset + 15}'/>"

You remove a drake dagger from in your grey elesine robe.
You cut into the coral orange opah's flesh and after a few deft strokes produce a dense slab of raw opah, which slips through your fingers and onto the floor.
In addition, you find a jute-wrapped marlin spike dagger inside the opah's belly.  You toss the remaining carcass aside.
The dagger probably deserves a close inspection.
Roundtime: 10 sec.
=end

silence_me unless UserVars.tfish[:debug_my_script]

Rooms_Entrance   = 31834
Rooms_Fishing    = Array[32116, 32117, 32118]
Rooms_Fishing2   = Array[27578, 27579, 27580]
Uncollectables   = Array["harpoon","net","bellows","incense","candle","skull"]
Breakable_Items  = Array["excrement","flesh","sandstone","sand","dirt","charcoal","rose","debris","rock","muck","slime","barnacles","root","carapace","jar"]

UserVars.tfish                    ||= {}
UserVars.tfish[:pause_me]           = true      		if UserVars.tfish[:pause_me].nil?
UserVars.tfish[:familiar_debug]     = false     		if UserVars.tfish[:familiar_debug].nil?
UserVars.tfish[:debug_my_script]    = false     		if UserVars.tfish[:debug_my_script].nil?
UserVars.tfish[:cast_total]         = 0         		if UserVars.tfish[:cast_total].nil?
UserVars.tfish[:fish_total]         = 0         		if UserVars.tfish[:fish_total].nil?
UserVars.tfish[:snap_total]         = 0         		if UserVars.tfish[:snap_total].nil?
UserVars.tfish[:fish_t5jackpot]     = 0         		if UserVars.tfish[:fish_t5jackpot].nil?
UserVars.tfish[:client_kill]        = false     		if UserVars.tfish[:client_kill].nil?
UserVars.tfish[:trash_globes]       = false     		if UserVars.tfish[:trash_globes].nil?
UserVars.tfish[:squelch_script]     = true      		if UserVars.tfish[:squelch_script].nil?
UserVars.tfish[:supplies_container] = "cloak"   		if UserVars.tfish[:supplies_container].nil?
UserVars.tfish[:supplies_bait]      = "squid" 			if UserVars.tfish[:supplies_bait].nil?
UserVars.tfish[:supplies_pole]      = "rod"     		if UserVars.tfish[:supplies_pole].nil?
UserVars.tfish[:supplies_line]      = "wire"    		if UserVars.tfish[:supplies_line].nil?
UserVars.tfish[:fillet_knife]       = "dagger"  		if UserVars.tfish[:fillet_knife].nil?
UserVars.tfish[:knife_container]    = "cloak"   		if UserVars.tfish[:knife_container].nil?
UserVars.tfish[:supplies_buy]       = true      		if UserVars.tfish[:supplies_buy].nil?
UserVars.tfish[:cycle_weights]      = true      		if UserVars.tfish[:cycle_weights].nil?
UserVars.tfish[:weight_noncycle]    = ""        		if UserVars.tfish[:weight_noncycle].nil?
UserVars.tfish[:weight_depths]	    = "dipsey weight" 		if UserVars.tfish[:weight_depths].nil?
UserVars.tfish[:weight_bottom]	    = "granite weight"		if UserVars.tfish[:weight_bottom].nil?
UserVars.tfish[:use_cman]           = false     		if UserVars.tfish[:use_cman].nil?
UserVars.tfish[:supplies_minimum]   = 5         		if UserVars.tfish[:supplies_minimum].nil?
UserVars.tfish[:cast_timer]         = 60        		if UserVars.tfish[:cast_timer].nil?
UserVars.tfish[:fav_room]           = 0         		if UserVars.tfish[:fav_room].nil?

Fishing_Bots = Regexp.union("Fishmon","Ilten")
squelch_script_running = false

if $frontend == 'stormfront' || $frontend == 'profanity'
	fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
	fam_window_end   = "<popStream/>\r\n"
else
	fam_window_begin = "\034GSe\r\n"
	fam_window_end   = "\034GSf\r\n"
end

=begin
Fish_Regex_Bad = Regexp.union(

)
=end

Fish_Regex_Good = Regexp.union(
	/^You manage to stop whatever's on your line from taking out anymore slack\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} zigzags back and forth wildly as the catch on the end of the line struggles and strains\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it zigzags back and forth wildly as the catch on the end of the line struggles and strains\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} whips back and forth wildly\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it whips back and forth wildly\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} wavers frantically and makes sharp zigzag motions\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it wavers frantically and makes sharp zigzag motions\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} weaves wildly and bends a bit\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it weaves wildly and bends a bit\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} dips down a bit and proceeds to twitch visibly\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it dips down a bit and proceeds to twitch visibly\!/,
)

Fish_Regex_Other = Regexp.union(
	/^Your .* #{UserVars.tfish[:supplies_pole]} dips visibly in a sharp curve as the catch on the end frantically tries to swim farther out\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it dips visibly in a sharp curve as the catch on the end frantically swims farther out\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} shakes and twitches as its tip bends down quite far\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it shakes and twitches as its tip bends down quite far\!/,
	/^Your .* #{UserVars.tfish[:supplies_pole]} bends sharply several times in twitching succession\!/,
	/^You tug sharply on your .* #{UserVars.tfish[:supplies_pole]} and it bends sharply several times in twitching succession\!/,
	/^You tug hard on the .* #{UserVars.tfish[:supplies_pole]}, but the massive amount of resistance on the end of the line causes your .* #{UserVars.tfish[:supplies_pole]} to bend sharply, and you fail to bring in any more line\!/,
	/^The fish on the end of your line weaves back and forth, and the .* #{UserVars.tfish[:supplies_pole]} bends alarmingly as it tugs and tugs, yet you have no more slack to let loose\!/,
)

Fish_Regex_Finish = Regexp.union(
	/^Your line suddenly twists and then breaks with a sharp, poignant \*SNAP\*\!/,
	/^But the #{UserVars.tfish[:supplies_pole]} is already reeled in\!/,
	/^You give your .* #{UserVars.tfish[:supplies_pole]} one final tug and the (.*) comes wriggling to the surface\!  Moving swiftly, you quickly unhook it from the line and take hold of it tightly\./,
	/^Roundtime: .* sec\.$/,
)

Fish_Regex_Combined = Regexp.union(
	/^You suddenly feel a brief tug on your line, and then swift pulling motions as you yank the #{UserVars.tfish[:supplies_pole]} to set the hook!  The .* #{UserVars.tfish[:supplies_pole]} dips slightly as the catch on the line weaves back and forth\!/,
	Fish_Regex_Good,
#	Fish_Regex_Bad,
	Fish_Regex_Other,
)

def fish()
	if $frontend == 'stormfront' || $frontend == 'profanity'
		fam_window_begin = "<pushStream id=\"familiar\" ifClosedStyle=\"watching\"/>"
		fam_window_end   = "<popStream/>\r\n"
	else
		fam_window_begin = "\034GSe\r\n"
		fam_window_end   = "\034GSf\r\n"
	end
	line = nil
	cast_counter = 1
	cast_pull = 0
	tension_counter = 0
	pole_tension = 0
	pole_msg = 0
	
	loop {
		waitrt?
		if cast_counter == 1 && UserVars.tfish[:cycle_weights]
			fput "get weight from my #{UserVars.tfish[:supplies_pole]}"
			fput "put my weight in my #{UserVars.tfish[:supplies_container]}"
			
		elsif cast_counter == 2 && UserVars.tfish[:cycle_weights]
			fput "get weight from my #{UserVars.tfish[:supplies_pole]}"
			fput "put my weight in my #{UserVars.tfish[:supplies_container]}"
			fput "get #{UserVars.tfish[:weight_depths]} from my #{UserVars.tfish[:supplies_container]}"
			fput "put my weight on my #{UserVars.tfish[:supplies_pole]}"
			
		elsif cast_counter == 3 && UserVars.tfish[:cycle_weights]
			fput "get weight from my #{UserVars.tfish[:supplies_pole]}"
			fput "put my weight in my #{UserVars.tfish[:supplies_container]}"
			fput "get #{UserVars.tfish[:weight_bottom]} from my #{UserVars.tfish[:supplies_container]}"
			fput "put my weight on my #{UserVars.tfish[:supplies_pole]}"
			cast_counter = 0
		end
		
		UserVars.tfish[:cast_total] += 1
		cast_counter += 1
		fput "raise my #{UserVars.tfish[:supplies_pole]}"
		
		loop {
			_respond "<castTime value='#{Time.now.to_i - XMLData.server_time_offset + UserVars.tfish[:cast_timer]}'/>"
			line = matchtimeout UserVars.tfish[:cast_timer], Fish_Regex_Combined
			if line =~ Fish_Regex_Combined
				break
			end
			line = dothistimeout "pull my #{UserVars.tfish[:supplies_pole]}", 1, /^Roundtime: .* sec\.$|^You reel your .* #{UserVars.tfish[:supplies_pole]} in completely, your .* #{UserVars.tfish[:supplies_bait]} becoming visible as it breaks the surface and dangles briefly over the water\.|^But the #{UserVars.tfish[:supplies_pole]} is already reeled in\!/
			if line =~ /^You reel your .* #{UserVars.tfish[:supplies_pole]} in completely, your .* #{UserVars.tfish[:supplies_bait]} becoming visible as it breaks the surface and dangles briefly over the water\.|^But the #{UserVars.tfish[:supplies_pole]} is already reeled in\!/
				break
			end
			cast_pull += 1
		}
		_respond "<castTime value='#{Time.now.to_i - XMLData.server_time_offset}'/>"
		
		next if line =~ /^You reel your .* #{UserVars.tfish[:supplies_pole]} in completely, your .* #{UserVars.tfish[:supplies_bait]} becoming visible as it breaks the surface and dangles briefly over the water\.|^But the #{UserVars.tfish[:supplies_pole]} is already reeled in\!/
		
		waitrt?
		line = dothistimeout "weigh my #{UserVars.tfish[:supplies_pole]}", 1, /You carefully examine the (?:.*) and determine that the weight is about (.*) pounds\./
		if line =~ /You carefully examine the (?:.*) and determine that the weight is about (.*) pounds\./
			echo "Fish Weight: #{$1}"
			if cast_counter == 2
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - Top - Fish Weight: #{$1} - Pulls Before Nibble #{cast_pull}\r\n#{fam_window_end}") if UserVars.tfish[:familiar_debug]
			elsif cast_counter == 3
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - Middle - Fish Weight: #{$1} - Pulls Before Nibble #{cast_pull}\r\n#{fam_window_end}") if UserVars.tfish[:familiar_debug]
			elsif cast_counter == 1
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - Bottom - Fish Weight: #{$1} - Pulls Before Nibble #{cast_pull}\r\n#{fam_window_end}") if UserVars.tfish[:familiar_debug]
			end
		end
		
		waitrt?
		fput "cman surge" if UserVars.tfish[:use_cman] && Spell[9605].affordable? && !Spell[9606].active?

		
		loop {
			line = nil
#			pole_msg = 0
			loop {
				break if lefthand
				line = get
#				if line =~ Fish_Regex_Bad
#					pole_tension -= 1
#					tension_counter -= 1
#					pole_msg += 1
#					echo "Pull -Tension: #{pole_tension} | Overall Tension #{tension_counter} | Messages #{pole_msg}" if UserVars.tfish[:debug_my_script]
				if line =~ Fish_Regex_Good
					pole_tension += 1
					tension_counter += 1
					pole_msg += 1
					echo "Pull +Tension: #{pole_tension} | Overall Tension #{tension_counter} | Messages #{pole_msg}" if UserVars.tfish[:debug_my_script]
				elsif line =~ Fish_Regex_Other
					pole_msg += 1
					echo "Pull Tension: #{pole_tension} | Overall Tension #{tension_counter} | Messages #{pole_msg}" if UserVars.tfish[:debug_my_script]
				elsif line =~ /^Your line suddenly twists and then breaks with a sharp, poignant \*SNAP\*\!|^But the #{UserVars.tfish[:supplies_pole]} is already reeled in\!/
					echo "Snap Tension: #{pole_tension} | Overall Tension #{tension_counter} | Messages #{pole_msg}" if UserVars.tfish[:debug_my_script]
					return false
				elsif line =~ /^You give your .* #{UserVars.tfish[:supplies_pole]} one final tug and the (.*) comes wriggling to the surface\!  Moving swiftly, you quickly unhook it from the line and take hold of it tightly\./
					echo "Overall Tension #{tension_counter} | Messages #{pole_msg}" if UserVars.tfish[:debug_my_script]
					return true
				end
				#if pole_tension > 0 || pole_msg > 4
				if pole_tension > 0
					echo "Reset Tension: #{pole_tension} | Overall Tension #{tension_counter} | Messages #{pole_msg}" if UserVars.tfish[:debug_my_script]
					pole_tension = 0
					break
				end
			}
			if !(Rooms_Fishing.include? Room.current.id || lefthand)
				echo "Overall Pulls #{tension_counter} | Messages Seen #{pole_msg}" if UserVars.tfish[:debug_my_script]
				_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - Overall Pulls #{tension_counter} | Messages Seen #{pole_msg}\r\n#{fam_window_end}") if UserVars.tfish[:familiar_debug]
				return true 
			end
			waitrt?
			fput "pull my #{UserVars.tfish[:supplies_pole]}"
		}		
	}
end

def GutIt(item_found)

end

if variable[1].downcase == "help"
	respond "\n    SYNTAX - ;tfish

      Does NOT automatically sell, as I'm not taking on that responsibility of choosing for you.
      So you will have to empty your containers via selling/lockering stuff away.

      Requires your lootsack to be set for bundling seashells and storing loot
      ;vars set lootsack=cloak

      Defines whether to pause between caught fish. Default set to TRUE
      ;e echo UserVars.tfish[:pause_me] = true

      Send statistic information to client/famwindow. Default set to FALSE
      ;e echo UserVars.tfish[:familiar_debug] = false

      Enable/Disable use of ;tsquelch script. Default set to TRUE
      ;e echo UserVars.tfish[:squelch_script] = true

      Name of your supplies container. Default set to \"cloak\"
      ;e echo UserVars.tfish[:supplies_container] = \"cloak\"

      Minimum supplies to continue fishing. Default set to 5
      ;e echo UserVars.tfish[:supplies_minimum] = 5

      Type of bait you wish to use. Default set to \"squid\"
      ;e echo UserVars.tfish[:supplies_bait] = \"squid\"

      The noun of your fishing pole. Default set to \"pole\"
      ;e echo UserVars.tfish[:supplies_pole] = \"rod\"

      The noun of your fishing line. Default set to \"wire\"
      ;e echo UserVars.tfish[:supplies_line] = \"wire\"

      The noun of your gutting knife. Default set to \"dagger\"
      ;e echo UserVars.tfish[:fillet_knife] = \"dagger\"
      
      Name of your knife container. Default set to \"cloak\"
      ;e echo UserVars.tfish[:knife_container] = \"cloak\"

      Enable/Disable automatic cycling of weights. Default set to TRUE
      MUST USE EG WEIGHTS IF SET TO TRUE. VOLCANIC & IRON WEIGHTS ONLY!
      ;e echo UserVars.tfish[:cycle_weights] = true

      To use a constant weight, set the following. Default set to \"\"
      Use the \'descriptor\' of the weight.
      If you wish to use a constant weight, make sure cycle_weights is FALSE
      Do NOT use the squid weights, only dipsey or granite.
      ;e echo UserVars.tfish[:weight_noncycle] = \"dipsey\"
      ;e echo UserVars.tfish[:weight_noncycle] = \"granite\"
      
      To use different weight descriptors, set the following:
      ;e echo UserVars.tfish[:weight_depths] = \"dipsey weight\"
      ;e echo UserVars.tfish[:weight_bottom] = \"granite weight\"

      Enable usage of CMAN SURGE OF STRENGTH. Default set to FALSE
      ;e echo UserVars.tfish[:use_cman] = false

      Cast timer between pulls waiting till bite/nibble. Default set to 60
      ;e echo UserVars.tfish[:cast_timer] = 60

      Script will default to auto-picking least crowded room. To use a favorite room, set the following:
      ;e echo UserVars.tfish[:fav_room] = 0        To autopick
      ;e echo UserVars.tfish[:fav_room] = 32117    For Main Entrance
      ;e echo UserVars.tfish[:fav_room] = 32118    Northwest Location
      ;e echo UserVars.tfish[:fav_room] = 32116    Southeast Location"

	exit
end

before_dying { 
	kill_script ("tsquelch") if Script.running?("tsquelch") if !squelch_script_running
	fput "put my #{UserVars.tfish[:supplies_pole]} in my #{UserVars.tfish[:supplies_container]}" if (GameObj.right_hand.name || GameObj.left_hand.name) =~ /#{UserVars.tfish[:supplies_pole]}/
	fput "put my weight in my #{UserVars.tfish[:supplies_container]}"                            if (GameObj.right_hand.name || GameObj.left_hand.name) =~ /weight/
	fput "put my #{UserVars.tfish[:supplies_bait]} in my #{UserVars.tfish[:supplies_container]}" if (GameObj.right_hand.name || GameObj.left_hand.name) =~ /#{UserVars.tfish[:supplies_bait]}/
	fput "put my #{UserVars.tfish[:supplies_line]} in my #{UserVars.tfish[:supplies_container]}" if (GameObj.right_hand.name || GameObj.left_hand.name) =~ /#{UserVars.tfish[:supplies_line]}/
	fput "put my #{UserVars.tfish[:fillet_knife]} in my #{UserVars.tfish[:knife_container]}"     if (GameObj.right_hand.name || GameObj.left_hand.name) =~ /#{UserVars.tfish[:fillet_knife]}/
}

if checkleft || checkright
	echo "Please empty your hands before running this script."
	exit
end

if UserVars.tfish[:squelch_script] && !Script.exists?("tsquelch.lic")
	echo "    You need to have ;TSQUELCH downloaded to squelch.

    Either disable squelching variable as shown below, or ;repo download tsquelch
    ;e echo UserVars.tfish[:squelch_script] = FALSE"
	exit
elsif UserVars.tfish[:squelch_script]
	#echo Script.running?("tsquelch") if UserVars.tfish[:debug_my_script]
	squelch_script_running = true if Script.running?("tsquelch")
	if !squelch_script_running
		Script.start("tsquelch")
	end
end

fput "look in my #{UserVars.tfish[:supplies_container]}"
pause 0.5

loop {
	
	#Check for minimum supplies to continue
	if
		GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.noun == UserVars.tfish[:supplies_line] } < 1 ||
		GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.noun == UserVars.tfish[:supplies_bait] } < UserVars.tfish[:supplies_minimum] ||
		(GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.name =~ /#{UserVars.tfish[:weight_depths]}/ } < UserVars.tfish[:supplies_minimum] && UserVars.tfish[:cycle_weights]) ||
		(GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.name =~ /#{UserVars.tfish[:weight_bottom]}/ } < UserVars.tfish[:supplies_minimum] && UserVars.tfish[:cycle_weights]) ||
		(GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.name =~ /#{UserVars.tfish[:weight_noncycle]}.* weight/ } < UserVars.tfish[:supplies_minimum] && !UserVars.tfish[:cycle_weights] && UserVars.tfish[:weight_noncycle] != "")
		UserVars.tfish[:weight_noncycle]
		echo "YOU NEED MORE SUPPLIES!"
		echo "Fishing Line - #{UserVars.tfish[:supplies_line]} - #{GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.noun == UserVars.tfish[:supplies_line] }}/1"
		echo "Bait - #{UserVars.tfish[:supplies_bait]} - #{GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.noun == UserVars.tfish[:supplies_bait] }}/#{UserVars.tfish[:supplies_minimum]}"
		echo "#{UserVars.tfish[:weight_depths]} - #{GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.name =~ /#{UserVars.tfish[:weight_depths]}/ }}/#{UserVars.tfish[:supplies_minimum]}" if UserVars.tfish[:cycle_weights]
		echo "#{UserVars.tfish[:weight_bottom]} - #{GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.name =~ /#{UserVars.tfish[:weight_bottom]}/ }}/#{UserVars.tfish[:supplies_minimum]}" if UserVars.tfish[:cycle_weights]
		echo "Constant Weight - #{UserVars.tfish[:weight_noncycle]} - #{GameObj[UserVars.tfish[:supplies_container]].contents.count { |item| item.name =~ /#{UserVars.tfish[:weight_noncycle]}.* weight/  }}/#{UserVars.tfish[:supplies_minimum]}" if !UserVars.tfish[:cycle_weights] && UserVars.tfish[:weight_noncycle] != ""
		exit
	end
	
	Script.run("go2",Rooms_Entrance) if !((Rooms_Fishing | [Rooms_Entrance]).include? Room.current.id)
	wait_while { Script.running?("go2") }
	
	if !((Rooms_Fishing | [Rooms_Entrance]).include? Room.current.id)
		echo "You aren't at Ebon Gate, you should probably travel there first before running this"
		exit
	end
	
	
#	until(standing?)
#		fput "stand"
#		exit if checkdead
#	end
	
	line = dothistimeout "get my #{UserVars.tfish[:supplies_pole]} from my #{UserVars.tfish[:supplies_container]}", 2, /^You (?:remove|already|grab|reach|retrieve)|^Get what\?|^Hey, that doesn't|^That's almost certainly a bad idea/
	if line =~ /^Get what\?|^Hey, that doesn't|^That's almost certainly a bad idea/
		echo "CAN'T FIND YOUR FISHING POLE, CHECK THAT YOU HAVE THE FOLLOWING:"
		echo "   Fishing Pole: #{UserVars.tfish[:supplies_pole]}"
		echo "   Supplies Container: #{UserVars.tfish[:supplies_container]}"
		echo ""
		echo "   If those aren't correct for your character, please set them using the following commands:"
		echo "       ;e echo UserVars.tfish[:supplies_pole] = \"pole\""
		echo "       ;e echo UserVars.tfish[:supplies_container] = \"cloak\""
		exit
	elsif line =~ /^You (?:remove|already|grab|reach|retrieve)/
	else
		echo "Something bad happened. Error 1"
		echo "Please let Tysong know."
		exit
	end

	line = dothistimeout "look on my #{UserVars.tfish[:supplies_pole]}", 2, /^You see nothing unusual\.|^The .* #{UserVars.tfish[:supplies_pole]} is currently strung with (?:a|an) .* #{UserVars.tfish[:supplies_bait]}.* as a lure\.|^The line of .* #{UserVars.tfish[:supplies_pole]} has snapped and will need to be replaced\./
	if line =~ /^You see nothing unusual\./
		line = dothistimeout "get my #{UserVars.tfish[:supplies_bait]} from my #{UserVars.tfish[:supplies_container]}", 2, /^You (?:remove|already|grab|reach|retrieve)|^Get what\?|^Hey, that doesn't|^That's almost certainly a bad idea/
		if line =~ /^Get what\?|^Hey, that doesn't|^That's almost certainly a bad idea/
			echo "You ran out of bait or have the wrong bait type set to be used by your character"
			echo ""
			echo "Set your bait by doing the following command:"
			echo "  ;e echo UserVars.tfish[:supplies_bait] = \"ragworm\""
			fput "put my #{UserVars.tfish[:supplies_pole]} in my #{UserVars.tfish[:supplies_container]}"
			exit
		elsif line =~ /^You (?:remove|already|grab|reach|retrieve)/
		else
			echo "Something bad happened. Error 3"
			echo "Please let Tysong know."
			exit
		end
		fput "put my #{UserVars.tfish[:supplies_bait]} on my #{UserVars.tfish[:supplies_pole]}"
	elsif line =~ /^The line of .* #{UserVars.tfish[:supplies_pole]} has snapped and will need to be replaced\./
		fput "put my #{UserVars.tfish[:supplies_pole]} in my #{UserVars.tfish[:supplies_container]}"
		fput "get my #{UserVars.tfish[:supplies_line]} from my #{UserVars.tfish[:supplies_container]}"
		fput "pull my #{UserVars.tfish[:supplies_line]}"
		fput "put my second #{UserVars.tfish[:supplies_line]} in my #{UserVars.tfish[:supplies_container]}"
		fput "get my #{UserVars.tfish[:supplies_pole]} from my #{UserVars.tfish[:supplies_container]}"
		fput "put my #{UserVars.tfish[:supplies_line]} on my #{UserVars.tfish[:supplies_pole]}"
		fput "get my #{UserVars.tfish[:supplies_bait]} from my #{UserVars.tfish[:supplies_container]}"
		fput "put my #{UserVars.tfish[:supplies_bait]} on my #{UserVars.tfish[:supplies_pole]}"
		if !UserVars.tfish[:cycle_weights] && UserVars.tfish[:weight_noncycle] != ""
			fput "get my #{UserVars.tfish[:weight_noncycle]} weight from my #{UserVars.tfish[:supplies_container]}"
			fput "put my weight on my #{UserVars.tfish[:supplies_pole]}"
		end
	elsif line =~ /^The .* #{UserVars.tfish[:supplies_pole]} is currently strung with (?:a|an) .* #{UserVars.tfish[:supplies_bait]}.* as a lure./
		line = nil
		line = dothistimeout "look on my #{UserVars.tfish[:supplies_pole]}", 2, /^The .* #{UserVars.tfish[:supplies_pole]} is currently strung with (?:a|an) (.*) weight as a weight\./
		if (UserVars.tfish[:cycle_weights] || UserVars.tfish[:weight_noncycle] == "") && line =~ /^The .* #{UserVars.tfish[:supplies_pole]} is currently strung with (?:a|an) (.*) weight as a weight./
			fput "get weight from my #{UserVars.tfish[:supplies_pole]}"
			fput "put my weight in my #{UserVars.tfish[:supplies_container]}"
		elsif (!UserVars.tfish[:cycle_weights] || UserVars.tfish[:weight_noncycle] != "") && line =~ /^The .* #{UserVars.tfish[:supplies_pole]} is currently strung with (?:a|an) (.*) weight as a weight./
			if $1 !~ /#{UserVars.tfish[:weight_noncycle]}/
				fput "get weight from my #{UserVars.tfish[:supplies_pole]}"
				fput "put my weight in my #{UserVars.tfish[:supplies_container]}"
				fput "get my #{UserVars.tfish[:weight_noncycle]} weight from my #{UserVars.tfish[:supplies_container]}"
				fput "put my weight on my #{UserVars.tfish[:supplies_pole]}"
			end
		end
	else
		echo "Something bad happened. Error 2"
		echo "Please let Tysong know."
		exit
	end
	
	if !(Rooms_Fishing.include? Room.current.id)
		until(standing?)
			fput "stand"
			exit if checkdead
		end
		line = dothistimeout "go dock", 2, /^A horrific, ghostly apparition appears in front of you and states, "You do not have enough soul shards to enter the dock.  It costs 50 soul shards\."|^A horrific, ghostly apparition steps in front of you and states, "It will cost 50 soul shards to visit the dock\.  If you wish to pay the cost and continue, GO dock again\."/
		
		if line =~ /^A horrific, ghostly apparition appears in front of you and states, "You do not have enough soul shards to enter the dock.  It costs 50 soul shards\."/
			echo "You need to redeem more soul shards!"
			fput "put my #{UserVars.tfish[:supplies_pole]} in my #{UserVars.tfish[:supplies_container]}"
			exit
		elsif line =~ /^A horrific, ghostly apparition steps in front of you and states, "It will cost 50 soul shards to visit the dock\.  If you wish to pay the cost and continue, GO dock again\."/
			fput "go dock"
			if UserVars.tfish[:fav_room] == 0
				room_crowded = Hash[]
				Script.run("go2","32116"); wait_while { Script.running?("go2") }
				if GameObj.pcs.count
					room_crowded[:"32116"] = GameObj.pcs.count{ |pc| pc.noun !~ Fishing_Bots}
				else
					room_crowded[:"32116"] = 0
				end
			
				Script.run("go2","32117"); wait_while { Script.running?("go2") }
				if GameObj.pcs.count
					room_crowded[:"32117"] = GameObj.pcs.count{ |pc| pc.noun !~ Fishing_Bots}
				else
					room_crowded[:"32117"] = 0
				end
				
				Script.run("go2","32118"); wait_while { Script.running?("go2") }
				if GameObj.pcs.count
					room_crowded[:"32118"] = GameObj.pcs.count{ |pc| pc.noun !~ Fishing_Bots}
				else
					room_crowded[:"32118"] = 0
				end

				Script.run("go2","#{room_crowded.min_by{ |room, count| count }.first}"); wait_while { Script.running?("go2") }
			else
				Script.run("go2","#{UserVars.tfish[:fav_room]}"); wait_while { Script.running?("go2") }
			end
		else
			echo "Something bad happened. Error 4"
			echo "Please let Tysong know."
			exit	
		end
	end
	
	if fish()
			pause 1
		waitrt?
		fish_found = GameObj.left_hand
		UserVars.tfish[:fish_total] += 1
		fput "put my #{UserVars.tfish[:supplies_pole]} in my #{UserVars.tfish[:supplies_container]}"
		
		line = dothistimeout "weigh my #{checkleft}", 2, /^You carefully examine the (?:.*) and determine that the weight is about (.*) pounds\./
		if line =~ /^You carefully examine the (?:.*) and determine that the weight is about (.*) pounds\./
			echo line
			echo $1
		end
		fish_weight = $1 
		pause 1; waitrt?
		pause 0.25
		fput "get my #{UserVars.tfish[:fillet_knife]} from my #{UserVars.tfish[:knife_container]}"
		line = dothistimeout "cut my #{checkleft}", 2, /^Roundtime: (?:.*) sec.|^The (?:.*) probably deserves a close inspection/
		if line =~ /^The (?:.*) probably deserves a close inspection/
			echo "ALERT ALERT ALERT ALERT ALERT ALERT ALERT"
			echo "ALERT ALERT ALERT ALERT ALERT ALERT ALERT"
			echo ""
			echo "     POSSIBLE T5+ FOUND, LOOK AT ME!"
			echo ""
			echo "ALERT ALERT ALERT ALERT ALERT ALERT ALERT"
			echo "ALERT ALERT ALERT ALERT ALERT ALERT ALERT"
			pause_script
		end
		pause 1; waitrt?
		pause 0.25
		item_found = GameObj.left_hand
		fput "put my #{UserVars.tfish[:fillet_knife]} in my #{UserVars.tfish[:knife_container]}"
		multifput "analyze my #{checkleft}", "inspect my #{checkleft}", "look at my #{checkleft}", "look in my #{checkleft}"
		fput "put my #{checkleft} in my #{Vars.lootsack}"
		_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - #{UserVars.tfish[:fish_total]}/#{UserVars.tfish[:cast_total]} - #{fish_found.name}(#{item_found.name}) - #{fish_weight}#s\r\n#{fam_window_end}") if UserVars.tfish[:familiar_debug]
		
		pause_script if UserVars.tfish[:pause_me]
		next
	else
		UserVars.tfish[:snap_total] += 1
		_respond("#{fam_window_begin}#{Time.now.strftime("%H:%M:%S")} - *SNAP*\r\n#{fam_window_end}") if UserVars.tfish[:familiar_debug]
		waitrt?
		fput "put my #{UserVars.tfish[:supplies_pole]} in my #{UserVars.tfish[:supplies_container]}"
		next
	end

	GutIt(item_found)
}
