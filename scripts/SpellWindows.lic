=begin
  SpellWindow.lic

  Replaces Wrayths integrated spell active windows for spells, buffs, debuffs, cooldowns.

  The script blocks the xml feed for active spells, buffs, debuffs, cooldowns, quickbar, and combat.
  It grabs the data from Effects:: and populates the wrayth windows.
  This gives the same exact information, without committing a ddos attack on your frontend.

  Now it also incorporates buff_tracker and targetwindow!

  NOTE ** If you use the combat window, room window, or inventory window, be sure to toggle those feeds with:
      ;spellwindow combat
      ;spellwindow room
      ;spellwindow inventory

  ;spellwindow       - starts the script
  ;spellwindow help  - for the details


        author: Nisugi
  contributors: Nisugi
          game: Gemstone
          tags: hunting, combat, tracking, spells, buffs, debuffs, cooldowns
       version: 1.7
      required: Wrayth

  Change Log:
  v1.7 (2025-04-06)
    - fixed progress bar on bard songs and armor adjustments.
  v1.6 (2025-03-18)
    - added room window and inventory feeds to optional blocking
  v1.5 (2025-03-13)
    - added adderall and removeall commands for missing spell window
    - corrected Indef time left display
  v1.4 (2024-12-31)
    - fixed syntax error
=end

module SpellWindow
  require 'yaml'
  $spellwindow_blackout = false

  @filename = File.join(DATA_DIR, XMLData.game, Char.name, "SpellWindow.yaml")
  game_dir = File.join(DATA_DIR, XMLData.game)
  char_dir = File.join(game_dir, Char.name)
  Dir.mkdir(game_dir) unless File.exist?(game_dir)
  Dir.mkdir(char_dir) unless File.exist?(char_dir)

  CMD_QUEUE = Queue.new
  UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"
  DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
  HOOK_CMD_RX = %r{^(?:<c>)?;(?:#{Script.current.name}?|buff)(?: (.*))?$}i
  ACTIVE_SPELLS = %r{^<dialogData id='Active Spells' clear='t'></dialogData>}
  BUFFS = %r{^<dialogData id='Buffs' clear='t'></dialogData>}
  DEBUFFS = %r{^<dialogData id='Debuffs' clear='t'></dialogData>}
  COOLDOWNS = %r{^<dialogData id='Cooldowns' clear='t'></dialogData>}
  COMBAT = %r{^<dialogData id='combat'>}
  QUICKBAR = %r{^<openDialog id=[^\s]+ location=(?:'|")quickBar(?:'|")}
  QUICKBAR_SWITCH = %r{^<switchQuickBar id="quick"/>}
  QUICKBAR_DIALOG = %r{^<dialogData id="quick">}
  GRASP_ARMS = %r{(?:arm|appendage|claw|limb|pincer|tentacle|palpus|palpi)s?}
  MAP_WINDOW = %r{^<dialogData id='mapViewMain'}
  INVENTORY_WINDOW = Regexp.union(
    %r{^<streamWindow id='inv'},
    %r{^<clearStream id='inv'}
  )
  END_INVENTORY_STREAM = %r{^<popStream/>}
  ROOM_WINDOW = Regexp.union(
    %r{^<nav rm=},
    %r{^<component id='room desc'>},
    %r{^<component id='room players'>},
    %r{^<component id='room objs'>},
    %r{^<component id='room exits'>},
    %r{^<compDef id='room desc'>},
    %r{^<compDef id='room objs'>},
    %r{^<compDef id='room players'>},
    %r{^<compDef id='room exits'>},
    %r{^<compDef id='sprite'>}
  )
  SWMIN_PATTERNS = Regexp.union(ACTIVE_SPELLS, BUFFS, DEBUFFS, COOLDOWNS, QUICKBAR, QUICKBAR_SWITCH, QUICKBAR_DIALOG, MAP_WINDOW)

  if File.exist?(@filename)
    @settings = YAML.load_file(@filename)
    respond("Loaded settings from #{@filename}")
  else
    @settings = {}
    @settings[:show_spells]     = true
    @settings[:show_buffs]      = true
    @settings[:show_debuffs]    = true
    @settings[:show_cooldowns]  = true
    @settings[:block_combat]    = true
    @settings[:block_room]      = true
    @settings[:block_inventory] = true
    @settings[:show_missing]    = false
    @settings[:show_targets]    = false
    @settings[:show_arms]       = false
    @settings[:debug]           = false
    @settings[:my_buffs]        = []
    File.write(@filename, @settings.to_yaml)
    respond("Default settings initialized.")
  end

  def self.flextape(server_string)
    if server_string =~ INVENTORY_WINDOW && @settings[:block_inventory]
      $spellwindow_blackout = true
      return nil
    elsif server_string =~ END_INVENTORY_STREAM && $spellwindow_blackout
      $spellwindow_blackout = false
      return nil
    end
    return nil if $spellwindow_blackout
    return nil if SWMIN_PATTERNS.match?(server_string)
    return nil if COMBAT.match?(server_string) && @settings[:block_combat]
    return nil if ROOM_WINDOW.match?(server_string) && @settings[:block_room]
    return server_string
  end

  DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc do |server_string| SpellWindow.flextape(server_string) end)
  UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command| if command =~ HOOK_CMD_RX; CMD_QUEUE.push($1); nil; else; command; end; end)
  before_dying { UpstreamHook.remove(UPSTREAM_HOOK_ID); DownstreamHook.remove(DOWNSTREAM_HOOK_ID); File.write(@filename, @settings.to_yaml) }

  _respond("<closeDialog id='Missing Spells'/><openDialog type='dynamic' id='Missing Spells' title='Missing Spells' target='Missing Spells' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='Missing Spells'></dialogData></openDialog>") if @settings[:show_missing]
  _respond("<closeDialog id='Target Window'/><openDialog type='dynamic' id='Target Window' title='Targets' target='Target Window' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='Targets'></dialogData></openDialog>") if @settings[:show_targets]

  def self.add_buff(var)
    @settings[:my_buffs] << var unless @settings[:my_buffs].include?(var)
    respond("#{Spell[var].name} added.")
  end

  def self.remove_buff(var)
    @settings[:my_buffs].delete(var)
    respond("#{Spell[var].name} removed.")
  end

  def self.my_buffs
    _respond('<output class="mono"/>')
    respond(@settings[:my_buffs].empty? ? 'No spells monitored.' : ' Monitoring:')
    @settings[:my_buffs].sort_by { |b| Spell[b].num }.each { |b|
      respond("%5s %s" % [Spell[b].num, Spell[b].name])
    }
    _respond('<output class=""/>')
  end

  def self.missing_spells
    missing = @settings[:my_buffs] - Spell.active.map { |s| s.name }
    output = "<dialogData id='Missing Spells' clear='t'></dialogData><dialogData id='Missing Spells'>"
    top_value = 0
    if missing.length > 0
      missing.sort.each do |s|
        output += "<label id= '#{Spell[s].num}' value='#{s}' justify='3' left='0' height='1' width='187'/>"
        # output += "<label id='#{Spell[s].num}' value='#{s}' top='#{top_value} left='0' align='center'/>"
        top_value += 16
      end
    else
      output += "<label id='lblNone' value='No missing spells.' top='0' left='0' align='center'/>"
    end
    output += "</dialogData>"
    output
  end

  def self.status_fix(status)
    status_mapping = {
      /rather calm/           => 'calmed',
      /to be frozen in place/ => 'frozen',
      /held in place/         => 'held',
      /lying down/            => 'prone',
      /entangled by/          => 'entangled'
    }

    fix_status = status_mapping.find { |pattern, _| pattern.match?(status) }&.last || status
    return "(#{fix_status})"
  end

  def self.build_target_links(entities, include_titles: true)
    entities.map do |entity|
      if include_titles
        name = entity.name.split.map(&:capitalize).join(' ')
      else
        # Strip the title for players, assuming titles are part of the name
        name = entity.name.split.last.capitalize
      end
      status = SpellWindow.status_fix(entity.status) unless entity.status.nil?
      "<link id='#{entity.id}' value='#{status} #{name}' cmd='target ##{entity.id}' echo='target ##{entity.id}' justify='3' left='0' height='15' width='195'/>"
    end.join
  end

  def self.target_window
    targets = GameObj.targets.reject { |t| t.noun =~ GRASP_ARMS || (t.name =~ /^animated / && t.name != "animated slush") }
    group_members = Lich::Gemstone::Group.members
    non_group_members = Lich::Gemstone::Group.nonmembers

    output = "<dialogData id='Target Window' clear='t'></dialogData><dialogData id='Target Window'>"
    # Targets Section
    if targets.any?
      output += "<link id='total' value='Total Targets: #{targets.size}' cmd='target next' echo='target next' justify='3' top='3' left='0' height='15' width='195'/>"
      output += build_target_links(targets, include_titles: true)
    else
      output += "<label id='noTargets' value='-= No Targets =-' justify='3' left='0' width='187'/>"
    end

    output += "<label id='space1' value='---------------------------' justify='3' left='0' width='187'/>"
    # Group Members Section
    if group_members.any?
      output += "<label id='group' value='Group Size: #{group_members.size}' justify='3' left='0' height='15' width='195'/>"
      output += build_target_links(group_members, include_titles: false)
    else
      output += "<label id='noGroup' value='-= No Group =-' justify='3' left='0' width='187'/>"
    end

    output += "<label id='space2' value='---------------------------' justify='3' left='0' width='187'/>"
    # Players Section
    if non_group_members.any?
      output += "<label id='pcs' value='Total Players: #{non_group_members.size}' justify='3' left='0' height='20' width='195'/>"
      output += build_target_links(non_group_members, include_titles: false)
    else
      output += "<label id='noPcs' value='-= No Players =-' justify='3' left='0' width='187'/>"
    end

    output += "</dialogData>"
    output
  end

  def self.format_time(timeleft)
    seconds = timeleft * 60
    hours = (seconds / 3600).to_i
    minutes = (seconds % 3600 / 60).to_i
    seconds = (seconds % 60).to_i
    format("%02d:%02d:%02d", hours, minutes, seconds)
  end

  def self.display_time(timeleft)
    return "Indef" if timeleft > 300
    seconds = timeleft * 60
    if seconds < 120
      "#{seconds.to_i}s"
    else
      hours = (seconds / 3600).to_i
      minutes = (seconds % 3600 / 60).to_i
      format("%d:%02d", hours, minutes)
    end
  end

  def self.calc_bard_song_duration()
    duration = 120 + Stats.logic[:bonus] + (Stats.influence[:bonus] * 3) + (Char.mental_lore_telepathy * 2)
    case Stats.level
    when 76..100
      duration += 225 + (Stats.level - 75)
    when 51..75
      duration += 175 + ((Stats.level - 50) * 2)
    when 26..50
      duration += 100 + ((Stats.level - 25) * 3)
    else
      duration += (Stats.level * 4)
    end
    return duration
  end

  def self.get_spell_max_duration(sn, stext)
    custom_durations = {
      'Celerity'                   => 1,
      'Barkskin'                   => 1,
      'Assume Aspect'              => 10,
      'Nature\'s Touch Arcane Ref' => 0.5,
      'Nature\'s Touch Physical P' => 0.5,
      'Tangleweed Vigor'           => 2,
      'Slashing Strikes'           => 2,
      'Evasiveness'                => 0.05,
      'Wall of Force'              => 1.5
    }
    return 250 if stext.start_with?("Armor")
    return @spellsong_duration if stext.start_with?("Song of")
    custom_durations[stext] || Spell[sn].max_duration || 5
  end

  def self.build_output(effect_type, title)
    effects = effect_type.to_h
    id_effects = effects.select { |k, _v| k.is_a?(Integer) }
    text_effects = effects.reject { |k, _v| k.is_a?(Integer) }

    if id_effects.empty?
      return "<dialogData id='#{title}' clear='t'></dialogData><dialogData id='#{title}'><label id='lblNone' value='No #{title.downcase} found.' top='0' left='0' align='center'/></dialogData>"
    end

    output = "<dialogData id='#{title}' clear='t'></dialogData><dialogData id='#{title}'>"
    top_value = 0

    id_effects.each do |sn, end_time|
      stext = text_effects.shift[0]
      duration = ((end_time - Time.now) / 60.to_f)
      next if duration < 0

      max_duration = get_spell_max_duration(sn, stext)
      bar_value = ((duration / max_duration) * 100).to_i
      output += "<progressBar id='#{sn}' value='#{bar_value}' text=\"#{stext}\" left='22%' top='#{top_value}' width='76%' height='15' time='#{format_time(duration)}'/><label id='l#{sn}' value='#{display_time(duration)} ' top='#{top_value}' left='0' justify='2' anchor_right='spell'/>"
      top_value += 16
    end

    output += "</dialogData>"
    output
  end

  def self.update_windows
    @thread.kill if @thread&.alive? # Terminate the old thread
    @thread = Thread.new do
      begin
        window_to_effects = {
          'active_spells'  => Effects::Spells,
          'buffs'          => Effects::Buffs,
          'debuffs'        => Effects::Debuffs,
          'cooldowns'      => Effects::Cooldowns,
          'missing_spells' => @settings[:my_buffs]
        }
        update_intervals = {
          'active_spells' => 60,
          'buffs'         => 5,
          'debuffs'       => 5,
          'cooldowns'     => 5
        }
        next_update_time = update_intervals.transform_values { |interval| Time.now + interval }
        old_target_output = ''
        last_sent_output = ''
        window_outputs = {}
        old_outputs = {
          'active_spells'  => '',
          'buffs'          => '',
          'debuffs'        => '',
          'cooldowns'      => '',
          'missing_spells' => ''
        }

        last_state = {
          'active_spells'  => {},
          'buffs'          => {},
          'debuffs'        => {},
          'cooldowns'      => {},
          'missing_spells' => [],
          'targets'        => [],
          'status'         => {
            'active_spells'  => 'no spells',
            'buffs'          => 'no spells',
            'debuffs'        => 'no spells',
            'cooldowns'      => 'no spells',
            'missing_spells' => 'no spells'
          }
        }

        loop do
          now = Time.now
          output = ''

          # target window, update asap on any change.
          new_target_output = SpellWindow.target_window if @settings[:show_targets]
          if new_target_output == old_target_output
            output += ''
          else
            output += new_target_output if new_target_output
            old_target_output = new_target_output
          end

          # determine our current state
          current_state = {}
          window_to_effects.each do |window, effect_type|
            if window == 'missing_spells'
              current_state[window] = @settings[:my_buffs] - Spell.active.map { |s| s.name }
            else
              # Use durations for other windows
              current_state[window] = effect_type.to_h.transform_values { |end_time| (end_time - Time.now).to_i }
            end
          end

          # state based updates
          window_to_effects.keys.each do |window|
            if window == 'missing_spells'
              # Handle "missing_spells" specifically as an array comparison
              missing_changed = current_state[window].sort != last_state[window]&.sort
              if missing_changed
                output += SpellWindow.missing_spells if @settings[:show_missing]
                last_state[window] = current_state[window].dup
              end
            else
              status = current_state[window].empty? ? 'no spells' : 'active spells'
              duration_increased = current_state[window].any? do |spell, duration|
                duration > (last_state[window][spell] || 0)
              end

              if current_state[window].keys.map(&:to_s).sort != last_state[window].keys.map(&:to_s).sort || status != last_state['status'][window] || duration_increased
                case window
                when 'active_spells'
                  output += SpellWindow.build_output(Effects::Spells, 'Active Spells') if @settings[:show_spells]
                when 'buffs'
                  output += SpellWindow.build_output(Effects::Buffs, 'Buffs') if @settings[:show_buffs]
                when 'debuffs'
                  output += SpellWindow.build_output(Effects::Debuffs, 'Debuffs') if @settings[:show_debuffs]
                when 'cooldowns'
                  output += SpellWindow.build_output(Effects::Cooldowns, 'Cooldowns') if @settings[:show_cooldowns]
                when 'missing_spells'
                  output += SpellWindow.missing_spells
                end

                # update the state
                last_state[window] = current_state[window].dup
                last_state['status'][window] = status
              end
            end
          end

          # timer based updates
          update_intervals.each do |window, interval|
            # idea for urgent was when spells get below a certain duration, we speed up the updates to make them real time.
            # but it may cause memory to build up to fast since wrayth doesn't take out the trash.
            # urgent = %w[buffs debuffs cooldowns].include?(window) && window_to_effects[window].to_h.values.any? { |end_time| (end_time - Time.now) <= 8 }
            next if now < next_update_time[window]
            # next_update_time[window] = now + (urgent ? 1 : interval) if now >= next_update_time[window]
            next_update_time[window] = now + interval if now >= next_update_time[window]

            case window
            when 'active_spells'
              window_outputs[window] = SpellWindow.build_output(Effects::Spells, 'Active Spells') if @settings[:show_spells]
            when 'buffs'
              window_outputs[window] = SpellWindow.build_output(Effects::Buffs, 'Buffs') if @settings[:show_buffs]
            when 'debuffs'
              window_outputs[window] = SpellWindow.build_output(Effects::Debuffs, 'Debuffs') if @settings[:show_debuffs]
            when 'cooldowns'
              window_outputs[window] = SpellWindow.build_output(Effects::Cooldowns, 'Cooldowns') if @settings[:show_cooldowns]
            end

            if window_outputs[window] != old_outputs[window]
              output += window_outputs[window]
              old_outputs[window] = window_outputs[window]
            end
          end

          if output != last_sent_output
            wait_while { Script.running?("go2") }
            _respond(output) unless output.empty?
            respond(output) unless output.empty? if @settings[:debug]
            last_sent_output = output
          else
          end
          sleep(0.1)
        end
      rescue StandardError => e
        _respond("[ERROR] Exception in update_window: #{e.message}")
        _respond(e.backtrace)
      end
    end
  end

  def self.command(args)
    action, arg = args.split(' ')
    action = action.downcase
    unless action
      SpellWindow.update_windows
    else
      if action == 'help'
        _respond('<output class="mono"/>')
        [
          ['',               'Start the script.'],
          ['spells',         'Toggle the Active Spells window.'],
          ['buffs',          'Toggle the Buffs window.'],
          ['debuffs',        'Toggle the Debuffs window.'],
          ['cooldowns',      'Toggle the Cooldowns window.'],
          ['missing',        'Toggle the Missing Spells window.'],
          ['add <spell>',    'Add to missing spells trackig. Accepts spell number or name.'],
          ['remove <spell>', 'Remove from missing spells tracking. Accepts spell number or name.'],
          ['list',           'List spells you are currently tracking.'],
          ['quickload',      'Adds all of your currently self-known worn spells to the list.'],
          ['adderall',       'Adds all currently worn spells to the list.'],
          ['removeall',      'Removes all spells from tracking whether they\'re active or not'],
          ['combat',         'Toggle combat window feed. Enable if you use the combat window to click.'],
          ['room',           'Toggle room window feed.'],
          ['inventory',      'Toggle inventory window feed.'],
          ['targets',        'Toggle targets window.'],
          ['arms',           'Show Grasp of the Grave arm count in the target window.'],
          ['settings',       'Lists current settings.'],
        ].each { |cmd_pair|
          respond(
            ("%8s %-15s %s" % ([';spellwindows'] + cmd_pair))
              .gsub('<', '&lt;')
              .gsub('>', '&gt;')
          )
        }
        _respond('<output class=""/>')
      elsif action == 'settings'
        _respond('<output class="mono"/>')
        respond(" Current Settings:")
        respond("     Spells: #{@settings[:show_spells]}")
        respond("      Buffs: #{@settings[:show_buffs]}")
        respond("    Debuffs: #{@settings[:show_debuffs]}")
        respond("  Cooldowns: #{@settings[:show_cooldowns]}")
        respond("    Missing: #{@settings[:show_missing]}")
        respond("     Combat: #{!@settings[:block_combat]}")
        respond("       Room: #{!@settings[:block_room]}")
        respond("  Inventory: #{!@settings[:block_room]}")
        respond("    Targets: #{@settings[:show_targets]}")
        respond("  Arm Count: #{@settings[:show_arms]}")
        respond("")
        _respond('<output class=""/>')
        SpellWindow.my_buffs
      elsif action == 'add'
        if Spell[arg].num.nil?
          respond("#{arg} is not a valid buff or spell. Please try again.")
        else
          SpellWindow.add_buff(Spell[arg].name)
        end
      elsif action == 'adderall'
        Spell.active.each { |s| SpellWindow.add_buff(Spell[s].name) }
      elsif action == 'removeall'
        @settings[:my_buffs] = []
        respond("All spells removed from watch list.")
      elsif action =~ /rem(?:ove)?/
        if Spell[arg].num.nil?
          respond("#{arg} is not a valid buff or spell. Please try again.")
        else
          SpellWindow.remove_buff(Spell[arg].name)
        end
      elsif action == 'list'
        SpellWindow.my_buffs
      elsif action == 'quickload'
        Spell.active.filter { |s| s.known? }.each { |s| SpellWindow.add_buff(Spell[s].name) }
      elsif action == 'combat'
        @settings[:block_combat] = !@settings[:block_combat]
        respond(@settings[:block_combat] ? 'Combat window feed disabled.' : 'Combat window feed enabled.')
      elsif action == 'room'
        @settings[:block_room] = !@settings[:block_room]
        respond(@settings[:block_room] ? 'Room window disabled.' : 'Room window enabled.')
      elsif action == 'inventory'
        @settings[:block_inventory] = !@settings[:block_inventory]
        respond(@settings[:block_inventory] ? 'Inventory window disabled.' : 'Inventory window enabled.')
      elsif action == 'spells'
        @settings[:show_spells] = !@settings[:show_spells]
        _respond(@settings[:show_spells] ? 'Active Spells window enabled' : 'Active Spells window disabled')
      elsif action == 'buffs'
        @settings[:show_buffs] = !@settings[:show_buffs]
        _respond(@show_buffs ? 'Buffs window enabled.' : 'Buffs window disabled.')
      elsif action == 'debuffs'
        @settings[:show_debuffs] = !@settings[:show_debuffs]
        _respond(@settings[:show_debuffs] ? 'Debuffs window enabled.' : 'Debuffs window disabled.')
      elsif action == 'cooldowns'
        @settings[:show_cooldowns] = !@settings[:show_cooldowns]
        respond(@settings[:show_spells] ? 'Cooldowns window enabled.' : 'Cooldowns window disabled.')
      elsif action == 'missing'
        @settings[:show_missing] = !@settings[:show_missing]
        respond(@settings[:show_missing] ? 'Missing spells window enabled.' : 'Missing spells window disabled.')
        _respond("<closeDialog id='Missing Spells'/><openDialog type='dynamic' id='Missing Spells' title='Missing Spells' target='Missing Spells' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='Missing Spells'></dialogData></openDialog>") if @settings[:show_missing]
        _respond("<closeDialog id='Missing Spells'/>") if !@settings[:show_missing]
      elsif action == 'targets'
        @settings[:show_targets] = !@settings[:show_targets]
        respond(@settings[:show_targets] ? 'Targets window enabled.' : 'Targets window disabled.')
        _respond("<closeDialog id='Target Window'/><openDialog type='dynamic' id='Target Window' title='Target Window' target='Target Window' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='Target Window'></dialogData></openDialog>") if @settings[:show_targets]
        _respond("<closeDialog id='Target Window'/>") if !@settings[:show_targets]
      elsif action == 'arms'
        @settings[:show_arms] = !@settings[:show_arms]
        respond(@settings[:show_arms] ? 'Grasp of the Grave arms will display in target window.' : 'Grasp of the Grave arms will not display in target window.')
      elsif action == 'debug'
        @settings[:debug] = !@settings[:debug]
        respond(@settings[:show_targets] ? 'Debug enabled.' : 'Debug disabled.')
      elsif action == 'abort'
        $spellwindow_blackout = false
        @settings[:block_inventory] = false
        respond("Inventory stream enabled.")
      else
        SpellWindow.update_windows
      end
    end
  end

  def self.processQueue
    unless CMD_QUEUE.empty?
      command = CMD_QUEUE.pop
      return if command.nil?
      SpellWindow.command(command)
    end
  end

  if Stats.prof == "Bard"
    @spellsong_duration = calc_bard_song_duration()
  else
    @spellsonog_duration = 10
  end

  Group.maybe_check
  update_windows
  CMD_QUEUE.push(Script.current.vars[0])

  loop {
    SpellWindow.processQueue
    sleep(0.25)
  }
end
