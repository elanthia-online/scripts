=begin
  tourniquet.lic - Deal with Bleeding using society abilities/powers

          author: elanthia-online
    contributors: Dissonance
            game: Gemstone
            tags: health, bleeding, society
         version: 1.0.0

  Changelog
    v1.0.0 - 2025-04-30
      - Created
=end

module Tourniquet
  DEFAULT_START_HEALING ||= 65 # minimum health to start healing
  DEFAULT_STOP_HEALING  ||= 95 # maximum health to stop healing
  DEFAULT_MIN_HEAL      ||= 20 # minimum amount of health to heal

  UserVars.tourniquet_start_healing ||= DEFAULT_START_HEALING # minimum health to start healing
  UserVars.tourniquet_stop_healing  ||= DEFAULT_STOP_HEALING # maximum health to stop healing
  UserVars.tourniquet_min_heal      ||= DEFAULT_MIN_HEAL # minimum amount of health to heal

  def self.stop_healing
    # if we can't heal at least the minimum amount, stop
    # if percent_health is greater than the stop healing point, stop
    # if we are dead, stop
    (Char.max_health - Char.health) <= UserVars.tourniquet_min_heal || percent_health >= UserVars.tourniquet_stop_healing || checkdead
    # Char.percent_health >= UserVars.tourniquet_stop_healing || checkdead
  end

  def self.voln_favor_cost_affordable?()
    # broke out for future use so we can properly calculate favor cost instead of estimating it.
    # something like Society.voln.favor_cost("Symbol of Restoration") is the actual cost, but it's not available yet.
    Resources.voln_favor > 900 # 900 is approximate favor cost for a level 100
  end

  def self.wait_if_special_room_or_dead
    while (checkroom("The Belly of the Beast") || checkroom("Ooze, Innards") || checkroom("Temporal Rift") || checkdead)
      sleep(1)
    end
  end

  def self.check_society_ability
    Spell["Symbol of Restoration"].known? || Spell["Sigil of Mending"].known? || Spell["Sigil of Health"].known? || Spell["Sign of Staunching"].known? || Spell["Sign of Clotting"].known?
  end

  def self.use_staunching_or_clotting
    if Spell["Sign of Staunching"].known?
      return unless Spell["Sign of Staunching"].affordable?
      return if Effects::Buffs.active?("Sigil of Determination")

      Spell["Sign of Staunching"].cast
    elsif Spell["Sign of Clotting"].known?
      return unless Spell["Sign of Clotting"].affordable?
      return if Effects::Buffs.active?("Sign of Clotting")

      Spell["Sign of Clotting"].cast
    end
  end

  def self.use_restoration
    return unless Spell["Symbol of Restoration"].known?
    unless voln_favor_cost_affordable? # favor doesn't regen quickly, so we're just going to exit if we don't have enough
      Lich::Messaging.msg("error", "Not enough favor to use Symbol of Restoration.")
      exit
    end

    if Char.percent_health < UserVars.tourniquet_start_healing
      Spell["Symbol of Restoration"].cast until (stop_healing || !voln_favor_cost_affordable?)
    end
  end

  def self.use_mending_and_health
    return unless Spell["Sigil of Mending"].known?
    return unless Spell["Sigil of Mending"].affordable?
    return if Effects::Buffs.active?("Sigil of Mending")

    Spell["Sigil of Mending"].cast

    if Char.percent_health < UserVars.tourniquet_start_healing
      return unless Spell["Sigil of Health"].known?
      return unless Spell["Sigil of Health"].affordable?
      Spell["Sigil of Health"].cast until stop_healing || !(Spell["Sigil of Health"].affordable?)
    end
  end

  def self.wait_for_bloodloss(check_bleeding: true, check_poison: false, check_disease: false)
    # wait until we are bleeding or other health loss
    loop do
      if checkdead
        sleep(0.75)
      elsif (check_bleeding && checkreallybleeding) && Char.percent_health < 98
        # want to check for bleeding, and we are really bleeding (don't already have staunching or clotting applied) and there's some bloodloss
        break
      elsif ((check_poison && checkpoison) || (check_disease && checkdisease)) && Char.percent_health < 95
        # want to check for poison or disease, and we are poisoned or diseased and there's some bloodloss
        break
      elsif Char.percent_health < UserVars.tourniquet_start_healing
        # just check for health loss, and we are below 75% health
        break
      end

      sleep(0.25)
    end
    Lich::Messaging.msg("warn", "You're losing blood...")
    return
  end

  def self.main
    unless check_society_ability
      Lich::Messaging.msg("error", "You do not have access to an applicable society ability to deal with bleeding or bloodloss.")
      exit
    end

    loop do
      Lich::Messaging.msg("info", "Now watching for health loss...")

      wait_if_special_room_or_dead # if we're in a special room, or dead, wait until we leave it because we can't do anything anyway

      case Society.member
      when /voln/i # member of voln?
        wait_for_bloodloss(check_bleeding: true, check_poison: true, check_disease: true)
        use_restoration
      when /sunfist/i # member of sunfist?
        wait_for_bloodloss(check_bleeding: true, check_poison: true, check_disease: true)
        use_mending_and_health
      when /council/i # member of council?
        wait_for_bloodloss(check_bleeding: true, check_poison: false, check_disease: false)
        use_staunching_or_clotting
      else
        Lich::Messaging.msg("error", "This shouldn't happen.  Please provide the following info to Elanthia Online:  Script Failed: #{Society.member}")
      end
      sleep(0.25)
    end
  end

  def self.help
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** ** **  Tourniquet  ** ** **"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** ** Version: #{(Script.list.find { |x| x.name == Script.current.name }.inspect)[/version: (\d+\.\d+\.\d+)/i, 1]}  ** **"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("**"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** USAGE: '#{$lich_char}#{Script.current.name} <command>'"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** "))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** help                  - Show this help message"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** start                 - Run the script, prepare to apply tourniquets..."))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** health_min = <number> - Set the minimum health to start healing.  Currently #{UserVars.tourniquet_start_healing}"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** health_max = <number> - Set the maximum health to stop healing.  Currently #{UserVars.tourniquet_stop_healing}"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** min_heal = <number>   - Set the minimum amount of health you want to heal.  Currently #{UserVars.tourniquet_min_heal}"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("**"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** **  Good Luck!  ** **"))
  end
end

case Script.current.vars[1]
when /start/i
  Tourniquet.main
when /help/i
  Tourniquet.help
when /health_min/i
  UserVars.tourniquet_start_healing = (Script.current.vars[1][/\d+/] || 65).to_i
  Lich::Messaging.msg("info", "Minimum health to start healing set to #{UserVars.tourniquet_start_healing}.")
when /health_max/i
  UserVars.tourniquet_stop_healing = (Script.current.vars[1][/\d+/] || 95).to_i
  Lich::Messaging.msg("info", "Maximum health to stop healing set to #{UserVars.tourniquet_stop_healing}.")
when /min_heal/i
  UserVars.tourniquet_min_heal = (Script.current.vars[1][/\d+/] || 25).to_i
  Lich::Messaging.msg("info", "Minimum amount of health to heal set to #{UserVars.tourniquet_min_heal}.")
else
  Tourniquet.help
end
