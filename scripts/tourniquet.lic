=begin
  tourniquet.lic - Deal with Bleeding using society abilities/powers

          author: elanthia-online
    contributors: Dissonance
            game: Gemstone
            tags: health, bleeding, society
         version: 1.0.0

  Changelog
    v1.0.0 - 2025-04-30
      - Created
=end

require 'json'

module Tourniquet
  @data = {
    :start_healing => CharSettings['start_healing'] ||= 65,
    :stop_healing  => CharSettings['stop_healing']  ||= 95,
    :min_heal      => CharSettings['min_heal']      ||= 20,
    :debug         => CharSettings['debug']         ||= false
  }

  Lich::Messaging.msg("info", "Starting Values: #{JSON.pretty_generate(Tourniquet.data)}") if Tourniquet.data[:debug]

  def self.data
    @data
  end

  before_dying {
    Lich::Messaging.msg("info", "Saving settings...") if Tourniquet.data[:debug]
    Lich::Messaging.msg("info", JSON.pretty_generate(Tourniquet.data)) if Tourniquet.data[:debug]

    CharSettings['start_healing'] = Tourniquet.data[:start_healing]
    CharSettings['stop_healing']  = Tourniquet.data[:stop_healing]
    CharSettings['min_heal']      = Tourniquet.data[:min_heal]
    CharSettings['debug']         = Tourniquet.data[:debug]
    Settings.save

    Lich::Messaging.msg("info", "Settings saved.") if Tourniquet.data[:debug]
  }

  def self.stop_healing
    # if we can't heal at least the minimum amount, stop
    # if percent_health is greater than the stop healing point, stop
    # if we are dead, stop
    low_heal_amount = (Char.max_health - Char.health) <= Tourniquet.data[:min_heal]
    high_percent_reached = Char.percent_health >= Tourniquet.data[:stop_healing]

    Lich::Messaging.msg("info", "stop_healing: low_heal_amount: #{low_heal_amount}, high_percent_reached: #{high_percent_reached}") if Tourniquet.data[:debug]

    low_heal_amount || high_percent_reached || checkdead
  end

  def self.voln_favor_cost_affordable?()
    # broke out for future use so we can properly calculate favor cost instead of estimating it.
    # something like Society.voln.favor_cost("Symbol of Restoration") is the actual cost, but it's not available yet.
    Lich::Messaging.msg("info", "voln_favor_cost_affordable? Voln Favor = #{Resources.voln_favor}") if Tourniquet.data[:debug]
    Resources.voln_favor > 900 # 900 is approximate favor cost for a level 100
  end

  def self.wait_if_special_room_or_dead
    Lich::Messaging.msg("info", "Waiting because in special room or dead...") if Tourniquet.data[:debug]
    while (checkroom("The Belly of the Beast") || checkroom("Ooze, Innards") || checkroom("Temporal Rift") || checkdead)
      sleep(1)
    end
    Lich::Messaging.msg("info", "No longer in special room or dead...") if Tourniquet.data[:debug]
  end

  def self.set_value(variable, value)
    Lich::Messaging.msg("info", "Setting #{variable} to #{value}") if Tourniquet.data[:debug]
    new_value = Integer(value) rescue nil

    if new_value.nil?
      Lich::Messaging.msg("error", "Invalid value for #{variable}. Must be a number.")
    else
      Tourniquet.data[variable] = new_value
      Lich::Messaging.msg("info", "#{variable.to_s.capitalize} set to #{Tourniquet.data[variable]}.")
    end
  end

  def self.reset_defaults
    Lich::Messaging.msg("info", "Resetting settings to defaults...") if Tourniquet.data[:debug]

    Tourniquet.data[:start_healing] = 65
    Tourniquet.data[:stop_healing]  = 95
    Tourniquet.data[:min_heal]      = 20
    Tourniquet.data[:debug]         = false
  end

  def self.check_society_ability
    Lich::Messaging.msg("info", "Checking society ability...") if Tourniquet.data[:debug]

    Spell["Symbol of Restoration"].known? || Spell["Sigil of Mending"].known? || Spell["Sigil of Health"].known? || Spell["Sign of Staunching"].known? || Spell["Sign of Clotting"].known?
  end

  def self.use_staunching_or_clotting
    Lich::Messaging.msg("info", "Testing staunching or clotting...") if Tourniquet.data[:debug]

    if Spell["Sign of Staunching"].known?
      return unless Spell["Sign of Staunching"].affordable?
      return if Effects::Buffs.active?("Sign of Staunching")

      Lich::Messaging.msg("info", "Using Sign of Staunching...") if Tourniquet.data[:debug]
      Spell["Sign of Staunching"].cast
    elsif Spell["Sign of Clotting"].known?
      return unless Spell["Sign of Clotting"].affordable?
      return if Effects::Buffs.active?("Sign of Clotting")

      Lich::Messaging.msg("info", "Using Sign of Clotting...") if Tourniquet.data[:debug]
      Spell["Sign of Clotting"].cast
    end
  end

  def self.use_restoration
    Lich::Messaging.msg("info", "Testing Symbol of Restoration...") if Tourniquet.data[:debug]

    return unless Spell["Symbol of Restoration"].known?
    unless voln_favor_cost_affordable? # favor doesn't regen quickly, so we're just going to exit if we don't have enough
      Lich::Messaging.msg("error", "Not enough favor to use Symbol of Restoration.")
      exit
    end

    if Char.percent_health < Tourniquet.data[:start_healing]
      Lich::Messaging.msg("info", "Using Symbol of Restoration...") if Tourniquet.data[:debug]
      Spell["Symbol of Restoration"].cast until (self.stop_healing || !voln_favor_cost_affordable?)
    end
  end

  def self.use_mending_and_health
    Lich::Messaging.msg("info", "Testing Sigil of Mending and Health...") if Tourniquet.data[:debug]

    return unless Spell["Sigil of Mending"].known?
    return unless Spell["Sigil of Mending"].affordable?
    return if Effects::Buffs.active?("Sigil of Mending")

    Lich::Messaging.msg("info", "Using Sigil of Mending...") if Tourniquet.data[:debug]
    Spell["Sigil of Mending"].cast

    if Char.percent_health < Tourniquet.data[:start_healing]
      return unless Spell["Sigil of Health"].known?
      return unless Spell["Sigil of Health"].affordable?

      Lich::Messaging.msg("info", "Using Sigil of Health...") if Tourniquet.data[:debug]
      Spell["Sigil of Health"].cast until self.stop_healing || !(Spell["Sigil of Health"].affordable?)
    end
  end

  def self.wait_for_bloodloss(check_bleeding: true, check_poison: false, check_disease: false)
    Lich::Messaging.msg("info", "Waiting for bloodloss...") if Tourniquet.data[:debug]

    loop do
      if checkdead
        sleep(0.75)
      elsif (check_bleeding && checkreallybleeding) && Char.percent_health < Tourniquet.data[:stop_healing]
        # Use check really bleeding to ensure we don't already have staunching or clotting applied
        break
      elsif ((check_poison && checkpoison) || (check_disease && checkdisease)) && Char.percent_health < Tourniquet.data[:stop_healing]
        break
      elsif Char.percent_health < Tourniquet.data[:start_healing]
        break
      end

      sleep(0.25)
    end
    Lich::Messaging.msg("warn", "You're losing blood...")
    return
  end

  def self.main
    Lich::Messaging.msg("info", "Starting Tourniquet...") if Tourniquet.data[:debug]

    unless check_society_ability
      Lich::Messaging.msg("error", "You do not have access to an applicable society ability to deal with bleeding or bloodloss.")
      exit
    end

    loop do
      Lich::Messaging.msg("info", "Now watching for health loss...")

      wait_if_special_room_or_dead # if we're in a special room, or dead, wait until we leave it because we can't do anything anyway

      case Society.member
      when /voln/i # member of voln?
        Lich::Messaging.msg("info", "Member of Voln...") if Tourniquet.data[:debug]
        wait_for_bloodloss(check_bleeding: true, check_poison: true, check_disease: true)
        use_restoration
      when /sunfist/i # member of sunfist?
        Lich::Messaging.msg("info", "Member of Sunfist...") if Tourniquet.data[:debug]
        wait_for_bloodloss(check_bleeding: true, check_poison: true, check_disease: true)
        use_mending_and_health
      when /council/i # member of council?
        Lich::Messaging.msg("info", "Member of CoL...") if Tourniquet.data[:debug]
        wait_for_bloodloss(check_bleeding: true, check_poison: false, check_disease: false)
        use_staunching_or_clotting
      else
        Lich::Messaging.msg("error", "This shouldn't happen.  Please provide the following info to Elanthia Online:  Script Failed: #{Society.member}")
      end
      sleep(0.25)
    end
  end

  def self.help
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** ** **  Tourniquet  ** ** **"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** ** Version: #{(Script.list.find { |x| x.name == Script.current.name }.inspect)[/version: (\d+\.\d+\.\d+)/i, 1]}  ** **"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("**"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** USAGE: '#{$lich_char}#{Script.current.name} <command>'"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** "))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** help                  - Show this help message"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** start                 - Run the script, prepare to apply tourniquets..."))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** health_min = <number> - Set the minimum percent health to start healing.  Currently #{Tourniquet.data[:start_healing]}"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** health_max = <number> - Set the maximum percent health to stop healing.  Currently #{Tourniquet.data[:stop_healing]}"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** min_heal = <number>   - Set the minimum amount of health you want to heal.  Currently #{Tourniquet.data[:min_heal]}"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** settings              - Show the current settings"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** reset                 - Reset all settings to defaults"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("**"))
    Lich::Messaging.mono(Lich::Messaging.xml_encode("** **  Good Luck!  ** **"))
  end
end

Lich::Messaging.msg("info", "Command is: #{Script.current.vars[1]}") if Tourniquet.data[:debug]

case Script.current.vars[1]
when /start/i
  Tourniquet.main
when /help/i
  Tourniquet.help
when /health_min/i
  Lich::Messaging.msg("Setting health_min to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:start_healing, (Script.current.vars[0][/\d+/]))
when /health_max/i
  Lich::Messaging.msg("Setting health_max to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:stop_healing, (Script.current.vars[0][/\d+/]))
when /min_heal/i
  Lich::Messaging.msg("Setting min_heal to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:min_heal, (Script.current.vars[0][/\d+/]))
when /settings/i
  Lich::Messaging.mono(Lich::Messaging.xml_encode("Current Settings:"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(JSON.pretty_generate(Tourniquet.data)))
when /reset/i
  Tourniquet.reset_defaults
  Lich::Messaging.mono(Lich::Messaging.xml_encode("Settings reset to defaults:"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(JSON.pretty_generate(Tourniquet.data)))
when /debug/i
  Tourniquet.data[:debug] = !Tourniquet.data[:debug]
  Lich::Messaging.mono(Lich::Messaging.xml_encode("Debug mode is now #{Tourniquet.data[:debug] ? 'enabled' : 'disabled'}."))
else
  Tourniquet.help
end
