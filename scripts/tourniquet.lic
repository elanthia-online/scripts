=begin
  tourniquet.lic - Deal with Bleeding using society abilities/powers

          author: elanthia-online
    contributors: Dissonance
            game: Gemstone
            tags: health, bleeding, society
         version: 1.1.0

  Changelog
    v1.1.0 - 2025-05-10
      - added support for sign of healing from CoL
      - fixed location  of debug message so that .data is defined before we try to use it
    v1.0.0 - 2025-04-30
      - Created
=end

require 'json'
require 'terminal-table'

module Tourniquet
  @data = {
    :start_healing      => CharSettings['start_healing']      ||= 65,
    :stop_healing       => CharSettings['stop_healing']       ||= 95,
    :min_heal           => CharSettings['min_heal']           ||= 20,
    :debug              => CharSettings['debug']              ||= false,
    :use_col_healing    => CharSettings['use_col_healing']    ||= false,
    :min_spirit         => CharSettings['min_spirit']         ||= Char.max_spirit - 2,
    :start_sign_healing => CharSettings['start_sign_healing'] ||= 65
  }

  def self.data
    @data
  end

  Lich::Messaging.msg("info", "Starting Values: #{JSON.pretty_generate(Tourniquet.data)}") if Tourniquet.data[:debug]

  before_dying {
    Lich::Messaging.msg("info", "Saving settings...") if Tourniquet.data[:debug]
    Lich::Messaging.msg("info", JSON.pretty_generate(Tourniquet.data)) if Tourniquet.data[:debug]

    CharSettings['start_healing']      = Tourniquet.data[:start_healing]
    CharSettings['stop_healing']       = Tourniquet.data[:stop_healing]
    CharSettings['min_heal']           = Tourniquet.data[:min_heal]
    CharSettings['debug']              = Tourniquet.data[:debug]
    CharSettings['use_col_healing']    = Tourniquet.data[:use_col_healing]
    CharSettings['min_spirit']         = Tourniquet.data[:min_spirit]
    CharSettings['start_sign_healing'] = Tourniquet.data[:start_sign_healing]
    Settings.save

    Lich::Messaging.msg("info", "Settings saved.") if Tourniquet.data[:debug]
  }

  def self.stop_healing
    # if we can't heal at least the minimum amount, stop
    # if percent_health is greater than the stop healing point, stop
    # if we are dead, stop
    low_heal_amount = (Char.max_health - Char.health) <= Tourniquet.data[:min_heal]
    high_percent_reached = Char.percent_health >= Tourniquet.data[:stop_healing]

    Lich::Messaging.msg("info", "stop_healing: low_heal_amount: #{low_heal_amount}, high_percent_reached: #{high_percent_reached}") if Tourniquet.data[:debug]

    low_heal_amount || high_percent_reached || checkdead
  end

  def self.voln_favor_cost_affordable?()
    # broke out for future use so we can properly calculate favor cost instead of estimating it.
    # something like Society.voln.favor_cost("Symbol of Restoration") is the actual cost, but it's not available yet.
    Lich::Messaging.msg("info", "voln_favor_cost_affordable? Voln Favor = #{Resources.voln_favor}") if Tourniquet.data[:debug]
    Resources.voln_favor > 900 # 900 is approximate favor cost for a level 100
  end

  def self.wait_if_special_room_or_dead
    Lich::Messaging.msg("info", "Waiting because in special room or dead...") if Tourniquet.data[:debug]
    while (checkroom("The Belly of the Beast") || checkroom("Ooze, Innards") || checkroom("Temporal Rift") || checkdead)
      sleep(1)
    end
    Lich::Messaging.msg("info", "No longer in special room or dead...") if Tourniquet.data[:debug]
  end

  def self.set_value(variable, value)
    Lich::Messaging.msg("info", "Setting #{variable} to #{value.inspect}") if Tourniquet.data[:debug]

    # Try to coerce from string if needed
    value = case value
            when String
              if value.strip.downcase == "true"
                true
              elsif value.strip.downcase == "false"
                false
              elsif value.strip =~ /^\d+$/
                value.to_i
              else
                nil
              end
            else
              value
            end

    if value.is_a?(Integer) || value == true || value == false
      Tourniquet.data[variable] = value
      Lich::Messaging.msg("info", "#{variable.to_s.capitalize} set to #{value.inspect}.")
    else
      Lich::Messaging.msg("error", "Invalid value for #{variable}. Must be an Integer or Boolean.")
    end
  end

  def self.reset_defaults
    Lich::Messaging.msg("info", "Resetting settings to defaults...") if Tourniquet.data[:debug]
    Tourniquet.data[:start_healing]       = 65
    Tourniquet.data[:stop_healing]        = 95
    Tourniquet.data[:min_heal]            = 20
    Tourniquet.data[:use_col_healing]     = false
    Tourniquet.data[:min_spirit]          = Char.max_spirit - 2
    Tourniquet.data[:debug]               = false
    Tourniquet.data[:start_sign_healing]  = 65
  end

  def self.check_society_ability
    Lich::Messaging.msg("info", "Checking society ability...") if Tourniquet.data[:debug]

    Spell["Symbol of Restoration"].known? || Spell["Sigil of Mending"].known? || Spell["Sigil of Health"].known? || Spell["Sign of Staunching"].known? || Spell["Sign of Clotting"].known? || Spell["Sign of Healing"].known?
  end

  def self.use_col_powers
    Lich::Messaging.msg("info", "Using COL powers...") if Tourniquet.data[:debug]

    if Tourniquet.data[:use_col_healing]
      Lich::Messaging.msg("info", "Using COL staunching/clotting then healing...") if Tourniquet.data[:debug]
      use_col_staunching
      use_col_healing
    else
      Lich::Messaging.msg("info", "Using COL staunching/clotting only...") if Tourniquet.data[:debug]
      use_col_staunching
    end
  end

  def self.use_col_staunching
    if Spell["Sign of Staunching"].known?
      return unless Spell["Sign of Staunching"].affordable?
      return if Effects::Buffs.active?("Sign of Staunching")

      Lich::Messaging.msg("info", "Using Sign of Staunching...") if Tourniquet.data[:debug]
      Spell["Sign of Staunching"].cast
    elsif Spell["Sign of Clotting"].known?
      return unless Spell["Sign of Clotting"].affordable?
      return if Effects::Buffs.active?("Sign of Clotting")

      Lich::Messaging.msg("info", "Using Sign of Clotting...") if Tourniquet.data[:debug]
      Spell["Sign of Clotting"].cast
    end
  end

  def self.use_col_healing
    Lich::Messaging.msg("info", "Testing Sign of Healing...") if Tourniquet.data[:debug]

    return unless Spell["Sign of Healing"].known?
    return unless Spell["Sign of Healing"].affordable?
    return unless Char.spirit >= Tourniquet.data[:min_spirit]
    return unless Char.spirit >= 3 # double check that we're not going to just kill them if they set something wrong.

    if Char.percent_health <= Tourniquet.data[:start_sign_healing] && Char.spirit >= Tourniquet.data[:min_spirit]
      Lich::Messaging.msg("info", "Using Sign of Healing...") if Tourniquet.data[:debug]
      Spell["Sign of Healing"].cast
    end
  end

  def self.use_restoration
    Lich::Messaging.msg("info", "Testing Symbol of Restoration...") if Tourniquet.data[:debug]

    return unless Spell["Symbol of Restoration"].known?
    unless voln_favor_cost_affordable? # favor doesn't regen quickly, so we're just going to exit if we don't have enough
      Lich::Messaging.msg("error", "Not enough favor to use Symbol of Restoration.")
      exit
    end

    if Char.percent_health < Tourniquet.data[:start_healing]
      Lich::Messaging.msg("info", "Using Symbol of Restoration...") if Tourniquet.data[:debug]
      until (self.stop_healing || !voln_favor_cost_affordable?)
        Spell["Symbol of Restoration"].cast
        sleep 0.5 # prevents tight loops from happening
      end
    end
  end

  def self.use_mending_and_health
    Lich::Messaging.msg("info", "Testing Sigil of Mending and Health...") if Tourniquet.data[:debug]

    return unless Spell["Sigil of Mending"].known?
    return unless Spell["Sigil of Mending"].affordable?
    return if Effects::Buffs.active?("Sigil of Mending")

    Lich::Messaging.msg("info", "Using Sigil of Mending...") if Tourniquet.data[:debug]
    Spell["Sigil of Mending"].cast

    if Char.percent_health < Tourniquet.data[:start_healing]
      return unless Spell["Sigil of Health"].known?
      return unless Spell["Sigil of Health"].affordable?

      Lich::Messaging.msg("info", "Using Sigil of Health...") if Tourniquet.data[:debug]
      until self.stop_healing || !(Spell["Sigil of Health"].affordable?)
        Spell["Sigil of Health"].cast
        sleep 0.5 # prevents tight loops from happening
      end
    end
  end

  def self.wait_for_bloodloss(check_bleeding: true, check_poison: false, check_disease: false)
    Lich::Messaging.msg("info", "Waiting for bloodloss...") if Tourniquet.data[:debug]

    loop do
      if checkdead
        sleep(0.75)
      elsif (check_bleeding && checkreallybleeding) && Char.percent_health < Tourniquet.data[:stop_healing]
        # Use check really bleeding to ensure we don't already have staunching or clotting applied
        break
      elsif ((check_poison && checkpoison) || (check_disease && checkdisease)) && Char.percent_health < Tourniquet.data[:stop_healing]
        break
      elsif Char.percent_health < Tourniquet.data[:start_healing]
        break
      end

      sleep(0.25)
    end
    Lich::Messaging.msg("warn", "You're losing blood...")
    return
  end

  def self.main
    Lich::Messaging.msg("info", "Starting Tourniquet...") if Tourniquet.data[:debug]

    unless check_society_ability
      Lich::Messaging.msg("error", "You do not have access to an applicable society ability to deal with bleeding or bloodloss.")
      exit
    end

    loop do
      Lich::Messaging.msg("info", "Now watching for health loss...")

      wait_if_special_room_or_dead # if we're in a special room, or dead, wait until we leave it because we can't do anything anyway

      case Society.member
      when /voln/i # member of voln?
        Lich::Messaging.msg("info", "Member of Voln...") if Tourniquet.data[:debug]
        wait_for_bloodloss(check_bleeding: true, check_poison: true, check_disease: true)
        use_restoration
      when /sunfist/i # member of sunfist?
        Lich::Messaging.msg("info", "Member of Sunfist...") if Tourniquet.data[:debug]
        wait_for_bloodloss(check_bleeding: true, check_poison: true, check_disease: true)
        use_mending_and_health
      when /council/i # member of council?
        Lich::Messaging.msg("info", "Member of CoL...") if Tourniquet.data[:debug]
        wait_for_bloodloss(check_bleeding: true, check_poison: Tourniquet.data[:use_col_healing], check_disease: Tourniquet.data[:use_col_healing])
        use_col_powers
      else
        Lich::Messaging.msg("error", "This shouldn't happen.  Please provide the following info to Elanthia Online:  Script Failed: #{Society.member}")
      end
      sleep(0.25)
    end
  end

  def self.help
    if true == false # Lich.screen_reader?
      # Plaintext output for screen readers
      lines = []
      lines << ""
      lines << "Tourniquet - Version #{version}"
      lines << "USAGE: #{script_name} <command>"
      lines << ""
      lines << "General Commands:"
      lines << "  help        - Show this help message."
      lines << "  start       - Run the script, prepare to apply tourniquets..."
      lines << "  settings    - Show the current settings."
      lines << "  reset       - Reset all settings to defaults."
      lines << "  debug       - Toggle debug mode. Currently #{Tourniquet.data[:debug] ? 'on' : 'off'}"
      lines << ""
      lines << "Healing Threshold Settings:"
      lines << "  health_min = <number>        - Start healing at this % health. Currently #{Tourniquet.data[:start_healing]}"
      lines << "  health_max = <number>        - Stop healing at this % health. Currently #{Tourniquet.data[:stop_healing]}"
      lines << "  min_heal = <number>          - Minimum amount to heal. Currently #{Tourniquet.data[:min_heal]}"
      lines << ""
      lines << "Council of Light Settings:"
      lines << "  use_col_healing <on|off>     - Enable Sign of Healing use. Currently #{Tourniquet.data[:use_col_healing] ? 'on' : 'off'}"
      lines << "  min_spirit = <number>        - Minimum spirit to use healing. Currently #{Tourniquet.data[:min_spirit]}"
      lines << "  start_sign_healing = <num>   - Start Sign of Healing at this % health. Currently #{Tourniquet.data[:start_sign_healing]}"
      lines << ""
      lines << "Example Usage:"
      lines << "  #{script_name} start"
      lines << "  #{script_name} health_min = 40"
      lines << "  #{script_name} use_col_healing = on"
      lines << ""

      lines.each { |line| Lich::Messaging.mono(line) }
    else
      # Table output for non-screen readers
      version = (Script.list.find { |x| x.name == Script.current.name }.inspect)[/version: (\d+\.\d+\.\d+)/i, 1]
      script_name = "#{$lich_char}#{Script.current.name}"

      # Collect rows for the table
      rows = []

      # Section: Header
      rows << [{ value: 'Tourniquet', colspan: 2, alignment: :center }]
      rows << [{ value: 'Version: ' + version, colspan: 2, alignment: :center }]
      rows << :separator
      rows << [{ value: "USAGE: #{$lich_char}#{Script.current.name} <command>", colspan: 2, alignment: :center }]
      rows << :separator

      # Section: General Commands
      rows << :separator
      rows << [{ value: 'General Commands', colspan: 2, alignment: :left }]
      rows << :separator
      rows << ['Command', 'Description']
      rows << ['help', 'Show this help message.']
      rows << ['start', 'Run the script, prepare to apply tourniquets...']
      rows << ['settings', 'Show the current settings.']
      rows << ['reset', 'Reset all settings to defaults.']
      rows << ['debug', "Toggle debug mode. Currently #{Tourniquet.data[:debug] ? 'on' : 'off'}"]

      # Section: Healing Threshold
      rows << :separator
      rows << [{ value: 'Healing Threshold Settings', colspan: 2, alignment: :left }]
      rows << :separator
      rows << ['Command', 'Description']
      rows << ['health_min = <number>', "Start healing at this % health. Currently #{Tourniquet.data[:start_healing]}"]
      rows << ['health_max = <number>', "Stop healing at this % health. Currently #{Tourniquet.data[:stop_healing]}"]
      rows << ['min_heal = <number>', "Minimum amount to heal. Currently #{Tourniquet.data[:min_heal]}"]

      # Section: CoL
      rows << :separator
      rows << [{ value: 'Council of Light Settings', colspan: 2, alignment: :left }]
      rows << :separator
      rows << ['Command', 'Description']
      rows << ['use_col_healing <on|off>', "Enable Sign of Healing use. Currently #{Tourniquet.data[:use_col_healing] ? 'on' : 'off'}"]
      rows << ['min_spirit = <number>', "Minimum spirit to use healing. Currently #{Tourniquet.data[:min_spirit]}"]
      rows << ['start_sign_healing = <number>', "Start Sign of Healing at this % health. Currently #{Tourniquet.data[:start_sign_healing]}"]

      # Section: Examples
      rows << :separator
      rows << [{ value: 'Example Usage', colspan: 2, alignment: :left }]
      rows << :separator
      rows << ['Command', 'Description']
      rows << ["#{script_name} start", "Run the script."]
      rows << ["#{script_name} health_min = 40", "Set healing to start at 40% health."]
      rows << ["#{script_name} use_col_healing = on", "Enable Sign of Healing."]

      # Final Table
      table = Terminal::Table.new(
        rows: rows
      )

      Lich::Messaging.mono("")
      table.to_s.each_line { |line| Lich::Messaging.mono(Lich::Messaging.xml_encode(line.chomp)) }
      Lich::Messaging.mono("")
    end
  end
end

Lich::Messaging.msg("info", "Command is: #{Script.current.vars[1]}") if Tourniquet.data[:debug]

case Script.current.vars[1]
when /start/i
  Tourniquet.main
when /help/i
  Tourniquet.help
when /health_min/i
  Lich::Messaging.msg("Setting health_min to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:start_healing, (Script.current.vars[0][/\d+/]))
when /health_max/i
  Lich::Messaging.msg("Setting health_max to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:stop_healing, (Script.current.vars[0][/\d+/]))
when /min_heal/i
  Lich::Messaging.msg("Setting min_heal to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:min_heal, (Script.current.vars[0][/\d+/]))
when /use_col_healing/i
  Lich::Messaging.msg("Setting use_col_healing to #{Script.current.vars[0][/\w+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:use_col_healing, true) if Script.current.vars[0][/\w+/] =~ /\=\s?on/i
  Tourniquet.set_value(:use_col_healing, false) if Script.current.vars[0][/\w+/] =~ /\=\s?off/i
when /min_spirit/i
  Lich::Messaging.msg("Setting min_spirit to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:min_spirit, (Script.current.vars[0][/\d+/]))
when /start_sign_healing/i
  Lich::Messaging.msg("Setting start_sign_healing to #{Script.current.vars[0][/\d+/]}") if Tourniquet.data[:debug]
  Tourniquet.set_value(:start_sign_healing, (Script.current.vars[0][/\d+/]))
when /settings/i
  Lich::Messaging.mono(Lich::Messaging.xml_encode("Current Settings:"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(JSON.pretty_generate(Tourniquet.data)))
when /reset/i
  Tourniquet.reset_defaults
  Lich::Messaging.mono(Lich::Messaging.xml_encode("Settings reset to defaults:"))
  Lich::Messaging.mono(Lich::Messaging.xml_encode(JSON.pretty_generate(Tourniquet.data)))
when /debug/i
  Tourniquet.data[:debug] = !Tourniquet.data[:debug]
  Lich::Messaging.mono(Lich::Messaging.xml_encode("Debug mode is now #{Tourniquet.data[:debug] ? 'enabled' : 'disabled'}."))
else
  Tourniquet.help
end
