=begin
  SoundFX.lic - audio triggers
  Place your .wav sound files in Lich5/data/SFX
    ;soundfx setup

  sound files from baldur's gate 3 are available here to sift through.
  https://drive.google.com/drive/folders/1RnPdvGLgx4w7263gRKkDAKirTBTyTz5C?usp=drive_link

        author: Nisugi
  contributors: Nisugi
          game: Gemstone
          tags: sounds
       version: 0.2

  Change Log:
  v0.2 (2025-04-21)
    - change mac from system call to using NSSound
    - added some error messaging
=end

module SoundFX
  require 'rbconfig'
  require 'gtk3'
  require 'yaml'

  @sound_dir = File.join(DATA_DIR, 'SFX')
  Dir.mkdir(@sound_dir) unless File.exist?(@sound_dir)
  @filename = File.join(DATA_DIR, XMLData.game, Char.name, "SFX_Triggers.yaml")

  if File.exist?(@filename)
    @trigger_sounds = YAML.load_file(@filename)
    respond("Loaded settings from #{@filename}")
  else
    @trigger_sounds = {}
  end

  class << self
    attr_accessor :trigger_sounds
  end

  def self.install_gem_requirements(gems_to_install)
    require "rubygems"
    require "rubygems/dependency_installer"
    installer = Gem::DependencyInstaller.new({ :user_install => true, :document => nil })
    installed_gems = Gem::Specification.map { |gem| gem.name }.sort.uniq

    begin
      gems_to_install.each do |gem|
        unless installed_gems.include?(gem)
          echo "Installing missing ruby gem '#{gem}' now, please wait!"
          installer.install(gem)
          echo "Done installing '#{gem}' gem!"
        end
        require gem
      end
    rescue
      echo "Required Ruby gems failed to install: #{gems_to_install.join(', ')}"
      echo "Please install the above gem(s) to run #{$lich_char}#{Script.current.name}"
      exit
    end
  end

  def self.current_os
    host_os = RbConfig::CONFIG['host_os']
    case host_os
    when /mswin|mingw|cygwin/
      return :windows
    when /darwin|mac os/
      return :macos
    when /linux/
      return :linux
    else
      return :unknown
    end
  end
  CURRENT_OS ||= current_os

  if CURRENT_OS == :windows
    install_gem_requirements(['ffi'])

    module WinMM
      extend FFI::Library
      ffi_lib 'winmm'
      attach_function :PlaySound, [:string, :pointer, :uint], :bool
    end

    SND_ASYNC    = 0x0001
    SND_FILENAME = 0x00020000
  elsif CURRENT_OS == :macos
    install_gem_requirements(['ffi'])

    module MacOSRuntime
      extend FFI::Library
      ffi_lib '/usr/lib/libobjc.A.dylib'
      attach_function :objc_getClass,    [:string],               :pointer
      attach_function :sel_registerName, [:string],               :pointer
      attach_function :objc_msgSend,     [:pointer, :pointer, :varargs], :pointer
    end

    def self.ns_string(str)
      cls = MacOSRuntime.objc_getClass('NSString')
      sel = MacOSRuntime.sel_registerName('stringWithUTF8String:')
      MacOSRuntime.objc_msgSend(cls, sel, str)
    end
  end

  def self.play_sound(sound_name)
    sound_file = File.join(@sound_dir, "#{sound_name}.wav")
    unless File.exist?(sound_file)
      respond("[SoundFX] ERROR: Sound file not found: #{sound_file}")
      return
    end

    case CURRENT_OS
    when :windows
      play_windows(sound_file)
    when :macos
      play_macos(sound_file)
    when :linux
      play_linux(sound_file)
    else
      warn "Unsupported OS. Unable to play sound."
    end
  end

  def self.play_windows(sound_file)
    success = WinMM.PlaySound(sound_file, nil, SND_ASYNC | SND_FILENAME)
    unless success
      respond("[SoundFX] ERROR: PlaySound failed for #{sound_file}")
    end
  end

  def self.play_macos(sound_file)
    # macOS native via NSSound
    ns_path  = ns_string(sound_file)
    snd_cls  = MacOSRuntime.objc_getClass('NSSound')
    alloc    = MacOSRuntime.sel_registerName('alloc')
    init_sel = MacOSRuntime.sel_registerName('initWithContentsOfFile:byReference:')
    play_sel = MacOSRuntime.sel_registerName('play')

    sound_obj = MacOSRuntime.objc_msgSend(snd_cls, alloc)
    sound_obj = MacOSRuntime.objc_msgSend(sound_obj, init_sel, ns_path, true)

    if sound_obj.null?
      warn "[SoundFX] NSSound initialization failed for #{sound_file}"
      return
    end

    MacOSRuntime.objc_msgSend(sound_obj, play_sel)
  end

  def self.play_linux(sound_file)
    Thread.new do
      result = system('aplay', sound_file, out: File::NULL, err: File::NULL)
      unless result
        puts("[SoundFX] ERROR: Failed to play #{sound_file} via aplay.")
      end
    end
  end

  def self.build_gui
    Gtk.queue do
      window = Gtk::Window.new('SoundFX Manager')
      window.set_default_size(600, 400)

      vbox = Gtk::Box.new(:vertical, 5)
      window.add(vbox)

      # main two‑column store: 0 = trigger, 1 = sound_name
      list_store = Gtk::ListStore.new(String, String)
      @trigger_sounds.each do |trig, snd|
        iter = list_store.append
        iter[0], iter[1] = trig, snd
      end

      tree_view = Gtk::TreeView.new(list_store)

      # —–– Sound column as a Combo –––

      # build a little store of all the .wav filenames (sans “.wav”)
      sound_store = Gtk::ListStore.new(String)
      Dir.children(@sound_dir).sort.each do |fn|
        next unless fn.end_with?('.wav')
        name = File.basename(fn, '.wav')
        ri   = sound_store.append
        ri[0] = name
      end

      # renderer that shows a dropdown
      renderer_sound = Gtk::CellRendererCombo.new
      renderer_sound.editable     = true
      renderer_sound.model        = sound_store
      renderer_sound.text_column  = 0
      renderer_sound.has_entry    = false

      # when user picks a different sound, write it back into column 1
      renderer_sound.signal_connect('edited') do |_, path, new_text|
        list_store.get_iter(path)[1] = new_text
      end

      column_sound = Gtk::TreeViewColumn.new('Sound')
      column_sound.pack_start(renderer_sound, true)
      column_sound.set_attributes(renderer_sound, 'text' => 1)
      tree_view.append_column(column_sound)

      # —–– Trigger column (unchanged) –––
      renderer_trigger = Gtk::CellRendererText.new
      renderer_trigger.editable = true
      renderer_trigger.signal_connect('edited') do |_, path, new_text|
        list_store.get_iter(path)[0] = new_text
      end
      column_trigger = Gtk::TreeViewColumn.new('Trigger', renderer_trigger, text: 0)
      tree_view.append_column(column_trigger)

      vbox.pack_start(tree_view, expand: true, fill: true, padding: 5)

      hbox_buttons = Gtk::Box.new(:horizontal, 5)

      btn_add = Gtk::Button.new(label: 'Add Trigger')
      btn_delete = Gtk::Button.new(label: 'Delete Selected')
      btn_save = Gtk::Button.new(label: 'Save Changes')

      hbox_buttons.pack_start(btn_add, expand: true, fill: true, padding: 5)
      hbox_buttons.pack_start(btn_delete, expand: true, fill: true, padding: 5)
      hbox_buttons.pack_end(btn_save, expand: false, fill: false, padding: 5)

      vbox.pack_end(hbox_buttons, expand: false, fill: false, padding: 5)

      btn_add.signal_connect('clicked') do
        iter = list_store.append
        iter[1], iter[0] = "sound_name", "New Trigger"
      end

      btn_delete.signal_connect('clicked') do
        selection = tree_view.selection
        list_store.remove(selection.selected) if selection.selected
      end

      btn_save.signal_connect('clicked') do
        @trigger_sounds.clear
        list_store.each { |_, _, iter| @trigger_sounds[iter[0]] = iter[1] }
        window.destroy
        File.write(@filename, @trigger_sounds.to_yaml)
      end
      window.signal_connect('delete-event') { window.destroy; true }
      window.show_all
      GLib::Timeout.add(50) do
        while Gtk.events_pending?
          Gtk.main_iteration_do(false)
        end
        true
      end
    end
  end

  if Script.current.vars[0].to_s =~ /setup|gui/
    build_gui
  end

  def self.parse(server_string)
    if server_string.is_a?(Hash)
      text = server_string[:text] || server_string['text'] || server_string.to_s
    else
      text = server_string.to_s
    end

    down = text.downcase
    @trigger_sounds.each do |trigger, sound_file|
      needle = trigger.to_s.downcase
      if down.include?(needle)
        if sound_file.nil? || sound_file.strip.empty?
          respond("[SoundFX] WARNING: Sound file not set for trigger '#{trigger}'")
        else
          play_sound(sound_file)
        end
        break
      end
    end
    server_string
  end

  def self.data
    return @trigger_sounds
  end


  DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
  DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc do |server_string| SoundFX.parse(server_string) end)
  before_dying { File.write(@filename, @trigger_sounds.to_yaml); DownstreamHook.remove(DOWNSTREAM_HOOK_ID) }

  loop do sleep(60) end
end
